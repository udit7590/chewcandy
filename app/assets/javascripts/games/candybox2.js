/**
 *
 * @source: http://candybox2.net/candybox2_uncompressed.js
 *
 * @licstart  The following is the entire license notice for the 
 *  JavaScript code in this page.
 *
 * Copyright (C) 2012 David "aniwey" L.
 *
 *
 * The JavaScript code in this page is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License (GNU GPL) as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.  The code is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
 *
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

var Algo;
(function (Algo) {
    // Return 0 is the number given is under 0, else return the number given
    function correctIfUnderZero(n) {
        if (n < 0)
            return 0;
        return n;
    }
    Algo.correctIfUnderZero = correctIfUnderZero;
    // Return the maximum value a javascript Number can get before loosing precision
    function getMaximumJavascriptInt() {
        return 9007199254740992; // 2^53
    }
    Algo.getMaximumJavascriptInt = getMaximumJavascriptInt;
    // Return a Pos object corresponding to a direction
    // x and y values can be between -a and a, but they can't both be 0
    function getRandomNotImmobileDirectionUpToThisSpeed(a) {
        var pos = new Pos();
        // Set x and y
        pos.x = Random.between(-a, a);
        if (pos.x != 0)
            pos.y = Random.between(-a, a);
        else {
            // x is 0, so y can't be 0 : we pick positive or negative randomly
            if (Random.flipACoin())
                pos.y = Random.between(-a, -1);
            else
                pos.y = Random.between(1, a);
        }
        // We possibly invert x and y because since x is treated first, basically it has more chance than y to be 0
        if (Random.flipACoin())
            pos.invert();
        // We return the position
        return pos;
    }
    Algo.getRandomNotImmobileDirectionUpToThisSpeed = getRandomNotImmobileDirectionUpToThisSpeed;
    // Add the html <u> tag around the specified letter in the string given, and return the resulting string
    function makeUnderlinedLetter(s, underlinedLetter) {
        if (underlinedLetter != -1)
            return s.slice(0, underlinedLetter) + "<u>" + s.charAt(underlinedLetter) + "</u>" + s.slice(underlinedLetter + 1, s.length);
        else
            return s;
    }
    Algo.makeUnderlinedLetter = makeUnderlinedLetter;
    // Transform a number in a string and add whitespaces every three figures
    function numberToStringButNicely(n) {
        // We store the number as a string in the variable str
        var str = n.toString();
        // If the number isn't going to loose precision because it's too big, we add whitespaces every three characters
        if (n < getMaximumJavascriptInt()) {
            // If the var is bigger than 3 characters
            if (str.length > 3) {
                for (var i = Math.floor(str.length / 3); i > 0; i--) {
                    if (i * 3 != str.length)
                        str = str.addAt(str.length - i * 3, " ");
                }
            }
        }
        // Return str
        return str;
    }
    Algo.numberToStringButNicely = numberToStringButNicely;
    // Create a string from a number and a word added depending on the plurality of the number
    function pluralFormat(n, singular, plural) {
        if (n == 1)
            return n.toString() + singular;
        return n.toString() + plural;
    }
    Algo.pluralFormat = pluralFormat;
    // Create a string from a number and a word added depending on the plurality of the number (and format the number nicely)
    function pluralFormatNicely(n, singular, plural) {
        if (n == 1)
            return numberToStringButNicely(n) + singular;
        return numberToStringButNicely(n) + plural;
    }
    Algo.pluralFormatNicely = pluralFormatNicely;
    // Remove all special characters from a string, only let lower-case letters
    function simplifyString(s) {
        return s.toLowerCase().replace(/[^\w]|_/g, "");
    }
    Algo.simplifyString = simplifyString;
    // Return the biggest number between two numbers
    function takeBiggest(a, b) {
        if (a > b)
            return a;
        return b;
    }
    Algo.takeBiggest = takeBiggest;
})(Algo || (Algo = {}));
var ATreeTicTacToeMinimaxReturnValue = (function () {
    function ATreeTicTacToeMinimaxReturnValue() {
        this.bestPosition = null;
        this.bestScore = null;
    }
    return ATreeTicTacToeMinimaxReturnValue;
})();
var ATreeTicTacToeSign;
(function (ATreeTicTacToeSign) {
    ATreeTicTacToeSign[ATreeTicTacToeSign["NO_SIGN"] = 0] = "NO_SIGN";
    ATreeTicTacToeSign[ATreeTicTacToeSign["X"] = 1] = "X";
    ATreeTicTacToeSign[ATreeTicTacToeSign["O"] = 2] = "O";
})(ATreeTicTacToeSign || (ATreeTicTacToeSign = {}));
var ATreeTicTacToeStep;
(function (ATreeTicTacToeStep) {
    ATreeTicTacToeStep[ATreeTicTacToeStep["PLAYING"] = 0] = "PLAYING";
    ATreeTicTacToeStep[ATreeTicTacToeStep["NOBODY_WINS"] = 1] = "NOBODY_WINS";
    ATreeTicTacToeStep[ATreeTicTacToeStep["YOU_LOSE"] = 2] = "YOU_LOSE";
})(ATreeTicTacToeStep || (ATreeTicTacToeStep = {}));
// N.B. : the case when the player wins isn't in this enumeration because this case is a new aTreeStep and is therefore handled by the global saving system 
var Place = (function () {
    // Constructor
    function Place(game) {
        this.game = game;
    }
    // Public methods
    Place.prototype.addBackToButton = function (renderArea, callbackCollection, text, translated, otherClass, y, x) {
        if (y === void 0) { y = 0; }
        if (x === void 0) { x = -1; }
        // If the x position is under zero, we set it so that the button will be centered
        if (x < 0) {
            x = renderArea.getWidth() / 2 - text.length / 2;
        }
        renderArea.addAsciiRealButton(text, x, y, otherClass, translated, true);
        renderArea.addLinkCall("." + otherClass, callbackCollection);
    };
    Place.prototype.addBackToMainMapButton = function (renderArea, otherClass, textName) {
        if (textName === void 0) { textName = "buttonBackToTheMap"; }
        this.addBackToButton(renderArea, new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), Database.getText(textName), Database.getTranslatedText(textName), otherClass);
    };
    // Public getters
    Place.prototype.getDefaultScroll = function () {
        return 0;
    };
    Place.prototype.getGame = function () {
        return this.game;
    };
    Place.prototype.getGap = function () {
        return 0;
    };
    Place.prototype.getRenderArea = function () {
        return new RenderArea(); // We return a new render area, but this should not happen, since our daughter class should override this function
    };
    Place.prototype.getScrolling = function () {
        return false; // By default, we disable scrolling on the place
    };
    Place.prototype.willBeClosed = function () { };
    Place.prototype.willBeDisplayed = function () { };
    Place.prototype.willStopBeingDisplayed = function () { };
    return Place;
})();
var Saving;
(function (Saving) {
    // Saving maps
    var bools = {};
    var numbers = {};
    var strings = {};
    // Can we register?
    Saving.canRegister = true;
    // Special public functions : used to load or the actual save
    function load(game, loadingType, loadingString) {
        // Depending on the loading type, do different things
        switch (loadingType) {
            // We don't load anything
            case MainLoadingType.NONE:
                // You can uncomment the lines below to start your game with everything unlocked (useful for testing purposes)
                /*
                Saving.saveNumber("aTreeStep", 2);
                
                Saving.saveBool("mainMapDoneDesert", true);
                Saving.saveBool("mainMapDoneBridge", true);
                Saving.saveBool("mainMapDoneCaveEntrance", true);
                Saving.saveBool("mainMapDonePier", true);
                Saving.saveBool("mainMapDoneForest", true);
                Saving.saveBool("mainMapDoneCastleEntrance", true);
                
                Saving.saveBool("gridItemPossessedMainMap", true);
                Saving.saveBool("gridItemPossessedTimeRing", true);
                Saving.saveBool("gridItemPossessedThirdHouseKey", true);
                Saving.saveBool("gridItemPossessedBeginnersGrimoire", true);
                
                Saving.saveBool("gridItemPossessedFeather", true);
                Saving.saveBool("gridItemPossessedPogoStick", true);
                Saving.saveBool("gridItemPossessedHeartPlug", true);
                Saving.saveBool("gridItemPossessedAdvancedGrimoire", true);
                
                Saving.saveBool("gridItemPossessedSponge", true);
                Saving.saveBool("gridItemPossessedShellPowder", true);
                Saving.saveBool("gridItemPossessedHeartPendant", true);
                Saving.saveBool("gridItemPossessedBlackMagicGrimoire", true);
                
                Saving.saveBool("gridItemPossessedFortressKey", true);
                Saving.saveBool("gridItemPossessedUnicornHorn", true);
                Saving.saveBool("gridItemPossessedXinopherydonClaw", true);
                Saving.saveBool("gridItemPossessedPitchfork", true);
                
                Saving.saveBool("gridItemPossessedRedSharkFin", true);
                Saving.saveBool("gridItemPossessedGreenSharkFin", true);
                Saving.saveBool("gridItemPossessedPurpleSharkFin", true);
                
                Saving.saveBool("gridItemPossessedTalkingCandy", true);
                
                Saving.saveBool("gridItemPossessedP", true);
                Saving.saveBool("gridItemPossessedL", true);
                Saving.saveBool("gridItemPossessedA", true);
                Saving.saveBool("gridItemPossessedY", true);
                
                Saving.saveBool("eqItemGlovesRedEnchantedGloves", true);
                Saving.saveBool("eqItemGlovesPinkEnchantedGloves", true);
                //Saving.saveBool("eqItemWeaponWoodenSword", true);
                Saving.saveBool("eqItemWeaponTrollBludgeon", true);
                Saving.saveBool("eqItemWeaponTribalSpear", true);
                Saving.saveBool("eqItemWeaponSummoningTribalSpear", true);
                Saving.saveBool("eqItemWeaponMonkeyWizardStaff", true);
                Saving.saveBool("eqItemWeaponGiantSpoon", true);
                Saving.saveBool("eqItemHatOctopusKingCrown", true);
                
                Saving.saveBool("eqItemBootsBootsOfIntrospection", true);
                
                Saving.saveBool("eqItemBootsRocketBoots", true);
                
                Saving.saveBool("eqItemWeaponGiantSpoonOfDoom", true);
                
                Saving.saveBool("eqItemBodyArmoursEnchantedKnightBodyArmour", true);
                
                Saving.saveNumber("gameCandiesEatenCurrent", 500000000);
                Saving.saveNumber("gameCandiesEatenMax", 500000000);
                
                Saving.saveNumber("playerHp", 1000);
                
                Saving.saveBool("questPlayerSpellHealthPotionHasSpell", true);
                Saving.saveBool("questPlayerSpellTurtlePotionHasSpell", true);
                Saving.saveBool("questPlayerSpellAntiGravityPotionHasSpell", true);
                Saving.saveBool("questPlayerSpellBerserkPotionHasSpell", true);
                Saving.saveBool("questPlayerSpellCloningPotionHasSpell", true);
                Saving.saveBool("questPlayerSpellPPotionHasSpell", true);
                Saving.saveBool("questPlayerSpellXPotionHasSpell", true);
                
                Saving.saveNumber("questPlayerSpellHealthPotionQuantity", 0);
                Saving.saveNumber("questPlayerSpellTurtlePotionQuantity", 64084);
                Saving.saveNumber("questPlayerSpellAntiGravityPotionQuantity", 47542);
                Saving.saveNumber("questPlayerSpellBerserkPotionQuantity", 99549);
                Saving.saveNumber("questPlayerSpellCloningPotionQuantity", 10050);
                Saving.saveNumber("questPlayerSpellPPotionQuantity", 10085250);
                Saving.saveNumber("questPlayerSpellXPotionQuantity", 10050999);
                
                //Saving.saveBool("gameDebug", true);
                
                Saving.saveNumber("gameCandiesCurrent", 5000000);
                Saving.saveNumber("gameCandiesMax", 5000000);
                
                Saving.saveNumber("gameLollipopsCurrent", 5000000000);
                Saving.saveNumber("gameLollipopsMax", 500000000000);
                
                Saving.saveNumber("gameChocolateBarsCurrent", 7);
                Saving.saveNumber("gameChocolateBarsMax", 7);
                
                Saving.saveNumber("gamePainsAuChocolatCurrent", 7);
                Saving.saveNumber("gamePainsAuChocolatMax", 7);
                
                Saving.saveBool("lonelyHouseTakeTheBoxDone", true);
                
                Saving.saveNumber("lollipopFarmPondHowManyLolligators", 0);
                
                Saving.saveBool("statusBarUnlocked", true);
                Saving.saveBool("statusBarUnlockedCfg", true);
                Saving.saveBool("statusBarUnlockedSave", true);
                Saving.saveBool("statusBarUnlockedMap", true);
                Saving.saveBool("statusBarUnlockedInventory", true);
                Saving.saveBool("statusBarUnlockedLollipopFarm", true);
                Saving.saveBool("statusBarUnlockedCauldron", true);
                Saving.saveBool("statusBarUnlockedHealthBar", true);
                Saving.saveBool("statusBarUnlockedInsideYourBox", true);
                Saving.saveBool("statusBarUnlockedTheComputer", true);
                Saving.saveBool("statusBarUnlockedTheArena", true);
                
                Saving.saveBool("castleKilledNougatMonster", true);
                
                Saving.saveBool("dragonDone", true);
                Saving.saveBool("dragonUnlockedCyclops", true);
                
                Saving.saveBool("castleTowerFirstVisitDone", true);
                
                Saving.saveString("gameLanguage", "fr");
                */
                break;
            case MainLoadingType.LOCAL:
                LocalSaving.load(loadingString);
                break;
            case MainLoadingType.FILE:
                var fileBools = loadingString.match(/bool +[a-zA-Z0-9_]+ *= *[a-zA-Z0-9_]+/g);
                var fileNumbers = loadingString.match(/number +[a-zA-Z0-9_]+ *= *[a-zA-Z0-9_]+/g);
                var fileStrings = loadingString.match(/string +[a-zA-Z0-9_]+ *= *[a-zA-Z0-9_]+/g);
                // Load the bools
                if (fileBools != null) {
                    for (var i = 0; i < fileBools.length; i++) {
                        Saving.saveBool(fileBools[i].match(/[a-zA-Z0-9_]+=/)[0].replace("=", ""), Saving.stringToBool(fileBools[i].match(/=[a-zA-Z0-9_]+/)[0].replace("=", "")));
                    }
                }
                // Load the numbers
                if (fileNumbers != null) {
                    for (var i = 0; i < fileNumbers.length; i++) {
                        Saving.saveNumber(fileNumbers[i].match(/[a-zA-Z0-9_]+=/)[0].replace("=", ""), Saving.stringToNumber(fileNumbers[i].match(/=[a-zA-Z0-9_]+/)[0].replace("=", "")));
                    }
                }
                // Load the strings
                if (fileStrings != null) {
                    for (var i = 0; i < fileStrings.length; i++) {
                        Saving.saveString(fileStrings[i].match(/[a-zA-Z0-9_]+=/)[0].replace("=", ""), fileStrings[i].match(/=[a-zA-Z0-9_]+/)[0].replace("=", ""));
                    }
                }
                break;
        }
        // Apply the loaded variables to various things by calling the load() methods of various objects
        game.load(); // Various variables owned by the game object
        game.getPlayer().load(); // The player
    }
    Saving.load = load;
    function save(game, savingType, savingString) {
        // Save some special variables by calling the save() methods of various objects
        game.save(); // Various variables owned by the game object
        game.getPlayer().save(); // The player
        // Do different things depending on the saving type
        switch (savingType) {
            case MainLoadingType.LOCAL:
                return LocalSaving.save(savingString);
                break;
            case MainLoadingType.FILE:
                return false;
                break;
        }
    }
    Saving.save = save;
    // Public conversion functions (useful because we sometimes only want to store strings, either locally or online, but in fact we also work with numbers and bools)
    function boolToString(b) {
        if (b)
            return "true";
        return "false";
    }
    Saving.boolToString = boolToString;
    function numberToString(n) {
        return n.toString();
    }
    Saving.numberToString = numberToString;
    function stringToBool(s) {
        if (s == "true")
            return true;
        else if (s == "false")
            return false;
        console.log("Error : trying to convert a string to a bool but the string value is " + s + ".");
    }
    Saving.stringToBool = stringToBool;
    function stringToNumber(s) {
        return parseFloat(s); // We need to use parseFloat to avoid problems with scientific notations
    }
    Saving.stringToNumber = stringToNumber;
    // Public functions
    function getAllBools() {
        return bools;
    }
    Saving.getAllBools = getAllBools;
    function getAllNumbers() {
        return numbers;
    }
    Saving.getAllNumbers = getAllNumbers;
    function getAllStrings() {
        return strings;
    }
    Saving.getAllStrings = getAllStrings;
    function loadBool(key) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 2)
            saveBool(key, Random.flipACoin());
        if (key in bools)
            return bools[key];
        console.log("Error : trying to load the unknown bool " + key + ".");
    }
    Saving.loadBool = loadBool;
    function loadNumber(key) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 3 && Random.oneChanceOutOf(2))
            saveNumber(key, Random.between(0, 10000) - 5000);
        if (key in numbers)
            return numbers[key];
        console.log("Error : trying to load the unknown number " + key + ".");
    }
    Saving.loadNumber = loadNumber;
    function loadString(key) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 4 && Random.oneChanceOutOf(5))
            saveString(key, "bug");
        if (key in strings)
            return strings[key];
        console.log("Error : trying to load the unknown string " + key + ".");
    }
    Saving.loadString = loadString;
    function registerBool(key, b) {
        if (Saving.canRegister) {
            if (key in bools || key in numbers || key in strings)
                console.log("Error : trying to register the key " + key + " as bool, but this key is already registered.");
            this.saveBool(key, b, true);
        }
    }
    Saving.registerBool = registerBool;
    function registerNumber(key, n) {
        if (Saving.canRegister) {
            if (key in numbers || key in bools || key in strings)
                console.log("Error : trying to register the key " + key + " as number, but this key is already registered.");
            this.saveNumber(key, n, true);
        }
    }
    Saving.registerNumber = registerNumber;
    function registerString(key, s) {
        if (Saving.canRegister) {
            if (key in strings || key in bools || key in numbers)
                console.log("Error : trying to register the key " + key + " as string, but this key is already registered.");
            this.saveString(key, s, true);
        }
    }
    Saving.registerString = registerString;
    function saveBool(key, b, registering) {
        if (registering === void 0) { registering = false; }
        if (key in bools || registering) {
            bools[key] = b;
            return;
        }
        console.log("Error : trying to save the unknown bool " + key + ".");
    }
    Saving.saveBool = saveBool;
    function saveNumber(key, n, registering) {
        if (registering === void 0) { registering = false; }
        if (key in numbers || registering) {
            numbers[key] = n;
            return;
        }
        console.log("Error : trying to save the unknown number " + key + ".");
    }
    Saving.saveNumber = saveNumber;
    function saveString(key, s, registering) {
        if (registering === void 0) { registering = false; }
        if (key in strings || registering) {
            strings[key] = s;
            return;
        }
        console.log("Error : trying to save the unknown string " + key + ".");
    }
    Saving.saveString = saveString;
})(Saving || (Saving = {}));
///<reference path="Place.ts"/>
///<reference path="Saving.ts"/>
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
Saving.registerNumber("aTreeStep", 0);
var ATree = (function (_super) {
    __extends(ATree, _super);
    // Constructor
    function ATree(game) {
        _super.call(this, game);
        // Render area
        this.renderArea = new RenderArea();
        // Special tic-tac-toa variables
        this.ticTacToeStep = null;
        this.ticTacToeBoard = null;
        // If we're going to play tic tac toe
        if (Saving.loadNumber("aTreeStep") == 7) {
            this.startTicTacToe();
        }
        // If we're at step 8 (just won the tic tac toe game), go on to step 9
        if (Saving.loadNumber("aTreeStep") == 8)
            this.nextStep();
        // Resize & update
        this.renderArea.resizeFromArray(Database.getAscii("places/aTree/background"), 17, 3);
        this.update();
    }
    // getRenderArea()
    ATree.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    ATree.prototype.addEnigma = function (enigmaAnswer, callbackCollection, otherClass, wrongClass, wrongMessage) {
        if (wrongClass === void 0) { wrongClass = ""; }
        if (wrongMessage === void 0) { wrongMessage = "Wrong"; }
        this.renderArea.addEnigma(21, 41, 24, enigmaAnswer, callbackCollection, otherClass, wrongClass, wrongMessage);
    };
    ATree.prototype.drawSpeech = function (normal, translated, x2) {
        if (x2 === void 0) { x2 = 59; }
        this.renderArea.drawSpeech(normal, 4, 38, x2, "aTreeSpeech", translated);
    };
    ATree.prototype.drawTicTacToeBoard = function (addButtons, x, y) {
        if (addButtons === void 0) { addButtons = true; }
        if (x === void 0) { x = 19; }
        if (y === void 0) { y = 23; }
        // If the board isn't null
        if (this.ticTacToeBoard != null) {
            // Draw the board background
            this.renderArea.drawArray(Database.getAscii("places/aTree/ticTacToeBoard"), x + 7, y + 5);
            // Iterate over the board to draw signs && add buttons
            for (var i = 0; i < 5; i++) {
                for (var j = 0; j < 5; j++) {
                    // Draw the sign or add the button, depending on the sign
                    switch (this.ticTacToeBoard[i][j]) {
                        // There's already a sign : draw the sign
                        case ATreeTicTacToeSign.X:
                            this.renderArea.drawArray(Database.getAscii("places/aTree/ticTacToeX"), x + i * 7 + 3, y + j * 4 + 3);
                            break;
                        case ATreeTicTacToeSign.O:
                            this.renderArea.drawArray(Database.getAscii("places/aTree/ticTacToeO"), x + i * 7 + 2, y + j * 4 + 2);
                            break;
                        // There's no sign yet : draw the button
                        case ATreeTicTacToeSign.NO_SIGN:
                            if (addButtons) {
                                // Iterate over the lines on which we need to add the buttons
                                for (var yButton = y + j * 4 + 1; yButton <= y + j * 4 + 4; yButton++) {
                                    // If we're outside the board : add a ninja button
                                    if (i == 0 || i == 4 || j == 0 || j == 4) {
                                        this.renderArea.addAsciiNinjaButton(x + i * 7 + 1, x + i * 7 + 7, yButton, "aTreeTicTacToeBoardButton" + i + "_" + j);
                                    }
                                    else {
                                        this.renderArea.addAsciiButton(x + i * 7 + 1, x + i * 7 + 7, yButton, "aTreeTicTacToeBoardButton" + i + "_" + j);
                                    }
                                }
                                // Add the link
                                this.renderArea.addLinkCall(".aTreeTicTacToeBoardButton" + i + "_" + j, new CallbackCollection(this.playTicTacToeSign.bind(this, i, j)));
                            }
                            break;
                    }
                }
            }
        }
    };
    ATree.prototype.nextStep = function () {
        // We change the step
        Saving.saveNumber("aTreeStep", Saving.loadNumber("aTreeStep") + 1);
        // We possibly do some action depending on the new step
        if (Saving.loadNumber("aTreeStep") == 7) {
            this.startTicTacToe();
        }
        if (Saving.loadNumber("aTreeStep") == 9) {
            this.getGame().gainItem("gridItemPossessedThirdHouseKey");
        }
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    ATree.prototype.playTicTacToe_copyBoard = function (board) {
        // Create the new board
        var newBoard = [];
        // Copy the old one in the new one
        for (var i = 0; i < board.length; i++) {
            newBoard.push(board[i].slice(0));
        }
        // Return the new board
        return newBoard;
    };
    ATree.prototype.playTicTacToe_evaluateBoard = function (board) {
        // The score
        var score = 0;
        // Evaluate all the lines
        score += this.playTicTacToe_evaluateLine(board, 1, 1, 2, 1, 3, 1); // First column
        score += this.playTicTacToe_evaluateLine(board, 1, 2, 2, 2, 3, 2); // Second column
        score += this.playTicTacToe_evaluateLine(board, 1, 3, 2, 3, 3, 3); // Third column
        score += this.playTicTacToe_evaluateLine(board, 1, 1, 1, 2, 1, 3); // First row
        score += this.playTicTacToe_evaluateLine(board, 2, 1, 2, 2, 2, 3); // Second row
        score += this.playTicTacToe_evaluateLine(board, 3, 1, 3, 2, 3, 3); // Third row
        score += this.playTicTacToe_evaluateLine(board, 1, 1, 2, 2, 3, 3); // Diagonal
        score += this.playTicTacToe_evaluateLine(board, 1, 3, 2, 2, 3, 1); // The other diagonal
        // Return the score
        return score;
    };
    ATree.prototype.playTicTacToe_evaluateLine = function (board, row1, col1, row2, col2, row3, col3) {
        // The score
        var score = 0;
        // First cell
        if (board[row1][col1] == ATreeTicTacToeSign.O)
            score = 1;
        else if (board[row1][col1] == ATreeTicTacToeSign.X)
            score = -1;
        // Second cell
        if (board[row2][col2] == ATreeTicTacToeSign.O) {
            if (score == 1)
                score = 10;
            else if (score == -1)
                return 0;
            else
                score = 1;
        }
        else if (board[row2][col2] == ATreeTicTacToeSign.X) {
            if (score == 1)
                return 0;
            else if (score == -1)
                score = -10;
            else
                score = -1;
        }
        // Third cell
        if (board[row3][col3] == ATreeTicTacToeSign.O) {
            if (score > 0)
                score *= 10;
            else if (score < 0)
                return 0;
            else
                score = 1;
        }
        else if (board[row3][col3] == ATreeTicTacToeSign.X) {
            if (score > 0)
                return 0;
            else if (score < 0)
                score *= 10;
            else
                score = -1;
        }
        // Return the score
        return score;
    };
    ATree.prototype.playTicTacToe_minimax = function (board, playerSign, depth) {
        if (depth === void 0) { depth = 2; }
        // Variables
        var tempBoard; // The temp board, used to simulate moves
        var currentScore; // Current score, used for calculations
        var returnValue = new ATreeTicTacToeMinimaxReturnValue; // The return value, which contains the best position and the best score
        var gameFull = true; // Used later to find out if the game is full or not
        // Set the initial best score, depending on the playerSign parameter
        if (playerSign == ATreeTicTacToeSign.O)
            returnValue.bestScore = -99999999;
        else
            returnValue.bestScore = 99999999;
        // If the depth is > to 0 (this condition is needed to stop the iterating loop at some point)
        if (depth > 0) {
            // Iterate over all the board
            for (var i = 1; i <= 3; i++) {
                for (var j = 1; j <= 3; j++) {
                    // If this cell is empty
                    if (board[i][j] == ATreeTicTacToeSign.NO_SIGN) {
                        // We found at least one non-empty cell : the game isn't full
                        gameFull = false;
                        // Set the temp board from the real board
                        tempBoard = this.playTicTacToe_copyBoard(board);
                        // Try to play on this cell using the temp board
                        tempBoard[i][j] = playerSign;
                        if (playerSign == ATreeTicTacToeSign.O) {
                            currentScore = this.playTicTacToe_minimax(tempBoard, ATreeTicTacToeSign.X, depth - 1).bestScore;
                            if (returnValue.bestScore <= currentScore) {
                                returnValue.bestScore = currentScore;
                                returnValue.bestPosition = new Pos(i, j);
                            }
                        }
                        else {
                            currentScore = this.playTicTacToe_minimax(tempBoard, ATreeTicTacToeSign.O, depth - 1).bestScore;
                            if (returnValue.bestScore >= currentScore) {
                                returnValue.bestScore = currentScore;
                                returnValue.bestPosition = new Pos(i, j);
                            }
                        }
                    }
                }
            }
            // If the game seems full, we calculate the best score too
            if (gameFull)
                returnValue.bestScore = this.playTicTacToe_evaluateBoard(board);
        }
        else
            returnValue.bestScore = this.playTicTacToe_evaluateBoard(board);
        // Return the return value (best position found + the score)
        return returnValue;
    };
    ATree.prototype.playTicTacToe_testEndGameConditions = function () {
        // Variables
        var shouldEnd = false;
        // Test if someone won (in the 5*5 grid)
        switch (this.playTicTacToe_testGameSomeoneWon()) {
            case ATreeTicTacToeSign.O:
                this.ticTacToeStep = ATreeTicTacToeStep.YOU_LOSE;
                return true;
                break;
            case ATreeTicTacToeSign.X:
                // add object to the player here
                this.nextStep();
                return true;
                break;
        }
        // Test if the game is full (in the 3*3 grid)
        if (this.playTicTacToe_testGameFull()) {
            this.ticTacToeStep = ATreeTicTacToeStep.NOBODY_WINS;
            return true;
        }
        // Nothing happens, we return false
        return false;
    };
    ATree.prototype.playTicTacToe_testGameFull = function () {
        // Variables
        var isFull = true; // Will be set to false if there's any empty cell
        // Search for any empty cell
        for (var i = 1; i <= 3; i++) {
            for (var j = 1; j <= 3; j++) {
                if (this.ticTacToeBoard[i][j] == ATreeTicTacToeSign.NO_SIGN) {
                    isFull = false;
                    break;
                }
            }
            if (isFull == false)
                break;
        }
        // If the board is full, return true
        if (isFull)
            return true;
        // Else, return false
        return false;
    };
    ATree.prototype.playTicTacToe_testGameSomeoneWon = function () {
        // Variables
        var returnSign;
        for (var i = 0; i < 5; i++) {
            returnSign = this.playTicTacToe_fiveInARow(i, 0, 0, 1);
            if (returnSign != null)
                return returnSign;
        }
        for (var i = 0; i < 5; i++) {
            returnSign = this.playTicTacToe_fiveInARow(0, i, 1, 0);
            if (returnSign != null)
                return returnSign;
        }
        if ((returnSign = this.playTicTacToe_fiveInARow(0, 0, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(0, 1, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(1, 0, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(0, 2, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(2, 0, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(4, 0, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(3, 1, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(3, 0, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(4, 2, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(2, 0, -1, 1)) != null)
            return returnSign;
        // No won won, we return NO_SIGN
        return ATreeTicTacToeSign.NO_SIGN;
    };
    ATree.prototype.playTicTacToe_fiveInARow = function (x1, y1, x2, y2) {
        // Variables
        var column = x1;
        var row = y1;
        var counter = 0;
        var currentSign = null;
        while (column >= 0 && column < 5 && row >= 0 && row < 5) {
            if (this.ticTacToeBoard[column][row] != ATreeTicTacToeSign.NO_SIGN) {
                if (this.ticTacToeBoard[column][row] != currentSign) {
                    currentSign = this.ticTacToeBoard[column][row];
                    counter = 1;
                }
                else
                    counter++;
            }
            else
                counter = 0;
            if (currentSign != null && counter == 3)
                return currentSign;
            column += x2;
            row += y2;
        }
        return null;
    };
    ATree.prototype.playTicTacToe_tryAgain = function () {
        this.startTicTacToe();
        this.update();
        this.getGame().updatePlace();
    };
    ATree.prototype.playTicTacToeSign = function (xIndex, yIndex) {
        // Add the sign
        this.ticTacToeBoard[xIndex][yIndex] = ATreeTicTacToeSign.X;
        // Test end game conditions (we only make the squirrel play if nothing happens)
        if (this.playTicTacToe_testEndGameConditions() == false) {
            // IA
            var bestPosition = this.playTicTacToe_minimax(this.ticTacToeBoard, ATreeTicTacToeSign.O).bestPosition;
            this.ticTacToeBoard[bestPosition.x][bestPosition.y] = ATreeTicTacToeSign.O;
            // Test end game conditions
            this.playTicTacToe_testEndGameConditions();
        }
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    ATree.prototype.reward1 = function () {
        this.getGame().getCandies().add(20);
    };
    ATree.prototype.reward2 = function () {
        this.getGame().getCandies().add(100);
    };
    ATree.prototype.reward3 = function () {
        this.getGame().getCandies().add(500);
    };
    ATree.prototype.reward4 = function () {
        this.getGame().getLollipops().add(3);
    };
    ATree.prototype.reward5 = function () {
        this.getGame().getChocolateBars().add(3);
    };
    ATree.prototype.startTicTacToe = function () {
        // Reset the array
        this.ticTacToeBoard = [];
        // Add the signs to the board
        for (var i = 0; i < 5; i++) {
            this.ticTacToeBoard.push([]);
            for (var j = 0; j < 5; j++) {
                this.ticTacToeBoard[i].push(ATreeTicTacToeSign.NO_SIGN);
            }
        }
        // Set the step
        this.ticTacToeStep = ATreeTicTacToeStep.PLAYING;
    };
    ATree.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "aTreeBackToTheMapButton");
        // Draw the tree with the squirrel
        this.renderArea.drawArray(Database.getAscii("places/aTree/background"), 0, 3);
        // Draw the speech
        switch (Saving.loadNumber("aTreeStep")) {
            // Introduction speech
            case 0:
                this.drawSpeech(Database.getText("mapATreeIntroductionSpeech"), Database.getTranslatedText("mapATreeIntroductionSpeech"));
                this.renderArea.addAsciiRealButton(Database.getText("mapATreeIntroductionButton"), 21, 24, "aTreeIntroductionButton", Database.getTranslatedText("mapATreeIntroductionButton"));
                this.renderArea.addLinkCall(".aTreeIntroductionButton", new CallbackCollection(this.nextStep.bind(this)));
                break;
            // First question (do you like candies)
            case 1:
                this.drawSpeech(Database.getText("mapATreeFirstQuestion"), Database.getTranslatedText("mapATreeFirstQuestion"));
                this.addEnigma(new EnigmaAnswerStrings(["yes", "y", "yeah", "yeap", "yep"]), new CallbackCollection(this.nextStep.bind(this), this.reward1.bind(this)), "aTreeFirstQuestionEnigma", "aTreeFirstQuestionWrong");
                break;
            // Second question (S E I D N A ?)
            case 2:
                this.drawSpeech(Database.getText("mapATreeSecondQuestion"), Database.getTranslatedText("mapATreeSecondQuestion"));
                this.addEnigma(new EnigmaAnswerStrings(["c", "letterc", "theletterc"]), new CallbackCollection(this.nextStep.bind(this), this.reward2.bind(this)), "aTreeSecondQuestionEnigma", "aTreeSecondQuestionWrong");
                break;
            // Third question (how many candies does the candiest man in the world possess?)
            case 3:
                this.drawSpeech(Database.getText("mapATreeThirdQuestion"), Database.getTranslatedText("mapATreeThirdQuestion"));
                this.addEnigma(new EnigmaAnswerCandies(this.getGame()), new CallbackCollection(this.nextStep.bind(this), this.reward3.bind(this)), "aTreeThirdQuestionEnigma", "aTreeThirdQuestionWrong");
                break;
            // Fourth question (number of marks on the tree)
            case 4:
                this.drawSpeech(Database.getText("mapATreeFourthQuestion"), Database.getTranslatedText("mapATreeFourthQuestion"), 75);
                this.addEnigma(new EnigmaAnswerStrings(["10", "ten", "10marks", "tenmarks"]), new CallbackCollection(this.nextStep.bind(this), this.reward4.bind(this)), "aTreeFourthQuestionEnigma", "aTreeFourthQuestionWrong");
                break;
            // Fifth question (yellow hat in the red sea)
            case 5:
                this.drawSpeech(Database.getText("mapATreeFifthQuestion"), Database.getTranslatedText("mapATreeFifthQuestion"), 75);
                this.addEnigma(new EnigmaAnswerStrings(["wet", "itbecomeswet", "itbecomewet", "becomeswet", "becomewet", "itgetswet", "itgetwet", "itswet", "itgotwet", "itiswet", "itiswetnow", "itswetnow", "float", "floats", "itfloats", "itsfloating", "itisfloating", "floating", "itfloat"]), new CallbackCollection(this.nextStep.bind(this), this.reward5.bind(this)), "aTreeFifthQuestionEnigma", "aTreeFifthQuestionWrong");
                break;
            // Sixth question (tic-tac-toe) : intro speech
            case 6:
                // Draw the speech
                this.drawSpeech(Database.getText("mapATreeTicTacToeIntro"), Database.getTranslatedText("mapATreeTicTacToeIntro"), 75);
                // Add the button to go to the next step
                this.renderArea.addAsciiRealButton(Database.getText("mapATreeTicTacToeIntroButton"), 21, 24, "mapATreeTicTacToeIntroButton", Database.getTranslatedText("mapATreeTicTacToeIntroButton"));
                this.renderArea.addLinkCall(".mapATreeTicTacToeIntroButton", new CallbackCollection(this.nextStep.bind(this)));
                break;
            case 7:
                // Draw different things depending on the tic-tac-toa step
                switch (this.ticTacToeStep) {
                    case ATreeTicTacToeStep.PLAYING:
                        this.drawSpeech(Database.getText("mapATreeTicTacToeLetsPlay"), Database.getTranslatedText("mapATreeTicTacToeLetsPlay"), 75); // Speech
                        this.drawTicTacToeBoard(); // Board
                        break;
                    case ATreeTicTacToeStep.NOBODY_WINS:
                        this.drawSpeech(Database.getText("mapATreeTicTacToeNobodyWins"), Database.getTranslatedText("mapATreeTicTacToeNobodyWins"), 75); // Speech
                        this.drawTicTacToeBoard(false); // Board
                        break;
                    case ATreeTicTacToeStep.YOU_LOSE:
                        this.drawSpeech(Database.getText("mapATreeTicTacToeYouLose"), Database.getTranslatedText("mapATreeTicTacToeYouLose"), 75); // Speech
                        this.drawTicTacToeBoard(false); // Board
                        break;
                }
                // If was just had a draw / lose, add the button to try again
                if (this.ticTacToeStep == ATreeTicTacToeStep.NOBODY_WINS || this.ticTacToeStep == ATreeTicTacToeStep.YOU_LOSE) {
                    this.renderArea.addAsciiRealButton(Database.getText("mapATreeTicTacToeTryAgainButton"), 21, 24, "mapATreeTicTacToeTryAgainButton", Database.getTranslatedText("mapATreeTicTacToeTryAgainButton"));
                    this.renderArea.addLinkCall(".mapATreeTicTacToeTryAgainButton", new CallbackCollection(this.playTicTacToe_tryAgain.bind(this)));
                }
                break;
            case 8:
                this.drawSpeech(Database.getText("mapATreeTicTacToeYouWin"), Database.getTranslatedText("mapATreeTicTacToeYouWin"), 75); // Speech
                this.drawTicTacToeBoard(false); // Board
                // Button
                this.renderArea.addAsciiRealButton(Database.getText("mapATreeTicTacToeAnymoreSweet"), 21, 24, "mapATreeTicTacToeAnymoreSweet", Database.getTranslatedText("mapATreeTicTacToeAnymoreSweet"), true);
                this.renderArea.addLinkCall(".mapATreeTicTacToeAnymoreSweet", new CallbackCollection(this.nextStep.bind(this)));
                break;
            case 9:
                this.drawSpeech(Database.getText("mapATreeNoMoreChallenge"), Database.getTranslatedText("mapATreeNoMoreChallenge"));
                break;
        }
    };
    return ATree;
})(Place);
var BarType;
(function (BarType) {
    BarType[BarType["SIMPLE"] = 0] = "SIMPLE";
    BarType[BarType["HEALTH"] = 1] = "HEALTH";
    BarType[BarType["UNICOLOR_HEALTH"] = 2] = "UNICOLOR_HEALTH";
})(BarType || (BarType = {}));
///<reference path="./../../libs/jquery.d.ts"/>
var RenderLink = (function () {
    // Constructor
    function RenderLink() {
    }
    // Public methods
    RenderLink.prototype.run = function () {
    };
    return RenderLink;
})();
var RenderTag = (function () {
    // Constructor
    function RenderTag(x, tagString) {
        this.x = x;
        this.tagString = tagString;
    }
    // Public methods
    RenderTag.prototype.clone = function () {
        return new RenderTag(this.x, this.tagString);
    };
    RenderTag.prototype.draw = function (str) {
        return str.addAt(this.x, this.tagString);
    };
    // Public getters
    RenderTag.prototype.getString = function () {
        return this.tagString;
    };
    RenderTag.prototype.getX = function () {
        return this.x;
    };
    // Public setters
    RenderTag.prototype.setX = function (x) {
        this.x = x;
        return this;
    };
    return RenderTag;
})();
String.prototype.addAt = function (index, text) {
    return this.substr(0, index) + text + this.substr(index);
};
String.prototype.addChineseSpaces = function () {
    var newStr = "";
    for (var i = 0; i < Math.floor(this.length / 3); i++) {
        newStr += " ";
    }
    newStr += this;
    for (var i = 0; i < Math.floor(this.length / 3); i++) {
        newStr += " ";
    }
    return newStr;
};
String.prototype.fillWith = function (characters, howMuch) {
    var str = "";
    for (var i = 0; i < howMuch; i++) {
        str += characters;
    }
    return this.concat(str);
};
String.prototype.replaceAt = function (index, text) {
    return this.substr(0, index) + text + this.substr(index + text.length);
};
///<reference path="RenderLink.ts"/>
///<reference path="RenderTag.ts"/>
///<reference path="string_prototype.ts"/>
var RenderArea = (function () {
    // Constructor : by default, it creates en empty drawing area
    function RenderArea(width, height, character) {
        if (width === void 0) { width = 0; }
        if (height === void 0) { height = 0; }
        if (character === void 0) { character = " "; }
        this.area = []; // Array of strings
        this.width = 0; // Width of the area = length of the strings
        this.height = 0; // Height of the area = number of strings
        this.tags = []; // Array of array of tags
        this.links = []; // Array of links
        this.resize(width, height, character);
    }
    // Public methods
    RenderArea.prototype.addAsciiButton = function (x1, x2, y, otherClass) {
        if (otherClass === void 0) { otherClass = ""; }
        return this.addTwoTags(x1, x2, y, "<span class=\"asciiButton " + otherClass + "\">", "</span>");
    };
    RenderArea.prototype.addAsciiNinjaButton = function (x1, x2, y, otherClass) {
        if (otherClass === void 0) { otherClass = ""; }
        return this.addTwoTags(x1, x2, y, "<span class=\"asciiNinjaButton " + otherClass + "\">", "</span>");
    };
    RenderArea.prototype.addAsciiRealButton = function (str, x, y, otherClass, comment, commentBelow, underlinedLetter, color, commentCentered, commentRightAligned) {
        if (otherClass === void 0) { otherClass = ""; }
        if (comment === void 0) { comment = ""; }
        if (commentBelow === void 0) { commentBelow = false; }
        if (underlinedLetter === void 0) { underlinedLetter = -1; }
        if (color === void 0) { color = null; }
        if (commentCentered === void 0) { commentCentered = true; }
        if (commentRightAligned === void 0) { commentRightAligned = false; }
        // Add the button
        if (this.addTag(new RenderTag(x, "<span class=\"aroundRealButton\"><span class=\"asciiRealButton " + otherClass + "\"" + (color == null ? "" : " style=\"background-color:" + color.getColorString() + ";\"") + ">" + Algo.makeUnderlinedLetter(str, underlinedLetter) + "</span></span>"), y) == false)
            return false;
        // Add the comment
        if (comment != "") {
            var commentX;
            var commentY;
            // If the comment should be on the right
            if (commentBelow == false) {
                commentX = x + str.length + 2;
                commentY = y;
            }
            else {
                if (commentCentered)
                    commentX = Algo.correctIfUnderZero(x + str.length / 2 - comment.length / 2);
                else if (commentRightAligned == false)
                    commentX = x;
                else
                    commentX = x + (str.length - comment.length);
                commentY = y + 1;
            }
            if (this.drawString(comment, commentX, commentY) == false)
                return false;
            if (this.addTwoTags(commentX, commentX + comment.length, commentY, "<span class=\"translated\">", "</span>") == false)
                return false;
        }
        return true;
    };
    RenderArea.prototype.addBackgroundColor = function (x1, x2, y, color) {
        return this.addTwoTags(x1, x2, y, "<span style=\"background-color:" + color.getColorString() + "\">", "</span>");
    };
    RenderArea.prototype.addBold = function (x1, x2, y) {
        return this.addTwoTags(x1, x2, y, "<b>", "</b>");
    };
    RenderArea.prototype.addCheckbox = function (x, y, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked, otherClass, checkedByDefault) {
        if (checkedByDefault === void 0) { checkedByDefault = false; }
        this.addTag(new RenderTag(x, "<span class=\"aroundCheckbox\"><input type=\"checkbox\" class=\"asciiCheckbox " + otherClass + "\"" + (checkedByDefault ? "checked" : "") + "></span>"), y);
        this.addLinkCheckbox("." + otherClass, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked);
    };
    RenderArea.prototype.addColor = function (x1, x2, y, color) {
        return this.addTwoTags(x1, x2, y, "<span style=\"color:" + color.getColorString() + "\">", "</span>");
    };
    RenderArea.prototype.addComment = function (x, y, text, otherClass) {
        return this.addTag(new RenderTag(x, "<span class=\"aroundComment " + otherClass + "\"><span class=\"comment englishComment\">" + text + "</span></span>"), y);
    };
    RenderArea.prototype.addEnigma = function (x1, x2, y, enigmaAnswer, callbackCollection, otherClass, wrongClass, wrongMessage) {
        if (wrongClass === void 0) { wrongClass = null; }
        if (wrongMessage === void 0) { wrongMessage = "Wrong"; }
        this.addTag(new RenderTag(x1, "<span class=\"aroundTextInput\"><input type=\"text\" class=\"asciiTextInput noHotkeys " + otherClass + "\" style=\"width:" + (x2 - x1).toString() + "ex\"></span>"), y);
        // If there should be a wrong message
        if (wrongClass != null) {
            // We add the wrong message
            this.drawString(wrongMessage, x1, y + 2);
            this.addTwoTags(x1, x1 + wrongMessage.length, y + 2, "<span class=\"enigmaWrongMessage " + wrongClass + "\">", "</span>");
            // We add the link input which will also display the wrong message if needed
            this.addLinkInput("." + otherClass, enigmaAnswer, callbackCollection, new CallbackCollection(function () {
                // We make the element visible
                $("." + wrongClass).css("visibility", "visible");
                // We add a timeout to hide it soon
                window.setTimeout(function () {
                    $("." + wrongClass).css("visibility", "hidden");
                }, 1000);
            }));
        }
        else {
            // We add a simple link input
            this.addLinkInput("." + otherClass, enigmaAnswer, callbackCollection, new CallbackCollection());
        }
    };
    RenderArea.prototype.addFullComment = function (x, y, english, translated, otherClass) {
        if (this.addComment(Algo.correctIfUnderZero(x - (english.length / 2)), y, english, otherClass) == false)
            return false;
        else
            return this.addTranslatedComment(Algo.correctIfUnderZero(x - (translated.length / 2)), y + 1, translated, otherClass);
    };
    RenderArea.prototype.addHiddenClass = function (x1, x2, y, className) {
        return this.addTwoTags(x1, x2, y, "<span visibility=\"hidden\" class=\"" + className + "\">", "</span>");
    };
    RenderArea.prototype.addHtmlLink = function (x, y, url, text) {
        this.drawString(text, x, y);
        this.addTwoTags(x, x + text.length, y, "<a target=\"_blank\" href=\"" + url + "\">", "</a>");
    };
    RenderArea.prototype.addLinkCall = function (e, callbackCollection) {
        this.links.push(new RenderLinkClick(e, callbackCollection));
    };
    RenderArea.prototype.addLinkCallbackCollection = function (callbackCollection) {
        this.links.push(new RenderLinkCallbackCollection(callbackCollection));
    };
    RenderArea.prototype.addLinkChange = function (e, callbackCollection) {
        this.links.push(new RenderLinkChange(e, callbackCollection));
    };
    RenderArea.prototype.addLinkCheckbox = function (e, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked) {
        this.links.push(new RenderLinkCheckbox(e, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked));
    };
    RenderArea.prototype.addLinkInput = function (e, enigmaAnswer, callbackCollection, callbackCollectionWrong) {
        this.links.push(new RenderLinkInput(e, enigmaAnswer, callbackCollection, callbackCollectionWrong));
    };
    RenderArea.prototype.addLinkOnHoverShowTooltip = function (classHover, classTooltip) {
        this.links.push(new RenderLinkOnHoverShowTooltip(classHover, classTooltip));
    };
    RenderArea.prototype.addLinkOver = function (e1, e2) {
        this.links.push(new RenderLinkOver(e1, e2));
    };
    RenderArea.prototype.addLinkSimpleInput = function (e, callbackCollection, defaultValue, hasFocus) {
        this.links.push(new RenderLinkSimpleInput(e, callbackCollection, defaultValue, hasFocus));
    };
    RenderArea.prototype.addList = function (x1, x2, y, id, callbackCollection, optionsArray) {
        if (optionsArray === void 0) { optionsArray = []; }
        var options = "";
        // Add all the options tag & text to the options string
        for (var i = 0; i < optionsArray.length / 2; i++) {
            options += "<option id=\"" + optionsArray[i * 2] + "\" class=\"asciiSelectOption\">" + optionsArray[i * 2 + 1] + "</option>";
        }
        // Add the list itself as a tag
        this.addTag(new RenderTag(x1, "<span class=\"aroundSelect\"><select id=\"" + id + "\" class=\"asciiSelect\" style=\"width:" + (x2 - x1).toString() + "ex\">" + options + "</select></span>"), y);
        // Add the render link used to control the list
        this.addLinkChange("#" + id, callbackCollection);
    };
    RenderArea.prototype.addMultipleAsciiButtons = function (otherClass) {
        var coordinates = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            coordinates[_i - 1] = arguments[_i];
        }
        // If the length of the coordinates array isn't multiple of 3, we return false
        if (coordinates.length % 3 != 0)
            return false;
        // We add all the buttons
        for (var i = 0; i < coordinates.length / 3; i++) {
            if (this.addAsciiButton(coordinates[3 * i], coordinates[3 * i + 1], coordinates[3 * i + 2], otherClass) == false)
                return false;
        }
        // We return true
        return true;
    };
    RenderArea.prototype.addMultipleAsciiNinjaButtons = function (otherClass) {
        var coordinates = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            coordinates[_i - 1] = arguments[_i];
        }
        // If the length of the coordinates array isn't multiple of 3, we return false
        if (coordinates.length % 3 != 0)
            return false;
        // We add all the buttons
        for (var i = 0; i < coordinates.length / 3; i++) {
            if (this.addAsciiNinjaButton(coordinates[3 * i], coordinates[3 * i + 1], coordinates[3 * i + 2], otherClass) == false)
                return false;
        }
        // We return true
        return true;
    };
    RenderArea.prototype.addSimpleInput = function (x1, x2, y, callbackCollection, otherClass, defaultValue, hasFocus) {
        if (defaultValue === void 0) { defaultValue = null; }
        if (hasFocus === void 0) { hasFocus = false; }
        this.addTag(new RenderTag(x1, "<span class=\"aroundTextInput\"><input type=\"text\" class=\"asciiTextInput noHotkeys " + otherClass + "\" style=\"width:" + (x2 - x1).toString() + "ex\"></span>"), y);
        this.addLinkSimpleInput("." + otherClass, callbackCollection, defaultValue, hasFocus);
    };
    RenderArea.prototype.addTag = function (tag, y) {
        // BUGS
        if (Bugs.getGraphicalBugLevel() >= 3)
            y += Random.between(0, 10) - 5;
        // Return false if y is out of bounds
        if (y < 0 || y >= this.height)
            return false;
        // Return false if x is out of bounds
        if (tag.getX() < 0 || tag.getX() > this.getWidth())
            return false;
        // If it's the first tag we add, we just add it
        if (this.tags[y].length == 0) {
            this.tags[y].push(tag);
            return true;
        }
        else {
            for (var i = 0; i < this.tags[y].length; i++) {
                // If this is the right place to add the tag, we add it and we break the loop
                if (tag.getX() > this.tags[y][i].getX()) {
                    this.tags[y].splice(i, 0, tag); // We add the tag just before the one we're iterating
                    return true;
                }
            }
        }
        // If we didn't add it yet, it means we have to add it at the end of the array : we do so
        this.tags[y].push(tag);
        // Return true
        return true;
    };
    RenderArea.prototype.addTextarea = function (x, y, width, height, otherClass, text) {
        if (text === void 0) { text = ""; }
        return this.addTag(new RenderTag(x, "<textarea class=\"textarea " + otherClass + "\" rows=\"" + height.toString() + "\" cols=\"" + width.toString() + "\">" + text + "</textarea>"), y);
    };
    RenderArea.prototype.addTooltip = function (tooltipClass, tooltipText) {
        return this.addTag(new RenderTag(0, "<span class=\"tooltip " + tooltipClass + "\">" + tooltipText + "</span>"), 0);
    };
    RenderArea.prototype.addTranslatedComment = function (x, y, text, otherClass) {
        return this.addTag(new RenderTag(x, "<span class=\"aroundComment " + otherClass + "\"><span class=\"comment translated\">" + text + "</span></span>"), y);
    };
    RenderArea.prototype.addTwoTags = function (x1, x2, y, tag1, tag2) {
        // If it fails, we return false
        if (this.addTag(new RenderTag(x1, tag1), y) == false || this.addTag(new RenderTag(x2, tag2), y) == false)
            return false;
        // Else, we return true
        return true;
    };
    RenderArea.prototype.drawArea = function (renderArea, x, y, transparency) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (transparency === void 0) { transparency = null; }
        // Iterate over lines of the area to draw
        for (var i = 0; i < renderArea.getHeight(); i++) {
            // Draw the text
            this.drawString(renderArea.getLine(i), x, y + i, false, transparency);
            // Add the tags
            for (var j = 0; j < renderArea.getTags()[i].length; j++) {
                this.addTag(renderArea.getTags()[i][j].clone().setX(renderArea.getTags()[i][j].getX() + x), y + i);
            }
        }
    };
    RenderArea.prototype.drawArray = function (array, x, y, transparency, spanClass) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (transparency === void 0) { transparency = null; }
        if (spanClass === void 0) { spanClass = null; }
        for (var i = 0; i < array.length; i++) {
            // Draw the string
            this.drawString(array[i], x, y + i, false, transparency);
            // Add the tags
            if (spanClass != null) {
                this.addTwoTags(x, x + array[i].length, y + i, "<span class=\"" + spanClass + "\">", "</span>");
            }
        }
    };
    RenderArea.prototype.drawHorizontalLine = function (str, x1, x2, y) {
        var strBuffer = "";
        // We put the string to draw in a buffer (for optimizations reasons)
        strBuffer = strBuffer.fillWith(str, x2 - x1);
        // We draw the string
        return this.drawString(strBuffer, x1, y);
    };
    RenderArea.prototype.drawSpeech = function (str, y, x1, x2, speechClass, translatedText) {
        if (speechClass === void 0) { speechClass = null; }
        if (translatedText === void 0) { translatedText = null; }
        var currentLine = ""; // Current line
        var lastWordIndex = 0; // Index of the last word drawn
        var width = x2 - x1 - 1; // We calculate the speech's width (-1 because we need space for the " characters)
        var words = str.split(" "); // We split the strings into an array of words
        var xPos; // Used to store some position at some time
        // Draw the first " character
        this.drawString("\"", x1, y);
        for (var i = 0; i < words.length; i++) {
            // If adding the current word to the line would exceed the width or we're working on the last word
            if (currentLine.length + words[i].length >= width) {
                // We draw the current line
                xPos = x1 + 1 + width / 2 - (currentLine.length / 2);
                this.drawString(currentLine, xPos, y);
                // If a speechClass is specified, we add tags
                if (speechClass != null)
                    this.addTwoTags(xPos, xPos + currentLine.length, y, "<span class=\"" + speechClass + "\">", "</span>");
                // We go to the line below
                currentLine = "";
                y++;
            }
            // We add a space before the word if there's at least one word before
            if (currentLine != "")
                currentLine += " ";
            // We add the word to the current line
            currentLine += words[i];
            // If we're working on the last word, we draw the line anyway
            if (i == words.length - 1) {
                xPos = x1 + 1 + width / 2 - (currentLine.length / 2);
                this.drawString(currentLine, xPos, y);
                // If a speechClass is specified, we add tags
                if (speechClass != null)
                    this.addTwoTags(xPos, xPos + currentLine.length, y, "<span class=\"" + speechClass + "\">", "</span>");
            }
        }
        // Draw the second " character
        this.drawString("\"", x2, y);
        // If we should add a translation, then we add it and the translated text isn't empty
        if (translatedText != null && translatedText != "") {
            this.addTooltip(speechClass + "Tooltip", translatedText);
            this.addLinkOnHoverShowTooltip("." + speechClass, "." + speechClass + "Tooltip");
        }
        // We return y, which is the y position of the last speech line
        return y;
    };
    RenderArea.prototype.drawString = function (str, x, y, translated, transparency) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (translated === void 0) { translated = false; }
        if (transparency === void 0) { transparency = null; }
        var indexFirst;
        var indexLast;
        // BUGS (change position)
        if (Bugs.getGraphicalBugLevel() >= 4) {
            x += Random.between(0, 20) - 10;
            y += Random.between(0, 4) - 2;
        }
        // Return false if y is out of bounds
        if (y < 0 || y >= this.height)
            return false;
        // BUGS (random character)
        if (Bugs.getGraphicalBugLevel() >= 3)
            str = Bugs.changeRandomCharacter(str);
        else if (Bugs.getGraphicalBugLevel() >= 2 && Random.oneChanceOutOf(2))
            str = Bugs.changeRandomCharacter(str);
        else if (Bugs.getGraphicalBugLevel() >= 1 && Random.oneChanceOutOf(3))
            str = Bugs.changeRandomCharacter(str);
        // The indices of the first and last character we're going to draw
        indexFirst = 0;
        indexLast = str.length;
        // Restrict the indices if out of bounds
        if (x + indexLast >= this.width)
            indexLast -= (x + indexLast - this.width);
        if (x < 0)
            indexFirst = -x;
        // If there isn't even one character to draw, we return false
        if (indexLast < 0 || indexFirst >= str.length)
            return false;
        // If there's no transparent character, we just draw the whole string
        if (transparency == null) {
            this.area[y] = this.area[y].replaceAt(x + indexFirst, str.substring(indexFirst, indexLast));
        }
        else {
            for (var i = indexFirst; i < indexLast; i++) {
                // If the character isn't alpha
                if (str[i] != transparency.getAlphaCharacter()) {
                    // If the meta alpha character isn't null and our character is this meta alpha character, we draw the alpha character
                    if (transparency.getMetaAlphaCharacter() != null && str[i] == transparency.getMetaAlphaCharacter())
                        this.area[y] = this.area[y].replaceAt(x + i, transparency.getAlphaCharacter());
                    else
                        this.area[y] = this.area[y].replaceAt(x + i, str[i]);
                }
            }
        }
        // If translated is true, add the tags
        if (translated) {
            this.addTwoTags(x, x + str.length, y, "<span class=\"translated\">", "</span>");
        }
        // And we return true
        return true;
    };
    RenderArea.prototype.drawVerticalLine = function (str, x, y1, y2) {
        for (var i = y1; i <= y2; i++) {
            if (this.drawString(str, x, i) == false)
                return false;
        }
        return true;
    };
    RenderArea.prototype.eraseEverything = function (character) {
        if (character === void 0) { character = " "; }
        var str;
        // We check if the character is correct, return false if it isn't
        if (character.length != 1)
            return false;
        // We prepare the string
        str = "";
        str = str.fillWith(character, this.width);
        // We fill all the lines with the character given in parameter
        for (var i = 0; i < this.height; i++) {
            this.drawString(str, 0, i);
        }
        // We return true
        return true;
    };
    RenderArea.prototype.removeAllLinks = function () {
        this.links = [];
    };
    RenderArea.prototype.removeAllTags = function () {
        for (var i = 0; i < this.tags.length; i++) {
            this.tags[i] = [];
        }
    };
    RenderArea.prototype.resetAllButSize = function (character) {
        if (character === void 0) { character = " "; }
        this.eraseEverything(character);
        this.removeAllTags();
        this.removeAllLinks();
    };
    RenderArea.prototype.resize = function (newWidth, newHeight, character) {
        if (character === void 0) { character = " "; }
        // We store the old size
        var oldWidth = this.width;
        var oldHeight = this.height;
        // We check if the character is correct, return false if it isn't
        if (character.length != 1)
            return false;
        // We try to change the size, return false if failure
        if (this.setSize(newWidth, newHeight) == false)
            return false;
        // We resize the height
        if (newHeight > oldHeight) {
            for (var i = oldHeight; i < newHeight; i++) {
                // We resize the tags
                this.tags.push([]);
                // We resize the area
                this.area.push("");
                // If the new width is higher
                if (newWidth > oldWidth) {
                    for (var j = 0; j < oldWidth; j++) {
                        this.area[i] += character;
                    }
                }
                else if (oldWidth > newWidth) {
                    for (var j = 0; j < newWidth; j++) {
                        this.area[i] += character;
                    }
                }
            }
        }
        else if (oldHeight > newHeight) {
            // We resize the tags
            this.tags.splice(this.tags.length - (oldHeight - newHeight), oldHeight - newHeight); // We remove some lines to reduce the height
            // We resize the area
            this.area.splice(this.area.length - (oldHeight - newHeight), oldHeight - newHeight); // We remove some lines to reduce the height
        }
        // We resize the width
        if (newWidth > oldWidth) {
            // We add characters at the end of the lines (lines 0 to new height)
            for (var i = 0; i < newHeight; i++) {
                for (var j = oldWidth; j < newWidth; j++) {
                    this.area[i] += character;
                }
            }
        }
        else if (oldWidth > newWidth) {
            // We each line (0 to new height), we only keep the beginning of the string
            for (var i = 0; i < newHeight; i++) {
                this.area[i] = this.area[i].substr(0, newWidth);
            }
        }
        // And we return true
        return true;
    };
    RenderArea.prototype.resizeFromArea = function (renderArea) {
        this.resize(renderArea.getWidth(), renderArea.getHeight());
    };
    RenderArea.prototype.resizeFromArray = function (array, xAdd, yAdd) {
        if (xAdd === void 0) { xAdd = 0; }
        if (yAdd === void 0) { yAdd = 0; }
        var width = 0;
        var height = array.length;
        for (var i = 0; i < array.length; i++) {
            if (width < array[i].length)
                width = array[i].length;
        }
        this.resize(width + xAdd, height + yAdd);
    };
    RenderArea.prototype.runLinks = function () {
        for (var i = 0; i < this.links.length; i++) {
            this.links[i].run();
        }
    };
    // Public getters
    RenderArea.prototype.getForRendering = function () {
        var areaClone = [];
        // If we have no tags at all
        if (this.tags.length == 0) {
            // We simply return the area as a string
            return this.area.join("\n");
        }
        else {
            // We clone the area
            areaClone = this.area.slice(0);
            // We add tags to it
            for (var i = 0; i < this.height; i++) {
                for (var j = 0; j < this.tags[i].length; j++) {
                    // If the tag should be added, we add it
                    areaClone[i] = this.tags[i][j].draw(areaClone[i]);
                }
            }
            // We return the cloned area as a string
            return areaClone.join("\n");
        }
    };
    RenderArea.prototype.getLine = function (n) {
        if (n < 0 || n >= this.height)
            console.log("Error : trying to get a line out of the bounds of a drawing area.");
        else
            return this.area[n];
    };
    RenderArea.prototype.getTags = function () {
        return this.tags;
    };
    RenderArea.prototype.getWidth = function () {
        return this.width;
    };
    RenderArea.prototype.getHeight = function () {
        return this.height;
    };
    // Private methods
    RenderArea.prototype.setSize = function (width, height) {
        // Return false if the size given is incorrect
        if (width < 0 || height < 0)
            return false;
        this.width = width;
        this.height = height;
        return true;
    };
    return RenderArea;
})();
var CallbackCollection = (function () {
    // Constructor
    function CallbackCollection() {
        var callbacks = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            callbacks[_i - 0] = arguments[_i];
        }
        this.callbacks = []; // Array of functions returning void
        this.callbacks = callbacks;
    }
    // Public methods
    CallbackCollection.prototype.addCallback = function (callback) {
        this.callbacks.push(callback);
        return this;
    };
    CallbackCollection.prototype.fire = function () {
        for (var i = 0; i < this.callbacks.length; i++) {
            this.callbacks[i]();
        }
    };
    CallbackCollection.prototype.reset = function () {
        this.callbacks = [];
    };
    return CallbackCollection;
})();
///<reference path="CallbackCollection.ts"/>
var Resource = (function () {
    // Constructor
    function Resource(savingPrefix) {
        if (savingPrefix === void 0) { savingPrefix = null; }
        // Attributes
        this.accumulated = 0;
        this.current = 0;
        this.max = 0;
        this.callbackCollection = new CallbackCollection();
        // Set the saving prefix
        this.savingPrefix = savingPrefix;
    }
    // Public methods
    Resource.prototype.add = function (n) {
        // If the operation would leave an < 0 value, we stop
        if (this.current + n < 0)
            return false;
        // If we add a positive value, we also add it to the accumulated
        if (n > 0)
            this.setAccumulated(this.accumulated + n);
        // We add to the current value
        this.setCurrent(this.current + n);
        // We return true
        return true;
    };
    Resource.prototype.load = function () {
        this.setAccumulated(Saving.loadNumber(this.savingPrefix + "Accumulated"));
        this.setCurrent(Saving.loadNumber(this.savingPrefix + "Current"));
        this.setMax(Saving.loadNumber(this.savingPrefix + "Max"));
    };
    Resource.prototype.save = function () {
        Saving.saveNumber(this.savingPrefix + "Accumulated", this.getAccumulated());
        Saving.saveNumber(this.savingPrefix + "Current", this.getCurrent());
        Saving.saveNumber(this.savingPrefix + "Max", this.getMax());
    };
    Resource.prototype.transferTo = function (resource, howMany, ratio) {
        if (howMany === void 0) { howMany = -1; }
        if (ratio === void 0) { ratio = 1; }
        // If howMany is below 0, then we transfer everything
        if (howMany < 0)
            howMany = this.current;
        else {
            // If we don't have enough to transfer, we return false
            if (howMany > this.current)
                return false;
        }
        // We lower our current quantity
        this.add(-howMany);
        // We add to the other resource
        resource.add(howMany * ratio);
        // We return true
        return true;
    };
    // Public getters
    Resource.prototype.getAccumulated = function () {
        return this.accumulated;
    };
    Resource.prototype.getCurrent = function () {
        return this.current;
    };
    Resource.prototype.getCurrentAsString = function () {
        return this.current.toString();
    };
    Resource.prototype.getCallbackCollection = function () {
        return this.callbackCollection;
    };
    Resource.prototype.getMax = function () {
        return this.max;
    };
    // Public setters
    Resource.prototype.setCurrent = function (n) {
        // Set the value
        this.current = n;
        // Check if the max value should change
        if (this.current > this.max)
            this.max = this.current;
        // Fire the callbacks
        this.callbackCollection.fire();
    };
    // Private methods
    Resource.prototype.setAccumulated = function (n) {
        this.accumulated = n;
    };
    Resource.prototype.setMax = function (n) {
        this.max = n;
    };
    return Resource;
})();
///<reference path="BarType.ts"/>
///<reference path="RenderArea.ts"/>
///<reference path="Resource.ts"/>
var Bar = (function (_super) {
    __extends(Bar, _super);
    // Constructor
    function Bar(type) {
        // Super constructor
        _super.call(this);
        // We set the type
        this.type = type;
        // We set some parameters depending on the bar type
        switch (this.type) {
            case BarType.SIMPLE:
                this.contentCharacter = "*";
                this.bordersCharacter = "-";
                break;
            case BarType.HEALTH:
            case BarType.UNICOLOR_HEALTH:
                this.contentCharacter = " ";
                this.bordersCharacter = "-";
                break;
            default:
                console.log("Error : trying to load an incorrect bar type");
                break;
        }
    }
    // Public methods
    Bar.prototype.update = function (ratio, text) {
        if (text === void 0) { text = ""; }
        var bordersBool;
        var lateralBordersBool;
        var textBool;
        var contentY1;
        var contentY2;
        var contentSize;
        var colorType;
        // If we have no height, we return
        if (this.getHeight() <= 0)
            return false;
        // If the width is really to low, we return
        if (this.getWidth() <= 1)
            return false;
        // We remove all the tags and all the text
        this.removeAllTags();
        this.eraseEverything();
        // We decide if there will be text or not..
        if (text.length != 0)
            textBool = true;
        else
            textBool = false;
        // We decide if there will be borders or not..
        if (this.getHeight() < (textBool ? 4 : 3))
            bordersBool = false;
        else
            bordersBool = true;
        // ..and where the real content of the bar will take place
        if (bordersBool) {
            contentY1 = 1;
            if (textBool)
                contentY2 = this.getHeight() - 3;
            else
                contentY2 = this.getHeight() - 2;
        }
        else {
            contentY1 = 0;
            if (textBool && this.getHeight() > 1)
                contentY2 = this.getHeight() - 2;
            else
                contentY2 = this.getHeight() - 1;
        }
        // We decide if there will be lateral borders
        if (this.getWidth() >= 20)
            lateralBordersBool = true;
        else
            lateralBordersBool = false;
        // We possibly draw the lateral borders
        if (lateralBordersBool) {
            for (var i = contentY1; i <= contentY2; i++) {
                this.drawString("|", 0, i);
                this.drawString("|", this.getWidth() - 1, i);
            }
        }
        // We draw the borders if there are borders
        if (bordersBool) {
            this.drawHorizontalLine(this.bordersCharacter, 0, this.getWidth() - 1, 0);
            if (textBool)
                this.drawHorizontalLine(this.bordersCharacter, 0, this.getWidth() - 1, this.getHeight() - 2);
            else
                this.drawHorizontalLine(this.bordersCharacter, 0, this.getWidth() - 1, this.getHeight() - 1);
        }
        // We calculate the content size
        contentSize = Math.floor((this.getWidth() - (lateralBordersBool ? 2 : 0)) * ratio);
        if (contentSize == 0 && ratio > 0)
            contentSize = 1; // If the ratio is > 0, then the content size can't be == 0
        // We draw the content if the content size is > 0
        if (contentSize > 0) {
            for (var i = contentY1; i <= contentY2; i++) {
                this.drawHorizontalLine(this.contentCharacter, (lateralBordersBool ? 1 : 0), contentSize, i);
            }
        }
        // We draw the text if there is text
        if (textBool) {
            this.drawString(text, (text.length > this.getWidth() ? 0 : Math.floor(this.getWidth() / 2 - text.length / 2)), this.getHeight() - 1);
        }
        // We add special tags, depending on the type of bar
        switch (this.type) {
            case BarType.HEALTH:
            case BarType.UNICOLOR_HEALTH:
                // We choose the color
                if (this.type == BarType.HEALTH) {
                    if (ratio < 0.2)
                        colorType = ColorType.HEALTH_RED;
                    else if (ratio < 0.5)
                        colorType = ColorType.HEALTH_ORANGE;
                    else
                        colorType = ColorType.HEALTH_GREEN;
                }
                else
                    colorType = ColorType.HEALTH_UNICOLOR;
                // We add the tags
                if (contentSize > 0) {
                    for (var i = contentY1; i <= contentY2; i++) {
                        this.addBackgroundColor((lateralBordersBool ? 1 : 0), (lateralBordersBool ? 1 : 0) + contentSize, i, new Color(colorType));
                    }
                }
                break;
        }
        // Finally, we return true
        return true;
    };
    return Bar;
})(RenderArea);
var BigSharkFinType;
(function (BigSharkFinType) {
    BigSharkFinType[BigSharkFinType["RED"] = 0] = "RED";
    BigSharkFinType[BigSharkFinType["GREEN"] = 1] = "GREEN";
    BigSharkFinType[BigSharkFinType["PURPLE"] = 2] = "PURPLE";
})(BigSharkFinType || (BigSharkFinType = {}));
var QuestEntity = (function () {
    // Constructor
    function QuestEntity(quest, globalPosition, naming, renderArea, renderAreaPosition, cbc, questEntityMovement, questEntityAnimation) {
        if (naming === void 0) { naming = new Naming("???", "???"); }
        if (renderArea === void 0) { renderArea = null; }
        if (renderAreaPosition === void 0) { renderAreaPosition = new Pos(0, 0); }
        if (cbc === void 0) { cbc = null; }
        if (questEntityMovement === void 0) { questEntityMovement = null; }
        if (questEntityAnimation === void 0) { questEntityAnimation = null; }
        // Is dead ?
        this.dead = false;
        // Is out of area ?
        this.outOfArea = false;
        // Is destructible ?
        this.destructible = false;
        // Should the health bar be shown ?
        this.healthBar = null;
        this.transparency = null;
        this.noMovementLastUpdate = true;
        // Weapon
        this.questEntityWeapons = [];
        // Spell casters
        this.questEntitySpellCasters = [];
        // Last damage reason
        this.lastDamageReason = null;
        // Naming
        this.naming = null;
        // Team
        this.team = QuestEntityTeam.MOBS; // The default team of an entity is MOBS because most entities want to use this one
        // Can it be forced to move?
        this.canBeForcedToMove = true;
        // The special spell casting damage reason, null until we create it
        this.spellCastingDamageReason = null;
        // Is a spell?
        this.isASpell = false;
        // Is jumping?
        this.jumping = false;
        this.jumpSpeed = null;
        this.jumpDuration = null;
        // Is controlled falling? (controlled falling is when we fall after a jump for example, it means that we can move while falling)
        this.controlledFalling = false;
        // Is stopped?
        this.stopped = false;
        this.stoppedDuration = null;
        // Is affected by anti gravity?
        this.antiGravity = false;
        this.antiGravityDuration = null;
        // Is a turtle?
        this.turtle = false;
        this.turtleDuration = null;
        this.turtleLastMovement = null;
        // Is in berserk mode?
        this.berserk = false;
        this.berserkDuration = null;
        // Apply parameters
        this.quest = quest;
        this.globalPosition = globalPosition;
        this.naming = naming;
        this.setRenderArea(renderArea);
        this.renderAreaPosition = renderAreaPosition;
        this.setCbc(cbc);
        this.setQuestEntityMovement(questEntityMovement);
        this.setQuestEntityAnimation(questEntityAnimation);
    }
    // Public methods
    QuestEntity.prototype.addQuestEntitySpellCaster = function (questEntitySpellCaster) {
        this.questEntitySpellCasters.push(questEntitySpellCaster);
    };
    QuestEntity.prototype.addQuestEntityWeapon = function (questEntityWeapon) {
        this.questEntityWeapons.push(questEntityWeapon);
    };
    QuestEntity.prototype.beginAntiGravity = function (antiGravityDuration) {
        if (this.antiGravity == false) {
            this.antiGravity = true;
            this.antiGravityDuration = antiGravityDuration;
            return true;
        }
        return false;
    };
    QuestEntity.prototype.beginBerserk = function (berserkDuration) {
        if (this.berserk == false) {
            this.berserk = true;
            this.berserkDuration = berserkDuration;
            this.setHp(Math.ceil(this.getHp() / 2));
            return true;
        }
        return false;
    };
    QuestEntity.prototype.beginTurtle = function (turtleDuration) {
        if (this.turtle == false) {
            this.turtle = true;
            this.turtleDuration = turtleDuration;
            this.turtleLastMovement = 0;
            return true;
        }
        return false;
    };
    QuestEntity.prototype.canJumpInMidAir = function () {
        return false;
    };
    QuestEntity.prototype.checkCollision = function (pos) {
        if (pos === void 0) { pos = new Pos(0, 0); }
        // BUGS : if the level is >= 4, we just return a random value
        if (Bugs.getQuestBugLevel() >= 4)
            return Random.flipACoin();
        for (var i = 0; i < this.quest.getEntities().length; i++) {
            // If it's not the same object as us
            if (this.quest.getEntities()[i] != this) {
                // If we collide with it, we return true
                if (this.collidesWith(this.quest.getEntities()[i], pos))
                    return true;
            }
        }
        // No collision
        return false;
    };
    QuestEntity.prototype.collidesWith = function (questEntity, pos) {
        if (pos === void 0) { pos = new Pos(0, 0); }
        // If we both have a collision box collection, we return the result of the collision test
        if (this.cbc != null && questEntity.getCbc() != null)
            return this.cbc.collidesWith(questEntity.getCbc(), pos);
        // Else, we return false, there can't be any collision
        return false;
    };
    QuestEntity.prototype.draw = function (renderArea) {
        if (this.renderArea != null) {
            // On some conditions, we exit now and don't draw anything (it allows no drawing outside of the quest panel when realQuestSize and realQuestDrawingSize are different (in the hole for example)
            if (this.globalPosition.x + this.renderAreaPosition.x + this.quest.getGlobalDrawingOffset().x > this.quest.getRealQuestDrawingSize().x)
                return;
            if (this.globalPosition.y + this.renderAreaPosition.y + this.quest.getGlobalDrawingOffset().y > this.quest.getRealQuestDrawingSize().y)
                return;
            if (this.globalPosition.x + this.renderAreaPosition.x + this.renderArea.getWidth() + this.quest.getGlobalDrawingOffset().x < 0)
                return;
            if (this.globalPosition.y + this.renderAreaPosition.y + this.renderArea.getHeight() + this.quest.getGlobalDrawingOffset().y < 0)
                return;
            renderArea.drawArea(this.renderArea, this.quest.getRealQuestPosition().x + this.quest.getGlobalDrawingOffset().x + this.globalPosition.x + this.renderAreaPosition.x, this.quest.getRealQuestPosition().y + this.quest.getGlobalDrawingOffset().y + this.globalPosition.y + this.renderAreaPosition.y, this.transparency);
        }
        // If the debug mode is on
        if (Saving.loadBool("gameDebug")) {
            if (this.cbc != null) {
                for (var i = 0; i < this.cbc.getBoxes().length; i++) {
                    for (var k = 0; k < this.cbc.getBoxes()[i].getSize().x; k++) {
                        for (var j = 0; j < this.cbc.getBoxes()[i].getSize().y; j++) {
                            renderArea.drawString("D", this.quest.getRealQuestPosition().x + this.quest.getGlobalDrawingOffset().x + this.globalPosition.x + this.cbc.getBoxes()[i].getPosition().x + k, this.quest.getRealQuestPosition().y + this.quest.getGlobalDrawingOffset().y + this.globalPosition.y + this.cbc.getBoxes()[i].getPosition().y + j);
                        }
                    }
                }
            }
        }
    };
    QuestEntity.prototype.forceMoving = function (movement) {
        if (this.canBeForcedToMove)
            this.move(movement, true);
    };
    QuestEntity.prototype.getAndPossiblyCreateSpellCastingDamageReason = function (naming) {
        // If our spell casting damage reason is null, we create it
        if (this.spellCastingDamageReason == null) {
            this.spellCastingDamageReason = new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.SPELL);
            this.spellCastingDamageReason.setQuestEntity(this);
        }
        // We set the naming given
        this.spellCastingDamageReason.setSpellNaming(naming);
        // We return it
        return this.spellCastingDamageReason;
    };
    QuestEntity.prototype.getDeathMessage = function () {
        // If there's a last damage reason
        if (this.getLastDamageReason() != null) {
            return this.getLastDamageReason().getWhoNaming().getBeginning() + " killed " + this.naming.getAnywhere() + " with " + this.getLastDamageReason().getWhatNaming().getAnywhere() + ".";
        }
        // Else
        return this.naming.getBeginning() + " was erased from reality.";
    };
    QuestEntity.prototype.getRenderAreaCenter = function () {
        if (this.renderArea != null)
            return this.globalPosition.plus(new Pos(Math.floor(this.renderArea.getWidth() / 2), Math.floor(this.renderArea.getHeight() / 2)));
        return this.globalPosition;
    };
    QuestEntity.prototype.goTowards = function (ourPosition, goalPosition, minDistance, speed, dontTakeYInAccount) {
        if (minDistance === void 0) { minDistance = 0; }
        if (speed === void 0) { speed = new Pos(1, 1); }
        if (dontTakeYInAccount === void 0) { dontTakeYInAccount = false; }
        // We create the movement
        var movement = new Pos(0, 0);
        // We find the distance between our position and the position where we want to go
        var distance = ourPosition.getDistance(goalPosition);
        // If the x distance is the biggest (we do /2 because characters are thin in the ascii art world!) and big enough (or if we don't take in account y)
        if ((Math.abs(distance.x) / 2 > Math.abs(distance.y) && Math.abs(distance.x) > minDistance * 2) || dontTakeYInAccount) {
            if (distance.x > 0)
                movement.x = -speed.x;
            else if (distance.x < 0)
                movement.x = speed.x;
        }
        else if (Math.abs(distance.y) > minDistance) {
            if (distance.y > 0)
                movement.y = -speed.y;
            else if (distance.y < 0)
                movement.y = speed.y;
        }
        // We use this movement to set our quest entity movement's offset
        this.getQuestEntityMovement().setOffset(movement);
    };
    QuestEntity.prototype.heal = function (hp) {
        this.setHp(this.getHp() + hp);
    };
    QuestEntity.prototype.hit = function (questEntity, damage, reason) {
        // BUGS
        if (Bugs.getQuestBugLevel() >= 1)
            damage *= Random.between(1, 3);
        if (this.berserk == false)
            questEntity.inflictDamage(damage, reason);
        else
            questEntity.inflictDamage(damage * 2, reason);
    };
    QuestEntity.prototype.inflictDamage = function (damage, reason) {
        // We save the damage reason
        this.lastDamageReason = reason;
        // If we're destructible, we get the damage
        if (this.destructible) {
            // If we're not a turtle
            if (this.turtle == false)
                this.setHp(this.getHp() - damage);
            else
                this.setHp(this.getHp() - Math.ceil(damage / 2));
        }
    };
    QuestEntity.prototype.isOutOfArea = function () {
        // If the entity if too much out of the area, we return true
        if (this.globalPosition.x < -this.getQuest().getLeftLimit())
            return true;
        if (this.globalPosition.y < -this.getQuest().getTopLimit())
            return true;
        if (this.globalPosition.x > this.quest.getRealQuestSize().x + this.getQuest().getRightLimit())
            return true;
        if (this.globalPosition.y > this.quest.getRealQuestSize().y + this.getQuest().getBottomLimit())
            return true;
        // Else we return false
        return false;
    };
    QuestEntity.prototype.jump = function (jumpDuration, jumpSpeed) {
        if (jumpSpeed === void 0) { jumpSpeed = 1; }
        // BUGS
        if (Bugs.getQuestBugLevel() >= 2)
            jumpSpeed = Random.between(1, 5);
        // If we're not already jumping or controlled falling and we would collide by going down (which means we're on the ground), we jump (we also jump without checking all that if we are able to jump in mid-air)
        if ((this.jumping == false && this.controlledFalling == false && this.checkCollision(new Pos(0, 1))) || this.canJumpInMidAir()) {
            this.jumping = true;
            this.jumpDuration = jumpDuration;
            this.jumpSpeed = jumpSpeed;
            return true;
        }
        return false;
    };
    QuestEntity.prototype.move = function (pos, force) {
        if (force === void 0) { force = false; }
        // BUGS
        if (Bugs.getQuestBugLevel() >= 3 || (Bugs.getQuestBugLevel() >= 2 && Random.oneChanceOutOf(3)) || (Bugs.getQuestBugLevel() >= 1 && Random.oneChanceOutOf(5))) {
            pos.x += Random.between(1, 3) - 2;
            pos.y += Random.between(1, 3) - 2;
        }
        // If we're not a turtle or this isn't a pure horizontal movement (turtles only care about horizontal movement)
        if (this.turtle == false || pos.y != 0)
            return this.setGlobalPosition(this.globalPosition.plus(pos), force);
        else {
            // We check the duration
            if (this.turtleDuration > 0) {
                this.turtleDuration -= 1;
            }
            else
                this.stopTurtle();
            // If the movement is >= 2
            if (this.turtleLastMovement >= 2) {
                this.turtleLastMovement = 0; // We reset the movement
                return this.setGlobalPosition(this.globalPosition.plus(pos), force); // We move
            }
            else {
                this.turtleLastMovement += 1;
                return false;
            }
        }
    };
    QuestEntity.prototype.moveWormsLike = function (pos) {
        // If we can move normally
        if (this.checkCollision(pos) == false) {
            // If we can't move two steps below but we can move on step below, then we move one step below (if we're not jumping or controlled falling)
            if (this.checkCollision(pos.plus(new Pos(0, 2))) == true && this.checkCollision(pos.plus(new Pos(0, 1))) == false && this.jumping == false && this.controlledFalling == false) {
                return this.move(pos.plus(new Pos(0, 1)));
            }
            else {
                return this.move(pos);
            }
        }
        else if (this.checkCollision(pos.plus(new Pos(0, -1))) == false && this.jumping == false && this.controlledFalling == false) {
            // We move one step above
            return this.move(pos.plus(new Pos(0, -1)));
        }
        // Else we don't move
        return false;
    };
    QuestEntity.prototype.removeQuestEntityWeapons = function () {
        this.questEntityWeapons = [];
    };
    QuestEntity.prototype.setGlobalPosition = function (pos, force) {
        if (force === void 0) { force = false; }
        var oldPosition = this.globalPosition;
        this.globalPosition = pos;
        // Check for collisions : restore the old position and return false if the movement would cause a collision
        if (force == false && this.checkCollision()) {
            this.globalPosition = oldPosition;
            return false;
        }
        // Return true
        return true;
    };
    QuestEntity.prototype.shouldDie = function () {
        // Return true if we are destructible and have 0 hp or we're already dead
        if ((this.destructible == true && this.hp <= 0) || this.dead == true)
            return true;
        return false;
    };
    QuestEntity.prototype.stop = function (stoppedDuration) {
        // If we're not already stopped
        if (this.stopped == false) {
            this.stopped = true;
            this.stoppedDuration = stoppedDuration;
            return true;
        }
        return false;
    };
    QuestEntity.prototype.stopBerserk = function () {
        this.berserk = false;
    };
    QuestEntity.prototype.stopTurtle = function () {
        this.turtle = false;
    };
    QuestEntity.prototype.teleport = function (pos) {
        return this.setGlobalPosition(pos);
    };
    QuestEntity.prototype.testNewGlobalPosition = function (pos) {
        var oldPosition = this.globalPosition;
        this.globalPosition = pos;
        // If there's a collision, restore the old position and return false
        if (this.checkCollision()) {
            this.globalPosition = oldPosition;
            return false;
        }
        // Else, restore the old position and return true
        this.globalPosition = oldPosition;
        return true;
    };
    QuestEntity.prototype.update = function () {
        // We handle berserk mode
        if (this.berserk) {
            if (this.berserkDuration > 0) {
                this.berserkDuration -= 1;
            }
            else {
                this.stopBerserk();
            }
        }
        // We handle animation
        this.handleAnimation();
        // We handle gravity, and then movement if gravity had no effect
        this.noMovementLastUpdate = true;
        if (this.handleGravity() == false)
            this.handleMovement();
        // We handle combat
        this.handleCombat();
    };
    // Default behaviour of this function : displaying a simple death message in the quest log
    QuestEntity.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage()));
    };
    // Public getters
    QuestEntity.prototype.getBerserk = function () {
        return this.berserk;
    };
    QuestEntity.prototype.getCbc = function () {
        return this.cbc;
    };
    QuestEntity.prototype.getDead = function () {
        return this.dead;
    };
    QuestEntity.prototype.getDestructible = function () {
        return this.destructible;
    };
    QuestEntity.prototype.getGlobalPosition = function () {
        return this.globalPosition;
    };
    QuestEntity.prototype.getHealthBar = function () {
        return this.healthBar;
    };
    QuestEntity.prototype.getHp = function () {
        return this.hp;
    };
    QuestEntity.prototype.getIsASpell = function () {
        return this.isASpell;
    };
    QuestEntity.prototype.getJumping = function () {
        return this.jumping;
    };
    QuestEntity.prototype.getLastDamageReason = function () {
        return this.lastDamageReason;
    };
    QuestEntity.prototype.getLastQuestEntitySpellCaster = function () {
        return this.questEntitySpellCasters[this.questEntitySpellCasters.length - 1];
    };
    QuestEntity.prototype.getLastQuestEntityWeapon = function () {
        return this.questEntityWeapons[this.questEntityWeapons.length - 1];
    };
    QuestEntity.prototype.getMaxHp = function () {
        return this.maxHp;
    };
    QuestEntity.prototype.getNaming = function () {
        return this.naming;
    };
    QuestEntity.prototype.getNoMovementLastUpdate = function () {
        return this.noMovementLastUpdate;
    };
    QuestEntity.prototype.getOutOfArea = function () {
        return this.outOfArea;
    };
    QuestEntity.prototype.getQuest = function () {
        return this.quest;
    };
    QuestEntity.prototype.getQuestEntityAnimation = function () {
        return this.questEntityAnimation;
    };
    QuestEntity.prototype.getQuestEntityMovement = function () {
        return this.questEntityMovement;
    };
    QuestEntity.prototype.getQuestEntityWeapons = function () {
        return this.questEntityWeapons;
    };
    QuestEntity.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    QuestEntity.prototype.getRenderAreaPosition = function () {
        return this.renderAreaPosition;
    };
    QuestEntity.prototype.getTeam = function () {
        return this.team;
    };
    QuestEntity.prototype.getTurtle = function () {
        return this.turtle;
    };
    // Public setters
    QuestEntity.prototype.setCanBeForcedToMove = function (canBeForcedToMove) {
        this.canBeForcedToMove = canBeForcedToMove;
    };
    QuestEntity.prototype.setCbc = function (cbc) {
        this.cbc = cbc;
    };
    QuestEntity.prototype.setDead = function (dead) {
        this.dead = dead;
    };
    QuestEntity.prototype.setDestructible = function (value) {
        this.destructible = value;
    };
    QuestEntity.prototype.setHealthBar = function (healthBar) {
        this.healthBar = healthBar;
    };
    QuestEntity.prototype.setHp = function (hp) {
        // BUGS
        if (Bugs.getQuestBugLevel() >= 2)
            hp *= Random.between(1, 5);
        this.hp = hp;
        if (this.hp > this.maxHp)
            this.hp = this.maxHp;
        if (this.hp < 0)
            this.hp = 0;
        this.tryToUpdateHealthBar();
    };
    QuestEntity.prototype.setIsASpell = function (isASpell) {
        this.isASpell = isASpell;
    };
    QuestEntity.prototype.setMaxHp = function (maxHp) {
        // BUGS
        if (Bugs.getQuestBugLevel() >= 4)
            maxHp *= Random.between(1, 5);
        this.maxHp = maxHp;
        this.tryToUpdateHealthBar();
    };
    QuestEntity.prototype.setOutOfArea = function (outOfArea) {
        this.outOfArea = outOfArea;
    };
    QuestEntity.prototype.setQuest = function (quest) {
        this.quest = quest;
    };
    QuestEntity.prototype.setQuestEntityAnimation = function (questEntityAnimation) {
        // We set the animation
        this.questEntityAnimation = questEntityAnimation;
        // We update for the first time if not null
        if (this.questEntityAnimation != null)
            this.questEntityAnimation.draw(this.renderArea);
    };
    QuestEntity.prototype.setQuestEntityMovement = function (questEntityMovement) {
        this.questEntityMovement = questEntityMovement;
    };
    QuestEntity.prototype.setRenderArea = function (renderArea) {
        this.renderArea = renderArea;
    };
    QuestEntity.prototype.setTeam = function (questEntityTeam) {
        this.team = questEntityTeam;
    };
    QuestEntity.prototype.setTransparency = function (transparency) {
        this.transparency = transparency;
    };
    // Private methods
    QuestEntity.prototype.handleAnimation = function () {
        if (this.questEntityAnimation != null) {
            this.questEntityAnimation.update();
            if (this.questEntityAnimation.shouldUpdateRenderAreaAtThisFrame()) {
                this.renderArea.resetAllButSize();
                this.questEntityAnimation.draw(this.renderArea);
            }
        }
    };
    QuestEntity.prototype.handleCombat = function () {
        // We iterate over weapons and use them
        for (var i = 0; i < this.questEntityWeapons.length; i++) {
            this.questEntityWeapons[i].handleCombat();
        }
        // We iterate over spellc asters and use them
        for (var i = 0; i < this.questEntitySpellCasters.length; i++) {
            this.questEntitySpellCasters[i].tryToCast();
        }
    };
    QuestEntity.prototype.handleGravity = function () {
        // If we're jumping, we handle jumping
        if (this.jumping == true) {
            // Decrease the jump duration
            this.jumpDuration -= 1;
            // If this is the last jumping frame, we stop jumping and don't jump at this frame
            if (this.jumpDuration <= 0) {
                this.jumping = false;
                this.controlledFalling = true;
            }
            else {
                // If we don't manage to jump, stop jumping
                if (this.move(new Pos(0, -this.jumpSpeed)) == false) {
                    this.jumping = false;
                    this.controlledFalling = true;
                }
            }
            // Return false so that we can move while jumping
            return false;
        }
        else {
            // If we're not affected by anti-gravity and gravity isn't disabled in the whole quest
            if (this.antiGravity == false && this.getQuest().getGravityDisabled() == false) {
                if (this.questEntityMovement != null && this.questEntityMovement.getGravity()) {
                    if (this.move(new Pos(0, 1))) {
                        if (this.controlledFalling == false)
                            return true; // If we weren't controlling our falling, then we return true because we can't move
                    }
                    else
                        this.controlledFalling = false; // If we hit the ground above, no mroe controlled falling
                }
            }
            else {
                this.antiGravityDuration -= 1;
                if (this.antiGravityDuration <= 0)
                    this.antiGravity = false;
            }
        }
        // Gravity had no effect
        return false;
    };
    QuestEntity.prototype.handleMovement = function () {
        // If we're not stopped
        if (this.stopped == false) {
            if (this.questEntityMovement != null) {
                this.questEntityMovement.update();
                if (this.questEntityMovement.shouldMoveAtThisFrame()) {
                    // If worms like movement is activated and we're not under anti-gravity and worms like movement isn't disabled by the quest
                    if (this.questEntityMovement.getWormsLike() && this.antiGravity == false && this.getQuest().getWormsLikeDisabled() == false) {
                        if (this.moveWormsLike(this.questEntityMovement.getCurrentFrameMovement()))
                            this.noMovementLastUpdate = false;
                    }
                    else {
                        if (this.move(this.questEntityMovement.getCurrentFrameMovement()))
                            this.noMovementLastUpdate = false;
                    }
                }
            }
        }
        else {
            this.stoppedDuration -= 1;
            if (this.stoppedDuration <= 0)
                this.stopped = false;
        }
    };
    QuestEntity.prototype.tryToUpdateHealthBar = function () {
        // Update our health bar if we have one
        if (this.healthBar != null)
            this.healthBar.update();
    };
    return QuestEntity;
})();
///<reference path="QuestEntity.ts"/>
var BigShark = (function (_super) {
    __extends(BigShark, _super);
    // Constructor
    function BigShark(quest, pos) {
        _super.call(this, quest, pos, new Naming("A shark", "a shark"), new RenderArea(47, 10), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(14, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(13, 1), new Pos(2, 1)), new CollisionBox(this, new Pos(12, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(41, 2), new Pos(5, 1)), new CollisionBox(this, new Pos(11, 3), new Pos(7, 1)), new CollisionBox(this, new Pos(35, 3), new Pos(11, 1)), new CollisionBox(this, new Pos(2, 4), new Pos(40, 1)), new CollisionBox(this, new Pos(0, 5), new Pos(40, 1)), new CollisionBox(this, new Pos(1, 6), new Pos(44, 1)), new CollisionBox(this, new Pos(3, 7), new Pos(43, 1)), new CollisionBox(this, new Pos(15, 8), new Pos(3, 1)), new CollisionBox(this, new Pos(16, 9), new Pos(1, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // By default, finType is null
        this.finType = null;
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(200);
        this.setHp(200);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/bigShark"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its sharp teeth", "its sharp teeth"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(49, 12))), Random.between(30, 42)));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
    }
    // draw()
    BigShark.prototype.draw = function (renderArea) {
        // Mother class draw method
        _super.prototype.draw.call(this, renderArea);
        // Add the fin color if we have a special fin type
        if (this.finType != null) {
            switch (this.finType) {
                case BigSharkFinType.RED:
                    this.drawFinColor(renderArea, ColorType.BIGSHARK_FIN_RED);
                    break;
                case BigSharkFinType.GREEN:
                    this.drawFinColor(renderArea, ColorType.BIGSHARK_FIN_GREEN);
                    break;
                case BigSharkFinType.PURPLE:
                    this.drawFinColor(renderArea, ColorType.BIGSHARK_FIN_PURPLE);
                    break;
            }
        }
    };
    // willDie()
    BigShark.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(500 + Random.upTo(30) * 35), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        if (this.finType != null) {
            switch (this.finType) {
                case BigSharkFinType.RED:
                    this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedRedSharkFin", "You found a red shark fin", "You gain a red shark fin"));
                    break;
                case BigSharkFinType.GREEN:
                    this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedGreenSharkFin", "You found a green shark fin", "You gain a green shark fin"));
                    break;
                case BigSharkFinType.PURPLE:
                    this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedPurpleSharkFin", "You found a purple shark fin", "You gain a purple shark fin"));
                    break;
            }
        }
    };
    // Public methods
    BigShark.prototype.hasFin = function (finType) {
        this.finType = finType;
    };
    // Private methods
    BigShark.prototype.drawFinColor = function (renderArea, colorType) {
        // If the fin color wouldn't be outside of the quest
        if (this.getGlobalPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 11 >= 0 &&
            this.getGlobalPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 18 <= 99) {
            // We draw it
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 14, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 15, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 0, new Color(colorType));
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 13, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 15, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 1, new Color(colorType));
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 12, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 16, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 2, new Color(colorType));
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 11, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 18, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 3, new Color(colorType));
        }
    };
    return BigShark;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var QuestEntitySpell = (function (_super) {
    __extends(QuestEntitySpell, _super);
    // Constructor
    function QuestEntitySpell(quest, pos, naming, renderArea, renderAreaPosition, cbc, questEntityMovement, questEntityAnimation) {
        if (renderArea === void 0) { renderArea = null; }
        if (renderAreaPosition === void 0) { renderAreaPosition = new Pos(0, 0); }
        if (cbc === void 0) { cbc = null; }
        if (questEntityMovement === void 0) { questEntityMovement = null; }
        if (questEntityAnimation === void 0) { questEntityAnimation = null; }
        _super.call(this, quest, pos, naming, renderArea, renderAreaPosition, cbc, questEntityMovement, questEntityAnimation);
        // Colors
        this.colors = [];
        // Set isASpell
        this.setIsASpell(true);
    }
    // Public methods
    QuestEntitySpell.prototype.addColor = function (color) {
        this.colors.push(color);
    };
    QuestEntitySpell.prototype.draw = function (renderArea) {
        // Call the mother class draw method
        _super.prototype.draw.call(this, renderArea);
        // Draw the colors
        for (var i = 0; i < this.colors.length; i++) {
            this.colors[i].draw(renderArea, this.getQuest().getRealQuestPosition().plus(this.getGlobalPosition()).plus(this.getQuest().getGlobalDrawingOffset()));
        }
    };
    QuestEntitySpell.prototype.removeColors = function () {
        this.colors = [];
    };
    return QuestEntitySpell;
})(QuestEntity);
///<reference path="QuestEntitySpell.ts"/>
var Blackhole = (function (_super) {
    __extends(Blackhole, _super);
    // Constructor
    function Blackhole(quest, pos, damage, questEntityDamageReason) {
        // Call the mother class constructor
        _super.call(this, quest, pos, new Naming("A blackhole", "a blackhole"));
        // Set from parameters
        this.damage = damage;
        this.questEntityDamageReason = questEntityDamageReason;
        // Create the collision box collection
        this.cbcDamage = new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -3), new Pos(2, 1)), new CollisionBox(this, new Pos(-3, -2), new Pos(6, 1)), new CollisionBox(this, new Pos(-4, -1), new Pos(8, 1)), new CollisionBox(this, new Pos(-5, 0), new Pos(10, 1)), new CollisionBox(this, new Pos(-4, 1), new Pos(8, 1)), new CollisionBox(this, new Pos(-3, 2), new Pos(6, 1)), new CollisionBox(this, new Pos(-1, 3), new Pos(2, 1)));
        // Set the timer
        this.timer = 30;
        // Set the colors for the first time
        this.reAddColors();
    }
    // Public methods
    Blackhole.prototype.update = function () {
        // Lower the timer
        this.timer -= 1;
        // Re add the colors
        this.reAddColors();
        // Inflict damage to any entity under us
        for (var i = 0; i < this.getQuest().getEntities().length; i++) {
            // If it is destructible
            if (this.getQuest().getEntities()[i].getDestructible()) {
                // If it has a collision box collection
                if (this.getQuest().getEntities()[i].getCbc() != null) {
                    // If this collision box collection collides with ours
                    if (this.getQuest().getEntities()[i].getCbc().collidesWith(this.cbcDamage)) {
                        this.getQuest().getEntities()[i].inflictDamage(this.damage, this.questEntityDamageReason);
                    }
                }
            }
        }
        // If the timer is too low, we're dead!
        if (this.timer <= 0)
            this.setDead(true);
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // Private methods
    Blackhole.prototype.addColorsFirstLayer = function (colorType) {
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-1, 0), new Pos(2, 1), new Color(colorType, true)));
    };
    Blackhole.prototype.addColorsSecondLayer = function (colorType) {
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-2, -1), new Pos(4, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-2, +1), new Pos(4, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-2, 0), new Pos(1, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+1, 0), new Pos(1, 1), new Color(colorType, true)));
    };
    Blackhole.prototype.addColorsThirdLayer = function (colorType) {
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-1, -3), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-3, -2), new Pos(6, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-4, -1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+2, -1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-5, 0), new Pos(3, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+2, 0), new Pos(3, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-4, +1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+2, +1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-3, +2), new Pos(6, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-1, +3), new Pos(2, 1), new Color(colorType, true)));
    };
    Blackhole.prototype.reAddColors = function () {
        // Remove the colors
        this.removeColors();
        // Re add them
        switch (this.timer) {
            case 30:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY240);
                break;
            case 29:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY220);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY240);
                break;
            case 28:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY200);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY220);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY240);
                break;
            case 27:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY180);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY200);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY220);
                break;
            case 26:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY160);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY180);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY200);
                break;
            case 25:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY140);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY160);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY180);
                break;
            case 24:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY120);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY140);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY160);
                break;
            case 23:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY100);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY120);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY140);
                break;
            case 22:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY80);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY100);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY120);
                break;
            case 21:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY60);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY80);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY100);
                break;
            case 20:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY40);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY60);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY80);
                break;
            case 19:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY20);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY40);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY60);
                break;
            default:
                this.addColorsFirstLayer(Random.fromArray([ColorType.BLACKHOLE_GREY20, ColorType.BLACKHOLE_GREY40, ColorType.BLACKHOLE_GREY60]));
                this.addColorsSecondLayer(Random.fromArray([ColorType.BLACKHOLE_GREY20, ColorType.BLACKHOLE_GREY40, ColorType.BLACKHOLE_GREY60]));
                this.addColorsThirdLayer(Random.fromArray([ColorType.BLACKHOLE_GREY20, ColorType.BLACKHOLE_GREY40, ColorType.BLACKHOLE_GREY60]));
                break;
        }
    };
    return Blackhole;
})(QuestEntitySpell);
var QuestEntityWeapon = (function () {
    // Constructor
    function QuestEntityWeapon(quest, questEntity, naming, cbc, damage) {
        if (cbc === void 0) { cbc = new CollisionBoxCollection(); }
        if (damage === void 0) { damage = 0; }
        this.closeCombatDelay = new QuestEntityWeaponDelay();
        this.quest = quest;
        this.questEntity = questEntity;
        this.naming = naming;
        this.damage = damage;
        this.cbc = cbc;
    }
    // Public methods
    QuestEntityWeapon.prototype.getRealDamage = function () {
        return this.damage;
    };
    QuestEntityWeapon.prototype.getRealDamageText = function () {
        return this.damage.toString();
    };
    QuestEntityWeapon.prototype.getSpeedText = function () {
        return this.closeCombatDelay.getText();
    };
    QuestEntityWeapon.prototype.handleCombat = function () {
        // If we can attack with close combat at this frame
        if (this.getRealDamage() > 0 && this.closeCombatDelay.tryToAttack()) {
            // We iterate over all entities
            for (var i = 0; i < this.quest.getEntities().length; i++) {
                // If we're not iterating over the entity we are used by
                if (this.quest.getEntities()[i] != this.questEntity) {
                    // If the entities are from different teams
                    if (this.quest.getEntities()[i].getTeam() != this.questEntity.getTeam()) {
                        // If we collide with this entity
                        if (this.collidesWith(this.quest.getEntities()[i])) {
                            // We hit it
                            this.hit(this.quest.getEntities()[i]);
                            // We warn the delay
                            this.closeCombatDelay.theWeaponAttacked();
                        }
                    }
                }
            }
        }
    };
    // Public getters
    QuestEntityWeapon.prototype.getCloseCombatDelay = function () {
        return this.closeCombatDelay;
    };
    QuestEntityWeapon.prototype.getNaming = function () {
        return this.naming;
    };
    // Private methods
    QuestEntityWeapon.prototype.collidesWith = function (questEntity) {
        // If we both have a collision box collection, we return the result of the collision test
        if (this.cbc != null && questEntity.getCbc() != null)
            return this.cbc.collidesWith(questEntity.getCbc());
        // Else, we return false, there can't be any collision
        return false;
    };
    QuestEntityWeapon.prototype.hit = function (questEntity) {
        this.questEntity.hit(questEntity, this.getRealDamage(), new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.WEAPON)
            .setQuestEntity(this.questEntity)
            .setQuestEntityWeapon(this));
    };
    return QuestEntityWeapon;
})();
///<reference path="QuestEntityWeapon.ts"/>
var Bludgeon = (function (_super) {
    __extends(Bludgeon, _super);
    function Bludgeon() {
        _super.apply(this, arguments);
    }
    // Public methods
    Bludgeon.prototype.getRealDamage = function () {
        return Random.between(15, 25);
    };
    Bludgeon.prototype.getRealDamageText = function () {
        return "15-25";
    };
    return Bludgeon;
})(QuestEntityWeapon);
var Item = (function () {
    // Constructor
    function Item(savingName, databaseName, databaseDescriptionName, ascii) {
        // We set the variables
        this.savingName = savingName;
        this.databaseName = databaseName;
        this.databaseDescriptionName = databaseDescriptionName;
        this.ascii = ascii;
        // We register the savingName
        Saving.registerBool(this.savingName, false);
    }
    // Public methods
    Item.prototype.foundCandies = function (player, quest, howMany) {
        return howMany;
    };
    Item.prototype.hit = function (player, quest, questEntity, damage, reason) {
        return damage;
    };
    Item.prototype.inflictDamage = function (player, quest, damage, reason) {
        return damage;
    };
    Item.prototype.isPossessed = function () {
        return Saving.loadBool(this.savingName);
    };
    // Public getters
    Item.prototype.getAscii = function () {
        return this.ascii;
    };
    Item.prototype.getDatabaseDescriptionName = function () {
        return this.databaseDescriptionName;
    };
    Item.prototype.getDatabaseName = function () {
        return this.databaseName;
    };
    Item.prototype.getSavingName = function () {
        return this.savingName;
    };
    Item.prototype.getSpecialAbility = function () {
        return null;
    };
    return Item;
})();
///<reference path="Item.ts"/>
var EqItem = (function (_super) {
    __extends(EqItem, _super);
    function EqItem() {
        _super.apply(this, arguments);
    }
    // Public methods    
    EqItem.prototype.update = function (player, quest) {
    };
    // Public getters
    EqItem.prototype.getQuestEntityWeapon = function (quest, player) {
        return new QuestEntityWeapon(quest, player, new Naming("???", "???"));
    };
    return EqItem;
})(Item);
///<reference path="EqItem.ts"/>
var BootsOfIntrospection = (function (_super) {
    __extends(BootsOfIntrospection, _super);
    // Constructor
    function BootsOfIntrospection() {
        _super.call(this, "eqItemBootsBootsOfIntrospection", "eqItemBootsBootsOfIntrospectionName", "eqItemBootsBootsOfIntrospectionDescription", "eqItems/boots/bootsOfIntrospection");
    }
    return BootsOfIntrospection;
})(EqItem);
///<reference path="Place.ts"/>
var Quest = (function (_super) {
    __extends(Quest, _super);
    // Constructor
    function Quest(game, specialInstruction) {
        if (specialInstruction === void 0) { specialInstruction = null; }
        _super.call(this, game);
        // Array of quest entities
        this.entities = [];
        // Render area
        this.renderArea = new RenderArea();
        this.globalDrawingOffset = new Pos(0, 0); // Global offset applied to all entities (very useful when dealing with a scrolling quest like the hole for example)
        // Drops
        this.candiesFound = new Resource();
        this.chocolateBarsFound = new Resource();
        this.itemsFound = [];
        // Is the quest ended? (and did we win?)
        this.questEnded = false;
        this.questEndedAndWeWon = false;
        // Player spells
        this.playerSpells = [];
        this.playerSpellsHotkeys = [];
        // Countdowns
        this.playerSpellsCountdown = 0;
        this.playerPotionsCountdown = 0;
        // Is gravity / worms like disabled?
        this.gravityDisabled = false;
        this.wormsLikeDisabled = false;
        // How many P potions did we use since the beginning of the quest?
        this.howManyPPotions = 0;
        // Set the special instruction
        this.specialInstruction = specialInstruction;
        // Reset the player
        this.getGame().resetPlayer();
        // Create player spells
        this.createPlayerSpells();
        // Set the real quest position
        this.realQuestPosition = new Pos(0, 2);
        // And the size to add to the real quest size
        this.sizeToAddToTheRealQuestSize = new Pos(0, 12);
        // If there is a special instruction, change the real quest position
        if (this.specialInstruction != null) {
            this.realQuestPosition.add(new Pos(0, 1));
        }
        // If there is at least a spell, change the real quest position
        if (this.playerSpells.length != 0) {
            this.realQuestPosition.add(new Pos(0, this.playerSpellsHeight));
        }
        // Add two delimiters in the quest log
        this.getGame().getQuestLog().addDelimiter();
        // Create the player collision boxes entity
        this.playerCollisionBoxes = new Wall(this, new Pos(0, 0));
        // Set the quest slowed down variable at the game level (and the quest speed up too)
        this.getGame().setQuestSlowedDown(false);
        this.getGame().setQuestSpeedUp(0);
    }
    // Public methods
    Quest.prototype.addPlayerCollisionBoxes = function (top, right, bottom, left) {
        // We remove boxes
        this.playerCollisionBoxes.removeBoxes();
        // And we re-add them
        if (top)
            this.playerCollisionBoxes.addBox(new Pos(-1, -1), new Pos(this.getRealQuestSize().x + 2, 1));
        if (right)
            this.playerCollisionBoxes.addBox(new Pos(this.getRealQuestSize().x, -1), new Pos(1, this.getRealQuestSize().y + 2));
        if (bottom)
            this.playerCollisionBoxes.addBox(new Pos(-1, this.getRealQuestSize().y), new Pos(this.getRealQuestSize().x + 2, 1));
        if (left)
            this.playerCollisionBoxes.addBox(new Pos(-1, -1), new Pos(1, this.getRealQuestSize().y + 2));
    };
    Quest.prototype.addEntity = function (entity) {
        // Add the entity
        this.entities.push(entity);
        // If it collides, remove it and return false (+ BUGS)
        if (this.entities[this.entities.length - 1].checkCollision() && Bugs.getQuestBugLevel() < 4) {
            this.entities.splice(this.entities.length - 1, 1);
            return false;
        }
        // Else, successfully added, we return true
        return true;
    };
    Quest.prototype.addExitQuestButton = function (callbackCollection, buttonText) {
        this.addBackToButton(this.renderArea, callbackCollection, Database.getText(buttonText), Database.getTranslatedText(buttonText), buttonText, 0, ((this.renderArea.getWidth() - 100) - this.getGap()) / 2 + (50 - Database.getText(buttonText).length / 2));
    };
    Quest.prototype.castPlayerAcidRain = function (areaPosition, areaSize, maxLeftDistanceFromPlayer, maxRightDistanceFromPlayer) {
        if (areaPosition === void 0) { areaPosition = null; }
        if (areaSize === void 0) { areaSize = null; }
        if (maxLeftDistanceFromPlayer === void 0) { maxLeftDistanceFromPlayer = 50; }
        if (maxRightDistanceFromPlayer === void 0) { maxRightDistanceFromPlayer = 50; }
        // We set the position & size of the area of the acid rain
        if (areaPosition == null)
            areaPosition = new Pos(0, 0);
        if (areaSize == null)
            areaSize = new Pos(this.getRealQuestSize().x, this.getRealQuestSize().y);
        // Correct the position to fit with the max left and right distance from player
        if (areaPosition.x < this.getGame().getPlayer().getGlobalPosition().x - maxLeftDistanceFromPlayer)
            areaPosition.x = this.getGame().getPlayer().getGlobalPosition().x - maxLeftDistanceFromPlayer;
        if (areaPosition.x + areaSize.x > this.getGame().getPlayer().getGlobalPosition().x + maxRightDistanceFromPlayer)
            areaSize.x = this.getGame().getPlayer().getGlobalPosition().x + maxRightDistanceFromPlayer - areaPosition.x;
        // Add the acid drops in the area
        for (var i = areaPosition.x; i < areaPosition.x + areaSize.x; i++) {
            if (Random.oneChanceOutOf((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 3 : 5))) {
                this.addEntity(this.createPlayerAcidDrop(new Pos(i, areaPosition.y - Random.upTo(5))));
            }
        }
        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast an acid rain!"));
    };
    Quest.prototype.castPlayerAntiGravityPotion = function () {
        this.getGame().getPlayer().beginAntiGravity((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 50 : 30));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink an anti gravity potion!"));
    };
    Quest.prototype.castPlayerBlackDemons = function () {
        // X position where the demons will start
        var xPosition = 0;
        // Y position of the beginning of the demon column
        var yBeginningPosition = 0;
        // Y position of the end of the demon column
        var yEndingPosition = this.getRealQuestSize().y;
        // We try to add demons from the beginning to the end, every five characters
        for (var i = yBeginningPosition; i < yEndingPosition; i++) {
            if (i % 5 == 0)
                this.addEntity(new PlayerSummonedDemon(this, new Pos(xPosition, i), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 80 : 50)));
        }
        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You summoned black demons!"));
    };
    Quest.prototype.castPlayerBlackhole = function () {
        // Array which will contain the indices (in the entities array) of all possible enemies
        var indices = [];
        // The blackhole position
        var position;
        // Fill the indices array
        for (var i = 0; i < this.getEntities().length; i++) {
            // If this entity is destructible and is from a different team then the player
            if (this.getEntities()[i].getDestructible() && this.getEntities()[i].getTeam() != this.getGame().getPlayer().getTeam()) {
                // We add its index
                indices.push(i);
            }
        }
        // We get the position of the blackhole from the position of a random destructible and not in the player's team entity, or if there's isn't any, from the player's position
        if (indices.length > 0) {
            position = this.getEntities()[indices[Random.between(0, indices.length - 1)]].getRenderAreaCenter();
        }
        else {
            position = this.getGame().getPlayer().getRenderAreaCenter();
        }
        // We cast the blackhole on the position we just set
        this.addEntity(new Blackhole(this, position, 100, this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("A blackhole", "a blackhole"))));
        // We add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast the black hole spell!"));
    };
    Quest.prototype.castPlayerBerserkPotion = function () {
        this.getGame().getPlayer().beginBerserk((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 120 : 80));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a berserk potion!"));
    };
    Quest.prototype.castPlayerCloningPotion = function () {
        // The clone to be added
        var clone = null;
        // Create a different clone depnding on the character type
        switch (this.getGame().getPlayer().getCharacterType()) {
            case PlayerCharacterType.CANDYBOX:
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                clone = new PlayerCloneCandyBox(this, this.getGame().getPlayer().getGlobalPosition().plus(new Pos(0, -1)));
                break;
            case PlayerCharacterType.MEDIUM:
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                clone = new PlayerCloneMedium(this, this.getGame().getPlayer().getGlobalPosition().plus(new Pos(0, -4)));
                break;
        }
        // If we didn't manage to add this clone (this could fail because it may not have enough space to be added)
        if (this.addEntity(clone) == false) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a cloning potion but there's not enough space for a clone to appear."));
            return; // We return
        }
        // Else, config the clone as a player (this config method is made to be overriden by the daughter classes)
        this.configPlayerOrClone(clone);
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a cloning potion!"));
    };
    Quest.prototype.castPlayerEraseMagic = function () {
        // Will be true if at least one spell was erased
        var magicErased = false;
        // Set dead to all the spells
        for (var i = 0; i < this.getEntities().length; i++) {
            if (this.getEntities()[i].getIsASpell()) {
                this.getEntities()[i].setDead(true);
                magicErased = true;
            }
        }
        // If some spell was erase, we successfully casted the spell
        if (magicErased)
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast an erase magic spell!"));
        else
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed to cast an erase magic spell : there's no magic to erase."));
    };
    Quest.prototype.castPlayerFireball = function (movement) {
        if (movement === void 0) { movement = new Pos(2, 0); }
        // Create the fireball
        var fireball = new Fireball(this, this.getGame().getPlayer().getSpellCastingPosition(), new Naming("A fireball", "a fireball"), new Color(ColorType.PLAYER_FIREBALL), new Pos((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 6 : 4), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 3 : 2)), 45 * (Saving.loadBool("gridItemPossessedRedSharkFin") ? 3 : 1), this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("A fireball", "a fireball")));
        // No target
        fireball.setTargetTypeNoTarget(movement);
        // Add the entity
        this.addEntity(fireball);
        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast a fireball!"));
    };
    Quest.prototype.castPlayerHealthPotion = function () {
        this.getGame().getPlayer().heal((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 200 : 100));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a health potion!"));
    };
    Quest.prototype.castPlayerJump = function () {
        // If we don't have the feather
        if (Saving.loadBool("gridItemPossessedFeather") == false)
            this.getGame().getPlayer().jump(3);
        else
            this.getGame().getPlayer().jump(6);
    };
    Quest.prototype.castPlayerObsidianWall = function () {
        // X position of the wall
        var xPosition = this.getGame().getPlayer().getSpellCastingPosition().x;
        // Beginning of the wall
        var yBeginningPosition = 0;
        // End of the wall
        var yEndingPosition = this.getRealQuestSize().y;
        // We try to add bricks from the beginning to the end
        for (var i = yBeginningPosition; i < yEndingPosition; i++) {
            this.addEntity(new ObsidianBrick(this, new Pos(xPosition, i), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 300 : 200)));
        }
        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast an obsidian wall!"));
    };
    Quest.prototype.castPlayerPPotion = function () {
        // Variables which will be used for calculations
        var hp;
        // Additional message, depends on the effect
        var additionalMessage = null;
        // If the player is a turtle
        if (this.getGame().getPlayer().getTurtle()) {
            // We're not a turtle anymore
            this.getGame().getPlayer().stopTurtle();
            // We lose half of our health points
            hp = Math.ceil(this.getGame().getPlayer().getHp() / 2);
            this.getGame().getPlayer().heal(-hp);
            // Set the message
            additionalMessage = "You lose " + hp + " health points.";
        }
        else if (this.getGame().getPlayer().getHp() < (this.getGame().getPlayer().getMaxHp() * 8 / 100)) {
            // Choose between the following
            switch (Random.between(0, 8)) {
                case 0:
                    this.getGame().getPlayer().heal(200);
                    additionalMessage = "You gain 200 health points.";
                    break; // Heal 200 hp
                case 1:
                    this.getGame().getPlayer().heal(400);
                    additionalMessage = "You gain 400 health points.";
                    break; // Heal 400 hp
                case 2:
                    this.getGame().getPlayer().heal(600);
                    additionalMessage = "You gain 600 health points.";
                    break; // Heal 600 hp
                case 3:
                    hp = this.getGame().getPlayer().getMaxHp() * 50 / 100;
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                    break; // Heal 50%
                case 4:
                    hp = this.getGame().getPlayer().getMaxHp() * 65 / 100;
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                    break; // Heal 65%
                case 5:
                    hp = this.getGame().getPlayer().getMaxHp() * 80 / 100;
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                    break; // Heal 80%
                case 6:
                    this.getGame().getPlayer().heal(10);
                    additionalMessage = "You gain 10 health points.";
                    break; // Wow, not very effective : heal 10hp
                case 7:
                    this.getGame().getPlayer().heal(10);
                    additionalMessage = "You gain 7 health points.";
                    break; // Wow, not very effective : heal 7hp
                case 8:
                    this.getGame().getPlayer().heal(10);
                    additionalMessage = "You gain 3 health points.";
                    break; // Wow, not very effective : heal 30hp
            }
        }
        else {
            // Normal effect
            if (Random.oneChanceOutOf(Math.ceil((this.howManyPPotions + 1) / 2))) {
                // 20%/30% of our health points
                hp = this.getGame().getPlayer().getMaxHp() * (Random.flipACoin() ? 20 : 30) / 100;
                // We lose those health points
                if (Random.oneChanceOutOf(3)) {
                    this.getGame().getPlayer().heal(-hp);
                    additionalMessage = "You lose " + hp + " health points.";
                }
                else {
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                }
            }
            else if (Random.oneChanceOutOf(Math.ceil((this.howManyPPotions + 1) / 6))) {
                switch (Random.between(0, 3)) {
                    case 0:
                        this.getGame().getPlayer().stop(Random.between(30, 100));
                        additionalMessage = "You can't move anymore.";
                        break;
                    case 1:
                        this.getGame().getPlayer().beginTurtle(Random.between(30, 100));
                        additionalMessage = "Now you're a turtle!";
                        break;
                    case 2:
                        this.getGame().getPlayer().setHp(this.getGame().getPlayer().getMaxHp());
                        additionalMessage = "You recover all your health.";
                        break;
                    case 3:
                        this.getGame().getPlayer().setHp(10);
                        additionalMessage = "You only have 10 health points now. Great.";
                        break;
                }
            }
            else {
                this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a P potion! Something strange is happening."));
                switch (Random.between(0, 2)) {
                    case 0:
                        this.castPlayerAcidRain();
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        break;
                    case 1:
                        this.castPlayerAcidRain();
                        this.castPlayerAcidRain();
                        this.castPlayerAcidRain();
                        this.castPlayerTeleport();
                        break;
                    case 2:
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        this.castPlayerFireball();
                        break;
                }
                this.getGame().getQuestLog().addMessage(new QuestLogMessage("Wait. What did you just do?"));
            }
        }
        // Increase the number of used P potions
        this.howManyPPotions += 1;
        // Add a message to the log
        if (additionalMessage != null)
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a P potion! " + additionalMessage));
    };
    Quest.prototype.castPlayerThornsShield = function () {
        // Create the thorns positions array, which will contain all the positions where we want to add thorns
        var positions = this.getGame().getPlayer().getThornsPositionsArray();
        // Add the thorns
        for (var i = 0; i < positions.length; i++) {
            // Create the thorn
            var thorn = new Fireball(this, this.getGame().getPlayer().getGlobalPosition().plus(positions[i]), new Naming("A magical thorn", "a magical thorn"), new Color(ColorType.PLAYER_THORN), new Pos(2, 1), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 40 : 20), this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical thorn", "a magical thorn")));
            // Add the entity
            this.addEntity(thorn);
        }
        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast a thorns shield!"));
    };
    Quest.prototype.castPlayerTurtlePotion = function () {
        this.getGame().getPlayer().beginTurtle((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 120 : 80));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a turtle potion!"));
    };
    Quest.prototype.castPlayerSqueeze = function () {
        if (this.getGame().getPlayer().getQuestEntityMovement() != null)
            this.getGame().getPlayer().squeeze();
    };
    Quest.prototype.castPlayerTeleport = function (where, teleportArea) {
        if (where === void 0) { where = null; }
        if (teleportArea === void 0) { teleportArea = null; }
        var teleportSucceeded = false;
        var teleportPosition;
        // If there's a special position to teleport the player, but no teleport area (which means we want to teleport it to this precise point only)
        if (where != null && teleportArea == null) {
            // If we manage to teleport here
            if (this.getGame().getPlayer().teleport(where))
                teleportSucceeded = true;
        }
        else {
            // Find where the teleport area will begin
            if (where == null)
                where = new Pos(0, 0);
            // Find the size of the teleport area
            if (teleportArea == null)
                teleportArea = new Pos(this.getRealQuestSize().x - 1, this.getRealQuestSize().y - 1);
            // We try to teleport 10 times in the teleport area, if one time succeed then it's okay, else the teleport fails
            for (var i = 0; i < 10; i++) {
                teleportPosition = where.plus(Random.fromPosition(teleportArea));
                // If we're not trying to teleport where we already are and the teleport succeed
                if (teleportPosition != this.getGame().getPlayer().getGlobalPosition() && this.getGame().getPlayer().teleport(teleportPosition)) {
                    teleportSucceeded = true;
                    break;
                }
            }
        }
        // Show a message depending on teleportSucceeded
        if (teleportSucceeded) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast a teleport spell!"));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed to cast the teleport spell. Magic works in mysterious ways..."));
        }
    };
    Quest.prototype.castPlayerTimeSlowing = function () {
        // We invert questSlowedDown
        this.getGame().setQuestSlowedDown(!this.getGame().getQuestSlowedDown());
    };
    Quest.prototype.castPlayerXPotion = function () {
        this.getGame().goToYourself();
    };
    Quest.prototype.configPlayerOrClone = function (entity) {
    };
    Quest.prototype.drawAroundQuest = function () {
        // Draw the player spells
        this.drawPlayerSpells();
        // Draw the special instruction
        this.drawSpecialInstruction();
        // Draw the quest log
        this.drawQuestLog();
    };
    Quest.prototype.drawEntities = function () {
        for (var i = 0; i < this.entities.length; i++) {
            // Let the entity draw itself
            this.entities[i].draw(this.renderArea);
            // Should we draw a health bar ?
            if (this.entities[i].getHealthBar() != null)
                this.entities[i].getHealthBar().draw(this.renderArea);
        }
    };
    Quest.prototype.endQuest = function (win) {
        // If the player won the quest
        if (win) {
            // Handle candies drops
            // We add a message to the log to tell about the candies we found
            this.getGame().getQuestLog().addMessage(new QuestLogMessage(this.getCandiesDropMessage()));
            // We give him/her the candies found during the quest
            this.candiesFound.transferTo(this.getGame().getCandies());
            // Handle chocolate bars drops
            if (this.chocolateBarsFound.getCurrent() > 0) {
                // We add a message to the log to tell about the chocolate bars we found
                this.getGame().getQuestLog().addMessage(new QuestLogMessage(this.getChocolateBarsDropMessage(), null, true));
                // We give him/her the chocolate bars found during the quest
                this.chocolateBarsFound.transferTo(this.getGame().getChocolateBars());
            }
            // Handle items drops
            for (var i = 0; i < this.itemsFound.length; i++) {
                // We show the drop message
                this.itemsFound[i].get();
                // We give him/her the item
                this.getGame().gainItem(this.itemsFound[i].getSavingName());
            }
            // We won
            this.questEndedAndWeWon = true;
        }
        // The quest ended !
        this.questEnded = true;
    };
    Quest.prototype.foundCandies = function (howMany) {
        // We check all eqItems in case they want to change how many candies were found
        for (var savingName in this.getGame().getSelectedEqItems()) {
            howMany = this.getGame().getSelectedEqItems()[savingName].foundCandies(this.getGame().getPlayer(), this, howMany);
        }
        // We add the candies found
        this.candiesFound.add(howMany);
        // We return the number of candies found
        return howMany;
    };
    Quest.prototype.foundChocolateBars = function (howMany) {
        // We add the chocolate bars found
        this.chocolateBarsFound.add(howMany);
        // We return the number of chocolate bars found
        return howMany;
    };
    Quest.prototype.foundGridOrEqItem = function (itemFound) {
        // If we already have this item, we return false
        if (Saving.loadBool(itemFound.getSavingName()) == true)
            return false;
        // If we already found this item during this quest, we return false
        for (var i = 0; i < this.itemsFound.length; i++) {
            if (itemFound.getSavingName() == this.itemsFound[i].getSavingName())
                return false;
        }
        // We add the item to our found array, tell it that we found it, and return true
        this.itemsFound.push(itemFound);
        this.itemsFound[this.itemsFound.length - 1].found();
        return true;
    };
    Quest.prototype.forceMovingAllEntities = function (movement) {
        for (var i = 0; i < this.entities.length; i++) {
            this.entities[i].forceMoving(movement);
        }
    };
    Quest.prototype.getCandiesDropMessage = function () {
        return "You gain " + Algo.pluralFormat(this.candiesFound.getCurrent(), " candy", " candies") + ".";
    };
    Quest.prototype.getCandiesFoundMessage = function () {
        return "(" + this.candiesFound.getCurrentAsString() + " found so far)";
    };
    Quest.prototype.getChocolateBarsDropMessage = function () {
        return "You gain " + Algo.pluralFormat(this.chocolateBarsFound.getCurrent(), " chocolate bar", " chocolate bars") + ".";
    };
    Quest.prototype.increasePlayerPotionsCountdown = function (howMuch) {
        this.playerPotionsCountdown += howMuch;
    };
    Quest.prototype.increasePlayerSpellsCountdown = function (howMuch) {
        this.playerSpellsCountdown += howMuch;
    };
    Quest.prototype.lowerCountdowns = function () {
        // Lower spells countdown
        if (this.playerSpellsCountdown > 0)
            this.playerSpellsCountdown -= 1;
        // Lower potions countdown
        if (this.playerPotionsCountdown > 0)
            this.playerPotionsCountdown -= 1;
    };
    Quest.prototype.postDraw = function () {
        this.getGame().updatePlace();
    };
    Quest.prototype.preDraw = function () {
        // Reset the area
        this.renderArea.resetAllButSize();
    };
    Quest.prototype.resizeQuest = function (width, height, forcedRealQuestSize) {
        if (forcedRealQuestSize === void 0) { forcedRealQuestSize = null; }
        // Set the real quest drawing size
        this.realQuestDrawingSize = new Pos(width, height);
        // Set the real quest size
        if (forcedRealQuestSize == null)
            this.realQuestSize = new Pos(width, height);
        else
            this.realQuestSize = forcedRealQuestSize;
        // Resize the area
        this.renderArea.resize(this.realQuestPosition.x + width + this.sizeToAddToTheRealQuestSize.x, this.realQuestPosition.y + height + this.sizeToAddToTheRealQuestSize.y); // We add ten for the quest log !
    };
    Quest.prototype.update = function () { };
    Quest.prototype.updateEntities = function () {
        // We store the current length before calling update stuff
        var length = this.entities.length;
        // Call the update function on each entity
        for (var i = 0; i < length; i++) {
            this.entities[i].update();
        }
        // Iterate over entities for removal (the only thing they can't do by themselves..)
        for (var i = 0; i < this.entities.length; i++) {
            // If the entity should die, we remove it and we make the appropriate callback
            if (this.entities[i].shouldDie()) {
                this.entities[i].willDie();
                this.entities[i].setDead(true);
                this.entities.splice(i, 1);
                i--;
            }
            else if (this.entities[i].isOutOfArea()) {
                this.entities[i].setOutOfArea(true);
                this.entities.splice(i, 1);
                i--;
            }
        }
        // Lower countdowns
        this.lowerCountdowns();
    };
    Quest.prototype.willBeDisplayed = function () {
        // Some some stuff needed because we start questing
        this.getGame().setWeAreQuesting(true);
        this.getGame().getQuestCallbackCollection().addCallback(this.update.bind(this));
        // Add some hotkeys
        for (var i = 0; i < this.playerSpellsHotkeys.length; i++) {
            this.getGame().addHotkey(this.playerSpellsHotkeys[i]);
        }
    };
    Quest.prototype.willBeClosed = function () {
        this.getGame().setWeAreQuesting(false);
    };
    // Public getters
    Quest.prototype.getBottomLimit = function () {
        return 20;
    };
    Quest.prototype.getCandiesFound = function () {
        return this.candiesFound;
    };
    Quest.prototype.getChocolateBarsFound = function () {
        return this.chocolateBarsFound;
    };
    Quest.prototype.getEntities = function () {
        return this.entities;
    };
    Quest.prototype.getGap = function () {
        // We find the perfect gap so that the player would be in the center
        var gap = (this.renderArea.getWidth() - 100) - (this.getGame().getPlayer().getGlobalPosition().x - 50) * 2;
        // We possibly correct this gap to keep the quest in the center if the player is in the left or right of the quest
        if (gap > (this.renderArea.getWidth() - 100))
            gap = (this.renderArea.getWidth() - 100);
        if (gap < -(this.renderArea.getWidth() - 100))
            gap = -(this.renderArea.getWidth() - 100);
        // We return the possibly corrected gap
        return gap;
    };
    Quest.prototype.getGlobalDrawingOffset = function () {
        return this.globalDrawingOffset;
    };
    Quest.prototype.getGravityDisabled = function () {
        return this.gravityDisabled;
    };
    Quest.prototype.getLastEntity = function () {
        return this.entities[this.entities.length - 1];
    };
    Quest.prototype.getLeftLimit = function () {
        return 20;
    };
    Quest.prototype.getPlayerCollisionBoxes = function () {
        return this.playerCollisionBoxes;
    };
    Quest.prototype.getPlayerPotionsCountdown = function () {
        return this.playerPotionsCountdown;
    };
    Quest.prototype.getPlayerSpellsCountdown = function () {
        return this.playerSpellsCountdown;
    };
    Quest.prototype.getQuestEnded = function () {
        return this.questEnded;
    };
    Quest.prototype.getQuestEndedAndWeWon = function () {
        return this.questEndedAndWeWon;
    };
    Quest.prototype.getRealQuestDrawingSize = function () {
        return this.realQuestDrawingSize;
    };
    Quest.prototype.getRealQuestPosition = function () {
        return this.realQuestPosition;
    };
    Quest.prototype.getRealQuestSize = function () {
        return this.realQuestSize;
    };
    Quest.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    Quest.prototype.getRightLimit = function () {
        return 20;
    };
    Quest.prototype.getTopLimit = function () {
        return 20;
    };
    Quest.prototype.getWormsLikeDisabled = function () {
        return this.wormsLikeDisabled;
    };
    // Public setters
    Quest.prototype.setGlobalDrawingOffset = function (globalDrawingOffset) {
        this.globalDrawingOffset = globalDrawingOffset;
    };
    Quest.prototype.setGravityDisabled = function (gravityDisabled) {
        this.gravityDisabled = gravityDisabled;
    };
    Quest.prototype.setWormsLikeDisabled = function (wormsLikeDisabled) {
        this.wormsLikeDisabled = wormsLikeDisabled;
    };
    // Private methods
    Quest.prototype.addPlayerSpell = function (playerSpell) {
        this.playerSpells.push(playerSpell);
        this.playerSpellsHotkeys.push(playerSpell.getHotkey());
    };
    Quest.prototype.createPlayerAcidDrop = function (position) {
        var acidDrop = new Fireball(this, position, new Naming("An acid drop", "an acid drop"), new Color(ColorType.PLAYER_ACID_DROP), new Pos(1, 1), 8, this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("An acid drop", "an acid drop")));
        // No target
        acidDrop.setTargetTypeNoTarget(new Pos(0, 1));
        // Return the acid drop
        return acidDrop;
    };
    Quest.prototype.createPlayerSpells = function () {
        // Add the spells
        if (Saving.loadBool("gridItemPossessedBeginnersGrimoire")) {
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellAcidRainButton", new Pos(0, 0), "Acid rain", new Color(ColorType.QUEST_BUTTON_ACID_RAIN), new CallbackCollection(this.castPlayerAcidRain.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "a"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellFireballButton", new Pos(11, 0), "Fireball", new Color(ColorType.QUEST_BUTTON_FIREBALL), new CallbackCollection(this.castPlayerFireball.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "f"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellTeleportButton", new Pos(21, 0), "Teleport", new Color(ColorType.QUEST_BUTTON_TELEPORT), new CallbackCollection(this.castPlayerTeleport.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "t"));
        }
        if (Saving.loadBool("gridItemPossessedAdvancedGrimoire")) {
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellEraseMagicButton", new Pos(33, 0), "Erase magic", new Color(ColorType.QUEST_BUTTON_ERASE_MAGIC), new CallbackCollection(this.castPlayerEraseMagic.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "e"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellThornsShieldButton", new Pos(46, 0), "Thorns shield", new Color(ColorType.QUEST_BUTTON_THORNS_SHIELD), new CallbackCollection(this.castPlayerThornsShield.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 6, " "));
        }
        if (Saving.loadBool("gridItemPossessedBlackMagicGrimoire")) {
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellObsidianWallButton", new Pos(63, 0), "Obsidian wall", new Color(ColorType.QUEST_BUTTON_OBSIDIAN_WALL), new CallbackCollection(this.castPlayerObsidianWall.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "o"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellBlackDemonsButton", new Pos(78, 0), "Black demons", new Color(ColorType.QUEST_BUTTON_BLACK_DEMONS), new CallbackCollection(this.castPlayerBlackDemons.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 6, "d"));
        }
        // Add the potions
        if (Saving.loadBool("questPlayerSpellHealthPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellHealthPotionButton", new Pos(0, 2), "Health", new Color(ColorType.QUEST_BUTTON_HEALTH_POTION), new CallbackCollection(this.castPlayerHealthPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "h", "questPlayerSpellHealthPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellTurtlePotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellTurtlePotionButton", new Pos(13, 2), "Turtle", new Color(ColorType.QUEST_BUTTON_TURTLE_POTION), new CallbackCollection(this.castPlayerTurtlePotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 2, "r", "questPlayerSpellTurtlePotionQuantity"));
        if (Saving.loadBool("questPlayerSpellAntiGravityPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellAntiGravityPotionButton", new Pos(26, 2), "Anti gravity", new Color(ColorType.QUEST_BUTTON_ANTI_GRAVITY_POTION), new CallbackCollection(this.castPlayerAntiGravityPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 5, "g", "questPlayerSpellAntiGravityPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellBerserkPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellBerserkPotionButton", new Pos(45, 2), "Berserk", new Color(ColorType.QUEST_BUTTON_BERSERK_POTION), new CallbackCollection(this.castPlayerBerserkPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "b", "questPlayerSpellBerserkPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellCloningPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellCloningPotionButton", new Pos(59, 2), "Cloning", new Color(ColorType.QUEST_BUTTON_CLONING_POTION), new CallbackCollection(this.castPlayerCloningPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "c", "questPlayerSpellCloningPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellPPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellPPotionButton", new Pos(73, 2), "P", new Color(ColorType.QUEST_BUTTON_P_POTION), new CallbackCollection(this.castPlayerPPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "p", "questPlayerSpellPPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellXPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellXPotionButton", new Pos(81, 2), "X", new Color(ColorType.QUEST_BUTTON_X_POTION), new CallbackCollection(this.castPlayerXPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "x", "questPlayerSpellXPotionQuantity"));
        // Add the capacities granted by objects
        if (Saving.loadBool("gridItemPossessedTimeRing"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellTimeSlowingButton", new Pos(0, 4), "Time slowing", new Color(ColorType.QUEST_BUTTON_SOME_OBJECT), new CallbackCollection(this.castPlayerTimeSlowing.bind(this)), QuestPlayerSpellCountdownType.ITEM_CAPACITIES, 0, 8, "w"));
        if (Saving.loadBool("gridItemPossessedPogoStick"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellJumpButton", new Pos(14, 4), "Jump", new Color(ColorType.QUEST_BUTTON_SOME_OBJECT), new CallbackCollection(this.castPlayerJump.bind(this)), QuestPlayerSpellCountdownType.ITEM_CAPACITIES, 0, 0, "j"));
        if (Saving.loadBool("gridItemPossessedSponge"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellSqueezeButton", new Pos(20, 4), "Squeeze", new Color(ColorType.QUEST_BUTTON_SOME_OBJECT), new CallbackCollection(this.castPlayerSqueeze.bind(this)), QuestPlayerSpellCountdownType.ITEM_CAPACITIES, 0, 0, "s"));
        // Add the special spell granted by the purple shark fin
        if (Saving.loadBool("gridItemPossessedPurpleSharkFin"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpell", new Pos(38, 4), "Black hole spell (purple shark fin) (once per quest)", new Color(ColorType.QUEST_BLACKHOLE_SPELL), new CallbackCollection(this.castPlayerBlackhole.bind(this)), QuestPlayerSpellCountdownType.BLACKHOLE, 1, 4, "k"));
        // Set the player spells height from the max height found in all the spells added
        this.playerSpellsHeight = 0;
        for (var i = 0; i < this.playerSpells.length; i++) {
            if (this.playerSpells[i].getButtonPosition().y > this.playerSpellsHeight)
                this.playerSpellsHeight = this.playerSpells[i].getButtonPosition().y;
        }
        this.playerSpellsHeight += 1; // Add one because for example if the highest spell is at 0 we need a 1 height
        this.playerSpellsHeight += 1; // Add one to make a clear separation with the real quest
    };
    Quest.prototype.drawPlayerSpells = function () {
        // If there's at least one player spell
        if (this.playerSpells.length > 0) {
            var baseXPosition = ((this.renderArea.getWidth() - 100) - this.getGap()) / 2;
            // Draw the spells
            for (var i = 0; i < this.playerSpells.length; i++) {
                this.playerSpells[i].draw(this.renderArea, new Pos(baseXPosition, 2));
            }
            // Draw the spell countdown
            if (this.playerSpellsCountdown > 0) {
                this.renderArea.drawString("(" + Math.ceil(this.playerSpellsCountdown / 10).toString() + " sec)", baseXPosition + 92, 2);
                this.renderArea.addColor(baseXPosition + 92, baseXPosition + 100, 2, new Color(ColorType.QUEST_COUNTDOWN));
            }
            // Draw the potion countdown
            if (this.playerPotionsCountdown > 0) {
                this.renderArea.drawString("(" + Math.ceil(this.playerPotionsCountdown / 10).toString() + " sec)", baseXPosition + 92, 4);
                this.renderArea.addColor(baseXPosition + 92, baseXPosition + 100, 4, new Color(ColorType.QUEST_COUNTDOWN));
            }
        }
    };
    Quest.prototype.drawQuestLog = function () {
        this.getGame().getQuestLog().draw(this.renderArea, new Pos(((this.renderArea.getWidth() - 100) - this.getGap()) / 2, this.renderArea.getHeight() - 12));
    };
    Quest.prototype.drawSpecialInstruction = function () {
        if (this.specialInstruction != null) {
            this.renderArea.drawString(this.specialInstruction, this.realQuestPosition.x, this.realQuestPosition.y - 1);
            this.renderArea.addBold(this.realQuestPosition.x, this.realQuestPosition.x + this.specialInstruction.length, this.realQuestPosition.y - 1);
        }
    };
    Quest.prototype.getMagicCountdownTime = function () {
        var time = 0;
        // If we have the sorceress hat, the base time is 50
        if (this.getGame().isEquipped("hat", "eqItemHatSorceressHat"))
            time = 50;
        else
            time = 80;
        // Reduce the time thanks to the magic gift
        time -= time * (Saving.loadNumber("gameGiftMagic") * 15 / 100);
        // Set the time to 0 if it is < 0 (which shouldn't happen anyway, but you know, since some people will probably modify the game variables by themselves it's better if we try to avoid bugs)
        if (time < 0)
            time = 0;
        // Return the time
        return time;
    };
    return Quest;
})(Place);
///<reference path="Quest.ts"/>
var Bridge = (function (_super) {
    __extends(Bridge, _super);
    // Constructor
    function Bridge(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(138, 32);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, false, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 17));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add a wall at the bridge position
        this.addBridgeFloor();
        // Add the troll
        this.addTroll();
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You're trying to cross the bridge. A huge troll is blocking your way!"));
    }
    // Public methods
    Bridge.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    Bridge.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to cross the bridge!"));
            Saving.saveBool("mainMapDoneBridge", true); // The bridge is done
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You didn't manage to cross the bridge."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Bridge.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/bridge/bridge"), this.getRealQuestPosition().x, this.getRealQuestPosition().y + 17);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Bridge.prototype.addBridgeFloor = function () {
        // Create the wall
        var wall = new Wall(this, new Pos(0, 18));
        // Add boxes
        wall.addBox(new Pos(0, 0), new Pos(138, 2));
        wall.addBox(new Pos(3, 2), new Pos(10, 1));
        wall.addBox(new Pos(6, 3), new Pos(4, 11));
        wall.addBox(new Pos(64, 2), new Pos(10, 1));
        wall.addBox(new Pos(67, 3), new Pos(4, 11));
        wall.addBox(new Pos(126, 2), new Pos(10, 1));
        wall.addBox(new Pos(129, 3), new Pos(4, 11));
        // Add the wall to the quest
        this.addEntity(wall);
    };
    Bridge.prototype.addTroll = function () {
        var troll = new Troll(this, new Pos(100, 8));
        troll.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0), 12));
        troll.setHealthBar(new QuestEntityHealthBar(troll, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(troll);
    };
    Bridge.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 138)
            return true;
        // Else we return false
        return false;
    };
    return Bridge;
})(Quest);
var Bugs;
(function (Bugs) {
    // Variables
    var graphicalBugLevel = 0;
    var questBugLevel = 0;
    var ultimateBugLevel = 0;
    // Various functions
    function changeRandomCharacter(str) {
        var index = Random.between(0, str.length - 1);
        return str.substr(0, index) + getRandomCharacter() + str.substr(index + 1);
    }
    Bugs.changeRandomCharacter = changeRandomCharacter;
    function getRandomCharacter() {
        return Random.fromArray(["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
            "#", "_", "/", "-", "+", "*", "^", ";", ",", ".", ":", "!", "Â§", "$", "Â£", "Ã¹", "Ã¨", "Ã ", "@", ")", "(", "|", "]", "}", "{", "(",
            "~", "Ã©", "<", ">", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "%", "`", "'", "Ã§"]);
    }
    Bugs.getRandomCharacter = getRandomCharacter;
    // Getters
    function getGraphicalBugLevel() {
        return graphicalBugLevel;
    }
    Bugs.getGraphicalBugLevel = getGraphicalBugLevel;
    function getQuestBugLevel() {
        return questBugLevel;
    }
    Bugs.getQuestBugLevel = getQuestBugLevel;
    function getUltimateBugLevel() {
        return ultimateBugLevel;
    }
    Bugs.getUltimateBugLevel = getUltimateBugLevel;
    // Setters    
    function setGraphicalBugLevel(graphicalBugLevel_) {
        graphicalBugLevel = graphicalBugLevel_;
    }
    Bugs.setGraphicalBugLevel = setGraphicalBugLevel;
    function setQuestBugLevel(questBugLevel_) {
        questBugLevel = questBugLevel_;
    }
    Bugs.setQuestBugLevel = setQuestBugLevel;
    function setUltimateBugLevel(ultimateBugLevel_) {
        ultimateBugLevel = ultimateBugLevel_;
    }
    Bugs.setUltimateBugLevel = setUltimateBugLevel;
})(Bugs || (Bugs = {}));
///<reference path="QuestEntity.ts"/>
var Camazotz = (function (_super) {
    __extends(Camazotz, _super);
    // Constructor
    function Camazotz(quest, pos) {
        _super.call(this, quest, pos, new Naming("Camazotz, the bat god", "Camazotz, the bat god"), new RenderArea(22, 8), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(8, 1), new Pos(6, 2)), new CollisionBox(this, new Pos(2, 3), new Pos(18, 1)), new CollisionBox(this, new Pos(1, 4), new Pos(20, 1)), new CollisionBox(this, new Pos(0, 5), new Pos(22, 1)), new CollisionBox(this, new Pos(9, 6), new Pos(4, 1)), new CollisionBox(this, new Pos(10, 7), new Pos(2, 1))), new QuestEntityMovement());
        // Set the drop a demon timer default value
        this.resetDropADemonTimer();
        // Set the default distance from the player
        this.distanceFromPlayer = 5;
        // Set the default tryToMoveAgainTimer
        this.tryToMoveAgainTimer = 0;
        // Set gravity
        this.getQuestEntityMovement().setGravity(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(5000);
        this.setHp(5000);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/camazotz"));
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its claws", "its claws"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(24, 9))), 300));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(20, 100); // This delay because Camazotz is quite busy throwing enemies to the player
    }
    // update()
    Camazotz.prototype.update = function () {
        // Handle the movement towards the player
        this.handleMovementTowardsPlayer();
        // Handle demon dropping
        this.handleDropADemon();
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willeDie()
    Camazotz.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1000000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    // Private methods
    Camazotz.prototype.dropADemon = function () {
        // Create the demon
        var demon = new Demon(this.getQuest(), this.getGlobalPosition().plus(new Pos(8, 8)));
        // Set the health bar
        demon.setHealthBar(new QuestEntityHealthBar(demon, new Pos(6, 1)));
        // Add the demon
        this.getQuest().addEntity(demon);
    };
    Camazotz.prototype.handleDropADemon = function () {
        // If it's time to add one
        if (this.dropADemonTimer < 0) {
            // Drop a demon and reset the timer
            this.dropADemon();
            this.resetDropADemonTimer();
        }
        else {
            // Decrese the timer
            this.dropADemonTimer -= 1;
        }
    };
    Camazotz.prototype.handleMovementTowardsPlayer = function () {
        // If we try to move
        if (this.tryToMoveAgainTimer <= 0) {
            // We go towards the player
            this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(this.distanceFromPlayer, 0)), 2, new Pos(2, 0), true);
            // We'll try to move again in 3 frames
            this.tryToMoveAgainTimer = 3;
        }
        else {
            this.tryToMoveAgainTimer -= 1;
        }
    };
    Camazotz.prototype.resetDropADemonTimer = function () {
        this.dropADemonTimer = Random.between(8, 12);
    };
    return Camazotz;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Camel = (function (_super) {
    __extends(Camel, _super);
    // Constructor
    function Camel(quest, pos) {
        _super.call(this, quest, pos, new Naming("A camel", "a camel"), new RenderArea(7, 2), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 1)), new CollisionBox(this, new Pos(2, 1), new Pos(5, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(7);
        this.setHp(7);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/camel"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its long neck", "its long neck"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(3, 3))), 5));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(5, 7);
    }
    // Public methods
    Camel.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(5 + Random.upTo(5)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return Camel;
})(QuestEntity);
///<reference path="Resource.ts"/>
var StatusBarResource = (function (_super) {
    __extends(StatusBarResource, _super);
    // Constructor
    function StatusBarResource(game, savingPrefix) {
        _super.call(this, savingPrefix);
        this.game = game;
    }
    // Public setters
    StatusBarResource.prototype.setCurrent = function (n, reCalcPlayerMaxHp) {
        if (reCalcPlayerMaxHp === void 0) { reCalcPlayerMaxHp = false; }
        _super.prototype.setCurrent.call(this, n);
        if (reCalcPlayerMaxHp)
            this.game.getPlayer().reCalcMaxHp();
        else
            this.game.updateStatusBar();
    };
    return StatusBarResource;
})(Resource);
///<reference path="StatusBarResource.ts"/>
var CandiesEaten = (function (_super) {
    __extends(CandiesEaten, _super);
    // Constructor
    function CandiesEaten(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    CandiesEaten.prototype.getCurrentAsString = function () {
        var n = this.getCurrent();
        if (n < 0)
            return "You have eaten negative candies ?!";
        else if (n == 1)
            return "You have eaten 1 candy";
        else {
            return "You have eaten " + Algo.numberToStringButNicely(n) + " candies";
        }
    };
    // Public setters
    CandiesEaten.prototype.setCurrent = function (n) {
        _super.prototype.setCurrent.call(this, n, true);
    };
    return CandiesEaten;
})(StatusBarResource);
var CandiesThrownSmileyCaveObject = (function () {
    // Constructor
    function CandiesThrownSmileyCaveObject(str, position) {
        this.str = str;
        this.position = position;
    }
    // Public getters
    CandiesThrownSmileyCaveObject.prototype.getPosition = function () {
        return this.position;
    };
    CandiesThrownSmileyCaveObject.prototype.getStr = function () {
        return this.str;
    };
    return CandiesThrownSmileyCaveObject;
})();
var CandiesThrownSmileyCaveStep;
(function (CandiesThrownSmileyCaveStep) {
    CandiesThrownSmileyCaveStep[CandiesThrownSmileyCaveStep["FIRST_ROOM"] = 0] = "FIRST_ROOM";
    CandiesThrownSmileyCaveStep[CandiesThrownSmileyCaveStep["SECOND_ROOM"] = 1] = "SECOND_ROOM";
    CandiesThrownSmileyCaveStep[CandiesThrownSmileyCaveStep["THIRD_ROOM"] = 2] = "THIRD_ROOM";
})(CandiesThrownSmileyCaveStep || (CandiesThrownSmileyCaveStep = {}));
var CandiesThrownSmiley = (function () {
    // Constructor
    function CandiesThrownSmiley() {
    }
    // Public methods
    CandiesThrownSmiley.prototype.draw = function (renderArea, x, y, base) {
        // We're in the mother class, so we just draw nothing and return 0
        return 0;
    };
    return CandiesThrownSmiley;
})();
///<reference path="CandiesThrownSmiley.ts"/>
var CandiesThrownSmileyCave = (function (_super) {
    __extends(CandiesThrownSmileyCave, _super);
    // Constructor
    function CandiesThrownSmileyCave(smiley, smileyPosition, step) {
        if (step === void 0) { step = CandiesThrownSmileyCaveStep.FIRST_ROOM; }
        _super.call(this);
        // Various objects (can be speeches, for example)
        this.objects = [];
        // Is the chest open ? (closed by default)
        this.chestOpened = false;
        this.smiley = smiley;
        this.smileyPosition = smileyPosition;
        this.step = step;
    }
    // draw()
    CandiesThrownSmileyCave.prototype.draw = function (renderArea, x, y, base) {
        // Draw the base
        renderArea.drawString(base, x, y);
        // Draw the cave's walls, depending on the step
        renderArea.drawVerticalLine("|", 0, y + 2, y + 8); // Left wall
        renderArea.drawVerticalLine("|", 62, y, y + 8); // Right wall
        renderArea.drawHorizontalLine("_", 0, 57, y + 1); // Roof
        renderArea.drawString("|", 56, y + 1); // Additional character
        switch (this.step) {
            // Only third room
            case CandiesThrownSmileyCaveStep.THIRD_ROOM:
                renderArea.drawHorizontalLine("-", 12, 62, y + 16); // Floor
                renderArea.drawVerticalLine("|", 62, y + 9, y + 16); // Right wall
                renderArea.drawArray(Database.getAscii("general/candyRoom"), 12, y + 9); // Content of the room
            // Second & third room
            case CandiesThrownSmileyCaveStep.SECOND_ROOM:
                // Floor of the first room (we must make it in two pieces because there's a hole!)
                renderArea.drawHorizontalLine("-", 1, 4, y + 8); // Left
                renderArea.drawHorizontalLine("-", 9, 62, y + 8); // Right
                // Rest of the room
                renderArea.drawVerticalLine("|", 0, y + 9, y + 16); // Left wall
                renderArea.drawVerticalLine("|", 11, y + 9, y + 14); // Right wall
                renderArea.drawHorizontalLine("-", 1, 12, y + 16); // Floor
                break;
            // Only first room
            case CandiesThrownSmileyCaveStep.FIRST_ROOM:
                renderArea.drawHorizontalLine("-", 1, 62, y + 8); // Floor
                break;
        }
        // Draw the chest
        renderArea.drawString("|_|", 1, y + 7);
        if (this.chestOpened == false)
            renderArea.drawString("_", 2, y + 6);
        else
            renderArea.drawString("(", 1, y + 6);
        // Draw the smiley
        renderArea.drawString(this.smiley, x + this.smileyPosition.x, y + this.smileyPosition.y);
        // Draw objects
        for (var i = 0; i < this.objects.length; i++) {
            renderArea.drawString(this.objects[i].getStr(), x + this.objects[i].getPosition().x, y + this.objects[i].getPosition().y);
        }
        // Return the cave's height
        switch (this.step) {
            case CandiesThrownSmileyCaveStep.FIRST_ROOM:
                return 8;
                break;
            case CandiesThrownSmileyCaveStep.SECOND_ROOM:
            case CandiesThrownSmileyCaveStep.THIRD_ROOM:
                return 16;
                break;
        }
    };
    // Public methods used to add or change stuff (always return ourselves)
    CandiesThrownSmileyCave.prototype.addObject = function (object) {
        this.objects.push(object);
        return this;
    };
    CandiesThrownSmileyCave.prototype.openChest = function () {
        this.chestOpened = true;
        return this;
    };
    return CandiesThrownSmileyCave;
})(CandiesThrownSmiley);
///<reference path="CandiesThrownSmiley.ts"/>
var CandiesThrownSmileyFirstLine = (function (_super) {
    __extends(CandiesThrownSmileyFirstLine, _super);
    // Constructor
    function CandiesThrownSmileyFirstLine(line) {
        _super.call(this);
        this.line = line;
    }
    // draw()
    CandiesThrownSmileyFirstLine.prototype.draw = function (renderArea, x, y, base) {
        renderArea.drawString(base + this.line, x, y);
        return 0;
    };
    return CandiesThrownSmileyFirstLine;
})(CandiesThrownSmiley);
///<reference path="Resource.ts"/>
Saving.registerBool("candiesThrownGotChocolateBar", false);
var CandiesThrown = (function (_super) {
    __extends(CandiesThrown, _super);
    // Constructor
    function CandiesThrown(game, savingPrefix) {
        _super.call(this, savingPrefix);
        // Smileys
        this.smileys = [new CandiesThrownSmileyFirstLine("."),
            new CandiesThrownSmileyFirstLine("..."),
            new CandiesThrownSmileyFirstLine("...?"),
            new CandiesThrownSmileyFirstLine("...? :|"),
            new CandiesThrownSmileyFirstLine("...? :/"),
            new CandiesThrownSmileyFirstLine("...? :("),
            new CandiesThrownSmileyFirstLine("...? :["),
            new CandiesThrownSmileyFirstLine("...? :{"),
            new CandiesThrownSmileyFirstLine("...? :'("),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?  (;_;)"),
            new CandiesThrownSmileyFirstLine("...?   (;_;)"),
            new CandiesThrownSmileyFirstLine("...?    (;_;)"),
            new CandiesThrownSmileyFirstLine("...?   (;_;)"),
            new CandiesThrownSmileyFirstLine("...?  (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;__;)"),
            new CandiesThrownSmileyFirstLine("...? (;___;)"),
            new CandiesThrownSmileyFirstLine("...? (;__;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;.;)"),
            new CandiesThrownSmileyFirstLine("...? (:.:)"),
            new CandiesThrownSmileyFirstLine("...? (:_:)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?(;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?(;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?(;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;) come"),
            new CandiesThrownSmileyFirstLine("...? (;_;) come on"),
            new CandiesThrownSmileyFirstLine("...? (-_-) come on"),
            new CandiesThrownSmileyFirstLine("...? (-_-)"),
            new CandiesThrownSmileyFirstLine("...? (-_-) why are you throwing candies like that?"),
            new CandiesThrownSmileyFirstLine("...? (o_o)"),
            new CandiesThrownSmileyFirstLine("...? (o_o) I'm gonna destroy something if you don't stop!!"),
            new CandiesThrownSmileyFirstLine("...? (o_o)"),
            new CandiesThrownSmileyFirstLine("...?  (o_o)"),
            new CandiesThrownSmileyFirstLine("...?   (o_o)"),
            new CandiesThrownSmileyFirstLine("...?    (o_o)"),
            new CandiesThrownSmileyFirstLine("...?     (o_o)"),
            new CandiesThrownSmileyFirstLine("...?      (o_o)"),
            new CandiesThrownSmileyFirstLine("...?       (o_o)"),
            new CandiesThrownSmileyFirstLine("...?       (O_O)"),
            new CandiesThrownSmileyFirstLine("...?      (O_O)"),
            new CandiesThrownSmileyFirstLine("...?     (O_O)"),
            new CandiesThrownSmileyFirstLine("...?    (O_O)"),
            new CandiesThrownSmileyFirstLine("...?   (O_O)"),
            new CandiesThrownSmileyFirstLine("...?  (O_O)"),
            new CandiesThrownSmileyFirstLine("...? (O_O)"),
            new CandiesThrownSmileyFirstLine("...?(O_O)"),
            new CandiesThrownSmileyFirstLine("...(O_O)"),
            new CandiesThrownSmileyFirstLine("..(O_O)"),
            new CandiesThrownSmileyFirstLine(".(O_O)"),
            new CandiesThrownSmileyFirstLine("(O_O)"),
            new CandiesThrownSmileyFirstLine(" (O_O)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o) stop!!"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (;_;)"),
            new CandiesThrownSmileyFirstLine(" (;_;) well."),
            new CandiesThrownSmileyFirstLine(" (;_;) I guess I'll just leave, then."),
            new CandiesThrownSmileyFirstLine("  (;_;)"),
            new CandiesThrownSmileyFirstLine("   (;_;)"),
            new CandiesThrownSmileyFirstLine("    (;_;)"),
            new CandiesThrownSmileyFirstLine("     (;_;)"),
            new CandiesThrownSmileyFirstLine("      (;_;)"),
            new CandiesThrownSmileyFirstLine("       (;_;)"),
            new CandiesThrownSmileyFirstLine("        (;_;)"),
            new CandiesThrownSmileyFirstLine("         (;_;)"),
            new CandiesThrownSmileyFirstLine("          (;_;)"),
            new CandiesThrownSmileyFirstLine("           (;_;)"),
            new CandiesThrownSmileyFirstLine("            (;_;)"),
            new CandiesThrownSmileyFirstLine("             (;_;)"),
            new CandiesThrownSmileyFirstLine("              (;_;)"),
            new CandiesThrownSmileyFirstLine("               (;_;)"),
            new CandiesThrownSmileyFirstLine("                (;_;)"),
            new CandiesThrownSmileyFirstLine("                 (;_;)"),
            new CandiesThrownSmileyFirstLine("                  (;_;)"),
            new CandiesThrownSmileyFirstLine("                   (;_;)"),
            new CandiesThrownSmileyFirstLine("                    (;_;)"),
            new CandiesThrownSmileyFirstLine("                     (;_;)"),
            new CandiesThrownSmileyFirstLine("                      (;_;)"),
            new CandiesThrownSmileyFirstLine("                      (;_;)|"),
            new CandiesThrownSmileyFirstLine("                      (o_o)|"),
            new CandiesThrownSmileyFirstLine("                 crap (o_o)|"),
            new CandiesThrownSmileyFirstLine("               a wall (o_o)|"),
            new CandiesThrownSmileyFirstLine("                      (._.)|"),
            new CandiesThrownSmileyFirstLine("     I'm trapped here (._.)|"),
            new CandiesThrownSmileyFirstLine("    maybe...          (._.)|"),
            new CandiesThrownSmileyFirstLine("    maybe I could dig (._.)|"),
            new CandiesThrownSmileyFirstLine("    dig in the ground (._.)|"),
            new CandiesThrownSmileyFirstLine("                      (._.)|"),
            new CandiesThrownSmileyFirstLine("                *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 1)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 2)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 3)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 4)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 5)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 6)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)).addObject(new CandiesThrownSmileyCaveObject("wow.", new Pos(52, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)).addObject(new CandiesThrownSmileyCaveObject("I didn't expect that.", new Pos(35, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(55, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(53, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(51, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(49, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(47, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(45, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(45, 7)).addObject(new CandiesThrownSmileyCaveObject("what's this place?", new Pos(39, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(45, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(43, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(41, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(39, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(37, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(35, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(33, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(33, 7)).addObject(new CandiesThrownSmileyCaveObject("it looks like a cave", new Pos(26, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(33, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(31, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(29, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(27, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(25, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(23, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(21, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(19, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(19, 7)).addObject(new CandiesThrownSmileyCaveObject("oh! there's a chest over there!", new Pos(8, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(19, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(17, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(15, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(13, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(11, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(9, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(7, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(5, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I guess I should open it", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).openChest(),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("!!!", new Pos(5, 5))).openChest(),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I found a chocolate bar!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("...", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("hey, listen", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I'll give you the chocolate bar", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("if you swear to stop throwing candies", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("okay?", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("throw 10 last candies to let me know if you agree", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("good. here's the bar. no more throwing!!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("Hey?!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("You're still throwing candies!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("Candies are precious, you know.", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("...", new Pos(5, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I'm out of here.", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 8), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 9), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 10), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 11), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 12), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 13), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 14), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 15), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(6, 15), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(8, 15), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(10, 15), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(12, 15), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 15), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 14), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 13), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 12), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(13, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(15, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(17, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("this is...", new Pos(13, 9))),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("a room...", new Pos(13, 9))),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("FULL OF GIANT CANDIES!", new Pos(33, 9))),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("well", new Pos(16, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("don't worry about the candies you threw", new Pos(6, 7))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("just let me eat those candies and you're forgiven", new Pos(6, 7))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("<3", new Pos(17, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(20, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(22, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(22, 10), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(23, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(25, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(27, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(29, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(31, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(33, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(34, 10), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(34, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(36, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(38, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(40, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(42, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
        ];
        // *nom* *nom* smileys
        this.nomNomSmileys = [new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(40, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(41, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(42, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(43, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(44, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(45, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(46, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom* *nom*", new Pos(40, 9))),
        ];
        // Index of the *nom* *nom* smiley we show
        this.nomNomSmileyIndex = 0;
        this.game = game;
    }
    // Public methods
    CandiesThrown.prototype.add = function (n) {
        // We save the return value
        var returnValue = _super.prototype.add.call(this, n);
        // If it's time to get this chocolate bar, we get it
        if (Saving.loadBool("candiesThrownGotChocolateBar") == false && Math.floor(this.getCurrent() / 10) - 1 == 162) {
            this.game.getChocolateBars().add(1);
            Saving.saveBool("candiesThrownGotChocolateBar", true);
        }
        // We choose a random *nom* *nom* smiley index in case we're at this step of the animation
        this.nomNomSmileyIndex = Random.between(0, this.nomNomSmileys.length - 1);
        // We return the return value
        return returnValue;
    };
    CandiesThrown.prototype.draw = function (renderArea, x, y) {
        var n = this.getCurrent();
        var smileyIndex;
        var base;
        // Set the base
        if (n < 0)
            base = "You threw negative candies ?!";
        else if (n == 1)
            base = "You threw 1 candy on the ground";
        else {
            base = "You threw " + Algo.numberToStringButNicely(n) + " candies on the ground";
        }
        // Get the index of the smiley we should add
        smileyIndex = Math.floor(n / 10) - 1;
        // Add a smiley from the smileys array if the index is correct
        if (smileyIndex >= 0 && smileyIndex < this.smileys.length) {
            // Draw the smiley and return the correct y gap
            return this.smileys[smileyIndex].draw(renderArea, x, y, base);
        }
        else if (smileyIndex < 0) {
            // We just draw the base and return 0
            renderArea.drawString(base, x, y);
            return 0;
        }
        else {
            // Draw the smiley and return the correct y gap
            return this.nomNomSmileys[this.nomNomSmileyIndex].draw(renderArea, x, y, base);
        }
    };
    return CandiesThrown;
})(Resource);
///<reference path="StatusBarResource.ts"/>
var Candies = (function (_super) {
    __extends(Candies, _super);
    // Constructor
    function Candies(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    Candies.prototype.getCurrentAsString = function (totalSize) {
        if (totalSize === void 0) { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;
        var base = "";
        var prefix = "";
        var suffix = "";
        var comment = "";
        // We set the base or return right now in some special cases
        if (n < 0)
            return "What, negative candies?!";
        else if (n == 1)
            return "You have 1 candy";
        else {
            if (n == 1337)
                base = "leet";
            else
                base = Algo.numberToStringButNicely(n);
        }
        // How much space do we still have ?
        size = totalSize - base.length;
        // We set the suffix
        if (size >= 8) {
            suffix = " candies";
            // We add a prefix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;
            // We set the prefix
            if (size >= 9)
                prefix = "You have ";
            else if (size >= 3)
                prefix = "-> ";
        }
        else if (size >= 4)
            suffix = " cnd";
        else if (size >= 2)
            suffix = " c";
        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;
        // We possibly set a comment
        if (n == 42 && size >= 4)
            comment = " \\o/";
        else if ((n == 65535 || n == 314159) && size >= 1)
            comment = "!";
        return prefix + base + suffix + comment;
    };
    return Candies;
})(StatusBarResource);
///<reference path="Place.ts"/>
Saving.registerBool("candyBoxBoxOpened", false);
var CandyBox = (function (_super) {
    __extends(CandyBox, _super);
    // Constructor
    function CandyBox(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.eatButtonShown = false;
        this.throwButtonShown = false;
        this.requestFeatureButtonShown = false;
        // Resize the area
        this.renderArea.resize(100, 40);
        // Update
        this.update();
    }
    // willBeDisplayed()
    CandyBox.prototype.willBeDisplayed = function () {
        // We check right now
        this.checkCandies();
        // And we add the callback
        this.getGame().getCandies().getCallbackCollection().addCallback(this.checkCandies.bind(this));
        // We add hotkeys
        this.getGame().addHotkey(new Hotkey("e", new CallbackCollection(this.clickedEatCandiesButton.bind(this))));
        this.getGame().addHotkey(new Hotkey("t", new CallbackCollection(this.clickedThrowCandiesButton.bind(this))));
    };
    // Public methods
    CandyBox.prototype.update = function () {
        // Y gap for everything below the throwing candies stuff (because the throwing candies stuff can be extended a lot)
        var yGapForEverythingBelowTheThrowingCandiesStuff = 0;
        // Erase everything
        this.renderArea.resetAllButSize();
        // Draw the box
        if (Saving.loadBool("lonelyHouseTakeTheBoxDone")) {
            if (Saving.loadBool("candyBoxBoxOpened") == true)
                this.renderArea.drawArray(Database.getAscii("general/openBox"), 68, 4);
            else
                this.renderArea.drawArray(Database.getAscii("general/box"), 68, 4);
        }
        // If we possess the talking candy
        if (Saving.loadBool("gridItemPossessedTalkingCandy") == true) {
            // Draw the ascii art
            this.renderArea.drawArray(Database.getAscii("gridItems/talkingCandy"), 68, 37);
            // If we don't have the box yet
            if (Saving.loadBool("lonelyHouseTakeTheBoxDone") == false) {
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("talkingCandySpeechNoBox"), 30, 72, 98, "candyBoxTalkingCandySpeech", Database.getTranslatedText("talkingCandySpeechNoBox"));
            }
            else {
                // If the talking candy already opened the box
                if (Saving.loadBool("candyBoxBoxOpened")) {
                    // Draw the speech
                    this.renderArea.drawSpeech(Database.getText("talkingCandySpeech2"), 34, 72, 98, "candyBoxTalkingCandySpeech", Database.getTranslatedText("talkingCandySpeech2"));
                }
                else {
                    // Draw the speech
                    this.renderArea.drawSpeech(Database.getText("talkingCandySpeech1"), 30, 72, 98, "candyBoxTalkingCandySpeech", Database.getTranslatedText("talkingCandySpeech1"));
                    // Add the button
                    this.renderArea.addAsciiRealButton(Database.getText("talkingCandyButton"), 80, 37, "candyBoxTalkingCandyButton", Database.getTranslatedText("talkingCandyButton"));
                    this.renderArea.addLinkCall(".candyBoxTalkingCandyButton", new CallbackCollection(this.openBox.bind(this)));
                }
            }
        }
        // Eat all the candies
        if (this.eatButtonShown) {
            this.renderArea.addAsciiRealButton(Database.getText("candyBoxEatCandiesButton"), 0, 1, "candyBoxEatCandiesButton", Database.getTranslatedText("candyBoxEatCandiesButton"), false, 0);
            this.renderArea.addLinkCall(".candyBoxEatCandiesButton", new CallbackCollection(this.clickedEatCandiesButton.bind(this)));
            if (this.getGame().getCandiesEaten().getCurrent() != 0)
                this.renderArea.drawString(this.getGame().getCandiesEaten().getCurrentAsString(), 0, 3);
        }
        // Throw 10 candies
        if (this.throwButtonShown) {
            this.renderArea.addAsciiRealButton(Database.getText("candyBoxThrowCandiesButton"), 0, 6, "candyBoxThrowCandiesButton", Database.getTranslatedText("candyBoxThrowCandiesButton"), false, 0);
            this.renderArea.addLinkCall(".candyBoxThrowCandiesButton", new CallbackCollection(this.clickedThrowCandiesButton.bind(this)));
            if (this.getGame().getCandiesThrown().getCurrent() != 0) {
                yGapForEverythingBelowTheThrowingCandiesStuff = this.getGame().getCandiesThrown().draw(this.renderArea, 0, 8); // Set the yGap..
            }
        }
        // Request feature
        if (this.requestFeatureButtonShown) {
            if (Saving.loadBool("statusBarUnlocked") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlocked"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlocked"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedButton", new CallbackCollection(this.requestStatusBarUnlocked.bind(this)));
            }
            else if (Saving.loadBool("statusBarUnlockedCfg") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedCfg"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedCfgButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedCfg"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedCfgButton", new CallbackCollection(this.requestStatusBarUnlockedCfg.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedComment"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedComment"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            }
            else if (Saving.loadBool("statusBarUnlockedSave") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedSave"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedSaveButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedSave"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedSaveButton", new CallbackCollection(this.requestStatusBarUnlockedSave.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedCfgComment1"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedCfgComment2"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedCfgComment1"), 0, 16 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedCfgComment2"), 0, 17 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            }
            else if (Saving.loadBool("statusBarUnlockedHealthBar") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedHealthBar"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedHealthBarButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedHealthBar"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedHealthBarButton", new CallbackCollection(this.requestStatusBarUnlockedHealthBar.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedSaveComment"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedSaveComment"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            }
            else if (Saving.loadBool("statusBarUnlockedMap") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedMap"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedMapButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedMap"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedMapButton", new CallbackCollection(this.requestStatusBarUnlockedMap.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedHealthBarComment"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedHealthBarComment"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            }
        }
    };
    // getRenderArea()
    CandyBox.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    CandyBox.prototype.checkCandies = function () {
        // Possibly show the eat button
        if (this.eatButtonShown == false) {
            if (this.getGame().getCandies().getMax() > 0) {
                this.eatButtonShown = true;
                this.update();
                this.getGame().updatePlace();
            }
        }
        // Possibly show the throw button
        if (this.throwButtonShown == false) {
            if (this.getGame().getCandies().getMax() >= 10) {
                this.throwButtonShown = true;
                this.update();
                this.getGame().updatePlace();
            }
        }
        // Possibly show the request feature button
        if (this.requestFeatureButtonShown == false) {
            // If we have enough candies & the last feature isn't unlocked yet
            if (this.getGame().getCandies().getMax() >= 30 && Saving.loadBool("statusBarUnlockedMap") == false) {
                this.requestFeatureButtonShown = true;
                this.update();
                this.getGame().updatePlace();
            }
        }
    };
    CandyBox.prototype.clickedEatCandiesButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 1) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesEaten());
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.clickedThrowCandiesButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 10) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesThrown(), 10);
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.openBox = function () {
        // The box is now opened
        Saving.saveBool("candyBoxBoxOpened", true);
        // The tabs are unlocked
        Saving.saveBool("statusBarUnlockedInsideYourBox", true);
        Saving.saveBool("statusBarUnlockedTheComputer", true);
        Saving.saveBool("statusBarUnlockedTheArena", true);
        this.getGame().updateStatusBar(true);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    CandyBox.prototype.requestStatusBarUnlocked = function () {
        if (this.getGame().getCandies().getCurrent() >= 30) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 30);
            Saving.saveBool("statusBarUnlocked", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.requestStatusBarUnlockedCfg = function () {
        if (this.getGame().getCandies().getCurrent() >= 5) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 5);
            Saving.saveBool("statusBarUnlockedCfg", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.requestStatusBarUnlockedHealthBar = function () {
        if (this.getGame().getCandies().getCurrent() >= 5) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 5);
            Saving.saveBool("statusBarUnlockedHealthBar", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.requestStatusBarUnlockedMap = function () {
        if (this.getGame().getCandies().getCurrent() >= 10) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 10);
            Saving.saveBool("statusBarUnlockedMap", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    CandyBox.prototype.requestStatusBarUnlockedSave = function () {
        if (this.getGame().getCandies().getCurrent() >= 5) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 5);
            Saving.saveBool("statusBarUnlockedSave", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    return CandyBox;
})(Place);
var CandyMerchantItem = (function () {
    // Constructor
    function CandyMerchantItem(game, savingBool, asciiName, asciiPosition, merchantSpeech, price, buttonText, buttonName) {
        this.game = game;
        this.savingBool = savingBool;
        this.asciiName = asciiName;
        this.asciiPosition = asciiPosition;
        this.merchantSpeech = merchantSpeech;
        this.price = price;
        this.buttonText = buttonText;
        this.buttonName = buttonName;
    }
    // Public methods
    CandyMerchantItem.prototype.buy = function () {
        // We tell the saving system that this item is bought
        Saving.saveBool(this.savingBool, true);
    };
    CandyMerchantItem.prototype.canBeBought = function () {
        // If it's already bought, we return false
        if (this.isBought())
            return false;
        return true;
    };
    CandyMerchantItem.prototype.canBeClicked = function () {
        // If it's already bought, we return false
        if (this.isBought())
            return false;
        return true;
    };
    CandyMerchantItem.prototype.canBeShown = function () {
        // If it's already bought, we return false
        if (this.isBought())
            return false;
        return true;
    };
    CandyMerchantItem.prototype.isBought = function () {
        return Saving.loadBool(this.savingBool);
    };
    // Public getters
    CandyMerchantItem.prototype.getAsciiName = function () {
        return this.asciiName;
    };
    CandyMerchantItem.prototype.getAsciiPosition = function () {
        return this.asciiPosition;
    };
    CandyMerchantItem.prototype.getButtonName = function () {
        return this.buttonName;
    };
    CandyMerchantItem.prototype.getButtonText = function () {
        return this.buttonText;
    };
    CandyMerchantItem.prototype.getGame = function () {
        return this.game;
    };
    CandyMerchantItem.prototype.getMerchantSpeech = function () {
        return this.merchantSpeech;
    };
    CandyMerchantItem.prototype.getPrice = function () {
        return this.price;
    };
    return CandyMerchantItem;
})();
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_ChocolateBar = (function (_super) {
    __extends(CandyMerchantItem_ChocolateBar, _super);
    function CandyMerchantItem_ChocolateBar() {
        _super.apply(this, arguments);
    }
    // When we buy, we get one chocolate bar
    CandyMerchantItem_ChocolateBar.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().getChocolateBars().add(1);
    };
    return CandyMerchantItem_ChocolateBar;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_LeatherBoots = (function (_super) {
    __extends(CandyMerchantItem_LeatherBoots, _super);
    function CandyMerchantItem_LeatherBoots() {
        _super.apply(this, arguments);
    }
    // The item can't be shown if the inventory isn't shown yet
    CandyMerchantItem_LeatherBoots.prototype.canBeShown = function () {
        if (_super.prototype.canBeShown.call(this) == false)
            return false;
        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;
        return true;
    };
    return CandyMerchantItem_LeatherBoots;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_LeatherGloves = (function (_super) {
    __extends(CandyMerchantItem_LeatherGloves, _super);
    function CandyMerchantItem_LeatherGloves() {
        _super.apply(this, arguments);
    }
    // The item can't be shown if the inventory isn't shown yet
    CandyMerchantItem_LeatherGloves.prototype.canBeShown = function () {
        if (_super.prototype.canBeShown.call(this) == false)
            return false;
        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;
        return true;
    };
    return CandyMerchantItem_LeatherGloves;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_Lollipop = (function (_super) {
    __extends(CandyMerchantItem_Lollipop, _super);
    function CandyMerchantItem_Lollipop() {
        _super.apply(this, arguments);
    }
    // When we buy, we get one lollipop
    CandyMerchantItem_Lollipop.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().getLollipops().add(1);
    };
    return CandyMerchantItem_Lollipop;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_MerchantHat = (function (_super) {
    __extends(CandyMerchantItem_MerchantHat, _super);
    function CandyMerchantItem_MerchantHat() {
        _super.apply(this, arguments);
    }
    // When we buy, we get the merchant hat
    CandyMerchantItem_MerchantHat.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().gainItem("eqItemHatMerchantHat");
    };
    // The item can't be clicked if the inventory isn't shown yet
    CandyMerchantItem_MerchantHat.prototype.canBeClicked = function () {
        if (_super.prototype.canBeClicked.call(this) == false)
            return false;
        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;
        return true;
    };
    return CandyMerchantItem_MerchantHat;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_TimeRing = (function (_super) {
    __extends(CandyMerchantItem_TimeRing, _super);
    function CandyMerchantItem_TimeRing() {
        _super.apply(this, arguments);
    }
    // When we buy, we get the time ring
    CandyMerchantItem_TimeRing.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().gainItem("gridItemPossessedTimeRing");
    };
    // The item can't be shown if the inventory isn't shown yet
    CandyMerchantItem_TimeRing.prototype.canBeShown = function () {
        if (_super.prototype.canBeShown.call(this) == false)
            return false;
        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;
        return true;
    };
    return CandyMerchantItem_TimeRing;
})(CandyMerchantItem);
///<reference path="Place.ts"/>
var CastleRoom = (function (_super) {
    __extends(CastleRoom, _super);
    // Constructor
    function CastleRoom(game) {
        _super.call(this, game);
    }
    // Special method used to add a button to go back to the castle
    CastleRoom.prototype.addBackToTheCastleButton = function (renderArea, otherClass) {
        this.addBackToButton(renderArea, new CallbackCollection(this.getGame().goToCastle.bind(this.getGame())), Database.getText("buttonBackToTheCastle"), Database.getTranslatedText("buttonBackToTheCastle"), otherClass);
    };
    return CastleRoom;
})(Place);
///<reference path="CastleRoom.ts"/>
// Is the hoven happy? He is if he cooked something at least once
Saving.registerBool("castleBigRoomHovenHappy", false);
var CastleBigRoom = (function (_super) {
    __extends(CastleBigRoom, _super);
    // Constructor
    function CastleBigRoom(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // At first the hoven is waiting
        this.hovenWaiting = true;
        // Set the default speech, depending on if the hoven is happy or not
        if (Saving.loadBool("castleBigRoomHovenHappy") == false) {
            this.currentSpeech = "castleBigRoomHovenSpeechSad";
        }
        else {
            this.currentSpeech = "castleBigRoomHovenSpeechHappy";
        }
        // Resize the area and update
        this.renderArea.resize(160, 30);
        this.update();
    }
    // getRenderArea()
    CastleBigRoom.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // update()
    CastleBigRoom.prototype.update = function () {
        // Reset the area
        this.renderArea.resetAllButSize();
        // Add the button to go back to the castle
        this.addBackToTheCastleButton(this.renderArea, "castleBigRoomBackToTheCastleButton");
        // Draw the background
        this.drawBackground(0, 3);
        // Draw the speech
        this.drawSpeech(83, 10);
        // If the hoven is waiting, we add the button to give it the sweets
        if (this.hovenWaiting) {
            this.renderArea.addAsciiRealButton(Database.getText("castleBigRoomHovenLetHovenTakeButton"), 83, 19, "castleBigRoomLetHovenTakeButton", Database.getTranslatedText("castleBigRoomHovenLetHovenTakeButton"), true);
            this.renderArea.addLinkCall(".castleBigRoomLetHovenTakeButton", new CallbackCollection(this.letHovenTake.bind(this)));
        }
        else {
            this.renderArea.addAsciiRealButton(Database.getText("castleBigRoomHovenThanks"), 83, 19, "castleBigRoomThanksButton", Database.getTranslatedText("castleBigRoomHovenThanks"), true);
            this.renderArea.addLinkCall(".castleBigRoomThanksButton", new CallbackCollection(this.thanksHoven.bind(this)));
        }
    };
    // Private methods
    CastleBigRoom.prototype.drawBackground = function (x, y) {
        // Draw the background ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/bigRoom/background"), x, y);
        // If the hoven is happy, change its face
        if (Saving.loadBool("castleBigRoomHovenHappy")) {
            this.renderArea.drawString("^       ^", x + 61, y + 9);
            this.renderArea.drawString("         ", x + 61, y + 10);
            this.renderArea.drawString("  '-.-'  ", x + 61, y + 11);
        }
    };
    CastleBigRoom.prototype.drawSpeech = function (x, y) {
        this.renderArea.drawSpeech(Database.getText(this.currentSpeech), y, x, x + 30, "CastleBigRoomHovenSpeech", Database.getTranslatedText(this.currentSpeech));
    };
    CastleBigRoom.prototype.letHovenTake = function () {
        // If we have enough sweets
        if (this.getGame().getCandies().getCurrent() >= 100 && this.getGame().getChocolateBars().getCurrent() >= 1) {
            // We spend the sweets
            this.getGame().getCandies().add(-100);
            this.getGame().getChocolateBars().add(-1);
            // The hoven is now happy
            Saving.saveBool("castleBigRoomHovenHappy", true);
            // The hoven isn't waiting anymore
            this.hovenWaiting = false;
            // We set the new speech
            this.currentSpeech = "castleBigRoomHovenSpeechMadePainAuChocolat";
            // We add the pain au chocolat
            this.getGame().getPainsAuChocolat().add(1);
        }
        else {
            // If the hoven isn't happy
            if (Saving.loadBool("castleBigRoomHovenHappy") == false) {
                this.currentSpeech = "castleBigRoomHovenNotEnough";
            }
            else {
                this.currentSpeech = "castleBigRoomHovenSpeechHappyNotEnough";
            }
        }
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    CastleBigRoom.prototype.thanksHoven = function () {
        // The hoven is now waiting
        this.hovenWaiting = true;
        // Set the new speech
        this.currentSpeech = "castleBigRoomHovenSpeechHappy";
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    return CastleBigRoom;
})(CastleRoom);
///<reference path="Quest.ts"/>
var CastleEntrance = (function (_super) {
    __extends(CastleEntrance, _super);
    // Constructor
    function CastleEntrance(game) {
        _super.call(this, game);
        // Last knight added
        this.lastKnightAdded = null;
        // Resize the quest
        this.resizeQuest(149, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 25));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.addWalls();
        // Add the first knight
        this.addKnight(Random.between(80, 120));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You're trying to cross the castle's entrance."));
    }
    // Public methods
    CastleEntrance.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 0), new Pos(60, 20));
    };
    CastleEntrance.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    CastleEntrance.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You crossed the castle's entrance! You can now enter the castle."));
            Saving.saveBool("mainMapDoneCastleEntrance", true); // The castle entrance is done
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died trying to cross the castle's entrance."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    CastleEntrance.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Handle monsters
            this.handleKnights();
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castleEntrance/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castleEntrance/front"), this.getRealQuestPosition().x + 104, this.getRealQuestPosition().y);
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    CastleEntrance.prototype.addKnight = function (x) {
        if (x === void 0) { x = 149; }
        var knight = new Knight(this, new Pos(x, 20));
        knight.setHealthBar(new QuestEntityHealthBar(knight, new Pos(15, 1)));
        if (this.addEntity(knight))
            this.lastKnightAdded = knight;
    };
    CastleEntrance.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 26), new Pos(200, 4));
        wall.addBox(new Pos(104, 6), new Pos(15, 15));
        wall.addBox(new Pos(104, 5), new Pos(16, 1));
        wall.addBox(new Pos(104, 4), new Pos(17, 1));
        wall.addBox(new Pos(106, 3), new Pos(16, 1));
        wall.addBox(new Pos(107, 2), new Pos(6, 1));
        wall.addBox(new Pos(116, 2), new Pos(7, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    CastleEntrance.prototype.handleKnights = function () {
        // If there's no last knight added or the last knight added is weak or on the left of the player, we add a new one
        if (this.lastKnightAdded == null ||
            (this.lastKnightAdded != null && this.lastKnightAdded.getHp() / this.lastKnightAdded.getMaxHp() < 0.4) ||
            (this.lastKnightAdded != null && this.lastKnightAdded.getGlobalPosition().x + 1 < this.getGame().getPlayer().getGlobalPosition().x)) {
            this.addKnight();
        }
    };
    CastleEntrance.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 149)
            return true;
        // Else we return false
        return false;
    };
    return CastleEntrance;
})(Quest);
///<reference path="Quest.ts"/>
var CastleRoom1 = (function (_super) {
    __extends(CastleRoom1, _super);
    // Constructor
    function CastleRoom1(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(97, 10));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.addWalls();
        // Add the spikes
        this.addEntity(new Spikes(this, new Pos(7, 23), 88));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter one of the castle's room. Damn, it seems to be full of spikes!"));
    }
    // Public methods
    CastleRoom1.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(96, 6), new Pos(2, 3));
    };
    CastleRoom1.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    CastleRoom1.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    CastleRoom1.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room1/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToCastle.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    CastleRoom1.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 3));
        wall.addBox(new Pos(0, 3), new Pos(7, 25));
        wall.addBox(new Pos(7, 24), new Pos(93, 4));
        wall.addBox(new Pos(95, 3), new Pos(5, 5));
        wall.addBox(new Pos(95, 11), new Pos(5, 16));
        // Add the wall entity
        this.addEntity(wall);
    };
    return CastleRoom1;
})(Quest);
///<reference path="CastleRoom.ts"/>
Saving.registerBool("castleRoom2LitFire", false);
Saving.registerBool("castleRoom2TookObject", false);
var CastleRoom2 = (function (_super) {
    __extends(CastleRoom2, _super);
    function CastleRoom2(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The smokes
        this.smokes = [];
        // If needed, we add smokes
        if (Saving.loadBool("castleRoom2LitFire") == true) {
            this.addSmokes();
        }
        this.renderArea.resize(100, 30);
        this.update();
    }
    // getRenderArea()
    CastleRoom2.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    CastleRoom2.prototype.willBeDisplayed = function () {
        this.getGame().getOneSecondCallbackCollection().addCallback(this.actionSmokes.bind(this));
    };
    // update()
    CastleRoom2.prototype.update = function () {
        // Reset the area
        this.renderArea.resetAllButSize();
        // Add the button to go back to the castle
        this.addBackToTheCastleButton(this.renderArea, "castleRoom2BackToTheCastleButton");
        // If the fire isn't lit yet
        if (Saving.loadBool("castleRoom2LitFire") == false) {
            // Draw the dark color
            this.drawDark(0, 3, 100, 27);
            // Add the button on the fire
            this.drawFireButton(42, 20);
        }
        else {
            // We draw the fire
            this.drawFire(42, 20);
            // If we didn't take the object yet
            if (Saving.loadBool("castleRoom2TookObject") == false) {
                this.drawObject(21, 12);
            }
        }
    };
    // Private methods
    CastleRoom2.prototype.actionSmokes = function () {
        // If there's at least one smoke
        if (this.smokes.length > 0) {
            // We make the smokes move
            for (var i = 0; i < this.smokes.length; i++) {
                this.smokes[i].move();
            }
            // We update on the page
            this.update();
            this.getGame().updatePlace();
        }
    };
    CastleRoom2.prototype.addSmokes = function () {
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(3, 7), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
    };
    CastleRoom2.prototype.drawDark = function (x, y, width, height) {
        for (var i = y; i < y + height; i++) {
            this.renderArea.addBackgroundColor(x, x + width, i, new Color(ColorType.CASTLE_DARK_ROOM, true));
        }
    };
    CastleRoom2.prototype.drawFire = function (x, y) {
        // Draw the fire ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/room2/fire"), x, y);
        // Draw the smokes
        for (var i = 0; i < this.smokes.length; i++) {
            this.smokes[i].draw(this.renderArea);
        }
    };
    CastleRoom2.prototype.drawFireButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("castleRoom2LightFireButton", x, x + 16, y, x, x + 16, y + 1, x, x + 16, y + 2, x, x + 16, y + 3, x, x + 16, y + 4, x, x + 16, y + 5);
        // Add the link
        this.renderArea.addLinkCall(".castleRoom2LightFireButton", new CallbackCollection(this.lightFire.bind(this)));
    };
    CastleRoom2.prototype.drawObject = function (x, y) {
        // Draw the ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/room2/pitchfork"), x, y);
        // Add the button
        this.renderArea.addMultipleAsciiButtons("castleRoom2TakeObjectButton", x + 6, x + 12, y, x + 5, x + 11, y + 1, x + 4, x + 10, y + 2, x + 3, x + 9, y + 3, x + 2, x + 8, y + 4, x + 1, x + 7, y + 5, x + 1, x + 5, y + 6, x, x + 4, y + 7);
        // Add the link
        this.renderArea.addLinkCall(".castleRoom2TakeObjectButton", new CallbackCollection(this.takeObject.bind(this)));
    };
    CastleRoom2.prototype.lightFire = function () {
        // Change the bool
        Saving.saveBool("castleRoom2LitFire", true);
        // Add the smokes
        this.addSmokes();
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    CastleRoom2.prototype.takeObject = function () {
        // Set the bool
        Saving.saveBool("castleRoom2TookObject", true);
        // Take it
        this.getGame().gainItem("gridItemPossessedPitchfork");
        // Re-calc the farm production
        this.getGame().calcLollipopFarmProduction();
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    return CastleRoom2;
})(CastleRoom);
///<reference path="Quest.ts"/>
var CastleRoom3 = (function (_super) {
    __extends(CastleRoom3, _super);
    // Constructor
    function CastleRoom3(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(97, 23));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.addWalls();
        // Add the eggs
        this.addEggs();
        // Add the monster
        this.addMonster();
        // Add the chest
        this.addChest();
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter one of the castle's room."));
    }
    // Public methods
    CastleRoom3.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(96, 19), new Pos(2, 3));
    };
    CastleRoom3.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    CastleRoom3.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    CastleRoom3.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room3/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToCastle.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    CastleRoom3.prototype.addChest = function () {
        this.addEntity(new Chest(this, new Pos(7, 23), true, new CallbackCollection(this.openChest.bind(this)), Saving.loadBool("gridItemPossessedL")));
    };
    CastleRoom3.prototype.addEggs = function () {
        this.addEntity(new Egg(this, new Pos(16, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(18, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(23, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(25, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(28, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(30, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(38, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(41, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(48, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(52, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(54, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(57, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(63, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(68, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(72, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(78, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
    };
    CastleRoom3.prototype.addMonster = function () {
        this.monster = new Monster(this, new Pos(67, 3));
        this.addEntity(this.monster);
    };
    CastleRoom3.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 3));
        wall.addBox(new Pos(0, 3), new Pos(7, 25));
        wall.addBox(new Pos(7, 24), new Pos(93, 4));
        wall.addBox(new Pos(95, 3), new Pos(5, 18));
        // Add the wall entity
        this.addEntity(wall);
    };
    CastleRoom3.prototype.anEggDiedCallback = function () {
        // We warn the monster that an egg was destroyed
        this.monster.eggDestroyed();
    };
    CastleRoom3.prototype.openChest = function () {
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedL", "You opened a chest and found a strange stone.", "You gain a strange stone."));
    };
    return CastleRoom3;
})(Quest);
///<reference path="CastleRoom.ts"/>
Saving.registerBool("castleTowerFirstVisitDone", false); // True if we already visited the tower at least once
// The following bools are true if we placed the corresponding stones in the tower
Saving.registerBool("castleTowerPStoneDone", false);
Saving.registerBool("castleTowerLStoneDone", false);
Saving.registerBool("castleTowerAStoneDone", false);
Saving.registerBool("castleTowerYStoneDone", false);
// Another one
Saving.registerBool("castleTowerTookTalkingCandy", false);
var CastleTower = (function (_super) {
    __extends(CastleTower, _super);
    // Constructor
    function CastleTower(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Byt default, the interval ID is set to null
        this.intervalID = null;
        // Set the cut scene max timer
        this.cutSceneMaxTimer = 72;
        // If it's the first time we visit the tower, we change the bool, set the timer and start the interval
        if (Saving.loadBool("castleTowerFirstVisitDone") == false) {
            Saving.saveBool("castleTowerFirstVisitDone", true);
            this.cutSceneTimer = 0;
            this.intervalID = setInterval(this.actionInterval.bind(this), 100);
        }
        else {
            this.cutSceneTimer = this.cutSceneMaxTimer;
        }
        this.renderArea.resize(100, 38);
        this.update();
    }
    // getRenderArea()
    CastleTower.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willStopBeingDisplayed()
    CastleTower.prototype.willStopBeingDisplayed = function () {
        // Clear the interval if the interval ID isn't null
        if (this.intervalID != null)
            clearInterval(this.intervalID);
    };
    // Private methods
    CastleTower.prototype.actionInterval = function () {
        // If the timer hasn't reached the max timer yet, we increase it and update
        if (this.cutSceneTimer < this.cutSceneMaxTimer) {
            this.cutSceneTimer += 1;
            this.update();
            this.getGame().updatePlace();
        }
    };
    CastleTower.prototype.clickedOnStone = function (ourSavingName) {
        // This stone is now in the tower
        Saving.saveBool(ourSavingName, true);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    CastleTower.prototype.drawBackground = function () {
        // Calculate the gap
        var gap = (this.cutSceneMaxTimer - this.cutSceneTimer);
        if (gap > 60)
            gap = 60;
        // Draw the background ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/tower/castleTower"), 5, 3 - gap);
    };
    CastleTower.prototype.drawTalkingCandy = function () {
        // If all the stones are in the tower AND we didn't already take the talking candy, we draw the key
        if (Saving.loadBool("castleTowerPStoneDone") && Saving.loadBool("castleTowerLStoneDone") && Saving.loadBool("castleTowerAStoneDone") && Saving.loadBool("castleTowerYStoneDone") && Saving.loadBool("castleTowerTookTalkingCandy") == false) {
            // Draw the ascii art
            this.renderArea.drawArray(Database.getAscii("places/castle/tower/talkingCandy"), 47, 22);
            // Draw the button
            this.renderArea.addMultipleAsciiButtons("castleTowerTalkingCandyButton", 47, 50, 22, 47, 50, 23);
            this.renderArea.addLinkCall(".castleTowerTalkingCandyButton", new CallbackCollection(this.takeTalkingCandy.bind(this)));
        }
    };
    CastleTower.prototype.drawStone = function (savingName, ourSavingName, asciiArtName, pos) {
        // If we have the stone but it isn't in the tower yet
        if (Saving.loadBool(savingName) == true && Saving.loadBool(ourSavingName) == false) {
            // We add the button to click on the stone
            this.renderArea.addMultipleAsciiButtons("castleTower" + savingName + "Button", pos.x + 3, pos.x + 8, pos.y, pos.x + 2, pos.x + 9, pos.y + 1, pos.x + 1, pos.x + 10, pos.y + 2, pos.x + 2, pos.x + 9, pos.y + 3, pos.x + 3, pos.x + 8, pos.y + 4);
            // Add the link
            this.renderArea.addLinkCall(".castleTower" + savingName + "Button", new CallbackCollection(this.clickedOnStone.bind(this, ourSavingName)));
        }
        else if (Saving.loadBool(savingName) == true && Saving.loadBool(ourSavingName) == true) {
            // We draw the stone ascii art on the specified position
            this.renderArea.drawArray(Database.getAscii(asciiArtName), pos.x, pos.y - 1);
        }
    };
    CastleTower.prototype.drawStones = function () {
        // Calculate the gap
        var gap = (this.cutSceneMaxTimer - this.cutSceneTimer);
        if (gap > 60)
            gap = 60;
        // Draw the stones
        this.drawStone("gridItemPossessedP", "castleTowerPStoneDone", "gridItems/p", new Pos(25, 26 - gap));
        this.drawStone("gridItemPossessedL", "castleTowerLStoneDone", "gridItems/l", new Pos(38, 26 - gap));
        this.drawStone("gridItemPossessedA", "castleTowerAStoneDone", "gridItems/a", new Pos(51, 26 - gap));
        this.drawStone("gridItemPossessedY", "castleTowerYStoneDone", "gridItems/y", new Pos(64, 26 - gap));
    };
    CastleTower.prototype.takeTalkingCandy = function () {
        // We take the candy
        Saving.saveBool("castleTowerTookTalkingCandy", true);
        // We gain the corresponding item
        this.getGame().gainItem("gridItemPossessedTalkingCandy");
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    CastleTower.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToTheCastleButton(this.renderArea, "castleTowerBackToTheCastleButton");
        // Draw the background
        this.drawBackground();
        // Draw the stones related stuff
        this.drawStones();
        // Draw the talking candy related stuff
        this.drawTalkingCandy();
    };
    return CastleTower;
})(CastleRoom);
///<reference path="Place.ts"/>
Saving.registerBool("castleKilledNougatMonster", false);
var Castle = (function (_super) {
    __extends(Castle, _super);
    // Constructor
    function Castle(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/castle/map"), 0, 5);
        this.update();
    }
    // getRenderArea()
    Castle.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods   
    Castle.prototype.drawBigRoom = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleBigRoomButton", x, x + 1, y, x, x + 1, y + 1);
        // Comment
        this.renderArea.addFullComment(x - 9, y, Database.getText("castleBigRoomComment"), Database.getTranslatedText("castleBigRoomComment"), "castleBigRoomComment");
        // Interactions
        this.renderArea.addLinkOver(".castleBigRoomButton, .castleBigRoomComment", ".castleBigRoomComment");
        this.renderArea.addLinkCall(".castleBigRoomButton", new CallbackCollection(this.goToBigRoom.bind(this)));
    };
    Castle.prototype.drawCastleEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiNinjaButtons("castleCastleEntranceButton", x, x + 2, y);
        // Comment
        this.renderArea.addFullComment(x + 1, y + 1, Database.getText("castleCastleEntranceComment"), Database.getTranslatedText("castleCastleEntranceComment"), "castleCastleEntranceComment");
        // Interactions
        this.renderArea.addLinkOver(".castleCastleEntranceButton, .castleCastleEntranceComment", ".castleCastleEntranceComment");
    };
    Castle.prototype.drawNougatMonster = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleNougatMonsterButton", x + 1, x + 8, y, x, x + 10, y + 1, x, x + 10, y + 2, x + 1, x + 8, y + 3);
        // Comment
        this.renderArea.addFullComment(x + 5, y - 2, Database.getText("castleNougatMonsterComment"), Database.getTranslatedText("castleNougatMonsterComment"), "castleNougatMonsterComment");
        // Interactions
        this.renderArea.addLinkOver(".castleNougatMonsterButton, .castleNougatMonsterComment", ".castleNougatMonsterComment");
        this.renderArea.addLinkCall(".castleNougatMonsterButton", new CallbackCollection(this.goToNougatMonster.bind(this)));
    };
    Castle.prototype.drawRoom1 = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleRoom1Button", x, x + 1, y, x, x + 1, y + 1);
        // Comment
        this.renderArea.addFullComment(x - 6, y, Database.getText("castleARoomComment"), Database.getTranslatedText("castleARoomComment"), "castleRoom1Comment");
        // Interactions
        this.renderArea.addLinkOver(".castleRoom1Button, .castleRoom1Comment", ".castleRoom1Comment");
        this.renderArea.addLinkCall(".castleRoom1Button, .castleRoom1Comment", new CallbackCollection(this.goToRoom1.bind(this)));
    };
    Castle.prototype.drawRoom2 = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleRoom2Button", x, x + 1, y, x, x + 1, y + 1);
        // Comment
        this.renderArea.addFullComment(x - 6, y, Database.getText("castleADarkRoomComment"), Database.getTranslatedText("castleADarkRoomComment"), "castleRoom2Comment");
        // Interactions
        this.renderArea.addLinkOver(".castleRoom2Button, .castleRoom2Comment", ".castleRoom2Comment");
        this.renderArea.addLinkCall(".castleRoom2Button, .castleRoom2Comment", new CallbackCollection(this.goToRoom2.bind(this)));
    };
    Castle.prototype.drawRoom3 = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleRoom3Button", x, x + 1, y, x, x + 1, y + 1);
        // Comment
        this.renderArea.addFullComment(x - 6, y, Database.getText("castleARoomComment"), Database.getTranslatedText("castleARoomComment"), "castleRoom3Comment");
        // Interactions
        this.renderArea.addLinkOver(".castleRoom3Button, .castleRoom3Comment", ".castleRoom3Comment");
        this.renderArea.addLinkCall(".castleRoom3Button, .castleRoom3Comment", new CallbackCollection(this.goToRoom3.bind(this)));
    };
    Castle.prototype.drawStairs = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleStairsButton", x, x + 4, y, x, x + 4, y + 1, x, x + 4, y + 2, x, x + 4, y + 3, x, x + 4, y + 4);
        // Comment
        this.renderArea.addFullComment(x + 10, y + 2, Database.getText("castleStairsComment"), Database.getTranslatedText("castleStairsComment"), "castleStairsComment");
        // Interactions
        this.renderArea.addLinkOver(".castleStairsButton, .castleStairsComment", ".castleStairsComment");
        this.renderArea.addLinkCall(".castleStairsButton", new CallbackCollection(this.goToStairs.bind(this)));
    };
    Castle.prototype.drawTowerEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleTowerEntranceButton", x, x + 1, y, x, x + 1, y + 1);
        // Comment
        this.renderArea.addFullComment(x + 12, y, Database.getText("castleTowerEntranceComment"), Database.getTranslatedText("castleTowerEntranceComment"), "castleTowerEntranceComment");
        // Interactions
        this.renderArea.addLinkOver(".castleTowerEntranceButton, .castleTowerEntranceComment", ".castleTowerEntranceComment");
        this.renderArea.addLinkCall(".castleTowerEntranceButton", new CallbackCollection(this.goToTowerEntrance.bind(this)));
    };
    Castle.prototype.goToBigRoom = function () {
        this.getGame().setPlace(new CastleBigRoom(this.getGame()));
    };
    Castle.prototype.goToNougatMonster = function () {
        this.getGame().setPlace(new GiantNougatMonsterQuest(this.getGame()));
    };
    Castle.prototype.goToRoom1 = function () {
        this.getGame().setPlace(new CastleRoom1(this.getGame()));
    };
    Castle.prototype.goToRoom2 = function () {
        this.getGame().setPlace(new CastleRoom2(this.getGame()));
    };
    Castle.prototype.goToRoom3 = function () {
        this.getGame().setPlace(new CastleRoom3(this.getGame()));
    };
    Castle.prototype.goToStairs = function () {
        this.getGame().setPlace(new Dragon(this.getGame()));
    };
    Castle.prototype.goToTowerEntrance = function () {
        this.getGame().setPlace(new CastleTower(this.getGame()));
    };
    Castle.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "castleBackToTheMapButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/castle/map"), 0, 3);
        // Draw various stuff
        this.drawCastleEntrance(43, 36);
        this.drawBigRoom(57, 19);
        this.drawRoom1(15, 27);
        this.drawRoom2(15, 21);
        this.drawRoom3(15, 15);
        this.drawNougatMonster(68, 15);
        this.drawStairs(32, 3);
        if (Saving.loadBool("castleKilledNougatMonster")) {
            this.drawTowerEntrance(84, 16);
        }
    };
    return Castle;
})(Place);
var CauldronActionLogEntry = (function () {
    // Constructor
    function CauldronActionLogEntry(action, time, candies, lollipops) {
        this.action = action;
        this.time = time;
        this.candies = candies;
        this.lollipops = lollipops;
    }
    // Public getters
    CauldronActionLogEntry.prototype.getAction = function () {
        return this.action;
    };
    CauldronActionLogEntry.prototype.getCandies = function () {
        return this.candies;
    };
    CauldronActionLogEntry.prototype.getLollipops = function () {
        return this.lollipops;
    };
    CauldronActionLogEntry.prototype.getTime = function () {
        return this.time;
    };
    return CauldronActionLogEntry;
})();
var CauldronAction;
(function (CauldronAction) {
    CauldronAction[CauldronAction["NOTHING"] = 0] = "NOTHING";
    CauldronAction[CauldronAction["MIXING"] = 1] = "MIXING";
    CauldronAction[CauldronAction["BOILING"] = 2] = "BOILING";
})(CauldronAction || (CauldronAction = {}));
var CauldronFlame = (function () {
    // Constructor
    function CauldronFlame(pos, character) {
        this.pos = pos;
        this.character = character;
    }
    // Public methods
    CauldronFlame.prototype.draw = function (renderArea, x, y) {
        renderArea.drawString(this.character, x + this.pos.x, y + this.pos.y);
    };
    return CauldronFlame;
})();
///<reference path="Place.ts"/>
Saving.registerNumber("cauldronBookCurrentPage", 0);
var Cauldron = (function (_super) {
    __extends(Cauldron, _super);
    // Constructor
    function Cauldron(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Maximum page
        this.maxPage = 10;
        // The candies & lollipops in the input field
        this.candiesInput = "";
        this.lollipopsInput = "";
        // The comments next to candies and lollipops input fields (they're needed if the player types something which isn't a number, or which is a negative number)
        this.candiesInputComment = null;
        this.lollipopsInputComment = null;
        // What are we doing?
        this.currentAction = CauldronAction.NOTHING;
        // Current timer time
        this.timerTime = 0;
        // Action log
        this.actionLog = [null, null, null, null, null]; // We always remember the last five actions
        // The comment telling the player the potions he managed to brew
        this.potionsComment = null;
        // Array containing the flames we can see when heating up the cauldron
        this.flames = [];
        // Launch the interval and get the ID
        this.timerIntervalID = setInterval(this.actionInterval.bind(this), 1000);
        // Resize and update
        this.renderArea.resize(100, 57);
        this.update(true);
    }
    // getRenderArea()
    Cauldron.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willBeDisplayed()
    Cauldron.prototype.willBeDisplayed = function () {
        // We add hotkeys
        this.getGame().addHotkey(new Hotkey("a", new CallbackCollection(this.putInCauldron.bind(this))));
        this.getGame().addHotkey(new Hotkey("m", new CallbackCollection(this.changeAction.bind(this, CauldronAction.MIXING))));
        this.getGame().addHotkey(new Hotkey("b", new CallbackCollection(this.changeAction.bind(this, CauldronAction.BOILING))));
        this.getGame().addHotkey(new Hotkey("s", new CallbackCollection(this.changeAction.bind(this, CauldronAction.NOTHING))));
        this.getGame().addHotkey(new Hotkey("p", new CallbackCollection(this.putIntoBottles.bind(this))));
        this.getGame().addHotkey(new Hotkey("left", new CallbackCollection(this.previousPage.bind(this))));
        this.getGame().addHotkey(new Hotkey("right", new CallbackCollection(this.nextPage.bind(this))));
    };
    // willStopBeingDisplayed()
    Cauldron.prototype.willStopBeingDisplayed = function () {
        clearInterval(this.timerIntervalID);
    };
    // Private methods
    Cauldron.prototype.actionInterval = function () {
        // Increase the time
        this.timerTime += 1;
        // If we're boiling, update the flames array
        if (this.currentAction == CauldronAction.BOILING) {
            this.updateFlamesArray();
        }
        // If we're not doing nothing, update
        if (this.currentAction != CauldronAction.NOTHING) {
            this.update();
            this.getGame().updatePlace();
        }
    };
    Cauldron.prototype.changeAction = function (newAction) {
        // If we're not already doing that
        if (this.currentAction != newAction) {
            // If the action which just stopped wasn't nothing
            if (this.currentAction != CauldronAction.NOTHING) {
                // Shift actions in the log
                for (var i = this.actionLog.length - 1; i > 0; i--) {
                    this.actionLog[i] = this.actionLog[i - 1];
                }
                // Set actionLog[0] to the action which just stopped
                this.actionLog[0] = new CauldronActionLogEntry(this.currentAction, this.timerTime, this.getGame().getCandiesInCauldron().getCurrent(), this.getGame().getLollipopsInCauldron().getCurrent());
            }
            // Now we're doing that
            this.currentAction = newAction;
            // Reset the timer and restart the interval
            this.timerTime = 0;
            clearInterval(this.timerIntervalID);
            this.timerIntervalID = setInterval(this.actionInterval.bind(this), 1000);
            // We reset the flames array
            this.resetFlamesArray();
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Cauldron.prototype.changeCandiesInput = function () {
        if ($(".cauldronCandiesInput").length)
            this.candiesInput = $(".cauldronCandiesInput").val();
    };
    Cauldron.prototype.changeLollipopsInput = function () {
        if ($(".cauldronLollipopsInput").length)
            this.lollipopsInput = $(".cauldronLollipopsInput").val();
    };
    Cauldron.prototype.drawActions = function (x, y, firstTimeWeUpdate, keepInputContent) {
        // Variables
        var candiesInputHasFocus = false;
        var lollipopsInputHasFocus = false;
        // If it's not the first time we update, we need to keep some stuff from the page (content of the inputs + focus on the inputs)
        if (firstTimeWeUpdate == false) {
            // If if the candies / lollipops input has the focus (in order to restore the focus after the page updating)
            candiesInputHasFocus = $(".cauldronCandiesInput").is(":focus");
            lollipopsInputHasFocus = $(".cauldronLollipopsInput").is(":focus");
            // Reset the content of candiesInput and lollipopsInput
            this.candiesInput = "";
            this.lollipopsInput = "";
        }
        // What you want to put in the cauldron
        // Text
        this.renderArea.drawString(Database.getText("cauldronWhatYouWantToPut"), x, y); // Normal
        this.renderArea.addBold(x, x + Database.getText("cauldronWhatYouWantToPut").length, y); // Add bold on normal
        this.renderArea.drawString(Database.getTranslatedText("cauldronWhatYouWantToPut"), x, y + 1, true); // Translated
        // Candies input
        this.renderArea.addSimpleInput(x, x + 20, y + 2, new CallbackCollection(this.changeCandiesInput.bind(this)), "cauldronCandiesInput", (keepInputContent ? this.candiesInput : ""), candiesInputHasFocus);
        this.renderArea.drawString("candies", x + 21, y + 2);
        if (this.candiesInputComment != null) {
            this.renderArea.drawString(this.candiesInputComment, x + 29, y + 2);
            this.renderArea.addBold(x + 29, x + 29 + this.candiesInputComment.length, y + 2);
        }
        // Lollipops input
        this.renderArea.addSimpleInput(x, x + 20, y + 4, new CallbackCollection(this.changeLollipopsInput.bind(this)), "cauldronLollipopsInput", (keepInputContent ? this.lollipopsInput : ""), lollipopsInputHasFocus);
        this.renderArea.drawString("lollipops", x + 21, y + 4);
        if (this.lollipopsInputComment != null) {
            this.renderArea.drawString(this.lollipopsInputComment, x + 31, y + 4);
            this.renderArea.addBold(x + 31, x + 31 + this.lollipopsInputComment.length, y + 4);
        }
        // Put all that in the cauldron
        this.renderArea.addAsciiRealButton("Put all that in the cauldron", x, y + 6, "cauldronPutAllThatInTheCauldronButton", "", false, 4);
        this.renderArea.addLinkCall(".cauldronPutAllThatInTheCauldronButton", new CallbackCollection(this.putInCauldron.bind(this)));
        // What is in the cauldron
        // Text
        this.renderArea.drawString(Database.getText("cauldronWhatIsIn"), x, y + 9); // Normal
        this.renderArea.addBold(x, x + Database.getText("cauldronWhatIsIn").length, y + 9); // Add bold on normal
        this.renderArea.drawString(Database.getTranslatedText("cauldronWhatIsIn"), x, y + 10, true); // Translated
        // Candies
        this.renderArea.drawString("Candies :", x + 2, y + 11);
        this.renderArea.drawString(Algo.numberToStringButNicely(this.getGame().getCandiesInCauldron().getCurrent()), x + 14, y + 11);
        // Lollipops
        this.renderArea.drawString("Lollipops :", x + 2, y + 12);
        this.renderArea.drawString(Algo.numberToStringButNicely(this.getGame().getLollipopsInCauldron().getCurrent()), x + 14, y + 12);
        // What you can do with it
        // Text
        this.renderArea.drawString(Database.getText("cauldronWhatYouCanDo"), x, y + 14); // Normal
        this.renderArea.addBold(x, x + Database.getText("cauldronWhatYouCanDo").length, y + 14); // Add bold on normal
        this.renderArea.drawString(Database.getTranslatedText("cauldronWhatYouCanDo"), x, y + 15, true); // Translated
        // Mix button
        this.renderArea.addAsciiRealButton("Mix", x, y + 16, "cauldronMixButton", "", false, 0);
        this.renderArea.addLinkCall(".cauldronMixButton", new CallbackCollection(this.changeAction.bind(this, CauldronAction.MIXING)));
        // Boil button
        this.renderArea.addAsciiRealButton("Boil", x + 5, y + 16, "cauldronBoilButton", "", false, 0);
        this.renderArea.addLinkCall(".cauldronBoilButton", new CallbackCollection(this.changeAction.bind(this, CauldronAction.BOILING)));
        // Stop button
        this.renderArea.addAsciiRealButton("Stop", x + 11, y + 16, "cauldronStopButton", "", false, 0);
        this.renderArea.addLinkCall(".cauldronStopButton", new CallbackCollection(this.changeAction.bind(this, CauldronAction.NOTHING)));
        // Show what we're doing
        switch (this.currentAction) {
            case CauldronAction.MIXING:
                this.renderArea.drawString("Mixing" + this.getSpecialMixingText(), x, y + 18);
                break;
            case CauldronAction.BOILING:
                this.renderArea.drawString("Boiling" + this.getSpecialBoilingText(), x, y + 18);
                break;
        }
        // Put into bottles if we're not questing
        if (this.getGame().getWeAreQuesting() == false) {
            this.renderArea.addAsciiRealButton("Put into bottles", x, y + 20, "cauldronPutIntoBottlesButton", "", false, 0);
            this.renderArea.addLinkCall(".cauldronPutIntoBottlesButton", new CallbackCollection(this.putIntoBottles.bind(this)));
        }
        else {
            this.renderArea.drawString("You can't put into bottles while you're in a quest", x, y + 20);
        }
        // The comment
        if (this.potionsComment != null)
            this.renderArea.drawString(this.potionsComment, x, y + 22);
    };
    Cauldron.prototype.drawBook = function (x, y) {
        // Draw the book
        this.renderArea.drawArray(Database.getAscii("places/cauldron/book"), x, y);
        // Draw the pages' content
        this.renderArea.drawArray(Database.getAscii("places/cauldron/bookPage" + Saving.loadNumber("cauldronBookCurrentPage")), x + 8, y + 1);
        this.renderArea.drawArray(Database.getAscii("places/cauldron/bookPage" + (Saving.loadNumber("cauldronBookCurrentPage") + 1)), x + 50, y + 1);
        // Add the previous page button if we're not already at the first page
        if (Saving.loadNumber("cauldronBookCurrentPage") > 0) {
            this.renderArea.addAsciiRealButton(Database.getText("cauldronPreviousPageButton"), x, y + 31, "cauldronPreviousPageButton", Database.getTranslatedText("cauldronPreviousPageButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".cauldronPreviousPageButton", new CallbackCollection(this.previousPage.bind(this)));
        }
        // Add the next page button if we're not already at the last page
        if (Saving.loadNumber("cauldronBookCurrentPage") < this.maxPage) {
            this.renderArea.addAsciiRealButton(Database.getText("cauldronNextPageButton"), x + 87, y + 31, "cauldronNextPageButton", Database.getTranslatedText("cauldronNextPageButton"), true, -1, null, false, true);
            this.renderArea.addLinkCall(".cauldronNextPageButton", new CallbackCollection(this.nextPage.bind(this)));
        }
        // Add the translation if there is one
        if (Database.isTranslated()) {
            // Buttons on the left page
            for (var i = 1; i < 28; i++) {
                this.renderArea.addAsciiNinjaButton(x + 7, x + 48, i, "cauldronLeftPageTranslationButton");
            }
            // Buttons on the right page
            for (var i = 1; i < 28; i++) {
                this.renderArea.addAsciiNinjaButton(x + 49, x + 90, i, "cauldronRightPageTranslationButton");
            }
            // Tooltips
            this.renderArea.addTooltip("cauldronLeftPageTranslationButtonTooltip", Database.getTranslatedText("cauldron.page" + Saving.loadNumber("cauldronBookCurrentPage")));
            this.renderArea.addTooltip("cauldronRightPageTranslationButtonTooltip", Database.getTranslatedText("cauldron.page" + (Saving.loadNumber("cauldronBookCurrentPage") + 1)));
            // Links
            this.renderArea.addLinkOnHoverShowTooltip(".cauldronLeftPageTranslationButton", ".cauldronLeftPageTranslationButtonTooltip");
            this.renderArea.addLinkOnHoverShowTooltip(".cauldronRightPageTranslationButton", ".cauldronRightPageTranslationButtonTooltip");
        }
    };
    Cauldron.prototype.drawCauldron = function (x, y) {
        // Draw the cauldron
        this.renderArea.drawArray(Database.getAscii("places/cauldron/cauldron"), x, y);
        // Draw the flames
        for (var i = 0; i < this.flames.length; i++) {
            this.flames[i].draw(this.renderArea, x, y);
        }
    };
    Cauldron.prototype.getSpecialBoilingText = function () {
        if (this.timerTime < 3)
            return "... cold.";
        else if (this.timerTime < 6)
            return "... lukewarm.";
        else if (this.timerTime == 6)
            return "... hot.";
        else if (this.timerTime == 7)
            return "... hot..";
        else if (this.timerTime == 8)
            return "... hot...";
        else if (this.timerTime == 9)
            return "... very hot.";
        else if (this.timerTime == 10)
            return "... very hot..";
        else if (this.timerTime == 11)
            return "... very hot...";
        else if (this.timerTime < 14)
            return "... bubbles begin to appear.";
        else if (this.timerTime == 14)
            return "... bubbles begin to appear..";
        else if (this.timerTime == 15)
            return "... bubbles begin to appear...";
        else if (this.timerTime == 16)
            return "... bubbles begin to appear... and..";
        else if (this.timerTime == 17)
            return "... bubbles begin to appear... and...";
        else if (this.timerTime < 50)
            return "... BOILING!";
        else
            return "... the water is burnt. How is that possible?!";
    };
    Cauldron.prototype.getSpecialMixingText = function () {
        if (this.timerTime < 60)
            return "... (" + this.timerTime + ")";
        else
            return "... your arms are hurting :(";
    };
    Cauldron.prototype.makePotions = function (boolSavingName, numberSavingName, howMany, singularPotionName, pluralPotionName) {
        // We can now use this kind of potion
        Saving.saveBool(boolSavingName, true);
        // We increase the quantity
        Saving.saveNumber(numberSavingName, Saving.loadNumber(numberSavingName) + howMany);
        // We set the comment
        this.potionsComment = "You made " + Algo.pluralFormat(howMany, " " + singularPotionName, " " + pluralPotionName) + ".";
    };
    Cauldron.prototype.nextPage = function () {
        // If we can go to the next page
        if (Saving.loadNumber("cauldronBookCurrentPage") < this.maxPage) {
            // Change the current page number
            Saving.saveNumber("cauldronBookCurrentPage", Saving.loadNumber("cauldronBookCurrentPage") + 2);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Cauldron.prototype.previousPage = function () {
        // If we can go to the previous page
        if (Saving.loadNumber("cauldronBookCurrentPage") > 0) {
            // Change the current page number
            Saving.saveNumber("cauldronBookCurrentPage", Saving.loadNumber("cauldronBookCurrentPage") - 2);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Cauldron.prototype.putInCauldron = function () {
        // Used to know if we will have to update and return
        var updateAndReturn = false;
        // Parse the inputs and put them in two variables
        var candies = (this.candiesInput == "" ? 0 : parseInt(this.candiesInput));
        var lollipops = (this.lollipopsInput == "" ? 0 : parseInt(this.lollipopsInput));
        // Reset the comments
        this.candiesInputComment = null;
        this.lollipopsInputComment = null;
        // If the candies are incorrect, set the comment and return
        if (isNaN(candies)) {
            this.candiesInputComment = "(this isn't a number!)";
            updateAndReturn = true;
        }
        else if (candies < 0) {
            this.candiesInputComment = "(must be positive)";
            updateAndReturn = true;
        }
        else if (candies > this.getGame().getCandies().getCurrent()) {
            this.candiesInputComment = "(not enough candies)";
            updateAndReturn = true;
        }
        // If the lollipops are incorrect, set the comment and return
        if (isNaN(lollipops)) {
            this.lollipopsInputComment = "(this isn't a number!)";
            updateAndReturn = true;
        }
        else if (lollipops < 0) {
            this.lollipopsInputComment = "(must be positive)";
            updateAndReturn = true;
        }
        else if (lollipops > this.getGame().getLollipops().getCurrent()) {
            this.lollipopsInputComment = "(not enough lollipops)";
            updateAndReturn = true;
        }
        // If we have to update and return, well, we do that
        if (updateAndReturn) {
            this.update();
            this.getGame().updatePlace();
            return;
        }
        else {
            // Take the candies & lollipops
            this.getGame().getCandies().add(-candies);
            this.getGame().getLollipops().add(-lollipops);
            // Put all the stuff
            this.getGame().getCandiesInCauldron().add(candies);
            this.getGame().getLollipopsInCauldron().add(lollipops);
            // Update
            this.update(false, false);
            this.getGame().updatePlace();
        }
    };
    Cauldron.prototype.putIntoBottles = function () {
        // Reset the potions comment
        this.potionsComment = null;
        // Stop any action
        this.changeAction(CauldronAction.NOTHING);
        // Take the candies & lollipops in the cauldron
        this.getGame().getCandiesInCauldron().add(-this.getGame().getCandiesInCauldron().getCurrent());
        this.getGame().getLollipopsInCauldron().add(-this.getGame().getLollipopsInCauldron().getCurrent());
        // Health potion check
        if (this.actionLog[0] != null &&
            this.actionLog[0].getAction() == CauldronAction.MIXING &&
            this.actionLog[0].getLollipops() == 0 &&
            this.actionLog[0].getCandies() > 0 &&
            this.actionLog[0].getCandies() % 100 == 0 &&
            this.actionLog[0].getTime() < 30) {
            this.makePotions("questPlayerSpellHealthPotionHasSpell", "questPlayerSpellHealthPotionQuantity", this.actionLog[0].getCandies() / 100, "health potion", "health potions");
        }
        else if (this.actionLog[1] != null &&
            this.actionLog[1].getAction() == CauldronAction.MIXING &&
            this.actionLog[1].getCandies() > 0 &&
            this.actionLog[1].getLollipops() > 0 &&
            this.actionLog[1].getCandies() % 50 == 0 &&
            this.actionLog[1].getLollipops() % 500 == 0 &&
            this.actionLog[1].getLollipops() == 10 * this.actionLog[1].getCandies() &&
            this.actionLog[1].getTime() > 6 &&
            this.actionLog[1].getTime() < 14 &&
            this.actionLog[0] != null &&
            this.actionLog[0].getAction() == CauldronAction.MIXING &&
            this.actionLog[0].getCandies() == 2 * this.actionLog[1].getCandies() &&
            this.actionLog[0].getLollipops() == this.actionLog[1].getLollipops()) {
            this.makePotions("questPlayerSpellTurtlePotionHasSpell", "questPlayerSpellTurtlePotionQuantity", this.actionLog[0].getLollipops() / 500, "turtle potion", "turtle potions");
        }
        else if (this.actionLog[1] != null &&
            this.actionLog[1].getAction() == CauldronAction.BOILING &&
            this.actionLog[1].getLollipops() == 0 &&
            this.actionLog[1].getCandies() > 0 &&
            this.actionLog[1].getCandies() % 1000 == 0 &&
            this.actionLog[1].getTime() >= 3 && this.actionLog[1].getTime() < 6 &&
            this.actionLog[0] != null &&
            this.actionLog[0].getAction() == CauldronAction.BOILING &&
            this.actionLog[0].getLollipops() == 0 &&
            this.actionLog[0].getCandies() == 2 * this.actionLog[1].getCandies() &&
            this.actionLog[0].getTime() > 17) {
            this.makePotions("questPlayerSpellAntiGravityPotionHasSpell", "questPlayerSpellAntiGravityPotionQuantity", this.actionLog[1].getCandies() / 200, "anti-gravity potion", "anti-gravity potions");
        }
        else if (this.actionLog[0] != null &&
            this.actionLog[0].getAction() == CauldronAction.MIXING &&
            this.actionLog[0].getLollipops() > 0 &&
            this.actionLog[0].getLollipops() % 20000 == 0 &&
            this.actionLog[0].getTime() >= 60) {
            // If we didn't use any candy, then we made berserk potions
            if (this.actionLog[0].getCandies() == 0) {
                this.makePotions("questPlayerSpellBerserkPotionHasSpell", "questPlayerSpellBerserkPotionQuantity", this.actionLog[0].getLollipops() / 20000, "berserk potion", "berserk potions");
            }
            else {
                this.makePotions("questPlayerSpellCloningPotionHasSpell", "questPlayerSpellCloningPotionQuantity", this.actionLog[0].getLollipops() / 20000, "cloning potion", "cloning potions");
            }
        }
        else if (this.actionLog[2] != null &&
            this.actionLog[2].getAction() == CauldronAction.MIXING &&
            this.actionLog[2].getLollipops() == 0 &&
            this.actionLog[2].getCandies() > 0 &&
            this.actionLog[2].getCandies() % 500 == 0 &&
            this.actionLog[2].getTime() < 30 &&
            this.actionLog[1] != null &&
            this.actionLog[1].getLollipops() == 0 &&
            this.actionLog[1].getCandies() == this.actionLog[2].getCandies() + 100 * this.actionLog[2].getTime() &&
            this.actionLog[1].getAction() == CauldronAction.BOILING &&
            this.actionLog[1].getTime() >= 3 && this.actionLog[1].getTime() < 6 &&
            this.actionLog[0] != null &&
            this.actionLog[0].getAction() == CauldronAction.MIXING &&
            this.actionLog[0].getCandies() == this.actionLog[1].getCandies() &&
            this.actionLog[0].getLollipops() > 0) {
            this.makePotions("questPlayerSpellPPotionHasSpell", "questPlayerSpellPPotionQuantity", Math.ceil(this.actionLog[1].getCandies() / 500 + this.actionLog[0].getLollipops() / 1000), "P potion", "P potions");
        }
        else if (this.actionLog[4] != null && this.actionLog[3] != null && this.actionLog[2] != null && this.actionLog[1] != null && this.actionLog[0] != null &&
            this.actionLog[4].getAction() == CauldronAction.BOILING &&
            this.actionLog[3].getAction() == CauldronAction.BOILING &&
            this.actionLog[2].getAction() == CauldronAction.BOILING &&
            this.actionLog[1].getAction() == CauldronAction.BOILING &&
            this.actionLog[0].getAction() == CauldronAction.BOILING &&
            this.actionLog[4].getTime() < 3 &&
            this.actionLog[3].getTime() < 3 &&
            this.actionLog[2].getTime() < 3 &&
            this.actionLog[1].getTime() < 3 &&
            this.actionLog[0].getTime() >= 6 &&
            this.actionLog[4].getLollipops() == 0 && this.actionLog[4].getCandies() == 1 &&
            this.actionLog[3].getLollipops() == 0 && this.actionLog[3].getCandies() == 2 &&
            this.actionLog[2].getLollipops() == 0 && this.actionLog[2].getCandies() == 3 &&
            this.actionLog[1].getLollipops() == 0 && this.actionLog[1].getCandies() == 4 &&
            this.actionLog[0].getLollipops() == 1 && this.actionLog[0].getCandies() == 4) {
            this.makePotions("questPlayerSpellXPotionHasSpell", "questPlayerSpellXPotionQuantity", 1, "X potion", "X potions");
        }
        // If the potions comment is null, it means we didn't manage to make anything
        if (this.potionsComment == null)
            this.potionsComment = "You didn't manage to make anything.";
        // Reset the action log
        for (var i = 0; i < this.actionLog.length; i++) {
            this.actionLog[i] = null;
        }
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Cauldron.prototype.resetFlamesArray = function () {
        this.flames = [];
    };
    Cauldron.prototype.update = function (firstTimeWeUpdate, keepInputContent) {
        if (firstTimeWeUpdate === void 0) { firstTimeWeUpdate = false; }
        if (keepInputContent === void 0) { keepInputContent = true; }
        // Erase everything
        this.renderArea.resetAllButSize();
        // Draw everything
        this.drawBook(2, 0);
        this.drawCauldron(2, 39);
        this.drawActions(47, 34, firstTimeWeUpdate, keepInputContent);
    };
    Cauldron.prototype.updateFlamesArray = function () {
        // Create the variables
        var minX = 0;
        var maxX = 41;
        var minY;
        var maxY = 14;
        var howManyFlames;
        var x;
        var y;
        // Calculate minY
        minY = 14 - this.timerTime;
        if (minY < 5)
            minY = 5;
        // Caulcate howManyFlames
        howManyFlames = this.timerTime * 25;
        if (howManyFlames > 200)
            howManyFlames = 200;
        // Reset the array
        this.resetFlamesArray();
        // If we're boiling
        if (this.currentAction = CauldronAction.BOILING) {
            // Add flames depending on the current timer time
            for (var i = 0; i < howManyFlames; i++) {
                // Set y
                y = null;
                for (var j = maxY; j > minY; j--) {
                    if (Random.oneChanceOutOf(3)) {
                        y = j;
                        break;
                    }
                }
                if (y == null)
                    y = maxY;
                // Set x
                x = Random.between(minX + (14 - y), maxX - (14 - y));
                // Add the flame
                this.flames.push(new CauldronFlame(new Pos(x, y), Random.fromArray([")", "(", "`", "'", "."])));
            }
        }
    };
    return Cauldron;
})(Place);
///<reference path="Quest.ts"/>
Saving.registerBool("cellarDone", false);
var Cellar = (function (_super) {
    __extends(Cellar, _super);
    // Constructor
    function Cellar(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 3);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 2));
        this.getGame().getPlayer().setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        this.getGame().getPlayer().getQuestEntityMovement().setGravity(true);
        this.getGame().getPlayer().getQuestEntityMovement().setWormsLike(false);
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addGround();
        // Add the rats
        this.addRats();
        // Add a delimiter and the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the cellar. It's dark and you hear rats squeaking all around you."));
    }
    // Public methods
    Cellar.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to kill all the rats!"));
            Saving.saveBool("cellarDone", true);
            // We gain the main map
            this.getGame().gainItem("gridItemPossessedMainMap");
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the cellar. Rats are probably going to eat your body."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Cellar.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded())
            this.addExitQuestButton(new CallbackCollection(this.goToFifthHouse.bind(this)), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Cellar.prototype.addGround = function () {
        var wall = new Wall(this, new Pos(0, this.getRealQuestSize().y));
        wall.addBox(new Pos(0, 0), new Pos(this.getRealQuestSize().x, 1));
        this.addEntity(wall);
    };
    Cellar.prototype.addRat = function (pos) {
        var rat = new Rat(this, pos);
        rat.setHealthBar(new QuestEntityHealthBar(rat, new Pos(3, 1)));
        this.addEntity(rat);
    };
    Cellar.prototype.addRats = function () {
        for (var i = 5; i <= 95; i++) {
            // One chance out of 3
            if (Random.oneChanceOutOf(3)) {
                // We add a rat
                this.addRat(new Pos(i, 2));
                // We increase i to avoid adding a rat above the last one
                i += 2;
            }
        }
    };
    Cellar.prototype.goToFifthHouse = function () {
        this.getGame().setPlace(new FifthHouse(this.getGame()));
    };
    Cellar.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 100)
            return true;
        // Else we return false
        return false;
    };
    return Cellar;
})(Quest);
///<reference path="Place.ts"/>
var Cfg = (function (_super) {
    __extends(Cfg, _super);
    // Constructor
    function Cfg(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The map used for the language selection : match the select's options id with the actual usually two letters code used by the Saving module
        this.languageSelectionMap = {
            "cfgLanguageEn": "en",
            "cfgLanguageBr": "br",
            "cfgLanguageCz": "cz",
            "cfgLanguageEs": "es",
            "cfgLanguageFr": "fr",
            "cfgLanguageNl": "nl",
            "cfgLanguageZh": "zh",
            "cfgLanguageDe": "de",
            "cfgLanguageSe": "se",
            "cfgLanguageHu": "hu",
            "cfgLanguageId": "id",
            "cfgLanguagePl": "pl",
            "cfgLanguageUk": "uk",
            "cfgLanguageRu": "ru",
            "cfgLanguageTr": "tr",
            "cfgLanguageEl": "el"
        };
        // Resize the area
        this.renderArea.resize(100, 48);
        // Update for the first time
        this.update();
    }
    // getRenderArea()
    Cfg.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Cfg.prototype.drawAbout = function (x, y) {
        // The title
        this.renderArea.drawArray(Database.getAscii("text/About"), x + 34, y);
        // Who?
        this.renderArea.drawString("Who?", x + 2, y + 7);
        this.renderArea.addBold(x + 2, x + 6, y + 7);
        // Who...
        this.renderArea.drawString("Ideas, game design & code by aniwey.", x + 4, y + 9);
        this.renderArea.drawString("Ascii art by Tobias Nordqvist, GodsTurf, dixsept, Dani \"Deinol\" GÃ³mez and aniwey.", x + 4, y + 10);
        // License?
        this.renderArea.drawString("License?", x + 2, y + 13);
        this.renderArea.addBold(x + 2, x + 10, y + 13);
        // License...
        this.renderArea.drawString("The game source code is published under the GPLv3 license. This means you are free to modify and", x + 4, y + 15);
        this.renderArea.drawString("redistribute the game, even for commercial purposes, under some conditions.", x, y + 16);
        this.renderArea.addHtmlLink(x + 76, y + 16, "source_code.html", "Learn more.");
        this.renderArea.drawString("The ascii art is published under the CC-BY-SA license, which means that you can reuse it if you", x + 4, y + 18);
        this.renderArea.drawString("credit the artist who made the art and share your modifications under the same license.", x, y + 19);
        this.renderArea.addHtmlLink(x + 88, y + 19, "ascii_art.html", "Learn more.");
        // Aything else?
        this.renderArea.drawString("Anything else?", x + 2, y + 22);
        this.renderArea.addBold(x + 2, x + 16, y + 22);
        // Contact
        this.renderArea.drawString("Feel free to contact me at aniwey@gmail.com if you have any comments or questions :)", x + 4, y + 24);
    };
    Cfg.prototype.drawCfgInvertColors = function (x, y) {
        // Text
        this.renderArea.drawString(Database.getText("cfgInvertColors"), x, y);
        this.renderArea.drawString(Database.getTranslatedText("cfgInvertColors"), x, y + 1, true);
        // The checkbox
        this.renderArea.addCheckbox(x + Algo.takeBiggest(Database.getText("cfgInvertColors").length, Database.getTranslatedText("cfgInvertColors").length) + 2, y, new CallbackCollection(this.invertColorsChecked.bind(this)), new CallbackCollection(this.invertColorsUnchecked.bind(this)), "cfgInvertColorsCheckbox", Saving.loadBool("gameInvertedColors"));
    };
    Cfg.prototype.drawCfgLanguage = function (x, y) {
        // Text
        this.renderArea.drawString(Database.getText("cfgChooseLanguage"), x, y);
        this.renderArea.drawString(Database.getTranslatedText("cfgChooseLanguage"), x, y + 1, true);
        // List
        this.renderArea.addList(x + Algo.takeBiggest(Database.getText("cfgChooseLanguage").length, Database.getTranslatedText("cfgChooseLanguage").length) + 2, x + Algo.takeBiggest(Database.getText("cfgChooseLanguage").length, Database.getTranslatedText("cfgChooseLanguage").length) + 20, y, "cfgLanguageList", new CallbackCollection(this.languageSelected.bind(this)), [
            "cfgLanguageEn", "English",
            "cfgLanguageBr", "Brazilian Portuguese (by TranslaCAT)",
            "cfgLanguageZh", "Chinese (by Fan Zhang)",
            "cfgLanguageCz", "Czech (by Keranis)",
            "cfgLanguageNl", "Dutch (by NoÃ«l Wierema and Vincent van Gennep, corrections by Wessel van den Putte)",
            "cfgLanguageFr", "French (by aniwey)",
            "cfgLanguageDe", "German (by Kai Kubasta)",
            "cfgLanguageEl", "Greek (by VagosLabrou)",
            "cfgLanguageHu", "Hungarian (by The_Reaper_CooL)",
            "cfgLanguageId", "Indonesian (by Richard Sudaryono)",
            "cfgLanguagePl", "Polish (by Patryk PoÅ‚omski)",
            "cfgLanguageRu", "Russian (by Julia Richter (Zen Chelios Jr.))",
            "cfgLanguageEs", "Spanish (by SaÃºl Ruiz Calleja and Tania LÃ³pez Camino)",
            "cfgLanguageSe", "Swedish (by Jessica Tsiamis)",
            "cfgLanguageTr", "Turkish (by B. GÃ¼ler)",
            "cfgLanguageUk", "Ukrainian (by Volodymyr Lataniuk)"
        ]);
        // Add the link which will call the selectRightLanguage method after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightLanguage.bind(this)));
        // Add the special message for the chinese translation
        if (Saving.loadString("gameLanguage") == "zh") {
            this.renderArea.drawString("ä¸­æ–‡ç‰ˆç¿»è¯‘ä¼šå¯¼è‡´å°‘é‡å›¾åƒæ˜¾ç¤ºé”™è¯¯ï¼Œæˆ‘ä¼šå°½é‡ä¿®å¤å®ƒä»¬çš„ï¼", x + 9, y + 2, true);
        }
        else if (Saving.loadString("gameLanguage") == "br") {
            this.renderArea.drawArray(Database.getAscii("general/translaCAT"), x + 70, y - 1);
            this.renderArea.addHtmlLink(x + 76, y + 7, "http://www.translacat.com/", "TranslaCAT");
        }
    };
    Cfg.prototype.drawConfigurationText = function (x, y) {
        this.renderArea.drawArray(Database.getAscii("text/Configuration"), x + 17, y);
    };
    Cfg.prototype.invertColorsChecked = function () {
        this.setInvertedColors(true);
    };
    Cfg.prototype.invertColorsUnchecked = function () {
        this.setInvertedColors(false);
    };
    Cfg.prototype.languageSelected = function () {
        // Get the selected language id
        var id = $("#cfgLanguageList").find(":selected").attr("id");
        // Set the new language
        if (this.languageSelectionMap[id] != null) {
            Saving.saveString("gameLanguage", this.languageSelectionMap[id]);
        }
        // Update Cfg
        this.update();
        this.getGame().updatePlace();
    };
    Cfg.prototype.selectRightLanguage = function () {
        // We iterate over all languages
        for (var language in this.languageSelectionMap) {
            // If this is the right one, we select it
            if (Saving.loadString("gameLanguage") == this.languageSelectionMap[language]) {
                $("#" + language).prop('selected', true);
            }
        }
    };
    Cfg.prototype.setInvertedColors = function (invertedColors) {
        Saving.saveBool("gameInvertedColors", invertedColors);
        this.getGame().applyInvertedColorsToCss();
        this.update();
        this.getGame().updateStatusBar(); // We also update the status bar to fix the selected tab's color
        this.getGame().updatePlace();
    };
    Cfg.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // The "Configuration" text
        this.drawConfigurationText(0, 0);
        // Language selection
        this.drawCfgLanguage(0, 8);
        // Invert colors checkbox
        this.drawCfgInvertColors(0, 12);
        // "About" section
        this.drawAbout(0, 18);
    };
    return Cfg;
})(Place);
///<reference path="QuestEntity.ts"/>
var Chest = (function (_super) {
    __extends(Chest, _super);
    // Constructor
    function Chest(quest, globalPosition, isFacingRight, callbackCollection, isOpened) {
        if (isFacingRight === void 0) { isFacingRight = true; }
        if (callbackCollection === void 0) { callbackCollection = new CallbackCollection(); }
        if (isOpened === void 0) { isOpened = false; }
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("A chest", "a chest"), new RenderArea(), new Pos(0, -1), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, -1), new Pos(3, 2))));
        // Set the parameters
        this.isFacingRight = isFacingRight;
        this.callbackCollection = callbackCollection;
        // At first, we're not opened
        this.isOpened = isOpened;
        // Create the opening collision box collection
        this.openingCollisionBoxCollection = new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3)));
        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);
        // Resize the render area
        this.getRenderArea().resizeFromArray(Database.getAscii("places/quests/common/chestClosed"));
        this.setTransparency(new RenderTransparency(" "));
        // Draw for the first time
        this.drawChestAscii();
    }
    // update()
    Chest.prototype.update = function () {
        _super.prototype.update.call(this);
        // If the chest isn't opened yet
        if (this.isOpened == false) {
            // If the player has a collision box collection
            if (this.getQuest().getGame().getPlayer().getCbc() != null) {
                // If it collides with our opening collision box collection
                if (this.getQuest().getGame().getPlayer().getCbc().collidesWith(this.openingCollisionBoxCollection)) {
                    // We are now opened
                    this.isOpened = true;
                    // We fire the callback collection
                    this.callbackCollection.fire();
                    // We re-draw
                    this.drawChestAscii();
                }
            }
        }
    };
    // Private methods
    Chest.prototype.drawChestAscii = function () {
        // We erase
        this.getRenderArea().resetAllButSize();
        // If we're not opened
        if (this.isOpened == false) {
            this.getRenderArea().drawArray(Database.getAscii("places/quests/common/chestClosed"));
        }
        else {
            // If we're facing right
            if (this.isFacingRight)
                this.getRenderArea().drawArray(Database.getAscii("places/quests/common/chestOpenedRight"));
            else
                this.getRenderArea().drawArray(Database.getAscii("places/quests/common/chestOpenedLeft"));
        }
    };
    return Chest;
})(QuestEntity);
///<reference path="StatusBarResource.ts"/>
var ChocolateBars = (function (_super) {
    __extends(ChocolateBars, _super);
    // Constructor
    function ChocolateBars(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    ChocolateBars.prototype.getCurrentAsString = function (totalSize) {
        if (totalSize === void 0) { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;
        var base = "";
        var prefix = "";
        var suffix = "";
        // We set the base or return right now in some special cases
        if (n < 0)
            return "What, negative chocolate bars?!";
        else if (n == 1)
            return "You have 1 chocolate bar";
        else
            base = Algo.numberToStringButNicely(n);
        // How much space do we still have ?
        size = totalSize - base.length;
        // We set the suffix
        if (size >= 15) {
            suffix = " chocolate bars";
            // We add a suffix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;
            // We set the prefix
            if (size >= 9)
                prefix = "You have ";
            else if (size >= 3)
                prefix = "-> ";
        }
        else if (size >= 3)
            suffix = " cb";
        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;
        return prefix + base + suffix;
    };
    return ChocolateBars;
})(StatusBarResource);
var CollisionBoxCollection = (function () {
    // Constructor
    function CollisionBoxCollection() {
        var boxes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            boxes[_i - 0] = arguments[_i];
        }
        this.boxes = boxes;
    }
    // Public method
    CollisionBoxCollection.prototype.addCollisionBox = function (collisionBox) {
        this.boxes.push(collisionBox);
    };
    CollisionBoxCollection.prototype.collidesWith = function (collisionBoxCollection, pos) {
        if (pos === void 0) { pos = new Pos(0, 0); }
        // We test if one of our boxes collide with one of the boxes of the collection given in parameters
        for (var i = 0; i < this.boxes.length; i++) {
            for (var j = 0; j < collisionBoxCollection.getBoxes().length; j++) {
                // If there's a collision between those two, we return true
                if (this.boxes[i].collidesWith(collisionBoxCollection.getBoxes()[j], pos))
                    return true;
            }
        }
        // No collision, we return false
        return false;
    };
    CollisionBoxCollection.prototype.move = function (pos) {
        // We move each collision box
        for (var i = 0; i < this.boxes.length; i++) {
            this.boxes[i].move(pos);
        }
    };
    CollisionBoxCollection.prototype.removeBoxes = function () {
        this.boxes = [];
    };
    // Public getters
    CollisionBoxCollection.prototype.getBoxes = function () {
        return this.boxes;
    };
    return CollisionBoxCollection;
})();
var CollisionBox = (function () {
    // Constructor
    function CollisionBox(questEntity, position, size) {
        this.questEntity = questEntity;
        this.position = position;
        this.size = size;
    }
    // Public methods
    CollisionBox.prototype.collidesWith = function (collisionBox, pos) {
        if (pos === void 0) { pos = new Pos(0, 0); }
        // We return false if we detect that the collision is impossible
        if (collisionBox.questEntity.getGlobalPosition().x + collisionBox.position.x + collisionBox.size.x <= this.questEntity.getGlobalPosition().x + this.position.plus(pos).x)
            return false;
        if (collisionBox.questEntity.getGlobalPosition().x + collisionBox.position.x >= this.questEntity.getGlobalPosition().x + this.position.plus(pos).x + this.size.x)
            return false;
        if (collisionBox.questEntity.getGlobalPosition().y + collisionBox.position.y + collisionBox.size.y <= this.questEntity.getGlobalPosition().y + this.position.plus(pos).y)
            return false;
        if (collisionBox.questEntity.getGlobalPosition().y + collisionBox.position.y >= this.questEntity.getGlobalPosition().y + this.position.plus(pos).y + this.size.y)
            return false;
        // Else, we return true
        return true;
    };
    CollisionBox.prototype.move = function (pos) {
        this.position.add(pos);
    };
    // Public getters
    CollisionBox.prototype.getPosition = function () {
        return this.position;
    };
    CollisionBox.prototype.getSize = function () {
        return this.size;
    };
    return CollisionBox;
})();
var Color = (function () {
    // Constructor
    function Color(colorType, shouldInvert) {
        if (shouldInvert === void 0) { shouldInvert = false; }
        this.setColorType(colorType);
        this.shouldInvert = shouldInvert;
    }
    // Public getters
    Color.prototype.getColorString = function () {
        // If the player doesn't use inverted colors or we don't need to invert
        if (Saving.loadBool("gameInvertedColors") == false || this.shouldInvert == false)
            return this.colorString;
        else
            return this.invertedColorString;
    };
    // Public setters
    Color.prototype.setColorType = function (colorType) {
        // Set the type
        this.colorType = colorType;
        // Set r, g, and b depending on the color type
        switch (this.colorType) {
            // Health bars
            case ColorType.HEALTH_GREEN:
                this.setRGB(20, 212, 0);
                break;
            case ColorType.HEALTH_ORANGE:
                this.setRGB(255, 128, 0);
                break;
            case ColorType.HEALTH_RED:
                this.setRGB(230, 15, 0);
                break;
            case ColorType.HEALTH_UNICOLOR:
                this.setRGB(20, 212, 0);
                break;
            // Player spells
            case ColorType.PLAYER_FIREBALL:
                this.setRGB(255, 120, 0);
                break;
            case ColorType.PLAYER_ACID_DROP:
                this.setRGB(138, 172, 60);
                break;
            case ColorType.PLAYER_THORN:
                this.setRGB(85, 150, 40);
                break;
            case ColorType.PLAYER_OBSIDIAN_BRICK:
                this.setRGB(52, 0, 61);
                break;
            case ColorType.PLAYER_SUMMONED_DEMON:
                this.setRGB(0, 0, 0);
                break;
            // Eq items spells
            case ColorType.RED_ENCHANTED_GLOVES_FIREBALL:
                this.setRGB(255, 80, 0);
                break;
            // Quest buttons
            case ColorType.QUEST_BUTTON_ACID_RAIN:
                this.setRGB(138, 172, 60);
                break;
            case ColorType.QUEST_BUTTON_FIREBALL:
                this.setRGB(255, 120, 0);
                break;
            case ColorType.QUEST_BUTTON_TELEPORT:
                this.setRGB(185, 213, 213);
                break;
            case ColorType.QUEST_BUTTON_ERASE_MAGIC:
                this.setRGB(230, 255, 108);
                break;
            case ColorType.QUEST_BUTTON_THORNS_SHIELD:
                this.setRGB(85, 150, 40);
                break;
            case ColorType.QUEST_BUTTON_OBSIDIAN_WALL:
                this.setRGB(180, 90, 130);
                break;
            case ColorType.QUEST_BUTTON_BLACK_DEMONS:
                this.setRGB(128, 128, 128);
                break;
            case ColorType.QUEST_BUTTON_HEALTH_POTION:
                this.setRGB(255, 31, 31);
                break;
            case ColorType.QUEST_BUTTON_TURTLE_POTION:
                this.setRGB(123, 137, 13);
                break;
            case ColorType.QUEST_BUTTON_ANTI_GRAVITY_POTION:
                this.setRGB(187, 64, 188);
                break;
            case ColorType.QUEST_BUTTON_BERSERK_POTION:
                this.setRGB(110, 30, 47);
                break;
            case ColorType.QUEST_BUTTON_CLONING_POTION:
                this.setRGB(200, 200, 200);
                break;
            case ColorType.QUEST_BUTTON_P_POTION:
                this.setRGB(42, 135, 141);
                break;
            case ColorType.QUEST_BUTTON_X_POTION:
                this.setRGB(252, 82, 255);
                break;
            case ColorType.QUEST_BUTTON_SOME_OBJECT:
                this.setRGB(209, 131, 67);
                break;
            case ColorType.QUEST_BLACKHOLE_SPELL:
                this.setRGB(80, 80, 80);
                break;
            // Quest spells/potions countdown color
            case ColorType.QUEST_COUNTDOWN:
                this.setRGB(255, 0, 0);
                break;
            // Special colors used for the save page
            case ColorType.SAVE_GREEN:
                this.setRGB(42, 184, 39);
                break;
            case ColorType.SAVE_RED:
                this.setRGB(255, 28, 28);
                break;
            // Status bar special colors
            case ColorType.STATUS_BAR_SELECTED_TAB:
                this.setRGB(191, 191, 191);
                break;
            // Sea horse water ball
            case ColorType.SEAHORSE_WATER_BALL:
                this.setRGB(0, 58, 118);
                break;
            // The cave background color for the front exit
            case ColorType.THECAVE_BACKGROUND_COLOR:
                this.setRGB(20, 20, 20);
                break;
            // Secial color used by the monkey wizard
            case ColorType.MONKEY_WIZARD_BALL:
                this.setRGB(114, 0, 101);
                break;
            case ColorType.MONKEY_WIZARD_BALL_STORED:
                this.setRGB(114, 0, 56);
                break;
            // Special colors used in the forest quest
            case ColorType.TREE_SPIRIT_MAGIC_SPINE:
                this.setRGB(16, 95, 16);
                break;
            // Special color in the castle's dark room
            case ColorType.CASTLE_DARK_ROOM:
                this.setRGB(0, 0, 0);
                break;
            // Special colors for the shark fins
            case ColorType.BIGSHARK_FIN_RED:
                this.setRGB(217, 31, 31);
                break;
            case ColorType.BIGSHARK_FIN_GREEN:
                this.setRGB(31, 217, 64);
                break;
            case ColorType.BIGSHARK_FIN_PURPLE:
                this.setRGB(151, 31, 217);
                break;
            // Special colors for the blackhole spell
            case ColorType.BLACKHOLE_GREY20:
                this.setRGB(20, 20, 20);
                break;
            case ColorType.BLACKHOLE_GREY40:
                this.setRGB(40, 40, 40);
                break;
            case ColorType.BLACKHOLE_GREY60:
                this.setRGB(60, 60, 60);
                break;
            case ColorType.BLACKHOLE_GREY80:
                this.setRGB(80, 80, 80);
                break;
            case ColorType.BLACKHOLE_GREY100:
                this.setRGB(100, 100, 100);
                break;
            case ColorType.BLACKHOLE_GREY120:
                this.setRGB(120, 120, 120);
                break;
            case ColorType.BLACKHOLE_GREY140:
                this.setRGB(140, 140, 140);
                break;
            case ColorType.BLACKHOLE_GREY160:
                this.setRGB(160, 160, 160);
                break;
            case ColorType.BLACKHOLE_GREY180:
                this.setRGB(180, 180, 180);
                break;
            case ColorType.BLACKHOLE_GREY200:
                this.setRGB(200, 200, 200);
                break;
            case ColorType.BLACKHOLE_GREY220:
                this.setRGB(220, 220, 220);
                break;
            case ColorType.BLACKHOLE_GREY240:
                this.setRGB(240, 240, 240);
                break;
            // Special colors for the Hell quest
            case ColorType.HELL_RED_LAVA:
                this.setRGB(200, 8, 3);
                break;
            case ColorType.DEVIL_FIREBALL:
                this.setRGB(191, 0, 0);
                break;
            // Special colors for the developer quest
            case ColorType.DEVELOPER_BLUE:
                this.setRGB(20, 20, 213);
                break;
            case ColorType.DEVELOPER_YELLOW:
                this.setRGB(227, 194, 11);
                break;
            case ColorType.DEVELOPER_ORANGE:
                this.setRGB(201, 77, 9);
                break;
        }
    };
    // Private setters
    Color.prototype.setColorString = function (colorString) {
        this.colorString = colorString;
    };
    Color.prototype.setInvertedColorString = function (invertedColorString) {
        this.invertedColorString = invertedColorString;
    };
    Color.prototype.setRGB = function (r, g, b) {
        // Set r, g and b
        this.r = r;
        this.g = g;
        this.b = b;
        // Set the color strings from r, g and b
        this.setColorString("rgb(" + r.toString() + ", " + g.toString() + ", " + b.toString() + ")");
        this.setInvertedColorString("rgb(" + (255 - r).toString() + ", " + (255 - g).toString() + ", " + (255 - b).toString() + ")");
    };
    return Color;
})();
var ColorType;
(function (ColorType) {
    // Health bars
    ColorType[ColorType["HEALTH_GREEN"] = 0] = "HEALTH_GREEN";
    ColorType[ColorType["HEALTH_ORANGE"] = 1] = "HEALTH_ORANGE";
    ColorType[ColorType["HEALTH_RED"] = 2] = "HEALTH_RED";
    ColorType[ColorType["HEALTH_UNICOLOR"] = 3] = "HEALTH_UNICOLOR";
    // Player spells
    ColorType[ColorType["PLAYER_FIREBALL"] = 4] = "PLAYER_FIREBALL";
    ColorType[ColorType["PLAYER_ACID_DROP"] = 5] = "PLAYER_ACID_DROP";
    ColorType[ColorType["PLAYER_THORN"] = 6] = "PLAYER_THORN";
    ColorType[ColorType["PLAYER_OBSIDIAN_BRICK"] = 7] = "PLAYER_OBSIDIAN_BRICK";
    ColorType[ColorType["PLAYER_SUMMONED_DEMON"] = 8] = "PLAYER_SUMMONED_DEMON";
    // Eq items spells
    ColorType[ColorType["RED_ENCHANTED_GLOVES_FIREBALL"] = 9] = "RED_ENCHANTED_GLOVES_FIREBALL";
    // Quest buttons
    ColorType[ColorType["QUEST_BUTTON_ACID_RAIN"] = 10] = "QUEST_BUTTON_ACID_RAIN";
    ColorType[ColorType["QUEST_BUTTON_FIREBALL"] = 11] = "QUEST_BUTTON_FIREBALL";
    ColorType[ColorType["QUEST_BUTTON_TELEPORT"] = 12] = "QUEST_BUTTON_TELEPORT";
    ColorType[ColorType["QUEST_BUTTON_ERASE_MAGIC"] = 13] = "QUEST_BUTTON_ERASE_MAGIC";
    ColorType[ColorType["QUEST_BUTTON_THORNS_SHIELD"] = 14] = "QUEST_BUTTON_THORNS_SHIELD";
    ColorType[ColorType["QUEST_BUTTON_OBSIDIAN_WALL"] = 15] = "QUEST_BUTTON_OBSIDIAN_WALL";
    ColorType[ColorType["QUEST_BUTTON_BLACK_DEMONS"] = 16] = "QUEST_BUTTON_BLACK_DEMONS";
    ColorType[ColorType["QUEST_BUTTON_HEALTH_POTION"] = 17] = "QUEST_BUTTON_HEALTH_POTION";
    ColorType[ColorType["QUEST_BUTTON_TURTLE_POTION"] = 18] = "QUEST_BUTTON_TURTLE_POTION";
    ColorType[ColorType["QUEST_BUTTON_ANTI_GRAVITY_POTION"] = 19] = "QUEST_BUTTON_ANTI_GRAVITY_POTION";
    ColorType[ColorType["QUEST_BUTTON_BERSERK_POTION"] = 20] = "QUEST_BUTTON_BERSERK_POTION";
    ColorType[ColorType["QUEST_BUTTON_CLONING_POTION"] = 21] = "QUEST_BUTTON_CLONING_POTION";
    ColorType[ColorType["QUEST_BUTTON_P_POTION"] = 22] = "QUEST_BUTTON_P_POTION";
    ColorType[ColorType["QUEST_BUTTON_X_POTION"] = 23] = "QUEST_BUTTON_X_POTION";
    ColorType[ColorType["QUEST_BUTTON_SOME_OBJECT"] = 24] = "QUEST_BUTTON_SOME_OBJECT";
    ColorType[ColorType["QUEST_BLACKHOLE_SPELL"] = 25] = "QUEST_BLACKHOLE_SPELL";
    // Quest spells/potions countdown color
    ColorType[ColorType["QUEST_COUNTDOWN"] = 26] = "QUEST_COUNTDOWN";
    // Special colors used for the save page
    ColorType[ColorType["SAVE_GREEN"] = 27] = "SAVE_GREEN";
    ColorType[ColorType["SAVE_RED"] = 28] = "SAVE_RED";
    // Status bar special colors
    ColorType[ColorType["STATUS_BAR_SELECTED_TAB"] = 29] = "STATUS_BAR_SELECTED_TAB";
    // Sea horse water ball
    ColorType[ColorType["SEAHORSE_WATER_BALL"] = 30] = "SEAHORSE_WATER_BALL";
    // The cave background color for the front exit
    ColorType[ColorType["THECAVE_BACKGROUND_COLOR"] = 31] = "THECAVE_BACKGROUND_COLOR";
    // Secial colors used by the monkey wizard
    ColorType[ColorType["MONKEY_WIZARD_BALL"] = 32] = "MONKEY_WIZARD_BALL";
    ColorType[ColorType["MONKEY_WIZARD_BALL_STORED"] = 33] = "MONKEY_WIZARD_BALL_STORED";
    // Special colors used in the forest quest
    ColorType[ColorType["TREE_SPIRIT_MAGIC_SPINE"] = 34] = "TREE_SPIRIT_MAGIC_SPINE";
    // Special color in the castle's dark room
    ColorType[ColorType["CASTLE_DARK_ROOM"] = 35] = "CASTLE_DARK_ROOM";
    // Special colors for the shark fins
    ColorType[ColorType["BIGSHARK_FIN_RED"] = 36] = "BIGSHARK_FIN_RED";
    ColorType[ColorType["BIGSHARK_FIN_GREEN"] = 37] = "BIGSHARK_FIN_GREEN";
    ColorType[ColorType["BIGSHARK_FIN_PURPLE"] = 38] = "BIGSHARK_FIN_PURPLE";
    // Special colors for the blackhole spell
    ColorType[ColorType["BLACKHOLE_GREY20"] = 39] = "BLACKHOLE_GREY20";
    ColorType[ColorType["BLACKHOLE_GREY40"] = 40] = "BLACKHOLE_GREY40";
    ColorType[ColorType["BLACKHOLE_GREY60"] = 41] = "BLACKHOLE_GREY60";
    ColorType[ColorType["BLACKHOLE_GREY80"] = 42] = "BLACKHOLE_GREY80";
    ColorType[ColorType["BLACKHOLE_GREY100"] = 43] = "BLACKHOLE_GREY100";
    ColorType[ColorType["BLACKHOLE_GREY120"] = 44] = "BLACKHOLE_GREY120";
    ColorType[ColorType["BLACKHOLE_GREY140"] = 45] = "BLACKHOLE_GREY140";
    ColorType[ColorType["BLACKHOLE_GREY160"] = 46] = "BLACKHOLE_GREY160";
    ColorType[ColorType["BLACKHOLE_GREY180"] = 47] = "BLACKHOLE_GREY180";
    ColorType[ColorType["BLACKHOLE_GREY200"] = 48] = "BLACKHOLE_GREY200";
    ColorType[ColorType["BLACKHOLE_GREY220"] = 49] = "BLACKHOLE_GREY220";
    ColorType[ColorType["BLACKHOLE_GREY240"] = 50] = "BLACKHOLE_GREY240";
    // Special colors for the Hell quest
    ColorType[ColorType["HELL_RED_LAVA"] = 51] = "HELL_RED_LAVA";
    ColorType[ColorType["DEVIL_FIREBALL"] = 52] = "DEVIL_FIREBALL";
    // Special colors for the developer quest
    ColorType[ColorType["DEVELOPER_BLUE"] = 53] = "DEVELOPER_BLUE";
    ColorType[ColorType["DEVELOPER_YELLOW"] = 54] = "DEVELOPER_YELLOW";
    ColorType[ColorType["DEVELOPER_ORANGE"] = 55] = "DEVELOPER_ORANGE";
})(ColorType || (ColorType = {}));
///<reference path="./../../libs/jquery.d.ts"/>
var Database;
(function (Database) {
    // Variables
    var asciiMap = {}; // A map which associates strings (the keys) to array of strings (the ascii arts)
    var asciiSizeMap = {}; // A map which associates strings (the keys) to the sizes of ascii arts
    var textMap = {}; // A map which associated strings (the keys) to strings (the texts)
    // Public functions
    function addAscii(asciiName, width, height, asciiArray) {
        asciiMap[asciiName] = asciiArray;
        asciiSizeMap[asciiName] = new Pos(width, height);
    }
    Database.addAscii = addAscii;
    function addText(key, text) {
        textMap[key] = text;
    }
    Database.addText = addText;
    function isTranslated() {
        if (Saving.loadString("gameLanguage") != "en")
            return true;
        return false;
    }
    Database.isTranslated = isTranslated;
    // Public getters
    function getAscii(key) {
        if (asciiMap[key] == null)
            console.log("Error : trying to access the unknown ascii art \"" + key + "\"");
        return asciiMap[key];
    }
    Database.getAscii = getAscii;
    function getAsciiHeight(key) {
        return asciiSizeMap[key].y;
    }
    Database.getAsciiHeight = getAsciiHeight;
    function getAsciiWidth(key) {
        return asciiSizeMap[key].x;
    }
    Database.getAsciiWidth = getAsciiWidth;
    function getPartOfAscii(key, y1, y2) {
        return getAscii(key).slice(y1, y2);
    }
    Database.getPartOfAscii = getPartOfAscii;
    function getText(key) {
        if (textMap["en." + key] == null)
            console.log("Error : trying to access the unknown text \"" + key + "\"");
        return textMap["en." + key];
    }
    Database.getText = getText;
    function getTranslatedText(key) {
        // If we have a language (other than english) selected
        if (Saving.loadString("gameLanguage") != "en") {
            // If the translated text can't be found
            if (textMap[Saving.loadString("gameLanguage") + "." + key] == null)
                console.log("Error : trying to access the unknown translated text \"" + key + "\" for language " + Saving.loadString("gameLanguage") + "."); // Error
            // If the translated text isn't chinese
            if (Saving.loadString("gameLanguage") != "zh")
                return textMap[Saving.loadString("gameLanguage") + "." + key]; // We just return the text
            else
                return textMap[Saving.loadString("gameLanguage") + "." + key].addChineseSpaces(); // We return the text after adding spaces
        }
        // Else, we return an empty string
        return "";
    }
    Database.getTranslatedText = getTranslatedText;
})(Database || (Database = {}));
///<reference path="QuestEntity.ts"/>
var Demon = (function (_super) {
    __extends(Demon, _super);
    // Constructor
    function Demon(quest, pos) {
        _super.call(this, quest, pos, new Naming("A demon", "a demon"), new RenderArea(0, 0), new Pos(0, 0), new CollisionBoxCollection(), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        // Set the demon type, randomly-chosen
        switch (Random.between(0, 2)) {
            case 0:
                this.type = DemonType.CUBE;
                break;
            case 1:
                this.type = DemonType.EYES;
                break;
            case 2:
                this.type = DemonType.BUBBLES;
                break;
        }
        // Depending on the type, resize the render area, add a collision box, and draw the ascii art, and add the weapon and its delay
        switch (this.type) {
            case DemonType.CUBE:
                this.getRenderArea().resize(5, 3);
                this.getCbc().addCollisionBox(new CollisionBox(this, new Pos(0, 0), new Pos(5, 3)));
                this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/demonCube"));
                this.setTransparency(new RenderTransparency(" ", "%"));
                this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its huge body", "its huge body"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 2), new Pos(7, 2))), 50));
                this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(10);
                break;
            case DemonType.EYES:
                this.getRenderArea().resize(5, 4);
                this.getCbc().addCollisionBox(new CollisionBox(this, new Pos(0, 1), new Pos(5, 3)));
                this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/demonEyes"));
                this.setTransparency(new RenderTransparency(" ", "%"));
                this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Demonish eyes", "demonish eyes"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(7, 6))), 10));
                this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
                break;
            case DemonType.BUBBLES:
                this.getRenderArea().resize(5, 3);
                this.getCbc().addCollisionBox(new CollisionBox(this, new Pos(0, 0), new Pos(5, 3)));
                this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/demonBubbles" + Random.between(0, 6).toString()));
                this.setTransparency(new RenderTransparency(" "));
                this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Fire bubbles", "fire bubbles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(7, 5))), 15));
                this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
                break;
        }
        // Set the health points, depending on the type
        switch (this.type) {
            case DemonType.CUBE:
                this.setMaxHp(120);
                this.setHp(120);
                break;
            default:
                this.setMaxHp(30 + Random.between(0, 7) * 10);
                this.setHp(this.getMaxHp());
                break;
        }
    }
    // update()
    Demon.prototype.update = function () {
        // Try to go towards the player
        this.goTowards(this.getRenderAreaCenter(), this.getQuest().getGame().getPlayer().getRenderAreaCenter(), 0, new Pos(1, 0));
        // If we're far from the player, we try to jump
        if (Math.abs(this.getRenderAreaCenter().x - this.getQuest().getGame().getPlayer().getRenderAreaCenter().x) > 5)
            this.jump(3);
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    Demon.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(5 + Random.upTo(5)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return Demon;
})(QuestEntity);
var DemonType;
(function (DemonType) {
    DemonType[DemonType["CUBE"] = 0] = "CUBE";
    DemonType[DemonType["EYES"] = 1] = "EYES";
    DemonType[DemonType["BUBBLES"] = 2] = "BUBBLES";
})(DemonType || (DemonType = {}));
///<reference path="QuestEntity.ts"/>
var DesertBird = (function (_super) {
    __extends(DesertBird, _super);
    // Constructor
    function DesertBird(quest, pos, goingRight) {
        _super.call(this, quest, pos, new Naming("A desert bird", "a desert bird"), new RenderArea(9, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(9, 4))));
        // If we're heading to right
        if (goingRight) {
            this.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
            this.setQuestEntityAnimation(new QuestEntityAnimation(3, Random.upTo(2), Random.upTo(1), "places/quests/desert/birdRightUp", "places/quests/desert/birdRightDown"));
        }
        else {
            this.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
            this.setQuestEntityAnimation(new QuestEntityAnimation(3, Random.upTo(2), Random.upTo(1), "places/quests/desert/birdLeftUp", "places/quests/desert/birdLeftDown"));
        }
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(6);
        this.setHp(6);
    }
    // willDie()
    DesertBird.prototype.willDie = function () {
        _super.prototype.willDie.call(this);
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedFeather", "You found a desert bird feather!", "You gain a desert bird feather"));
    };
    return DesertBird;
})(QuestEntity);
///<reference path="Quest.ts"/>
var Desert = (function (_super) {
    __extends(Desert, _super);
    // Constructor
    function Desert(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(149, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 26));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addGround(0, 3, 1, 4, 12, 0, 13, 18, 1, 19, 24, 2, 25, 30, 3, 31, 36, 2, 37, 42, 1, 43, 51, 0, 52, 57, 1, 58, 62, 2, 63, 68, 3, 69, 75, 2, 76, 82, 1, 83, 92, 0, 93, 97, 1, 98, 101, 2, 102, 107, 3, 108, 113, 2, 114, 119, 1, 120, 128, 0, 129, 134, 1, 135, 139, 2, 140, 145, 3, 146, 148, 2);
        // Bird adding stuff
        this.currentBirdTime = 0;
        this.setNextBirdAt();
        // Add the camels
        this.addCamel(new Pos(44, 24));
        this.addCamel(new Pos(65, 26));
        this.addCamel(new Pos(84, 24));
        this.addCamel(new Pos(106, 26));
        this.addCamel(new Pos(118, 24));
        this.addCamel(new Pos(144, 26));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the desert, camels and palm trees as far as the eye can see."));
    }
    // Public methods
    Desert.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    Desert.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You made your way through the desert!"));
            Saving.saveBool("mainMapDoneDesert", true); // The desert is done
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the desert. Alone."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Desert.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Possibly add a bird
            if (this.currentBirdTime >= this.nextBirdAt) {
                this.currentBirdTime = 0;
                this.setNextBirdAt();
                this.addBird();
            }
            else
                this.currentBirdTime += 1;
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y + 21);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Desert.prototype.addBird = function () {
        // We create the variable which will contain our bird
        var bird;
        // We choose the y position of our bird
        var yPos = Random.upTo(14);
        // We check if we could collide with another bird using this y position
        for (var i = 0; i < this.getEntities().length; i++) {
            if (this.getEntities()[i].getCbc() != null && this.getEntities()[i].getCbc().collidesWith(new CollisionBoxCollection(new CollisionBox(new QuestEntity(this, new Pos(0, 0)), new Pos(0, yPos), new Pos(149, 4)))))
                return;
        }
        // We add a bird going right
        if (Random.flipACoin()) {
            bird = new DesertBird(this, new Pos(-9, yPos), true);
        }
        else {
            bird = new DesertBird(this, new Pos(149, yPos), false);
        }
        // We add the health bar and finally add the bird to the entities
        bird.setHealthBar(new QuestEntityHealthBar(bird, new Pos(9, 1)));
        this.addEntity(bird);
    };
    Desert.prototype.addCamel = function (pos) {
        var camel;
        if (Random.oneChanceOutOf(20))
            camel = new TripodCamel(this, pos);
        else
            camel = new Camel(this, pos);
        camel.setHealthBar(new QuestEntityHealthBar(camel, new Pos(7, 1)));
        this.addEntity(camel);
    };
    Desert.prototype.addGround = function () {
        var positions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            positions[_i - 0] = arguments[_i];
        }
        // Create the wall entity
        this.addEntity(new Wall(this, new Pos(0, 26)));
        var wall = (this.getLastEntity());
        // Add the boxes
        for (var i = 0; i < positions.length / 3; i++) {
            wall.addBox(new Pos(positions[i * 3], positions[i * 3 + 2]), new Pos(positions[i * 3 + 1] - positions[i * 3] + 1, 4 - positions[i * 3 + 2]));
        }
    };
    Desert.prototype.setNextBirdAt = function () {
        this.nextBirdAt = 20 + Random.upTo(30);
    };
    Desert.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 149)
            return true;
        // Else we return false
        return false;
    };
    return Desert;
})(Quest);
var DeveloperEntityText = (function () {
    // Constructor
    function DeveloperEntityText(damage, textPos, timeToLive, text) {
        // Set from parameters
        this.damage = damage;
        this.text = text;
        this.textPos = textPos;
        this.timeToLive = timeToLive;
        // Set the default x position
        this.xPos = 0;
    }
    // Public methods
    DeveloperEntityText.prototype.update = function (dev) {
        // Iterate over strings
        for (var i = 0; i < this.text.length; i++) {
            // If there's a character at the current xPos of this string
            if (this.xPos < this.text[i].length && this.text[i][this.xPos] != " ") {
                // Add a magic ball, depending on the character
                switch (this.text[i][this.xPos]) {
                    case "B":
                        dev.addMagicBall(this.textPos.plus(new Pos(this.xPos, i)), this.damage, this.timeToLive - this.xPos, ColorType.DEVELOPER_BLUE);
                        break;
                    case "Y":
                        dev.addMagicBall(this.textPos.plus(new Pos(this.xPos, i)), this.damage, this.timeToLive - this.xPos, ColorType.DEVELOPER_YELLOW);
                        break;
                    case "O":
                        dev.addMagicBall(this.textPos.plus(new Pos(this.xPos, i)), this.damage, this.timeToLive - this.xPos, ColorType.DEVELOPER_ORANGE);
                        break;
                }
            }
        }
        // Increase xPos
        this.xPos += 1;
    };
    return DeveloperEntityText;
})();
///<reference path="QuestEntity.ts"/>
var DeveloperEntity = (function (_super) {
    __extends(DeveloperEntity, _super);
    // Constructor
    function DeveloperEntity(quest, pos) {
        _super.call(this, quest, pos, new Naming("The developer", "the developer"), new RenderArea(43, 34), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(20, 0), new Pos(6, 1)), new CollisionBox(this, new Pos(16, 1), new Pos(12, 1)), new CollisionBox(this, new Pos(15, 2), new Pos(14, 1)), new CollisionBox(this, new Pos(12, 3), new Pos(18, 1)), new CollisionBox(this, new Pos(11, 4), new Pos(20, 1)), new CollisionBox(this, new Pos(10, 5), new Pos(22, 1)), new CollisionBox(this, new Pos(9, 6), new Pos(24, 2)), new CollisionBox(this, new Pos(9, 8), new Pos(25, 1)), new CollisionBox(this, new Pos(9, 9), new Pos(26, 2)), new CollisionBox(this, new Pos(9, 11), new Pos(27, 3)), new CollisionBox(this, new Pos(9, 14), new Pos(28, 1)), new CollisionBox(this, new Pos(8, 15), new Pos(29, 3)), new CollisionBox(this, new Pos(7, 18), new Pos(30, 4)), new CollisionBox(this, new Pos(7, 22), new Pos(31, 2)), new CollisionBox(this, new Pos(6, 24), new Pos(32, 4)), new CollisionBox(this, new Pos(5, 28), new Pos(33, 1)), new CollisionBox(this, new Pos(5, 29), new Pos(34, 1)), new CollisionBox(this, new Pos(4, 30), new Pos(35, 1)), new CollisionBox(this, new Pos(2, 31), new Pos(38, 1)), new CollisionBox(this, new Pos(1, 32), new Pos(40, 1)), new CollisionBox(this, new Pos(0, 33), new Pos(43, 1))), new QuestEntityMovement());
        // Init the time spent
        this.timeSpent = 0;
        // Create the texts
        this.createTexts();
        // Set gravity
        this.getQuestEntityMovement().setGravity(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(1000000000);
        this.setHp(1000000000);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/developer/me"));
        this.setTransparency(new RenderTransparency(" "));
    }
    // inflictDamage()
    DeveloperEntity.prototype.inflictDamage = function (damage, reason) {
        _super.prototype.inflictDamage.call(this, damage * Random.between(60000, 70000), reason);
    };
    // update()
    DeveloperEntity.prototype.update = function () {
        // Increase the time spent
        this.timeSpent += 1;
        // Increase the current text index, depending on the time spent
        if (this.timeSpent == 95 || this.timeSpent == 245)
            this.indexOfCurrentText += 1;
        // Call the current text update method
        this.texts[this.indexOfCurrentText].update(this);
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    DeveloperEntity.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(6000000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedY", "You found a strange stone.", "You gain a strange stone."));
    };
    // Public methods
    DeveloperEntity.prototype.addMagicBall = function (finalPosition, damage, timeToLive, colorType) {
        // Set the first position (either the mouth or one of the eyes)
        var firstPosition;
        switch (Random.upTo(2)) {
            case 0:
                firstPosition = new Pos(15, 15);
                break;
            case 1:
                firstPosition = new Pos(25, 15);
                break;
            case 2:
                firstPosition = new Pos(20, 26);
                break;
        }
        // Create the fireball
        var magicBall = new DeveloperMagicBall(this.getQuest(), this.getGlobalPosition().plus(firstPosition), new Naming("A magic ball", "a magic ball"), new Color(colorType), new Pos(2, 1), damage, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magic ball", "a magic ball")), timeToLive);
        // No target
        magicBall.setTargetTypeTargetPosition(finalPosition, new Pos(1, 1));
        // Add the entity
        this.getQuest().addEntity(magicBall);
    };
    DeveloperEntity.prototype.createTexts = function () {
        // Empty the array
        this.texts = [];
        // At first we're working on the first text
        this.indexOfCurrentText = 0;
        // Add "Hello"
        this.texts.push(new DeveloperEntityText(20, new Pos(3, 3), 110, Database.getAscii("places/quests/developer/hello")));
        // Add "I'm glad you made it so far"
        this.texts.push(new DeveloperEntityText(32, new Pos(3, 3), 150, Database.getAscii("places/quests/developer/imgladyoumadeitsofar")));
        // Add "<3"
        this.texts.push(new DeveloperEntityText(9999999999999, new Pos(8, 10), 100, Database.getAscii("places/quests/developer/love")));
    };
    DeveloperEntity.prototype.playerUsedBlackMagic = function () {
        // We use a blackhole on the player
        this.getQuest().addEntity(new Blackhole(this.getQuest(), this.getQuest().getGame().getPlayer().getRenderAreaCenter(), 5000, new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.SPELL).setQuestEntity(this).setSpellNaming(new Naming("A blackhole", "a blackhole"))));
    };
    return DeveloperEntity;
})(QuestEntity);
///<reference path="QuestEntitySpell.ts"/>
var Fireball = (function (_super) {
    __extends(Fireball, _super);
    // Constructor
    function Fireball(quest, pos, naming, color, size, damage, questEntityDamageReason) {
        // Call the mother class constructor
        _super.call(this, quest, pos, naming);
        // Target stuff
        this.targetType = FireballTargetType.NO_TARGET;
        // Set the size
        this.size = size;
        // Set the damage
        this.damage = damage;
        // Set the quest entity damage reason
        this.questEntityDamageReason = questEntityDamageReason;
        // Create the damage collision box collection
        this.damageCollisionBoxCollection = new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), this.size));
        // Add the color
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(0, 0), this.size, color));
        // Create a quest entity movement
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(0, 0)));
        // Set the default target type
        this.setTargetTypeNoTarget(new Pos(0, 0));
    }
    // Public methods
    Fireball.prototype.setTargetTypeNoTarget = function (movement) {
        this.targetType = FireballTargetType.NO_TARGET;
        this.getQuestEntityMovement().setOffset(movement); // Set the movement (it will be kept later by itself)
    };
    Fireball.prototype.setTargetTypeTargetEntity = function (entity, specialTargetDamage, speed) {
        if (specialTargetDamage === void 0) { specialTargetDamage = null; }
        if (speed === void 0) { speed = new Pos(1, 1); }
        this.targetType = FireballTargetType.TARGET_ENTITY;
        this.fireballTargetEntity = entity;
        this.specialTargetDamage = specialTargetDamage;
        this.speed = speed;
    };
    Fireball.prototype.setTargetTypeTargetPosition = function (pos, speed) {
        if (speed === void 0) { speed = new Pos(1, 1); }
        this.targetType = FireballTargetType.TARGET_POSITION;
        this.targetPosition = pos;
        this.speed = speed;
    };
    Fireball.prototype.setTargetTypeTargetStickOnEntity = function (entity, specialTargetPosition) {
        if (specialTargetPosition === void 0) { specialTargetPosition = new Pos(0, 0); }
        this.targetType = FireballTargetType.TARGET_STICK_ON_ENTITY;
        this.fireballTargetEntity = entity;
        this.specialTargetPosition = specialTargetPosition;
    };
    Fireball.prototype.update = function () {
        // If we target an entity
        if (this.targetType == FireballTargetType.TARGET_ENTITY) {
            // If this entity is still alive
            if (this.fireballTargetEntity != null && this.fireballTargetEntity.getDead() == false) {
                // We go towards it
                this.goTowards(this.getGlobalPosition().plus(new Pos(Math.floor(this.size.x / 2), Math.floor(this.size.y / 2))), this.fireballTargetEntity.getRenderAreaCenter(), 0, this.speed);
            }
            else
                this.setDead(true);
        }
        else if (this.targetType == FireballTargetType.TARGET_STICK_ON_ENTITY) {
            // If this entity is still alive
            if (this.fireballTargetEntity != null && this.fireballTargetEntity.getDead() == false) {
                // We teleport on it
                this.teleport(this.fireballTargetEntity.getGlobalPosition().plus(this.specialTargetPosition));
            }
            else
                this.setDead(true);
        }
        else if (this.targetType == FireballTargetType.TARGET_POSITION) {
            // We go towards this position
            this.goTowards(this.getGlobalPosition().plus(new Pos(Math.floor(this.size.x / 2), Math.floor(this.size.y / 2))), this.targetPosition, 0, this.speed);
        }
        // Handle our damage
        this.handleDamage();
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    Fireball.prototype.willDie = function () { };
    // Private methods
    Fireball.prototype.handleDamage = function () {
        // We iterate over entities
        for (var i = 0; i < this.getQuest().getEntities().length; i++) {
            // If it is from a different team than the team of the entity which launched the fireball
            if (this.questEntityDamageReason.getQuestEntityTeam() != this.getQuest().getEntities()[i].getTeam()) {
                // If it is destructible
                if (this.getQuest().getEntities()[i].getDestructible()) {
                    // If it has a collision box collection
                    if (this.getQuest().getEntities()[i].getCbc() != null) {
                        // If this collision box collection collides with ours
                        if (this.getQuest().getEntities()[i].getCbc().collidesWith(this.damageCollisionBoxCollection)) {
                            // If...
                            if (this.getQuest().getEntities()[i] == this.fireballTargetEntity &&
                                this.targetType == FireballTargetType.TARGET_ENTITY &&
                                this.fireballTargetEntity != null &&
                                this.fireballTargetEntity.getDead() == false &&
                                this.specialTargetDamage != null // And we want to inflict it special damage
                            ) {
                                this.getQuest().getEntities()[i].inflictDamage(this.specialTargetDamage, this.questEntityDamageReason);
                            }
                            else {
                                this.getQuest().getEntities()[i].inflictDamage(this.damage, this.questEntityDamageReason);
                            }
                            // We die because we inflicted damage
                            this.setDead(true);
                        }
                    }
                }
            }
        }
    };
    return Fireball;
})(QuestEntitySpell);
///<reference path="Fireball.ts"/>
var DeveloperMagicBall = (function (_super) {
    __extends(DeveloperMagicBall, _super);
    // Constructor
    function DeveloperMagicBall(quest, pos, naming, color, size, damage, questEntityDamageReason, timeToLive) {
        // Call the mother class constructor
        _super.call(this, quest, pos, naming, color, size, damage, questEntityDamageReason);
        // Did we target the player already?
        this.playerTargeted = false;
        // Set the time to live
        this.timeToLive = timeToLive;
    }
    // Public methods
    DeveloperMagicBall.prototype.update = function () {
        // If the player isn't targeted yet
        if (this.playerTargeted == false) {
            // If it's time to target the player
            if (this.timeToLive <= 0) {
                // We target it
                this.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer(), null, new Pos(2, 1));
            }
            else
                this.timeToLive -= 1;
        }
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    DeveloperMagicBall.prototype.willDie = function () { };
    return DeveloperMagicBall;
})(Fireball);
///<reference path="Quest.ts"/>
var Developer = (function (_super) {
    __extends(Developer, _super);
    // Constructor
    function Developer(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 34);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 33));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the developer entity
        this.addDeveloperEntity(new Pos(57, 0));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You're attacking the developer."));
    }
    // Public methods
    Developer.prototype.castPlayerBlackDemons = function () {
        _super.prototype.castPlayerBlackDemons.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };
    Developer.prototype.castPlayerBlackhole = function () {
        _super.prototype.castPlayerBlackhole.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };
    Developer.prototype.castPlayerEraseMagic = function () {
        _super.prototype.castPlayerEraseMagic.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };
    Developer.prototype.castPlayerObsidianWall = function () {
        _super.prototype.castPlayerObsidianWall.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };
    Developer.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    Developer.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to beat me. Congratulations :)"));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died fighting the developer. Eh, he made this game after all!"));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Developer.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Developer.prototype.addDeveloperEntity = function (pos) {
        this.developerEntity = new DeveloperEntity(this, pos);
        this.developerEntity.setHealthBar(new QuestEntityHealthBar(this.developerEntity, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.developerEntity);
    };
    Developer.prototype.thePlayerWon = function () {
        // If the developer is dead, we return true
        if (this.developerEntity.shouldDie())
            return true;
        // Else we return false
        return false;
    };
    return Developer;
})(Quest);
///<reference path="QuestEntity.ts"/>
var Devil = (function (_super) {
    __extends(Devil, _super);
    // Constructor
    function Devil(quest, pos, minY, maxY) {
        _super.call(this, quest, pos, new Naming("The devil", "the devil"), new RenderArea(16, 16), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(4, 0), new Pos(8, 5))), new QuestEntityMovement());
        // Set from parameters
        this.minY = minY;
        this.maxY = maxY;
        // At first we're going down
        this.setGoingDown(true);
        // Init the flames array
        this.flames = [];
        // Set gravity
        this.getQuestEntityMovement().setGravity(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(666);
        this.setHp(666);
        // Set the transparent character and draw
        this.setTransparency(new RenderTransparency(" ", "%"));
        this.reDraw();
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Evilness", "evilness"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(18, 18))), 500));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(0, 5);
    }
    // inflictDamage()
    Devil.prototype.inflictDamage = function (damage, reason) {
        _super.prototype.inflictDamage.call(this, Math.ceil(damage / 4), reason);
    };
    // update()
    Devil.prototype.update = function () {
        // Handle movement
        this.handleUpDownMovement();
        // Handle fireballs
        this.handleFireballs();
        // Handle the flames
        this.handleFlames();
        // Re draw the devil (ascii art + flames)
        this.reDraw();
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    Devil.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1000000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedA", "You found a strange stone.", "You gain a strange stone."));
    };
    // Private methods
    Devil.prototype.castFireball = function () {
        // Create the fireball
        var fireBall = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos(3, 4)), new Naming("The devil's fireball", "the devil's fireball"), new Color(ColorType.DEVIL_FIREBALL), new Pos(2, 1), 800, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("The devil's fireball", "the devil's fireball")));
        // If the player is on our left
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.getGlobalPosition().x) {
            // No target
            fireBall.setTargetTypeNoTarget(new Pos(-Random.between(3, 7), 0));
        }
        else {
            // We target the player
            fireBall.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer(), null, new Pos(1, 1));
        }
        // Add the entity
        this.getQuest().addEntity(fireBall);
    };
    Devil.prototype.handleFireballs = function () {
        if (Random.oneChanceOutOf(2))
            this.castFireball();
    };
    Devil.prototype.handleFlames = function () {
        // Create the variables
        var minX = 0;
        var maxX = 15;
        var minY = 6;
        var maxY = 15;
        var howManyFlames = 150;
        var x;
        var y;
        // Add flames depending on the current timer time
        for (var i = 0; i < howManyFlames; i++) {
            // If there is no flame for this index OR one chance out of 7
            if (i >= this.flames.length || Random.oneChanceOutOf(7)) {
                // Set y
                y = null;
                for (var j = minY; j < maxY; j++) {
                    if (Random.oneChanceOutOf(3)) {
                        y = j;
                        break;
                    }
                }
                if (y == null)
                    y = maxY;
                // Set x
                x = Random.between(minX + Math.floor((15 - y) / 3), maxX - Math.floor((15 - y) / 3));
                // Add or replace the flame
                var flame = new CauldronFlame(new Pos(x, y), Random.fromArray([")", "(", "`", "'", ".", ";", ":", ",", "-", "/", "\\", "|", "\"", "d", "e", "v", "i", "l"]));
                if (i >= this.flames.length)
                    this.flames.push(flame);
                else
                    this.flames[i] = flame;
            }
        }
    };
    Devil.prototype.handleUpDownMovement = function () {
        // If we're going down but we're too low or it will be impossible, we now go up
        if (this.goingDown && (this.getGlobalPosition().y >= this.maxY || this.checkCollision(new Pos(0, 1)))) {
            this.setGoingDown(false);
        }
        else if (this.goingDown == false && (this.getGlobalPosition().y <= this.minY || this.checkCollision(new Pos(0, -1)))) {
            this.setGoingDown(true);
        }
    };
    Devil.prototype.reDraw = function () {
        // Reset everything
        this.getRenderArea().resetAllButSize();
        // Draw the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/devil"), 4, 0);
        // Draw the flames
        for (var i = 0; i < this.flames.length; i++) {
            this.flames[i].draw(this.getRenderArea(), 0, 0);
        }
    };
    Devil.prototype.setGoingDown = function (goingDown) {
        this.goingDown = goingDown;
        if (this.goingDown) {
            this.getQuestEntityMovement().setOffset(new Pos(0, 1));
        }
        else {
            this.getQuestEntityMovement().setOffset(new Pos(0, -1));
        }
    };
    return Devil;
})(QuestEntity);
var DragonStep;
(function (DragonStep) {
    DragonStep[DragonStep["PLAYER_MOVING"] = 0] = "PLAYER_MOVING";
    DragonStep[DragonStep["PLAYER_ATTACKING"] = 1] = "PLAYER_ATTACKING";
    DragonStep[DragonStep["STOP_TICKLING"] = 2] = "STOP_TICKLING";
    DragonStep[DragonStep["TALKING"] = 3] = "TALKING";
    DragonStep[DragonStep["TALKING_CHALLENGE"] = 4] = "TALKING_CHALLENGE";
    DragonStep[DragonStep["TALKING_FAME"] = 5] = "TALKING_FAME";
    DragonStep[DragonStep["TALKING_CANDIES"] = 6] = "TALKING_CANDIES";
})(DragonStep || (DragonStep = {}));
///<reference path="CastleRoom.ts"/>
Saving.registerBool("dragonDone", false); // If true, it means we began talking to the dragon
Saving.registerBool("dragonUnlockedCyclops", false); // If true, we can ask the cyclops about the dragon
var Dragon = (function (_super) {
    __extends(Dragon, _super);
    // Constructor
    function Dragon(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Set the default step and player position
        if (Saving.loadBool("dragonDone") == false) {
            this.step = DragonStep.PLAYER_MOVING;
            this.playerPos = 0;
        }
        else {
            this.step = DragonStep.TALKING;
            this.playerPos = 60;
        }
        // Launch the interval and get the ID
        this.timerIntervalID = setInterval(this.actionInterval.bind(this), 100);
        // Resize and update
        this.renderArea.resizeFromArray(Database.getAscii("places/dragonFoot"), 0, 3);
        this.update();
    }
    // getRenderArea()
    Dragon.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willStopBeingDisplayed()
    Dragon.prototype.willStopBeingDisplayed = function () {
        clearInterval(this.timerIntervalID);
    };
    // Private methods
    Dragon.prototype.actionInterval = function () {
        // Do something different depending on the step
        switch (this.step) {
            case DragonStep.PLAYER_MOVING:
                // Move the player
                this.playerPos += 1;
                if (this.playerPos >= 60) {
                    // We're now attacking
                    this.step = DragonStep.PLAYER_ATTACKING;
                    // Set the countdown
                    this.playerAttackingCountdown = 40;
                }
                // Update
                this.update();
                this.getGame().updatePlace();
                break;
            case DragonStep.PLAYER_ATTACKING:
                // Lower the countdown
                this.playerAttackingCountdown -= 1;
                if (this.playerAttackingCountdown < 0) {
                    // We're now "stop tickling"
                    this.step = DragonStep.STOP_TICKLING;
                }
                // Update
                this.update();
                this.getGame().updatePlace();
                break;
        }
    };
    Dragon.prototype.chooseCandies = function () {
        // Change the step
        this.step = DragonStep.TALKING_CANDIES;
        // Set the bool
        Saving.saveBool("dragonUnlockedCyclops", true);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Dragon.prototype.chooseChallenge = function () {
        // Change the step
        this.step = DragonStep.TALKING_CHALLENGE;
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Dragon.prototype.chooseFame = function () {
        // Change the step
        this.step = DragonStep.TALKING_FAME;
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Dragon.prototype.drawPlayer = function (x, y) {
        if (y === void 0) { y = 26; }
        this.renderArea.drawString("\\o/", x, y);
    };
    Dragon.prototype.goToDeveloper = function () {
        this.getGame().setPlace(new Developer(this.getGame()));
    };
    Dragon.prototype.goToHell = function () {
        this.getGame().setPlace(new Hell(this.getGame()));
    };
    Dragon.prototype.okayStopTickling = function () {
        if (this.step == DragonStep.STOP_TICKLING) {
            // Change the step
            this.step = DragonStep.TALKING;
            // Set the bool
            Saving.saveBool("dragonDone", true);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Dragon.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToTheCastleButton(this.renderArea, "dragonBackToTheCastleButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/dragonFoot"), 0, 3);
        // Draw something different depending on the step
        switch (this.step) {
            case DragonStep.PLAYER_MOVING:
                // Draw the player (eventually going down the stairs at the beginning)
                this.drawPlayer(this.playerPos, 20 + (this.playerPos < 21 ? (Math.floor(this.playerPos / 3)) : 6));
                break;
            case DragonStep.PLAYER_ATTACKING:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the dragon fake health bar
                this.renderArea.drawString("|             A dragon foot : so much hp/so much hp             |", 45, 11);
                this.renderArea.addBackgroundColor(46, 109, 11, new Color(ColorType.HEALTH_GREEN));
                break;
            case DragonStep.STOP_TICKLING:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonStopTickling"), 5, 50, 78, "dragonStopTicklingSpeech", Database.getTranslatedText("dragonStopTickling"));
                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonStopTicklingButton"), 50, 9, "dragonStopTicklingButton", Database.getTranslatedText("dragonStopTicklingButton"), true);
                this.renderArea.addLinkCall(".dragonStopTicklingButton", new CallbackCollection(this.okayStopTickling.bind(this)));
                break;
            case DragonStep.TALKING:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalking"), 5, 50, 78, "dragonTalkingSpeech", Database.getTranslatedText("dragonTalking"));
                // Add the challenge button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingChallengeButton"), 82, 5, "dragonTalkingChallengeButton", Database.getTranslatedText("dragonTalkingChallengeButton"));
                this.renderArea.addLinkCall(".dragonTalkingChallengeButton", new CallbackCollection(this.chooseChallenge.bind(this)));
                // Add the fame button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingFameButton"), 82, 7, "dragonTalkingFameButton", Database.getTranslatedText("dragonTalkingFameButton"));
                this.renderArea.addLinkCall(".dragonTalkingFameButton", new CallbackCollection(this.chooseFame.bind(this)));
                // Add the candies button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingCandiesButton"), 82, 9, "dragonTalkingCandiesButton", Database.getTranslatedText("dragonTalkingCandiesButton"));
                this.renderArea.addLinkCall(".dragonTalkingCandiesButton", new CallbackCollection(this.chooseCandies.bind(this)));
                break;
            case DragonStep.TALKING_CHALLENGE:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalkingChallengeSpeech"), 5, 50, 78, "dragonTalkingChallengeSpeech", Database.getTranslatedText("dragonTalkingChallengeSpeech"));
                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingChallengeAnswer"), 82, 5, "dragonTalkingChallengeAnswer", Database.getTranslatedText("dragonTalkingChallengeAnswer"));
                this.renderArea.addLinkCall(".dragonTalkingChallengeAnswer", new CallbackCollection(this.goToHell.bind(this)));
                break;
            case DragonStep.TALKING_FAME:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalkingFameSpeech"), 5, 50, 78, "dragonTalkingFameSpeech", Database.getTranslatedText("dragonTalkingFameSpeech"));
                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingFameAnswer"), 82, 7, "dragonTalkingFameAnswer", Database.getTranslatedText("dragonTalkingFameAnswer"));
                this.renderArea.addLinkCall(".dragonTalkingFameAnswer", new CallbackCollection(this.goToDeveloper.bind(this)));
                break;
            case DragonStep.TALKING_CANDIES:
                // Draw the player
                this.drawPlayer(this.playerPos);
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalkingCandiesSpeech"), 5, 50, 78, "dragonTalkingCandiesSpeech", Database.getTranslatedText("dragonTalkingCandiesSpeech"));
                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingCandiesAnswer"), 82, 9, "dragonTalkingCandiesAnswer", Database.getTranslatedText("dragonTalkingCandiesAnswer"));
                this.renderArea.addLinkCall(".dragonTalkingCandiesAnswer", new CallbackCollection(this.getGame().goToCastle.bind(this.getGame())));
                break;
        }
    };
    return Dragon;
})(CastleRoom);
///<reference path="QuestEntity.ts"/>
var Egg = (function (_super) {
    __extends(Egg, _super);
    // Constructor
    function Egg(quest, globalPosition, callbackWhenDying) {
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("An egg", "an egg"), new RenderArea(2, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(2, 1))), new QuestEntityMovement());
        // Set the callback from parameter
        this.callbackWhenDying = callbackWhenDying;
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(4);
        this.setHp(4);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room3/egg"));
    }
    // willDie()
    Egg.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage("An egg was destroyed."));
        this.callbackWhenDying.fire();
    };
    return Egg;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var EnchantedKnightBodyArmour = (function (_super) {
    __extends(EnchantedKnightBodyArmour, _super);
    // Constructor
    function EnchantedKnightBodyArmour() {
        _super.call(this, "eqItemBodyArmoursEnchantedKnightBodyArmour", "eqItemBodyArmoursEnchantedKnightBodyArmourName", "eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "eqItems/bodyArmours/enchantedKnightBodyArmour");
    }
    // Special ability
    EnchantedKnightBodyArmour.prototype.getSpecialAbility = function () {
        return "Dam. taken reduced by 80%, dam. inflicted divided by 2 (enchanted knight body armour)";
    };
    // hit()
    EnchantedKnightBodyArmour.prototype.hit = function (player, quest, questEntity, damage, reason) {
        return Math.ceil(damage / 2);
    };
    // inflictDamage()
    EnchantedKnightBodyArmour.prototype.inflictDamage = function (player, quest, damage, reason) {
        return Math.ceil(damage - damage * 80 / 100);
    };
    return EnchantedKnightBodyArmour;
})(EqItem);
///<reference path="EqItem.ts"/>
var MonkeyWizardStaffMotherClass = (function (_super) {
    __extends(MonkeyWizardStaffMotherClass, _super);
    function MonkeyWizardStaffMotherClass() {
        _super.apply(this, arguments);
    }
    // Public methods which the daughter classes can use
    MonkeyWizardStaffMotherClass.prototype.castPurpleBall = function (player, quest, target, speed) {
        if (speed === void 0) { speed = new Pos(2, 1); }
        var ball = new Fireball(quest, player.getSpellCastingPosition(), new Naming("An magical purple ball", "a magical purple ball"), new Color(ColorType.MONKEY_WIZARD_BALL), new Pos(2, 1), 15, player.getAndPossiblyCreateSpellCastingDamageReason(new Naming("An magical purple ball", "a magical purple ball")));
        // Set the target
        ball.setTargetTypeTargetEntity(target, null, speed);
        // Add it to the quest
        quest.addEntity(ball);
    };
    MonkeyWizardStaffMotherClass.prototype.getRandomEnemy = function (player, quest) {
        // Array which will contain the indices (in the entities array) of all possible enemies
        var indices = [];
        // Fill the indices array
        for (var i = 0; i < quest.getEntities().length; i++) {
            // If this entity is destructible and is from a different team then the player
            if (quest.getEntities()[i].getDestructible() && quest.getEntities()[i].getTeam() != player.getTeam()) {
                // We add its index
                indices.push(i);
            }
        }
        // We return a random entity from the indices index
        if (indices.length > 0)
            return quest.getEntities()[indices[Random.between(0, indices.length - 1)]];
        else
            return null;
    };
    return MonkeyWizardStaffMotherClass;
})(EqItem);
///<reference path="MonkeyWizardStaffMotherClass.ts"/>
var EnchantedMonkeyWizardStaff = (function (_super) {
    __extends(EnchantedMonkeyWizardStaff, _super);
    // Constructor
    function EnchantedMonkeyWizardStaff() {
        _super.call(this, "eqItemWeaponEnchantedMonkeyWizardStaff", "eqItemWeaponEnchantedMonkeyWizardStaffName", "eqItemWeaponEnchantedMonkeyWizardStaffDescription", "eqItems/weapons/enchantedMonkeyWizardStaff");
        // Set the timer
        this.timer = 0;
    }
    // Public getters
    EnchantedMonkeyWizardStaff.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("The monkey wizard staff (enchanted)", "the monkey wizard staff (enchanted)"), player.getClassicCollisionBoxCollection(), 2);
        qew.getCloseCombatDelay().setFixedDelay(0);
        return qew;
    };
    // update()
    EnchantedMonkeyWizardStaff.prototype.update = function (player, quest) {
        // Handle the timer
        if (this.timer < 4)
            this.timer += 1;
        else {
            this.timer = 0;
            var ent = this.getRandomEnemy(player, quest);
            if (ent != null)
                this.castPurpleBall(player, quest, ent);
        }
    };
    return EnchantedMonkeyWizardStaff;
})(MonkeyWizardStaffMotherClass);
var EnchantmentItem = (function () {
    // Constructor
    function EnchantmentItem(game, savingName, type) {
        this.game = game;
        this.savingName = savingName;
        this.type = type;
    }
    // Public methods
    EnchantmentItem.prototype.getText = function () {
        var text = Database.getText(this.game.getEqItemFromEqItemType(this.savingName, this.type).getDatabaseName());
        if (Database.isTranslated())
            text += " (" + Database.getTranslatedText(this.game.getEqItemFromEqItemType(this.savingName, this.type).getDatabaseName()) + ")";
        return text;
    };
    EnchantmentItem.prototype.isPossessed = function () {
        return Saving.loadBool(this.savingName);
    };
    EnchantmentItem.prototype.unequipIfEquipped = function () {
        this.game.unequipIfEquipped(this.savingName, this.type);
    };
    // Public getters
    EnchantmentItem.prototype.getSavingName = function () {
        return this.savingName;
    };
    return EnchantmentItem;
})();
var Enchantment = (function () {
    // Constructor
    function Enchantment(beforeItem, afterItem) {
        this.beforeItem = beforeItem;
        this.afterItem = afterItem;
    }
    // Public methods
    Enchantment.prototype.enchant = function () {
        // We check if we're currently wearing the before item. If so, we must stop wearing it !
        this.beforeItem.unequipIfEquipped();
        // We lose the before item and gain the after item
        Saving.saveBool(this.beforeItem.getSavingName(), false);
        Saving.saveBool(this.afterItem.getSavingName(), true);
    };
    Enchantment.prototype.isPossible = function () {
        // If we have the before item but not the after item, we return true
        if (this.beforeItem.isPossessed() == true && this.afterItem.isPossessed() == false)
            return true;
        // Else we return false
        return false;
    };
    // Public getters
    Enchantment.prototype.getAfterItem = function () {
        return this.afterItem;
    };
    Enchantment.prototype.getBeforeItem = function () {
        return this.beforeItem;
    };
    return Enchantment;
})();
// We can't use this class directly, we have to use a daughter class
var EnigmaAnswer = (function () {
    // Constructor
    function EnigmaAnswer() {
    }
    // Public methods
    EnigmaAnswer.prototype.isRight = function (answer) {
        return false;
    };
    return EnigmaAnswer;
})();
///<reference path="EnigmaAnswer.ts"/>
var EnigmaAnswerCandies = (function (_super) {
    __extends(EnigmaAnswerCandies, _super);
    // Constructor
    function EnigmaAnswerCandies(game) {
        _super.call(this);
        this.game = game;
    }
    // Public methods
    EnigmaAnswerCandies.prototype.isRight = function (answer) {
        // If the answer is the current number of candies we possess
        if (Algo.simplifyString(answer) == this.game.getCandies().getCurrent().toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() + 1).toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() + 2).toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() + 3).toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() - 1).toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() - 2).toString() ||
            Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() - 3).toString())
            return true;
        // The answer isn't correct
        return false;
    };
    return EnigmaAnswerCandies;
})(EnigmaAnswer);
///<reference path="EnigmaAnswer.ts"/>
var EnigmaAnswerStrings = (function (_super) {
    __extends(EnigmaAnswerStrings, _super);
    // Constructor
    function EnigmaAnswerStrings(validStrings) {
        _super.call(this);
        this.validStrings = validStrings;
    }
    // Public methods
    EnigmaAnswerStrings.prototype.isRight = function (answer) {
        for (var i = 0; i < this.validStrings.length; i++) {
            if (Algo.simplifyString(answer) == this.validStrings[i]) {
                // The answer is correct
                return true;
            }
        }
        // The answer isn't correct
        return false;
    };
    return EnigmaAnswerStrings;
})(EnigmaAnswer);
var EqItemType;
(function (EqItemType) {
    EqItemType[EqItemType["WEAPON"] = 0] = "WEAPON";
    EqItemType[EqItemType["HAT"] = 1] = "HAT";
    EqItemType[EqItemType["BODYARMOUR"] = 2] = "BODYARMOUR";
    EqItemType[EqItemType["GLOVES"] = 3] = "GLOVES";
    EqItemType[EqItemType["BOOTS"] = 4] = "BOOTS";
})(EqItemType || (EqItemType = {}));
///<reference path="Item.ts"/>
var GridItem = (function (_super) {
    __extends(GridItem, _super);
    // Constructor
    function GridItem(savingName, databaseName, databaseDescriptionName, ascii, position) {
        _super.call(this, savingName, databaseName, databaseDescriptionName, ascii);
        this.position = position;
    }
    // Public methods
    GridItem.prototype.update = function (player, quest) {
    };
    // Public getters
    GridItem.prototype.getPosition = function () {
        return this.position;
    };
    return GridItem;
})(Item);
///<reference path="GridItem.ts"/>
var Feather = (function (_super) {
    __extends(Feather, _super);
    function Feather() {
        _super.apply(this, arguments);
    }
    Feather.prototype.getDatabaseDescriptionName = function () {
        // If we don't have the pogo stick yet, we return a special message
        if (Saving.loadBool("gridItemPossessedPogoStick") == false)
            return "gridItemFeatherDescriptionNoPogoStick";
        // Else we return the normal description name
        return _super.prototype.getDatabaseDescriptionName.call(this);
    };
    return Feather;
})(GridItem);
///<reference path="Place.ts"/>
var House = (function (_super) {
    __extends(House, _super);
    // Constructor
    function House(game) {
        _super.call(this, game);
    }
    // Special method used to add a button to go back to the village
    House.prototype.addBackToTheVillageButton = function (renderArea, otherClass) {
        this.addBackToButton(renderArea, new CallbackCollection(this.getGame().goToVillage.bind(this.getGame())), Database.getText("buttonBackToTheVillage"), Database.getTranslatedText("buttonBackToTheVillage"), otherClass);
    };
    return House;
})(Place);
///<reference path="House.ts"/>
var FifthHouse = (function (_super) {
    __extends(FifthHouse, _super);
    // Constructor
    function FifthHouse(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/village/fifthHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    FifthHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Public methods
    FifthHouse.prototype.willBeDisplayed = function () {
        // We need to update each time we're going to be displayed to avoid a "bug" in a very special case :
        // If the player is in the fifth house and the npc is asking for someone with a weapon
        // And then the player goes to its inventory, equip a weapon and then goes back to the fifth house
        // Here the fifth house must be updated so that the npc know that the player now has a weapon
        this.update();
    };
    // Private methods
    FifthHouse.prototype.beginQuest = function () {
        this.getGame().setPlace(new Cellar(this.getGame()));
    };
    FifthHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the village button
        this.addBackToTheVillageButton(this.renderArea, "fifthHouseBackToTheVillageButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/fifthHouse"), 0, 3);
        // If we haven't defeated the rats yet
        if (Saving.loadBool("cellarDone") == false) {
            // If we have a weapon
            if (this.getGame().getSelectedEqItems()["weapon"] != null) {
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("mapVillageFifthHouseWeaponSpeech"), 6, 44, 67, "fifthHouseSpeech", Database.getTranslatedText("mapVillageFifthHouseWeaponSpeech"));
                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("mapVillageFifthHouseAgree"), 69, 8, "mapVillageFifthHouseAgreeButton", Database.getTranslatedText("mapVillageFifthHouseAgree"), true);
                this.renderArea.addLinkCall(".mapVillageFifthHouseAgreeButton", new CallbackCollection(this.beginQuest.bind(this)));
            }
            else {
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("mapVillageFifthHouseNoWeaponSpeech"), 6, 44, 67, "fifthHouseSpeech", Database.getTranslatedText("mapVillageFifthHouseNoWeaponSpeech"));
            }
        }
        else {
            // Draw the speech
            this.renderArea.drawSpeech(Database.getText("mapVillageFifthHouseCellarDone"), 6, 44, 82, "fifthHouseSpeech", Database.getTranslatedText("mapVillageFifthHouseCellarDone"));
            // Change the NPC mouth
            this.renderArea.drawString("U", 52, 17);
        }
    };
    return FifthHouse;
})(House);
var FireballTargetType;
(function (FireballTargetType) {
    FireballTargetType[FireballTargetType["NO_TARGET"] = 0] = "NO_TARGET";
    FireballTargetType[FireballTargetType["TARGET_ENTITY"] = 1] = "TARGET_ENTITY";
    FireballTargetType[FireballTargetType["TARGET_STICK_ON_ENTITY"] = 2] = "TARGET_STICK_ON_ENTITY";
    FireballTargetType[FireballTargetType["TARGET_POSITION"] = 3] = "TARGET_POSITION";
})(FireballTargetType || (FireballTargetType = {}));
///<reference path="Quest.ts"/>
var Forest = (function (_super) {
    __extends(Forest, _super);
    // Constructor
    function Forest(game) {
        _super.call(this, game);
        // Various timers related to monsters handling
        this.timeSinceLastWolfAdding = 0;
        this.timeSinceLastTreeSpiritAdding = 40;
        // The ground y position
        this.groundYPosition = 20;
        // The mosquito timer (mosquitos will come when the timer reaches 0)
        this.mosquitoTimer = 250;
        // Resize the quest
        this.resizeQuest(294, this.groundYPosition + 2);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, this.groundYPosition));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addGround();
        // We add some wolves
        for (var i = 0; i < 10; i++) {
            this.addWolf(Random.between(80, 280));
        }
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the forest."));
    }
    // Public methods
    Forest.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, this.groundYPosition), new Pos(10, 1));
    };
    Forest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(false);
    };
    Forest.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You made your way through the forest!"));
            Saving.saveBool("mainMapDoneForest", true); // The desert is done
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the forest. The tree's leaves should soon be covering your body."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Forest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Monsters handling
            this.monstersHandling();
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/background"), this.getRealQuestPosition().x + 98, this.getRealQuestPosition().y);
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/background"), this.getRealQuestPosition().x + 98 * 2, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Forest.prototype.addGround = function () {
        var ground = new Wall(this, new Pos(0, 0));
        ground.addBox(new Pos(0, this.groundYPosition + 1), new Pos(350, 1));
        this.addEntity(ground);
    };
    Forest.prototype.addMosquito = function () {
        return this.addEntity(new Mosquito(this, new Pos(0, this.groundYPosition - Random.between(3, 7)), this.groundYPosition));
    };
    Forest.prototype.addTreeSpirit = function (xPosition) {
        if (xPosition === void 0) { xPosition = 294; }
        var treeSpirit = new TreeSpirit(this, new Pos(xPosition, this.groundYPosition - 4), this.groundYPosition);
        treeSpirit.setHealthBar(new QuestEntityHealthBar(treeSpirit, new Pos(5, 1)));
        return this.addEntity(treeSpirit);
    };
    Forest.prototype.addWolf = function (xPosition) {
        if (xPosition === void 0) { xPosition = 294; }
        var wolf = new Wolf(this, new Pos(xPosition, this.groundYPosition - 2));
        wolf.setHealthBar(new QuestEntityHealthBar(wolf, new Pos(7, 1)));
        return this.addEntity(wolf);
    };
    Forest.prototype.monstersHandling = function () {
        // If it's time to add a tree spirit
        if (this.timeSinceLastTreeSpiritAdding > 70 && Random.flipACoin()) {
            this.addTreeSpirit(); // We add it
            this.timeSinceLastTreeSpiritAdding = 0; // We reset the timer
        }
        else
            this.timeSinceLastTreeSpiritAdding += 1; // We increase the timer
        // If it's time to add a wolf
        if (this.timeSinceLastWolfAdding > 30 && Random.oneChanceOutOf(5)) {
            this.addWolf(); // We add it
            this.timeSinceLastWolfAdding = 0; // We reset the timer
        }
        else
            this.timeSinceLastWolfAdding += 1; // We increase the timer
        // If it's time to add a mosquito
        if (this.mosquitoTimer <= 0) {
            this.addMosquito();
            this.mosquitoTimer = Random.between(5, 10);
        }
        else
            this.mosquitoTimer -= 1;
    };
    Forest.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 294)
            return true;
        // Else we return false
        return false;
    };
    return Forest;
})(Quest);
///<reference path="House.ts"/>
// The lollipop
Saving.registerBool("forgeFoundLollipop", false);
// Items sold
Saving.registerBool("forgeBoughtWoodenSword", false);
Saving.registerBool("forgeBoughtIronAxe", false);
Saving.registerBool("forgeBoughtPolishedSilverSword", false);
Saving.registerBool("forgeBoughtLightweightBodyArmour", false);
Saving.registerBool("forgeBoughtScythe", false);
var Forge = (function (_super) {
    __extends(Forge, _super);
    // Constructor
    function Forge(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // If...
        // We didn't buy one of the first three items
        if ((Saving.loadBool("forgeBoughtWoodenSword") == false || Saving.loadBool("forgeBoughtIronAxe") == false || Saving.loadBool("forgeBoughtPolishedSilverSword") == false)
            ||
                // We didn't buy the armour and we made the cave entrance
                (Saving.loadBool("forgeBoughtLightweightBodyArmour") == false && Saving.loadBool("mainMapDoneCaveEntrance") == true)
            ||
                // We didn't buy the scythe and the dragon is done
                (Saving.loadBool("forgeBoughtScythe") == false && Saving.loadBool("dragonDone") == true)) {
            // We set the normal introduction speech
            this.currentSpeech = "mapVillageForgeIntroductionSpeech";
        }
        else {
            // We set the no more to sell introduction speech
            this.currentSpeech = "mapVillageForgeIntroductionSpeechNoMoreToSell";
        }
        this.renderArea.resizeFromArray(Database.getAscii("places/village/forge"), 0, 3);
        this.update();
    }
    // getRenderArea()
    Forge.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Forge.prototype.clickedBuyIronAxeButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 400) {
            this.getGame().getCandies().add(-400); // -400 candies
            Saving.saveBool("forgeBoughtIronAxe", true); // We bought the axe
            this.getGame().gainItem("eqItemWeaponIronAxe"); // We now own the axe
            this.currentSpeech = "mapVillageForgeBuyIronAxeSpeech"; // New speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.clickedBuyLightweightBodyArmourButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 15000) {
            this.getGame().getCandies().add(-15000); // -15000 candies
            Saving.saveBool("forgeBoughtLightweightBodyArmour", true); // We bought the armour
            this.getGame().gainItem("eqItemBodyArmoursLightweightBodyArmour"); // We now own the armour
            this.currentSpeech = "mapVillageForgeBuyLightweightBodyArmourSpeech"; // New speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.clickedBuyPolishedSilverSwordButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 2000) {
            this.getGame().getCandies().add(-2000); // -2000 candies
            Saving.saveBool("forgeBoughtPolishedSilverSword", true); // We bought the sword
            this.getGame().gainItem("eqItemWeaponPolishedSilverSword"); // We now own the sword
            this.currentSpeech = "mapVillageForgeBuyPolishedSilverSwordSpeech"; // New speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.clickedBuyScytheButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 5000000) {
            this.getGame().getCandies().add(-5000000); // -5000000 candies
            Saving.saveBool("forgeBoughtScythe", true); // We bought the scythe
            this.getGame().gainItem("eqItemWeaponScythe"); // We now own the scythe
            this.currentSpeech = "mapVillageForgeBuyScytheSpeech"; // New speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.clickedBuyWoodenSwordButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 150) {
            this.getGame().getCandies().add(-150); // -150 candies
            Saving.saveBool("forgeBoughtWoodenSword", true); // We bought the sword
            this.getGame().gainItem("eqItemWeaponWoodenSword"); // We now own the sword
            this.currentSpeech = "mapVillageForgeBuyWoodenSwordSpeech"; // New speech
            Saving.saveBool("statusBarUnlockedInventory", true); // We unlock the inventory
            this.getGame().updateStatusBar(true); // We update the status bar
            this.getGame().getStatusBar().selectTabByType(StatusBarTabType.MAP); // We re-select the map tab (because adding the inventory tab created a gap in tab selection..)
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.drawLollipopStuff = function (x, y) {
        // If we didn't find the lollipop yet
        if (Saving.loadBool("forgeFoundLollipop") == false) {
            // We add a button to take the lollipop on the cupboard
            this.renderArea.addAsciiButton(x, x + 5, y, "forgeLollipopButton");
            // We add the link
            this.renderArea.addLinkCall(".forgeLollipopButton", new CallbackCollection(this.takeLollipop.bind(this)));
        }
        else {
            // We erase the lollipop
            this.renderArea.drawString("      ", x, y);
        }
    };
    Forge.prototype.takeLollipop = function () {
        // If we didn't get the lollipop yet
        if (Saving.loadBool("forgeFoundLollipop") == false) {
            // Add one lollipop
            this.getGame().getLollipops().add(1);
            // Set the bool
            Saving.saveBool("forgeFoundLollipop", true);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    Forge.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToTheVillageButton(this.renderArea, "forgeBackToTheVillageButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/forge"), 0, 3);
        // Draw the stuff about the lollipop
        this.drawLollipopStuff(18, 15);
        // Draw the blacksmith's speech
        this.renderArea.drawSpeech(Database.getText(this.currentSpeech), 13, 44, 67, "forgeSpeech", Database.getTranslatedText(this.currentSpeech));
        // Draw the buttons
        // If we never bought the wooden sword and we don't have one
        if (Saving.loadBool("forgeBoughtWoodenSword") == false && Saving.loadBool("eqItemWeaponWoodenSword") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyWoodenSwordButton"), 8, 35, "mapVillageForgeBuyWoodenSwordButton", Database.getTranslatedText("mapVillageForgeBuyWoodenSwordButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyWoodenSwordButton", new CallbackCollection(this.clickedBuyWoodenSwordButton.bind(this)));
        }
        else if (Saving.loadBool("forgeBoughtWoodenSword") == true && Saving.loadBool("forgeBoughtIronAxe") == false && Saving.loadBool("eqItemWeaponIronAxe") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyIronAxeButton"), 8, 35, "mapVillageForgeBuyIronAxeButton", Database.getTranslatedText("mapVillageForgeBuyIronAxeButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyIronAxeButton", new CallbackCollection(this.clickedBuyIronAxeButton.bind(this)));
        }
        else if (Saving.loadBool("forgeBoughtIronAxe") == true && Saving.loadBool("forgeBoughtPolishedSilverSword") == false && Saving.loadBool("eqItemWeaponPolishedSilverSword") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyPolishedSilverSwordButton"), 8, 35, "mapVillageForgeBuyPolishedSilverSwordButton", Database.getTranslatedText("mapVillageForgeBuyPolishedSilverSwordButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyPolishedSilverSwordButton", new CallbackCollection(this.clickedBuyPolishedSilverSwordButton.bind(this)));
        }
        else if (Saving.loadBool("forgeBoughtPolishedSilverSword") == true && Saving.loadBool("forgeBoughtLightweightBodyArmour") == false && Saving.loadBool("eqItemBodyArmoursLightweightBodyArmour") == false && Saving.loadBool("mainMapDoneCaveEntrance")) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyLightweightBodyArmourButton"), 8, 35, "mapVillageForgeBuyLightweightBodyArmourButton", Database.getTranslatedText("mapVillageForgeBuyLightweightBodyArmourButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyLightweightBodyArmourButton", new CallbackCollection(this.clickedBuyLightweightBodyArmourButton.bind(this)));
        }
        else if (Saving.loadBool("forgeBoughtLightweightBodyArmour") == true && Saving.loadBool("forgeBoughtScythe") == false && Saving.loadBool("eqItemWeaponScythe") == false && Saving.loadBool("dragonDone")) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyScytheButton"), 8, 35, "mapVillageForgeBuyScytheButton", Database.getTranslatedText("mapVillageForgeBuyScytheButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyScytheButton", new CallbackCollection(this.clickedBuyScytheButton.bind(this)));
        }
    };
    return Forge;
})(House);
///<reference path="Quest.ts"/>
Saving.registerBool("fortressRoom1ChestFound", false);
var FortressRoom1 = (function (_super) {
    __extends(FortressRoom1, _super);
    // Constructor
    function FortressRoom1(game) {
        _super.call(this, game);
        // Did we open the chest?
        this.chestOpened = false;
        // Resize the quest
        this.resizeQuest(208, 31);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 7));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.addWalls();
        // Add the spikes
        this.addSpikes(new Spikes(this, new Pos(16, 30), 18));
        this.addSpikes(new Spikes(this, new Pos(43, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(53, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(85, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(161, 30), 12));
        this.addSpikes(new Spikes(this, new Pos(180, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(117, 9), 4));
        this.addSpikes(new Spikes(this, new Pos(121, 14), 4));
        this.addSpikes(new Spikes(this, new Pos(125, 19), 4));
        this.addSpikes(new Spikes(this, new Pos(129, 24), 4));
        // Add the xinopherydon
        this.addXinopherydon(new Pos(181, 2));
        // Add the chest
        this.addEntity(new Chest(this, new Pos(203, 24), false, new CallbackCollection(this.openChest.bind(this)), Saving.loadBool("fortressRoom1ChestFound")));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the first room. It seems tricky."));
    }
    // Public methods
    FortressRoom1.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(2, 3), new Pos(1, 1));
    };
    FortressRoom1.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    FortressRoom1.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
        // If we won and we opened the chest, we confirm that we found it
        if (win && this.chestOpened) {
            Saving.saveBool("fortressRoom1ChestFound", true);
        }
    };
    FortressRoom1.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/room1"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToInsideFortress.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    FortressRoom1.prototype.addSpikes = function (spikes) {
        this.addEntity(spikes);
    };
    FortressRoom1.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(208, 2));
        wall.addBox(new Pos(0, 8), new Pos(15, 1));
        wall.addBox(new Pos(0, 9), new Pos(16, 22));
        wall.addBox(new Pos(34, 2), new Pos(5, 11));
        wall.addBox(new Pos(34, 15), new Pos(9, 16));
        wall.addBox(new Pos(47, 13), new Pos(6, 18));
        wall.addBox(new Pos(57, 11), new Pos(6, 20));
        wall.addBox(new Pos(63, 19), new Pos(22, 12));
        wall.addBox(new Pos(66, 11), new Pos(4, 7));
        wall.addBox(new Pos(74, 11), new Pos(3, 7));
        wall.addBox(new Pos(80, 11), new Pos(5, 7));
        wall.addBox(new Pos(89, 10), new Pos(14, 5));
        wall.addBox(new Pos(89, 15), new Pos(20, 5));
        wall.addBox(new Pos(89, 20), new Pos(26, 5));
        wall.addBox(new Pos(89, 25), new Pos(72, 6));
        wall.addBox(new Pos(106, 10), new Pos(37, 2));
        wall.addBox(new Pos(112, 15), new Pos(31, 2));
        wall.addBox(new Pos(118, 20), new Pos(25, 2));
        wall.addBox(new Pos(200, 2), new Pos(8, 1));
        wall.addBox(new Pos(201, 3), new Pos(7, 4));
        wall.addBox(new Pos(200, 7), new Pos(8, 1));
        wall.addBox(new Pos(157, 8), new Pos(51, 10));
        wall.addBox(new Pos(157, 18), new Pos(25, 1));
        wall.addBox(new Pos(157, 19), new Pos(24, 1));
        wall.addBox(new Pos(157, 20), new Pos(23, 1));
        wall.addBox(new Pos(157, 21), new Pos(22, 1));
        wall.addBox(new Pos(173, 25), new Pos(7, 6));
        wall.addBox(new Pos(184, 23), new Pos(3, 2));
        wall.addBox(new Pos(207, 18), new Pos(1, 6));
        wall.addBox(new Pos(206, 24), new Pos(2, 1));
        wall.addBox(new Pos(184, 25), new Pos(24, 6));
        // Add the wall entity
        this.addEntity(wall);
    };
    FortressRoom1.prototype.addXinopherydon = function (pos) {
        var xino = new Xinopherydon(this, pos);
        xino.setHealthBar(new QuestEntityHealthBar(xino, new Pos(41, 1), new Pos(158, 2), QuestEntityHealthBarPositionType.FIXED, false, true, BarType.HEALTH));
        this.addEntity(xino);
    };
    FortressRoom1.prototype.openChest = function () {
        this.chestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedUnicornHorn", "You opened a chest and found a unicorn horn!", "You gain a unicorn horn."));
    };
    return FortressRoom1;
})(Quest);
///<reference path="Quest.ts"/>
var FortressRoom2 = (function (_super) {
    __extends(FortressRoom2, _super);
    // Constructor
    function FortressRoom2(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 17);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 13));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addWalls();
        // Add the chest
        this.addTeapot();
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the second room. There's a giant teapot in the center."));
    }
    // Public methods
    FortressRoom2.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    FortressRoom2.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    FortressRoom2.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/room2"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToInsideFortress.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    FortressRoom2.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 4));
        wall.addBox(new Pos(96, 4), new Pos(4, 1));
        wall.addBox(new Pos(97, 5), new Pos(3, 8));
        wall.addBox(new Pos(96, 13), new Pos(4, 1));
        wall.addBox(new Pos(0, 14), new Pos(20, 1));
        wall.addBox(new Pos(79, 14), new Pos(21, 1));
        wall.addBox(new Pos(0, 15), new Pos(37, 1));
        wall.addBox(new Pos(59, 15), new Pos(41, 1));
        wall.addBox(new Pos(0, 16), new Pos(100, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    FortressRoom2.prototype.addTeapot = function () {
        var teapot = new Teapot(this, new Pos(39, 9));
        teapot.setHealthBar(new QuestEntityHealthBar(teapot, new Pos(96, 1), new Pos(0, 5), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, false, true, BarType.HEALTH));
        this.addEntity(teapot);
    };
    return FortressRoom2;
})(Quest);
///<reference path="Quest.ts"/>
Saving.registerBool("fortressRoom3ChestFound", false);
var FortressRoom3 = (function (_super) {
    __extends(FortressRoom3, _super);
    // Constructor
    function FortressRoom3(game) {
        _super.call(this, game);
        // Did we open the chest?
        this.chestOpened = false;
        // Resize the quest
        this.resizeQuest(100, 31);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 30));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addWalls();
        // Add the chest
        this.addEntity(new Chest(this, new Pos(87, 6), false, new CallbackCollection(this.openChest.bind(this)), Saving.loadBool("fortressRoom3ChestFound")));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the third room. There's a chest up there. How to reach it?!"));
    }
    // Public methods
    FortressRoom3.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(2, 26), new Pos(1, 1));
    };
    FortressRoom3.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    FortressRoom3.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
        // If we won and we opened the chest, we confirm that we found it
        if (win && this.chestOpened) {
            Saving.saveBool("fortressRoom3ChestFound", true);
        }
    };
    FortressRoom3.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/room3"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToInsideFortress.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    FortressRoom3.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 2));
        wall.addBox(new Pos(0, 2), new Pos(16, 23));
        wall.addBox(new Pos(90, 2), new Pos(10, 1));
        wall.addBox(new Pos(91, 3), new Pos(9, 3));
        wall.addBox(new Pos(90, 6), new Pos(10, 1));
        wall.addBox(new Pos(82, 7), new Pos(18, 24));
        wall.addBox(new Pos(0, 31), new Pos(100, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    FortressRoom3.prototype.openChest = function () {
        this.chestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "eqItemBootsRocketBoots", "You opened a chest and found rocket boots!", "You gain rocket boots."));
    };
    return FortressRoom3;
})(Quest);
///<reference path="House.ts"/>
Saving.registerBool("fourthHouseFoundLollipopOnCupboard", false);
Saving.registerNumber("fourthHouseCupboardStep", 0); // 0 : closed ; 1 : opened ; 2 : lollipop taken
Saving.registerNumber("fourthHouseCarpetStep", 0); // 0 : lollipop still under the carpet ; 1 : lollipop outside ; 2 : lollipop taken
var FourthHouse = (function (_super) {
    __extends(FourthHouse, _super);
    // Constructor
    function FourthHouse(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/village/fourthHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    FourthHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    FourthHouse.prototype.clickOnCarpet = function () {
        // If we never clicked on the carpet
        if (Saving.loadNumber("fourthHouseCarpetStep") == 0) {
            // Set the step
            Saving.saveNumber("fourthHouseCarpetStep", 1);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    FourthHouse.prototype.drawCarpetStuff = function (x, y) {
        // We do different things depending on the step
        switch (Saving.loadNumber("fourthHouseCarpetStep")) {
            case 0:
                // We add a button on the area of the carpet around the lollipop
                this.renderArea.addMultipleAsciiButtons("fourthHouseCarpetButton", x - 2, x + 2, y - 1, x - 6, x + 1, y, x - 4, x, y + 1);
                // We add the link
                this.renderArea.addLinkCall(".fourthHouseCarpetButton", new CallbackCollection(this.clickOnCarpet.bind(this)));
                break;
            case 1:
                // We draw the lollipop
                this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseLollipopUnderCarpet"), x, y);
                // We add a button on the lollipop
                this.renderArea.addAsciiButton(x, x + 4, y, "fourthHouseLollipopUnderCarpetButton");
                // We add the link
                this.renderArea.addLinkCall(".fourthHouseLollipopUnderCarpetButton", new CallbackCollection(this.pickCarpetLollipop.bind(this)));
                break;
            case 2:
                break;
        }
    };
    FourthHouse.prototype.drawLollipopOnCupboardStuff = function (x, y) {
        // If we didn't find the lollipop yet
        if (Saving.loadBool("fourthHouseFoundLollipopOnCupboard") == false) {
            // We add a button to take the lollipop on the cupboard
            this.renderArea.addAsciiButton(x + 8, x + 13, y + 1, "fourthHouseLollipopOnCupboardButton");
            // We add the link
            this.renderArea.addLinkCall(".fourthHouseLollipopOnCupboardButton", new CallbackCollection(this.takeLollipopOnCupboard.bind(this)));
        }
        else {
            // We draw the no lollipop ascii art
            this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseNoLollipopOnCupboard"), x, y);
        }
    };
    FourthHouse.prototype.drawOpenCupboardStuff = function (x, y) {
        // We do different things depending on the step
        switch (Saving.loadNumber("fourthHouseCupboardStep")) {
            case 0:
                // We add a button on the cupboard's door
                this.renderArea.addMultipleAsciiButtons("fourthHouseCupboardDoorButton", x, x + 7, y, x, x + 7, y + 1, x, x + 7, y + 2, x, x + 7, y + 3, x, x + 7, y + 4, x, x + 7, y + 5, x, x + 7, y + 6, x, x + 7, y + 7, x, x + 7, y + 8, x, x + 7, y + 9, x, x + 7, y + 10, x, x + 7, y + 11, x, x + 7, y + 12);
                // We add the link
                this.renderArea.addLinkCall(".fourthHouseCupboardDoorButton", new CallbackCollection(this.openCupboard.bind(this)));
                break;
            case 1:
                // We draw the opened cupboard with the lollipop in it
                this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseCupboardOpenedWithLollipop"), x - 2, y);
                // We add a button on the lollipop
                this.renderArea.addAsciiButton(x + 4, x + 6, y + 7, "fourthHouseLollipopInsideCupboardButton");
                // We add the link
                this.renderArea.addLinkCall(".fourthHouseLollipopInsideCupboardButton", new CallbackCollection(this.takeLollipopInsideCupboard.bind(this)));
                break;
            case 2:
                // We draw the opened cupboard without lollipop
                this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseCupboardOpenedWithoutLollipop"), x - 2, y);
                break;
        }
    };
    FourthHouse.prototype.openCupboard = function () {
        // If the cupboard isn't opened yet
        if (Saving.loadNumber("fourthHouseCupboardStep") == 0) {
            // Set the step
            Saving.saveNumber("fourthHouseCupboardStep", 1);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    FourthHouse.prototype.pickCarpetLollipop = function () {
        // If the lollipop is outside the carpet
        if (Saving.loadNumber("fourthHouseCarpetStep") == 1) {
            // Set the step
            Saving.saveNumber("fourthHouseCarpetStep", 2);
            // Add one lollipop
            this.getGame().getLollipops().add(1);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    FourthHouse.prototype.takeLollipopInsideCupboard = function () {
        // If the cupboard is opened with the lollipop inside it
        if (Saving.loadNumber("fourthHouseCupboardStep") == 1) {
            // Set the step
            Saving.saveNumber("fourthHouseCupboardStep", 2);
            // Add one lollipop
            this.getGame().getLollipops().add(1);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    FourthHouse.prototype.takeLollipopOnCupboard = function () {
        // If we didn't get the lollipop yet
        if (Saving.loadBool("fourthHouseFoundLollipopOnCupboard") == false) {
            // Add one lollipop
            this.getGame().getLollipops().add(1);
            // Set the bool
            Saving.saveBool("fourthHouseFoundLollipopOnCupboard", true);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    FourthHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToTheVillageButton(this.renderArea, "fourthHouseBackToTheVillageButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/fourthHouse"), 0, 3);
        // Draw stuff about the lollipop on the cupboard
        this.drawLollipopOnCupboardStuff(35, 11);
        // Draw stuff about opening the cupboard
        this.drawOpenCupboardStuff(35, 14);
        // Draw stuff about the lollipop under the carpet
        this.drawCarpetStuff(41, 32);
    };
    return FourthHouse;
})(House);
var GalacticWarsStep;
(function (GalacticWarsStep) {
    GalacticWarsStep[GalacticWarsStep["SPLASH_SCREEN"] = 0] = "SPLASH_SCREEN";
    GalacticWarsStep[GalacticWarsStep["GAME"] = 1] = "GAME";
    GalacticWarsStep[GalacticWarsStep["LOSE"] = 2] = "LOSE";
})(GalacticWarsStep || (GalacticWarsStep = {}));
var ThirdHouseGame = (function () {
    // Constructor
    function ThirdHouseGame(thirdHouse) {
        // Set the third house from parameter
        this.thirdHouse = thirdHouse;
        // Create the area
        this.renderArea = new RenderArea(53, 12);
        // Set the quest slowed down variable at the game level (and the quest speed up too)
        this.thirdHouse.getGame().setQuestSlowedDown(false);
        this.thirdHouse.getGame().setQuestSpeedUp(0);
    }
    // Public methods
    ThirdHouseGame.prototype.pressedDownButton = function () {
    };
    ThirdHouseGame.prototype.pressedSpaceButton = function () {
    };
    ThirdHouseGame.prototype.pressedUpButton = function () {
    };
    ThirdHouseGame.prototype.run = function () {
        return true;
    };
    // Public getters
    ThirdHouseGame.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    ThirdHouseGame.prototype.getThirdHouse = function () {
        return this.thirdHouse;
    };
    return ThirdHouseGame;
})();
///<reference path="ThirdHouseGame.ts"/>
Saving.registerNumber("galacticWarsBestScore", 0);
var GalacticWars = (function (_super) {
    __extends(GalacticWars, _super);
    function GalacticWars() {
        _super.apply(this, arguments);
        // The global step of the game (splash screen, the menu, or the game itself
        this.step = GalacticWarsStep.SPLASH_SCREEN;
        // The timer used for the splash screen
        this.splashScreenTimer = 47;
        // Asteroids
        this.asteroids = [];
        // Should we exit the game?
        this.exitGame = false;
    }
    // Public methods
    GalacticWars.prototype.run = function () {
        // To store the return value
        var returnValue = false;
        // If we should exit the game, we return true
        if (this.exitGame)
            return true;
        // Reset the area
        this.getRenderArea().resetAllButSize();
        // Do something different depending on the step
        switch (this.step) {
            case GalacticWarsStep.SPLASH_SCREEN:
                this.drawSplashScreen();
                returnValue = this.runSplashScreen();
                break;
            case GalacticWarsStep.GAME:
                this.drawGame();
                returnValue = this.runGame();
                break;
            case GalacticWarsStep.LOSE:
                this.drawLose();
                returnValue = false;
                break;
        }
        // We return
        return returnValue;
    };
    // Private methods
    GalacticWars.prototype.addAsteroids = function () {
        // Get the space sector we're in (0 to 3)
        var spaceSector = Math.floor(this.score / 100) % 4;
        // Get the space difficulty (0 to x)
        var spaceDifficulty = Math.floor(Math.floor(this.score / 100) / 4);
        // Get the spaceSeed43 (0 to 43), the spaceSeed21 (0 to 21) and the spaceSeed10 (0 to 10)
        var spaceSeed43 = this.score % 44;
        var spaceSeed21 = Math.floor(spaceSeed43 / 2);
        var spaceSeed10 = Math.floor(spaceSeed21 / 2);
        // Add different asteroids depending on the sector, the difficulty, and the seed
        switch (spaceSector) {
            // First sector : the seed is riding our tunnels, officer!
            case 0:
                switch (spaceDifficulty) {
                    case 0:
                        if (spaceSeed43 < 11 && spaceSeed21 < 6)
                            this.addAsteroid(spaceSeed10);
                        else if (spaceSeed43 > 29 && spaceSeed21 > 14)
                            this.addAsteroid(spaceSeed10);
                        break;
                    case 1:
                        if (spaceSeed43 < 13 && spaceSeed21 < 7)
                            this.addAsteroid(spaceSeed10);
                        else if (spaceSeed43 > 27 && spaceSeed21 > 13)
                            this.addAsteroid(spaceSeed10);
                        break;
                    default:
                        if (spaceSeed43 < 15 && spaceSeed21 < 8)
                            this.addAsteroid(spaceSeed10);
                        else if (spaceSeed43 > 25 && spaceSeed21 > 12)
                            this.addAsteroid(spaceSeed10);
                        break;
                }
                break;
            // Second sector
            case 1:
                switch (spaceDifficulty) {
                    case 0:
                        if (spaceSeed43 % 3 == 0 && (this.score * 7) % 25 > 15) {
                            for (var i = spaceSeed10 - 1; i <= spaceSeed10 + 1; i++) {
                                if (i >= 0 && i <= 10)
                                    this.addAsteroid(i);
                            }
                        }
                        break;
                    case 1:
                        if (spaceSeed43 % 3 == 0 && (this.score * 7) % 25 > 12) {
                            for (var i = spaceSeed10 - 1; i <= spaceSeed10 + 1; i++) {
                                if (i >= 0 && i <= 10)
                                    this.addAsteroid(i);
                            }
                        }
                        break;
                    default:
                        if (spaceSeed43 % 3 == 0 && (this.score * 7) % 25 > 10) {
                            for (var i = spaceSeed10 - 1; i <= spaceSeed10 + 1; i++) {
                                if (i >= 0 && i <= 10)
                                    this.addAsteroid(i);
                            }
                        }
                        break;
                }
                break;
            // Third sector
            case 2:
                switch (spaceDifficulty) {
                    case 0:
                        if (this.score % 25 == 0) {
                            var holePos = Random.between(0, 9);
                            for (var i = 0; i <= 10; i++) {
                                if (i != holePos && i != holePos + 1) {
                                    this.addAsteroid(i);
                                }
                            }
                        }
                        break;
                    case 1:
                        if (this.score % 20 == 0) {
                            var holePos = Random.between(0, 9);
                            for (var i = 0; i <= 10; i++) {
                                if (i != holePos && i != holePos + 1) {
                                    this.addAsteroid(i);
                                }
                            }
                        }
                        break;
                    default:
                        if (this.score % 15 == 0) {
                            var holePos = Random.between(0, 9);
                            for (var i = 0; i <= 10; i++) {
                                if (i != holePos && i != holePos + 1) {
                                    this.addAsteroid(i);
                                }
                            }
                        }
                        break;
                }
                break;
            // Fourth sector : a bit of randomness
            case 3:
                switch (spaceDifficulty) {
                    case 0:
                        if (Random.oneChanceOutOf(15))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                    case 1:
                        if (Random.oneChanceOutOf(10))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                    case 2:
                        if (Random.oneChanceOutOf(7))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                    default:
                        if (Random.oneChanceOutOf(5))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                }
                break;
        }
    };
    GalacticWars.prototype.addAsteroid = function (y) {
        this.asteroids.push(new Pos(53, y));
    };
    GalacticWars.prototype.checkCollision = function () {
        // If the ship is outside the screen, we return true
        if (this.shipYPosition < 0)
            return true;
        if (this.shipYPosition > 9)
            return true;
        // No collision, we return false
        return false;
    };
    GalacticWars.prototype.checkCollisionWithAsteroids = function () {
        // Boolean used to know if we already lose one hp or not
        var loseOneHp = false;
        for (var i = 0; i < this.asteroids.length; i++) {
            // There's a collision
            if (this.shipCollidesWithThisPos(this.asteroids[i])) {
                if (loseOneHp == false) {
                    // We lose one hp
                    this.hp -= 1;
                    loseOneHp = true;
                }
                // We destroy the asteroid
                this.asteroids.splice(i, 1);
                i--;
            }
        }
        // If we have less than 1 hp, we return true
        if (this.hp < 1)
            return true;
        // Else, we return false
        return false;
    };
    GalacticWars.prototype.drawGame = function () {
        // Draw the score
        this.getRenderArea().drawString("Score : " + this.score.toString(), 0, 0);
        // Draw hp
        this.getRenderArea().drawString("| HP : " + this.hp.toString(), 43, 0);
        // Draw the power
        this.getRenderArea().drawString("| Power : [", 14, 0);
        this.getRenderArea().drawHorizontalLine("x", 25, 25 + Math.floor(this.power / 150 * 16), 0);
        this.getRenderArea().drawString("]", 41, 0);
        // Draw the ship
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/GalacticWars/ship"), 0, 1 + this.shipYPosition);
        // Draw asteroids
        for (var i = 0; i < this.asteroids.length; i++) {
            this.getRenderArea().drawString("O", this.asteroids[i].x, 1 + this.asteroids[i].y);
        }
    };
    GalacticWars.prototype.drawLose = function () {
        // Draw "you lose"
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/GalacticWars/youLose"), 8, 1);
        // Draw the candies we won
        this.getRenderArea().drawString("Score : " + this.score + ".", 8, 7);
        this.getRenderArea().drawString("You gain " + (this.score + Algo.correctIfUnderZero(this.score - 1000) * 30) + " candies.", 8, 8);
        this.getRenderArea().drawString("Best score : " + Saving.loadNumber("galacticWarsBestScore") + ".", 8, 10);
    };
    GalacticWars.prototype.drawSplashScreen = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/GalacticWars/splashScreen"), -87 + this.splashScreenTimer * 3, 2);
    };
    GalacticWars.prototype.goToLose = function () {
        // Change the step
        this.step = GalacticWarsStep.LOSE;
        // Get the candies
        this.getThirdHouse().getGame().getCandies().add(this.score + Algo.correctIfUnderZero(this.score - 1000) * 30);
        // Update the best score
        if (this.score > Saving.loadNumber("galacticWarsBestScore"))
            Saving.saveNumber("galacticWarsBestScore", this.score);
    };
    GalacticWars.prototype.goToGame = function () {
        // Change the step
        this.step = GalacticWarsStep.GAME;
        // Set some useful parameters
        this.score = 2;
        this.shipYPosition = 4;
        this.hp = 10;
        this.power = 150;
        this.maxPower = 150;
        // Set the quest speedup
        this.getThirdHouse().getGame().setQuestSpeedUp(-50);
    };
    GalacticWars.prototype.pressedDownButton = function () {
    };
    GalacticWars.prototype.pressedSpaceButton = function () {
        // Variable used when deleting asteroids
        var oldI;
        // If we pressed space and we were losing, we should now exit the game
        if (this.step == GalacticWarsStep.LOSE)
            this.exitGame = true;
        else if (this.step == GalacticWarsStep.GAME) {
            // If we have enough power
            if (this.power == this.maxPower) {
                // We delete 3/4 of the asteroids
                oldI = 0;
                for (var i = 0; i < this.asteroids.length; i++) {
                    if ((oldI % 5) != 0) {
                        this.asteroids.splice(i, 1);
                        i--;
                    }
                    oldI++;
                }
                // We have no more power
                this.power = 0;
            }
        }
    };
    GalacticWars.prototype.pressedUpButton = function () {
    };
    GalacticWars.prototype.runGame = function () {
        // Variable used to calc the quest speedup later
        var questSpeedUp = 0;
        // Handle the keys
        if (Keyboard.isKeyPressed("down")) {
            // We try to make the ship go down
            this.shipYPosition += 1;
            // If there's a collision, we revert
            if (this.checkCollision())
                this.shipYPosition -= 1;
        }
        else if (Keyboard.isKeyPressed("up")) {
            // We try to make the ship go up
            this.shipYPosition -= 1;
            // If there's a collision, we revert
            if (this.checkCollision())
                this.shipYPosition += 1;
        }
        // Shift asteroids on the left
        for (var i = 0; i < this.asteroids.length; i++) {
            // If we can shift it, we do so
            if (this.asteroids[i].x > 0)
                this.asteroids[i].x -= 1;
            else {
                this.asteroids.splice(i, 1);
                i--;
            }
        }
        // Add asteroids
        this.addAsteroids();
        // Increase the score
        this.score = Math.ceil(Math.pow(this.score, 1.00015));
        // Increase the power
        if (this.power < this.maxPower)
            this.power += 1;
        // Check the collision of the player with asteroids
        if (this.checkCollisionWithAsteroids())
            this.goToLose();
        return false;
    };
    GalacticWars.prototype.runSplashScreen = function () {
        // If the timer is >= 0
        if (this.splashScreenTimer >= 0) {
            // Reduce the timer
            this.splashScreenTimer -= 1;
        }
        else {
            // Switch to the next step
            this.goToGame();
        }
        // We can't end the game during the splash screen
        return false;
    };
    GalacticWars.prototype.shipCollidesWithThisPos = function (pos) {
        if (pos.x < 0)
            return false;
        if (pos.x > 10)
            return false;
        if (pos.y < this.shipYPosition)
            return false;
        if (pos.y > this.shipYPosition + 1)
            return false;
        return true;
    };
    return GalacticWars;
})(ThirdHouseGame);
///<reference path="./../../libs/jquery.d.ts"/>
var RenderLocation = (function () {
    // Constructor
    function RenderLocation(locationString, scrolling) {
        if (scrolling === void 0) { scrolling = false; }
        this.scrolling = null;
        this.setLocationString(locationString);
        this.setScrolling(scrolling);
    }
    // Public methods
    RenderLocation.prototype.render = function (renderArea) {
        $(this.locationString).html(renderArea.getForRendering());
        renderArea.runLinks();
    };
    RenderLocation.prototype.setContentGap = function (gap) {
        var ex, outerWidth, addGap = 0;
        // Get our outer width
        outerWidth = $(this.locationString).outerWidth();
        // Get the real ex value
        ex = this.getRealExValueFromTheStatusBar();
        // If our outerWidth is bigger than the window, calc an additional gap
        if (outerWidth > $(window).width())
            addGap = -(outerWidth - $(window).width()) / 2;
        // Finally change the "left" value of our div
        $(this.locationString).css({ "left": ((gap / 2) * ex + addGap).toString() + "px" });
    };
    // Public setters    
    RenderLocation.prototype.setLocationString = function (locationString) {
        this.locationString = locationString;
    };
    RenderLocation.prototype.setScrolling = function (scrolling, defaultScroll) {
        if (defaultScroll === void 0) { defaultScroll = 0; }
        // If the scrolling is different
        if (this.scrolling != scrolling) {
            this.scrolling = scrolling;
            // We initialize or stop scrolling, depending on the new scrolling value
            if (this.scrolling)
                this.initScrolling(defaultScroll);
            else
                this.stopScrolling();
        }
    };
    // Public getters
    RenderLocation.prototype.getScroll = function () {
        return $("html").scrollTop();
    };
    RenderLocation.prototype.getScrolling = function () {
        return this.scrolling;
    };
    // Private methods
    RenderLocation.prototype.getRealExValueFromTheStatusBar = function () {
        // DISCLAIMER
        // Yes, I know that this method is really ugly
        // But if I don't do this way, there are some stupid gaps in long quests and the browser zooms in and out (or even without zooming in Chrome)
        // If anyone has a better cross-browser solution, please tell me!
        // Return the real "ex" value in pixels
        return $("#statusBar").outerWidth() / 100;
    };
    RenderLocation.prototype.initScrolling = function (defaultScroll) {
        // Scroll to the default scroll
        $("html").scrollTop(defaultScroll);
        // Set css for our location string
        $(this.locationString).css({
            'position': 'absolute',
            'left': '0',
            'top': '0',
            'overflow-x': 'scroll'
        });
        // Set css for around the status bar
        $("#aroundStatusBar").css({
            'position': 'fixed',
            'top': '0',
            'left': '0',
            'right': '0',
            'height': '0'
        });
    };
    RenderLocation.prototype.stopScrolling = function () {
        // Set the scroll to 0
        $("html").scrollTop(0);
        // Reset css for our location string
        $(this.locationString).css({
            'position': 'relative',
            'overflow-x': 'hidden'
        });
        // Reset css for around the status bar
        $("#aroundStatusBar").css({
            'position': 'relative',
            'top': 'auto',
            'left': 'auto',
            'right': 'auto',
            'height': 'auto'
        });
    };
    return RenderLocation;
})();
///<reference path="Place.ts"/>
///<reference path="RenderLocation.ts"/>
///<reference path="RenderArea.ts"/>
///<reference path="Resource.ts"/>
// Config
Saving.registerBool("gameDebug", false);
Saving.registerString("gameLanguage", "en");
Saving.registerBool("gameInvertedColors", false);
// EqItems
Saving.registerString("gameWeaponSelected", "inventorySpecialNothingWeapon");
Saving.registerString("gameHatSelected", "inventorySpecialNothingHat");
Saving.registerString("gameBodyArmourSelected", "inventorySpecialNothingBodyArmour");
Saving.registerString("gameGlovesSelected", "inventorySpecialNothingGloves");
Saving.registerString("gameBootsSelected", "inventorySpecialNothingBoots");
// Stuff about gaining lollipops each second
Saving.registerNumber("gameSecondsElapsedSinceLastLollipopsProduction", 0);
// Resources
Saving.registerNumber("gameCandiesAccumulated", 0);
Saving.registerNumber("gameCandiesCurrent", 0);
Saving.registerNumber("gameCandiesMax", 0);
Saving.registerNumber("gameLollipopsAccumulated", 0);
Saving.registerNumber("gameLollipopsCurrent", 0);
Saving.registerNumber("gameLollipopsMax", 0);
Saving.registerNumber("gameChocolateBarsAccumulated", 0);
Saving.registerNumber("gameChocolateBarsCurrent", 0);
Saving.registerNumber("gameChocolateBarsMax", 0);
Saving.registerNumber("gamePainsAuChocolatAccumulated", 0);
Saving.registerNumber("gamePainsAuChocolatCurrent", 0);
Saving.registerNumber("gamePainsAuChocolatMax", 0);
Saving.registerNumber("gameCandiesEatenAccumulated", 0);
Saving.registerNumber("gameCandiesEatenCurrent", 0);
Saving.registerNumber("gameCandiesEatenMax", 0);
Saving.registerNumber("gameCandiesThrownAccumulated", 0);
Saving.registerNumber("gameCandiesThrownCurrent", 0);
Saving.registerNumber("gameCandiesThrownMax", 0);
Saving.registerNumber("gameCandiesUsedToRequestFeaturesAccumulated", 0);
Saving.registerNumber("gameCandiesUsedToRequestFeaturesCurrent", 0);
Saving.registerNumber("gameCandiesUsedToRequestFeaturesMax", 0);
Saving.registerNumber("gameCandiesInCauldronAccumulated", 0);
Saving.registerNumber("gameCandiesInCauldronCurrent", 0);
Saving.registerNumber("gameCandiesInCauldronMax", 0);
Saving.registerNumber("gameLollipopsInCauldronAccumulated", 0);
Saving.registerNumber("gameLollipopsInCauldronCurrent", 0);
Saving.registerNumber("gameLollipopsInCauldronMax", 0);
// Gifts
Saving.registerNumber("gameGiftPower", 0);
Saving.registerNumber("gameGiftHealth", 0);
Saving.registerNumber("gameGiftMagic", 0);
// The gamemode
Saving.registerString("gameGameMode", "normal");
var Game = (function () {
    // Constructor
    function Game(gameMode) {
        // Render locations
        this.statusBarLocation = new RenderLocation("#statusBar");
        this.mainContentLocation = new RenderLocation("#mainContent");
        this.candiesUsedToRequestFeatures = new Resource("gameCandiesUsedToRequestFeatures");
        this.candiesInCauldron = new Resource("gameCandiesInCauldron");
        this.lollipopsInCauldron = new Resource("gameLollipopsInCauldron");
        // Grid items
        this.gridItems = {};
        // EqItems
        this.weapons = {};
        this.hats = {};
        this.bodyArmours = {};
        this.gloves = {};
        this.boots = {};
        // EqItems selected from the various arrays above (the selection being made in the inventory tab)
        this.selectedEqItems = {};
        // The quest log
        this.questLog = new QuestLog();
        // Locations
        this.place = null;
        this.savedPlace = null;
        // Hotkeys
        this.hotkeys = {}; // Hotkeys used by the places
        this.specialHotkeys = []; // Special hotkeys, not linked to the places we visit (used to switch tabs, for example)
        // Some info bools
        this.weAreQuesting = false;
        // Callbacks
        this.oneSecondCallbackCollection = new CallbackCollection();
        this.questCallbackCollection = new CallbackCollection();
        // Is the quest slowed down ?
        this.questSlowedDown = false;
        // Local autosave
        this.localAutosaveEnabled = false;
        this.localAutosaveSlot = null;
        this.localAutosaveTime = null; // Time in seconds before the next save
        // Is the status bar allowed to use the n key to go to the next tab? (this is set to false when using the computer...)
        this.isStatusBarAllowedToUseTheNKey = true;
        // We save the game mode given in parameter
        if (gameMode != null)
            Saving.saveString("gameGameMode", gameMode);
        // We create the grid items
        this.createGridItems();
        // We create the eqItems
        this.createEqItems();
        // We create the status bar
        this.statusBar = new StatusBar(this, 0);
        // We create the player
        this.player = new Player(this);
        // We create the resources
        this.candies = new Candies(this, "gameCandies");
        this.lollipops = new Lollipops(this, "gameLollipops");
        this.chocolateBars = new ChocolateBars(this, "gameChocolateBars");
        this.painsAuChocolat = new PainsAuChocolat(this, "gamePainsAuChocolat");
        this.candiesEaten = new CandiesEaten(this, "gameCandiesEaten");
        this.candiesThrown = new CandiesThrown(this, "gameCandiesThrown");
        // We update the status bar
        this.updateStatusBar();
        // We launch timeouts & intervals methods
        this.oneSecondIntervalId = window.setInterval(this.oneSecondMethod.bind(this), 1000);
        window.setTimeout(this.questMethod.bind(this), 100);
    }
    // Public methods
    Game.prototype.addHotkey = function (hotkey) {
        this.hotkeys[hotkey.getKeyString()] = hotkey;
    };
    Game.prototype.addSpecialHotkey = function (hotkey) {
        this.specialHotkeys.push(hotkey);
    };
    Game.prototype.applyInvertedColorsToCss = function () {
        if (Saving.loadBool("gameInvertedColors") == false)
            $('#invertColorsStylesheet').remove();
        else
            $('head').append('<link href="css/invertColors.css" rel="stylesheet" id="invertColorsStylesheet"/>');
    };
    Game.prototype.calcLollipopFarmProduction = function () {
        // Is the production each second ?
        Saving.saveBool("lollipopFarmIsProductionEachSecond", this.isLollipopFarmProductionEachSecond());
        // If we produce x lollipops each second
        if (Saving.loadBool("lollipopFarmIsProductionEachSecond")) {
            Saving.saveNumber("lollipopFarmProduction", (Saving.loadBool("gridItemPossessedShellPowder") ? 3 : 1) *
                (Saving.loadBool("gridItemPossessedPitchfork") ? 3 : 1) *
                (Saving.loadBool("gridItemPossessedGreenSharkFin") ? 5 : 1) *
                Math.ceil(100 * (1 - Math.exp(-(Saving.loadNumber("lollipopFarmLollipopsPlanted") - 20) / 5000))));
        }
        else {
            switch (Saving.loadNumber("lollipopFarmLollipopsPlanted")) {
                case 1:
                    Saving.saveNumber("lollipopFarmProduction", 3600 * 8);
                    break;
                case 2:
                    Saving.saveNumber("lollipopFarmProduction", 3600 * 5);
                    break;
                case 3:
                    Saving.saveNumber("lollipopFarmProduction", 3600 * 2);
                    break;
                case 4:
                    Saving.saveNumber("lollipopFarmProduction", 3600);
                    break;
                case 5:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 40);
                    break;
                case 6:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 25);
                    break;
                case 7:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 12);
                    break;
                case 8:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 8);
                    break;
                case 9:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 5);
                    break;
                case 10:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 2);
                    break;
                case 11:
                    Saving.saveNumber("lollipopFarmProduction", 60);
                    break;
                case 12:
                    Saving.saveNumber("lollipopFarmProduction", 52);
                    break;
                case 13:
                    Saving.saveNumber("lollipopFarmProduction", 42);
                    break;
                case 14:
                    Saving.saveNumber("lollipopFarmProduction", 30);
                    break;
                case 15:
                    Saving.saveNumber("lollipopFarmProduction", 16);
                    break;
                case 16:
                    Saving.saveNumber("lollipopFarmProduction", 8);
                    break;
                case 17:
                    Saving.saveNumber("lollipopFarmProduction", 5);
                    break;
                case 18:
                    Saving.saveNumber("lollipopFarmProduction", 4);
                    break;
                case 19:
                    Saving.saveNumber("lollipopFarmProduction", 3);
                    break;
                case 20:
                    Saving.saveNumber("lollipopFarmProduction", 2);
                    break;
            }
        }
    };
    Game.prototype.canStartQuest = function () {
        if (this.player.getHp() == 0)
            return false;
        return true;
    };
    Game.prototype.clearAllIntervals = function () {
        clearInterval(this.oneSecondIntervalId);
    };
    Game.prototype.disableLocalAutosave = function () {
        this.localAutosaveEnabled = false;
        this.localAutosaveSlot = null;
    };
    Game.prototype.emptyAndFillSelectedEqItemsArray = function () {
        // Empty
        this.selectedEqItems = {};
        // Fill
        if (Saving.loadString("gameWeaponSelected") != "inventorySpecialNothingWeapon")
            this.selectedEqItems["weapon"] = this.weapons[Saving.loadString("gameWeaponSelected")];
        if (Saving.loadString("gameHatSelected") != "inventorySpecialNothingHat")
            this.selectedEqItems["hat"] = this.hats[Saving.loadString("gameHatSelected")];
        if (Saving.loadString("gameBodyArmourSelected") != "inventorySpecialNothingBodyArmour")
            this.selectedEqItems["bodyArmour"] = this.bodyArmours[Saving.loadString("gameBodyArmourSelected")];
        if (Saving.loadString("gameGlovesSelected") != "inventorySpecialNothingGloves")
            this.selectedEqItems["gloves"] = this.gloves[Saving.loadString("gameGlovesSelected")];
        if (Saving.loadString("gameBootsSelected") != "inventorySpecialNothingBoots")
            this.selectedEqItems["boots"] = this.boots[Saving.loadString("gameBootsSelected")];
    };
    Game.prototype.enableLocalAutosave = function (localAutosaveSlot) {
        this.localAutosaveEnabled = true;
        this.localAutosaveSlot = localAutosaveSlot;
        this.setDefaultLocalAutosaveTime();
    };
    Game.prototype.gainItem = function (itemSavingName) {
        Saving.saveBool(itemSavingName, true);
        this.player.reCalcMaxHp(); // We re calc the player max hp just in case
        this.calcLollipopFarmProduction(); // Idem for the farm production
    };
    Game.prototype.getEqItemFromEqItemType = function (savingName, type) {
        switch (type) {
            case EqItemType.WEAPON:
                return this.weapons[savingName];
                break;
            case EqItemType.HAT:
                return this.hats[savingName];
                break;
            case EqItemType.BODYARMOUR:
                return this.bodyArmours[savingName];
                break;
            case EqItemType.GLOVES:
                return this.gloves[savingName];
                break;
            case EqItemType.BOOTS:
                return this.boots[savingName];
                break;
        }
    };
    Game.prototype.isEquipped = function (type, savingName) {
        if (this.selectedEqItems[type] == undefined || this.selectedEqItems[type] == null)
            return false;
        else
            return (this.selectedEqItems[type].getSavingName() == savingName);
    };
    Game.prototype.isLollipopFarmProductionEachSecond = function () {
        if (Saving.loadNumber("lollipopFarmLollipopsPlanted") > 20) {
            return true;
        }
        return false;
    };
    Game.prototype.load = function () {
        // Resources
        this.candies.load();
        this.lollipops.load();
        this.chocolateBars.load();
        this.painsAuChocolat.load();
        this.candiesEaten.load();
        this.candiesThrown.load();
        this.candiesUsedToRequestFeatures.load();
        this.candiesInCauldron.load();
        this.lollipopsInCauldron.load();
        // Handle inverted colors (we have to change the css now depending on the gameInvertedColors bool from the Saving module)
        this.applyInvertedColorsToCss();
    };
    Game.prototype.postLoad = function () {
        // We re calc the player hp
        this.player.reCalcMaxHp();
        // We update the status bar
        this.updateStatusBar(true);
        // Select correct items
        this.emptyAndFillSelectedEqItemsArray();
        // We go to the candy box
        this.goToCandyBox();
        // And we set the saved place (the village)
        this.savedPlace = new Village(this);
    };
    Game.prototype.resetPlayer = function () {
        // Save some important things
        var hp = this.player.getHp();
        var maxHp = this.player.getMaxHp();
        // Re-create the player
        this.player = new Player(this);
        // Restore the important things saved
        this.player.setHp(hp);
        this.player.setMaxHp(maxHp);
    };
    Game.prototype.resetSpecialHotkeys = function () {
        this.specialHotkeys = [];
    };
    Game.prototype.save = function () {
        // Resources
        this.candies.save();
        this.lollipops.save();
        this.chocolateBars.save();
        this.painsAuChocolat.save();
        this.candiesEaten.save();
        this.candiesThrown.save();
        this.candiesUsedToRequestFeatures.save();
        this.candiesInCauldron.save();
        this.lollipopsInCauldron.save();
    };
    Game.prototype.setPlace = function (place) {
        // If the current place isn't null, we warn it that we're going to stop displaying it
        if (this.place != null) {
            this.place.willStopBeingDisplayed();
            this.resetHotkeys();
            // If we didn't save this place we're not displaying anymore
            if (this.savedPlace == null) {
                // It means we're closing it actually, so we tell it that we're closing it
                this.place.willBeClosed();
            }
        }
        // Set the place
        this.place = place;
        // Callbacks
        this.resetResourcesCallbacks();
        this.place.willBeDisplayed();
        // Display the place for the first time
        this.displayPlace();
    };
    Game.prototype.unequipIfEquipped = function (savingName, type) {
        switch (type) {
            case EqItemType.WEAPON:
                if (this.selectedEqItems["weapon"] != null && this.selectedEqItems["weapon"].getSavingName() == savingName)
                    Saving.saveString("gameWeaponSelected", "inventorySpecialNothingWeapon");
                break;
            case EqItemType.HAT:
                if (this.selectedEqItems["hat"] != null && this.selectedEqItems["hat"].getSavingName() == savingName)
                    Saving.saveString("gameHatSelected", "inventorySpecialNothingHat");
                break;
            case EqItemType.BODYARMOUR:
                if (this.selectedEqItems["bodyArmour"] != null && this.selectedEqItems["bodyArmour"].getSavingName() == savingName)
                    Saving.saveString("gameBodyArmourSelected", "inventorySpecialNothingBodyArmour");
                break;
            case EqItemType.GLOVES:
                if (this.selectedEqItems["gloves"] != null && this.selectedEqItems["gloves"].getSavingName() == savingName)
                    Saving.saveString("gameGlovesSelected", "inventorySpecialNothingGloves");
                break;
            case EqItemType.BOOTS:
                if (this.selectedEqItems["boots"] != null && this.selectedEqItems["boots"].getSavingName() == savingName)
                    Saving.saveString("gameBootsSelected", "inventorySpecialNothingBoots");
                break;
        }
        this.emptyAndFillSelectedEqItemsArray();
    };
    Game.prototype.updatePlace = function () {
        this.displayPlace();
    };
    Game.prototype.updateStatusBar = function (reAdd) {
        if (reAdd === void 0) { reAdd = false; }
        if (reAdd)
            this.statusBar.deleteAndReAddEverything();
        this.statusBar.updateAll();
        this.statusBarLocation.render(this.statusBar.getRenderArea());
    };
    // "go to" methods
    Game.prototype.goToCandyBox = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new CandyBox(this));
    };
    Game.prototype.goToCastle = function () {
        this.setPlace(new Castle(this));
    };
    Game.prototype.goToCastleEntrance = function () {
        this.setPlace(new CastleEntrance(this));
    };
    Game.prototype.goToCauldron = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Cauldron(this));
    };
    Game.prototype.goToCfg = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Cfg(this));
    };
    Game.prototype.goToInsideFortress = function () {
        this.setPlace(new InsideFortress(this));
    };
    Game.prototype.goToInsideYourBox = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new InsideYourBox(this));
    };
    Game.prototype.goToInventory = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Inventory(this));
    };
    Game.prototype.goToLighthouse = function () {
        this.setPlace(new Lighthouse(this));
    };
    Game.prototype.goToLollipopFarm = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new LollipopFarm(this));
    };
    Game.prototype.goToMainMap = function () {
        this.setPlace(new MainMap(this));
    };
    Game.prototype.goToMap = function () {
        this.setPlaceFromSavedMapPlace();
    };
    Game.prototype.goToSave = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Save(this));
    };
    Game.prototype.goToSorceressHut = function () {
        this.setPlace(new SorceressHut(this));
    };
    Game.prototype.goToTheArena = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new TheArena(this));
    };
    Game.prototype.goToTheCave = function () {
        this.setPlace(new TheCave(this));
    };
    Game.prototype.goToTheComputer = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new TheComputer(this));
    };
    Game.prototype.goToVillage = function () {
        this.setPlace(new Village(this));
    };
    Game.prototype.goToYourself = function () {
        this.setPlace(new Yourself(this));
    };
    // Public getters
    Game.prototype.getBodyArmours = function () {
        return this.bodyArmours;
    };
    Game.prototype.getBoots = function () {
        return this.boots;
    };
    Game.prototype.getCandies = function () {
        return this.candies;
    };
    Game.prototype.getCandiesEaten = function () {
        return this.candiesEaten;
    };
    Game.prototype.getCandiesInCauldron = function () {
        return this.candiesInCauldron;
    };
    Game.prototype.getCandiesThrown = function () {
        return this.candiesThrown;
    };
    Game.prototype.getCandiesUsedToRequestFeatures = function () {
        return this.candiesUsedToRequestFeatures;
    };
    Game.prototype.getChocolateBars = function () {
        return this.chocolateBars;
    };
    Game.prototype.getGloves = function () {
        return this.gloves;
    };
    Game.prototype.getHats = function () {
        return this.hats;
    };
    Game.prototype.getHotkeys = function () {
        return this.hotkeys;
    };
    Game.prototype.getGridItems = function () {
        return this.gridItems;
    };
    Game.prototype.getIsStatusBarAllowedToUseTheNKey = function () {
        return this.isStatusBarAllowedToUseTheNKey;
    };
    Game.prototype.getLocalAutosaveEnabled = function () {
        return this.localAutosaveEnabled;
    };
    Game.prototype.getLocalAutosaveSlot = function () {
        return this.localAutosaveSlot;
    };
    Game.prototype.getLocalAutosaveTime = function () {
        return this.localAutosaveTime;
    };
    Game.prototype.getLollipops = function () {
        return this.lollipops;
    };
    Game.prototype.getLollipopsInCauldron = function () {
        return this.lollipopsInCauldron;
    };
    Game.prototype.getPainsAuChocolat = function () {
        return this.painsAuChocolat;
    };
    Game.prototype.getQuestCallbackCollection = function () {
        return this.questCallbackCollection;
    };
    Game.prototype.getQuestLog = function () {
        return this.questLog;
    };
    Game.prototype.getQuestSlowedDown = function () {
        return this.questSlowedDown;
    };
    Game.prototype.getQuestSpeedUp = function () {
        return this.questSpeedUp;
    };
    Game.prototype.getOneSecondCallbackCollection = function () {
        return this.oneSecondCallbackCollection;
    };
    Game.prototype.getPlayer = function () {
        return this.player;
    };
    Game.prototype.getMainContentLocation = function () {
        return this.mainContentLocation;
    };
    Game.prototype.getSelectedEqItems = function () {
        return this.selectedEqItems;
    };
    Game.prototype.getSpecialHotkeys = function () {
        return this.specialHotkeys;
    };
    Game.prototype.getStatusBar = function () {
        return this.statusBar;
    };
    Game.prototype.getWeapons = function () {
        return this.weapons;
    };
    Game.prototype.getWeAreQuesting = function () {
        return this.weAreQuesting;
    };
    // Public setters
    Game.prototype.setIsStatusBarAllowedToUseTheNKey = function (isStatusBarAllowedToUseTheNKey) {
        this.isStatusBarAllowedToUseTheNKey = isStatusBarAllowedToUseTheNKey;
    };
    Game.prototype.setQuestSlowedDown = function (questSlowedDown) {
        this.questSlowedDown = questSlowedDown;
    };
    Game.prototype.setQuestSpeedUp = function (questSpeedUp) {
        this.questSpeedUp = questSpeedUp;
    };
    Game.prototype.setWeAreQuesting = function (weAreQuesting) {
        this.weAreQuesting = weAreQuesting;
    };
    // Private methods
    Game.prototype.addEqItem = function (eqItem, array) {
        array[eqItem.getSavingName()] = eqItem;
    };
    Game.prototype.addGridItem = function (gridItem) {
        this.gridItems[gridItem.getSavingName()] = gridItem;
    };
    Game.prototype.createEqItems = function () {
        // Create weapons
        this.addEqItem(new WoodenSword(), this.weapons);
        this.addEqItem(new IronAxe(), this.weapons);
        this.addEqItem(new PolishedSilverSword(), this.weapons);
        this.addEqItem(new TrollBludgeon(), this.weapons);
        this.addEqItem(new MonkeyWizardStaff(), this.weapons);
        this.addEqItem(new EnchantedMonkeyWizardStaff(), this.weapons);
        this.addEqItem(new TribalSpear(), this.weapons);
        this.addEqItem(new SummoningTribalSpear(), this.weapons);
        this.addEqItem(new GiantSpoon(), this.weapons);
        this.addEqItem(new Scythe(), this.weapons);
        this.addEqItem(new GiantSpoonOfDoom(), this.weapons);
        // Create hats
        this.addEqItem(new OctopusKingCrown(), this.hats);
        this.addEqItem(new OctopusKingCrownWithJaspers(), this.hats);
        this.addEqItem(new OctopusKingCrownWithObsidian(), this.hats);
        this.addEqItem(new MerchantHat(), this.hats);
        this.addEqItem(new SorceressHat(), this.hats);
        // Create body armours
        this.addEqItem(new LightweightBodyArmour(), this.bodyArmours);
        this.addEqItem(new KnightBodyArmour(), this.bodyArmours);
        this.addEqItem(new EnchantedKnightBodyArmour(), this.bodyArmours);
        // Create gloves
        this.addEqItem(new LeatherGloves(), this.gloves);
        this.addEqItem(new RedEnchantedGloves(), this.gloves);
        this.addEqItem(new PinkEnchantedGloves(), this.gloves);
        // Create boots
        this.addEqItem(new LeatherBoots(), this.boots);
        this.addEqItem(new RocketBoots(), this.boots);
        this.addEqItem(new BootsOfIntrospection(), this.boots);
    };
    Game.prototype.createGridItems = function () {
        // First line
        this.addGridItem(new GridItem("gridItemPossessedMainMap", "gridItemMainMapName", "gridItemMainMapDescription", "gridItems/mainMap", new Pos(0, 0)));
        this.addGridItem(new GridItem("gridItemPossessedTimeRing", "gridItemTimeRingName", "gridItemTimeRingDescription", "gridItems/timeRing", new Pos(1, 0)));
        this.addGridItem(new GridItem("gridItemPossessedThirdHouseKey", "gridItemThirdHouseKeyName", "gridItemThirdHouseKeyDescription", "gridItems/thirdHouseKey", new Pos(2, 0)));
        this.addGridItem(new GridItem("gridItemPossessedBeginnersGrimoire", "gridItemBeginnersGrimoireName", "gridItemBeginnersGrimoireDescription", "gridItems/beginnersGrimoire", new Pos(3, 0)));
        // Second line
        this.addGridItem(new Feather("gridItemPossessedFeather", "gridItemFeatherName", "gridItemFeatherDescription", "gridItems/feather", new Pos(0, 1)));
        this.addGridItem(new GridItem("gridItemPossessedPogoStick", "gridItemPogoStickName", "gridItemPogoStickDescription", "gridItems/pogoStick", new Pos(1, 1)));
        this.addGridItem(new GridItem("gridItemPossessedHeartPlug", "gridItemHeartPlugName", "gridItemHeartPlugDescription", "gridItems/heartPlug", new Pos(2, 1)));
        this.addGridItem(new GridItem("gridItemPossessedAdvancedGrimoire", "gridItemAdvancedGrimoireName", "gridItemAdvancedGrimoireDescription", "gridItems/advancedGrimoire", new Pos(3, 1)));
        // Third line
        this.addGridItem(new GridItem("gridItemPossessedSponge", "gridItemSpongeName", "gridItemSpongeDescription", "gridItems/sponge", new Pos(0, 2)));
        this.addGridItem(new GridItem("gridItemPossessedShellPowder", "gridItemShellPowderName", "gridItemShellPowderDescription", "gridItems/shellPowder", new Pos(1, 2)));
        this.addGridItem(new GridItem("gridItemPossessedRedSharkFin", "gridItemRedSharkFinName", "gridItemRedSharkFinDescription", "gridItems/redSharkFin", new Pos(2, 2)));
        this.addGridItem(new GridItem("gridItemPossessedBlackMagicGrimoire", "gridItemBlackMagicGrimoireName", "gridItemBlackMagicGrimoireDescription", "gridItems/blackMagicGrimoire", new Pos(3, 2)));
        // Fourth line
        this.addGridItem(new GridItem("gridItemPossessedGreenSharkFin", "gridItemGreenSharkFinName", "gridItemGreenSharkFinDescription", "gridItems/greenSharkFin", new Pos(0, 3)));
        this.addGridItem(new GridItem("gridItemPossessedPurpleSharkFin", "gridItemPurpleSharkFinName", "gridItemPurpleSharkFinDescription", "gridItems/purpleSharkFin", new Pos(1, 3)));
        this.addGridItem(new GridItem("gridItemPossessedHeartPendant", "gridItemHeartPendantName", "gridItemHeartPendantDescription", "gridItems/heartPendant", new Pos(2, 3)));
        this.addGridItem(new GridItem("gridItemPossessedFortressKey", "gridItemFortressKeyName", "gridItemFortressKeyDescription", "gridItems/fortressKey", new Pos(3, 3)));
        // Fifth line
        this.addGridItem(new UnicornHorn("gridItemPossessedUnicornHorn", "gridItemUnicornHornName", "gridItemUnicornHornDescription", "gridItems/unicornHorn", new Pos(0, 4)));
        this.addGridItem(new XinopherydonClaw("gridItemPossessedXinopherydonClaw", "gridItemXinopherydonClawName", "gridItemXinopherydonClawDescription", "gridItems/xinopherydonClaw", new Pos(1, 4)));
        this.addGridItem(new GridItem("gridItemPossessedPitchfork", "gridItemPitchforkName", "gridItemPitchforkDescription", "gridItems/pitchfork", new Pos(2, 4)));
        this.addGridItem(new GridItem("gridItemPossessedTalkingCandy", "gridItemTalkingCandyName", "gridItemTalkingCandyDescription", "gridItems/talkingCandy", new Pos(3, 4)));
        // Sixth line
        this.addGridItem(new GridItem("gridItemPossessedP", "gridItemPName", "gridItemPDescription", "gridItems/p", new Pos(0, 5)));
        this.addGridItem(new GridItem("gridItemPossessedL", "gridItemLName", "gridItemLDescription", "gridItems/l", new Pos(1, 5)));
        this.addGridItem(new GridItem("gridItemPossessedA", "gridItemAName", "gridItemADescription", "gridItems/a", new Pos(2, 5)));
        this.addGridItem(new GridItem("gridItemPossessedY", "gridItemYName", "gridItemYDescription", "gridItems/y", new Pos(3, 5)));
    };
    Game.prototype.displayArea = function (renderArea, scrolling, gap, defaultScroll) {
        if (scrolling === void 0) { scrolling = false; }
        if (gap === void 0) { gap = 0; }
        if (defaultScroll === void 0) { defaultScroll = 0; }
        this.mainContentLocation.render(renderArea);
        this.mainContentLocation.setScrolling(scrolling, defaultScroll);
        if (scrolling == false)
            this.mainContentLocation.setContentGap(gap);
        else
            this.mainContentLocation.setContentGap(0);
    };
    Game.prototype.displayPlace = function () {
        this.displayArea(this.place.getRenderArea(), this.place.getScrolling(), this.place.getGap(), this.place.getDefaultScroll());
    };
    Game.prototype.handleCandiesProduction = function () {
        this.candies.add(Saving.loadNumber("lollipopFarmCurrentCandiesProduction"));
    };
    Game.prototype.handleLollipopProduction = function () {
        // If at least one lollipop is planted
        if (Saving.loadNumber("lollipopFarmLollipopsPlanted") > 0) {
            // If the production is each second
            if (Saving.loadBool("lollipopFarmIsProductionEachSecond")) {
                // We just add the production as lollipops
                this.lollipops.add(Saving.loadNumber("lollipopFarmProduction"));
            }
            else {
                // If it's time for a new production
                if (Saving.loadNumber("lollipopFarmTimeSinceLastProduction") >= Saving.loadNumber("lollipopFarmProduction") - 1) {
                    // We reset the time
                    Saving.saveNumber("lollipopFarmTimeSinceLastProduction", 0);
                    // We add one lollipop
                    this.lollipops.add(1);
                }
                else {
                    // We increase the time
                    Saving.saveNumber("lollipopFarmTimeSinceLastProduction", Saving.loadNumber("lollipopFarmTimeSinceLastProduction") + 1);
                }
            }
        }
    };
    Game.prototype.handlePondConversion = function () {
        // Variables
        var conversionAmount;
        // If the conversion is activated
        if (Saving.loadBool("lollipopFarmPondFeedingLolligators")) {
            // Set the conversion amount
            conversionAmount = Saving.loadNumber("lollipopFarmPondConversionRate");
            // If we don't have enough candies, lower this conversion rate
            if (this.candies.getCurrent() < conversionAmount)
                conversionAmount = this.candies.getCurrent();
            // If the conversionAmount is > 0, we convert
            if (conversionAmount > 0) {
                this.candies.add(-conversionAmount);
                this.lollipops.add(conversionAmount);
            }
        }
    };
    Game.prototype.localAutosave = function () {
        // If local autosave is enabled and there's a local auto save slot and there's a local autosave time
        if (this.localAutosaveEnabled == true && this.localAutosaveSlot != null && this.localAutosaveTime != null) {
            // If it's time to save
            if (this.localAutosaveTime <= 0) {
                // We save
                Saving.save(this, MainLoadingType.LOCAL, this.localAutosaveSlot);
                // We reset the time
                this.setDefaultLocalAutosaveTime();
            }
            else
                this.localAutosaveTime -= 1;
        }
    };
    Game.prototype.questMethod = function () {
        // Re set the timeout, depending on if the time is slowed down or not
        window.setTimeout(this.questMethod.bind(this), ((this.questSlowedDown && this.weAreQuesting) ? 200 : 100 + this.getQuestSpeedUp()));
        // Special place callbacks
        this.questCallbackCollection.fire();
    };
    Game.prototype.oneSecondMethod = function () {
        // Our methods
        this.player.magicHealthRegain();
        this.handleCandiesProduction();
        this.handleLollipopProduction();
        this.handlePondConversion();
        this.localAutosave();
        // Special place callbacks
        this.oneSecondCallbackCollection.fire();
    };
    Game.prototype.resetHotkeys = function () {
        this.hotkeys = {};
    };
    Game.prototype.resetResourcesCallbacks = function () {
        // Reset status bar resources callbacks
        this.candies.getCallbackCollection().reset();
        this.lollipops.getCallbackCollection().reset();
        // Reset other resources callbacks
        this.candiesEaten.getCallbackCollection().reset();
        this.candiesThrown.getCallbackCollection().reset();
        // Reset interval callbacks
        this.oneSecondCallbackCollection.reset();
        this.questCallbackCollection.reset();
    };
    Game.prototype.saveCurrentMapPlace = function () {
        if (this.savedPlace == null)
            this.savedPlace = this.place;
    };
    Game.prototype.setDefaultLocalAutosaveTime = function () {
        this.localAutosaveTime = 600;
    };
    Game.prototype.setPlaceFromSavedMapPlace = function () {
        // If there's a saved place
        if (this.savedPlace != null) {
            this.setPlace(this.savedPlace); // We set the saved place as the current place
            this.savedPlace = null; // There's no saved place anymore
        }
    };
    return Game;
})();
///<reference path="Quest.ts"/>
var GiantNougatMonsterQuest = (function (_super) {
    __extends(GiantNougatMonsterQuest, _super);
    // Constructor
    function GiantNougatMonsterQuest(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 20);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 19));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.addWalls();
        // Add the monster
        this.addMonster();
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You attack the giant nougat monster. It seems to be asleep."));
    }
    // Public methods
    GiantNougatMonsterQuest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    GiantNougatMonsterQuest.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You killed the giant nougat monster and gained access to the tower!"));
            Saving.saveBool("castleKilledNougatMonster", true);
        }
        else
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed."));
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    GiantNougatMonsterQuest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    GiantNougatMonsterQuest.prototype.addMonster = function () {
        this.giantNougatMonster = new GiantNougatMonster(this, new Pos(78, 16));
        this.giantNougatMonster.setHealthBar(new QuestEntityHealthBar(this.giantNougatMonster, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.giantNougatMonster);
    };
    GiantNougatMonsterQuest.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(-20, 20));
        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(140, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    GiantNougatMonsterQuest.prototype.thePlayerWon = function () {
        if (this.giantNougatMonster.shouldDie())
            return true;
        return false;
    };
    return GiantNougatMonsterQuest;
})(Quest);
var GiantNougatMonsterStep;
(function (GiantNougatMonsterStep) {
    GiantNougatMonsterStep[GiantNougatMonsterStep["ASLEEP"] = 0] = "ASLEEP";
    GiantNougatMonsterStep[GiantNougatMonsterStep["AWAKE"] = 1] = "AWAKE";
    GiantNougatMonsterStep[GiantNougatMonsterStep["ANGRY"] = 2] = "ANGRY";
})(GiantNougatMonsterStep || (GiantNougatMonsterStep = {}));
///<reference path="QuestEntity.ts"/>
var GiantNougatMonster = (function (_super) {
    __extends(GiantNougatMonster, _super);
    // Constructor
    function GiantNougatMonster(quest, pos) {
        _super.call(this, quest, pos, new Naming("The giant nougat monster", "the giant nougat monster"), new RenderArea(15, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(1, 0), new Pos(12, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(15, 2)), new CollisionBox(this, new Pos(1, 3), new Pos(12, 1))), new QuestEntityMovement());
        // Set the default step
        this.step = GiantNougatMonsterStep.ASLEEP;
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(2000);
        this.setHp(2000);
        // Set the ascii art and the transparent character
        this.reDrawAscii();
        this.setTransparency(new RenderTransparency(" ", "%"));
    }
    // update()
    GiantNougatMonster.prototype.update = function () {
        // Do something different depending on the current step
        switch (this.step) {
            case GiantNougatMonsterStep.ASLEEP:
                // If we have less then 1577 hp (1577 was the number of bytes of the wikipedia article "Nougat" on the fifth of november, 2005 according to the article revision history. See here : https://en.wikipedia.org/w/index.php?title=Nougat&oldid=27465563)
                if (this.getHp() < 1577) {
                    // We go to awake mode
                    this.step = GiantNougatMonsterStep.AWAKE;
                    this.reDrawAscii(); // Re draw the ascii art
                    this.addWeapon(); // Add the weapon
                }
                break;
            case GiantNougatMonsterStep.AWAKE:
                // If we have less than 500 hp
                if (this.getHp() < 500) {
                    // We go to angry mode
                    this.step = GiantNougatMonsterStep.ANGRY;
                    this.reDrawAscii(); // Re draw the ascii art
                }
                // Go towards the player (speed : 1)
                this.goTowards(this.getGlobalPosition().plus(new Pos(6, 2)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(1, 0));
                break;
            case GiantNougatMonsterStep.ANGRY:
                // Go towards the player (speed : 3)
                this.goTowards(this.getGlobalPosition().plus(new Pos(6, 2)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(3, 0));
                break;
        }
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    GiantNougatMonster.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(Random.upTo(123456)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    // Private methods
    GiantNougatMonster.prototype.addWeapon = function () {
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Nougat", "nougat"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(17, 6))), 3000));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(20, 40);
    };
    GiantNougatMonster.prototype.reDrawAscii = function () {
        // Draw a different ascii art depending on the step
        switch (this.step) {
            case GiantNougatMonsterStep.ASLEEP:
                this.getRenderArea().drawArray(Database.getAscii("places/quests/giantNougatMonster/monster"));
                break;
            case GiantNougatMonsterStep.AWAKE:
                this.getRenderArea().drawArray(Database.getAscii("places/quests/giantNougatMonster/monsterAwake"));
                break;
            case GiantNougatMonsterStep.ANGRY:
                this.getRenderArea().drawArray(Database.getAscii("places/quests/giantNougatMonster/monsterAngry"));
                break;
        }
    };
    return GiantNougatMonster;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var GiantSpoonOfDoom = (function (_super) {
    __extends(GiantSpoonOfDoom, _super);
    // Constructor
    function GiantSpoonOfDoom() {
        _super.call(this, "eqItemWeaponGiantSpoonOfDoom", "eqItemWeaponGiantSpoonOfDoomName", "eqItemWeaponGiantSpoonOfDoomDescription", "eqItems/weapons/giantSpoonOfDoom");
    }
    // Public getters
    GiantSpoonOfDoom.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("The giant Spoon of Doom", "the giant Spoon of Doom"), player.getClassicCollisionBoxCollection(), 315);
        qew.getCloseCombatDelay().setFixedDelay(14, 0);
        return qew;
    };
    return GiantSpoonOfDoom;
})(EqItem);
///<reference path="EqItem.ts"/>
var GiantSpoon = (function (_super) {
    __extends(GiantSpoon, _super);
    // Constructor
    function GiantSpoon() {
        _super.call(this, "eqItemWeaponGiantSpoon", "eqItemWeaponGiantSpoonName", "eqItemWeaponGiantSpoonDescription", "eqItems/weapons/giantSpoon");
    }
    // Public getters
    GiantSpoon.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A giant spoon", "a giant spoon"), player.getClassicCollisionBoxCollection(), 70);
        qew.getCloseCombatDelay().setFixedDelay(7, 0);
        return qew;
    };
    return GiantSpoon;
})(EqItem);
///<reference path="Quest.ts"/>
var Hell = (function (_super) {
    __extends(Hell, _super);
    // Constructor
    function Hell(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(150, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 23));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the floor
        this.addFloor(0, 20);
        // Add the lava entities
        this.addLava(new Pos(53, 27), new Pos(20, 2));
        this.addLava(new Pos(92, 27), new Pos(16, 2));
        // Add the devil
        this.addDevil(new Pos(130, 2));
        // Add Camazotz
        this.addCamazotz(new Pos(Random.between(70, 100), 2));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter Hell."));
    }
    // Public methods
    Hell.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 0), new Pos(20, 21));
    };
    Hell.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    Hell.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to beat the devil itself!"));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in Hell. Your soul will wander here for all eternity."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Hell.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.drawBackground(0, 20);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Hell.prototype.addCamazotz = function (pos) {
        var camazotz;
        camazotz = new Camazotz(this, pos);
        camazotz.setHealthBar(new QuestEntityHealthBar(camazotz, new Pos(22, 1), new Pos(0, 0)));
        this.addEntity(camazotz);
    };
    Hell.prototype.addDevil = function (pos) {
        this.devil = new Devil(this, pos, 2, 19);
        this.devil.setHealthBar(new QuestEntityHealthBar(this.devil, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.devil);
    };
    Hell.prototype.addFloor = function (x, y) {
        // Create the wall entity
        var wall = new Wall(this, new Pos(x, y));
        // Add the floor
        wall.addBox(new Pos(0, 4), new Pos(53, 6));
        wall.addBox(new Pos(73, 4), new Pos(19, 6));
        wall.addBox(new Pos(108, 4), new Pos(42, 6));
        wall.addBox(new Pos(0, 9), new Pos(150, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    Hell.prototype.addLava = function (pos, size) {
        this.addEntity(new Lava(this, pos, size));
    };
    Hell.prototype.drawBackground = function (x, y) {
        // Draw the ascii
        this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/background"), this.getRealQuestPosition().x + x, this.getRealQuestPosition().y + y);
        // Add the red color for the first lava pit
        this.drawLava(x + 55, x + 71, y + 4);
        this.drawLava(x + 54, x + 72, y + 5);
        this.drawLava(x + 53, x + 73, y + 6);
        this.drawLava(x + 52, x + 74, y + 7);
        this.drawLava(x + 51, x + 75, y + 8);
        this.drawLava(x + 51, x + 75, y + 9);
        // Same thing for the second pit
        this.drawLava(x + 94, x + 106, y + 4);
        this.drawLava(x + 93, x + 107, y + 5);
        this.drawLava(x + 92, x + 108, y + 6);
        this.drawLava(x + 91, x + 109, y + 7);
        this.drawLava(x + 90, x + 110, y + 8);
        this.drawLava(x + 90, x + 110, y + 9);
    };
    Hell.prototype.drawLava = function (x1, x2, y) {
        this.getRenderArea().addBackgroundColor(this.getRealQuestPosition().x + x1, this.getRealQuestPosition().x + x2, this.getRealQuestPosition().y + y, new Color(ColorType.HELL_RED_LAVA));
    };
    Hell.prototype.thePlayerWon = function () {
        // If the devil is dead, we return true
        if (this.devil.shouldDie() == true)
            return true;
        // Else we return false
        return false;
    };
    return Hell;
})(Quest);
var Hotkey = (function () {
    // Constructor
    function Hotkey(keyString, callbackCollection) {
        this.pressed = false; // Is this hotkey pressed ?
        // Set the key string
        this.keyString = keyString;
        // Handle special keys
        switch (this.keyString) {
            case "up":
                this.key = 38;
                break;
            case "down":
                this.key = 40;
                break;
            case "left":
                this.key = 37;
                break;
            case "right":
                this.key = 39;
                break;
            case "space":
                this.key = 32;
                break;
            case "enter":
                this.key = 13;
                break;
            case "delete":
                this.key = 8;
                break;
            case "numpad0":
                this.key = 96;
                break;
            case "numpad1":
                this.key = 97;
                break;
            case "numpad2":
                this.key = 98;
                break;
            case "numpad3":
                this.key = 99;
                break;
            case "numpad4":
                this.key = 100;
                break;
            case "numpad5":
                this.key = 101;
                break;
            case "numpad6":
                this.key = 102;
                break;
            case "numpad7":
                this.key = 103;
                break;
            case "numpad8":
                this.key = 104;
                break;
            case "numpad9":
                this.key = 105;
                break;
            default:
                this.key = this.keyString.toUpperCase().charCodeAt(0);
                break; // We convert to upper case to please our great jQuery master
        }
        this.callbackCollection = callbackCollection;
    }
    // Public getters
    Hotkey.prototype.getCallbackCollection = function () {
        return this.callbackCollection;
    };
    Hotkey.prototype.getKey = function () {
        return this.key;
    };
    Hotkey.prototype.getKeyString = function () {
        return this.keyString;
    };
    Hotkey.prototype.getPressed = function () {
        return this.pressed;
    };
    // Public setters
    Hotkey.prototype.setPressed = function (pressed) {
        this.pressed = pressed;
    };
    return Hotkey;
})();
///<reference path="Place.ts"/>
var InsideFortress = (function (_super) {
    __extends(InsideFortress, _super);
    // Constructor
    function InsideFortress(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/fortress/inside"), 0, 4);
        this.update();
    }
    // getRenderArea()
    InsideFortress.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    InsideFortress.prototype.addFirstDoorButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("fortressInsideFirstDoorButton", x + 11, x + 14, y, x + 7, x + 14, y + 1, x + 3, x + 14, y + 2, x, x + 14, y + 3, x, x + 14, y + 4, x, x + 14, y + 5, x, x + 14, y + 6, x, x + 14, y + 7, x, x + 14, y + 8, x, x + 14, y + 9, x, x + 14, y + 10, x, x + 14, y + 11, x, x + 14, y + 12, x, x + 14, y + 13, x, x + 14, y + 14, x, x + 14, y + 15, x, x + 14, y + 16, x, x + 14, y + 17, x, x + 10, y + 18, x, x + 6, y + 19, x, x + 2, y + 20, x, x + 1, y + 21);
        // Add the link
        this.renderArea.addLinkCall(".fortressInsideFirstDoorButton", new CallbackCollection(this.goToFirstRoom.bind(this)));
    };
    InsideFortress.prototype.addSecondDoorButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("fortressInsideSecondDoorButton", x, x + 15, y, x, x + 15, y + 1, x, x + 15, y + 2, x, x + 15, y + 3, x, x + 15, y + 4, x, x + 15, y + 5, x, x + 15, y + 6, x, x + 15, y + 7, x, x + 15, y + 8, x, x + 15, y + 9, x, x + 15, y + 10, x, x + 15, y + 11, x, x + 15, y + 12, x, x + 15, y + 13, x, x + 15, y + 14, x, x + 15, y + 15, x, x + 15, y + 16, x, x + 15, y + 17);
        // Add the link
        this.renderArea.addLinkCall(".fortressInsideSecondDoorButton", new CallbackCollection(this.goToSecondRoom.bind(this)));
    };
    InsideFortress.prototype.addThirdDoorButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("fortressInsideThirdDoorButton", x, x + 3, y, x, x + 7, y + 1, x, x + 11, y + 2, x, x + 14, y + 3, x, x + 14, y + 4, x, x + 14, y + 5, x, x + 14, y + 6, x, x + 14, y + 7, x, x + 14, y + 8, x, x + 14, y + 9, x, x + 14, y + 10, x, x + 14, y + 11, x, x + 14, y + 12, x, x + 14, y + 13, x, x + 14, y + 14, x, x + 14, y + 15, x, x + 14, y + 16, x, x + 14, y + 17, x + 4, x + 14, y + 18, x + 8, x + 14, y + 19, x + 12, x + 14, y + 20, x + 13, x + 14, y + 21);
        // Add the link
        this.renderArea.addLinkCall(".fortressInsideThirdDoorButton", new CallbackCollection(this.goToThirdRoom.bind(this)));
    };
    InsideFortress.prototype.goToFirstRoom = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new FortressRoom1(this.getGame()));
    };
    InsideFortress.prototype.goToSecondRoom = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new FortressRoom2(this.getGame()));
    };
    InsideFortress.prototype.goToThirdRoom = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new FortressRoom3(this.getGame()));
    };
    InsideFortress.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "insideFortressBackToTheMapButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/fortress/inside"), 0, 3);
        // Add the text
        this.renderArea.drawString(Database.getText("fortressInsideText0"), 22, 29);
        this.renderArea.drawString(Database.getText("fortressInsideText1"), 22, 30);
        this.renderArea.drawString(Database.getText("fortressInsideText2"), 22, 31);
        // Add the translated text
        this.renderArea.drawString(Database.getTranslatedText("fortressInsideText0"), 22, 33, true);
        this.renderArea.drawString(Database.getTranslatedText("fortressInsideText1"), 22, 34, true);
        this.renderArea.drawString(Database.getTranslatedText("fortressInsideText2"), 22, 35, true);
        // Add the doors buttons
        this.addFirstDoorButton(8, 10);
        this.addSecondDoorButton(42, 8);
        this.addThirdDoorButton(78, 10);
    };
    return InsideFortress;
})(Place);
var InsideYourBoxSweet = (function () {
    // Constructor
    function InsideYourBoxSweet() {
        // Set the ascii art name
        this.asciiArt = "general/insideYourBox/" + Random.between(0, 10);
        // Set the position
        this.pos = new Pos(-Database.getAsciiWidth(this.asciiArt) + Random.between(0, 99 + Database.getAsciiWidth(this.asciiArt)), -Database.getAsciiHeight(this.asciiArt));
        // Set the speed
        this.speed = Random.between(1, 3);
    }
    // Public methods
    InsideYourBoxSweet.prototype.draw = function (renderArea) {
        // Draw the ascii art at the right position
        renderArea.drawArray(Database.getAscii(this.asciiArt), this.pos.x, this.pos.y);
    };
    InsideYourBoxSweet.prototype.update = function () {
        // If we're out of the screen, we return true
        if (this.pos.y >= 40)
            return true;
        // Increase the speed
        this.speed += 0.3;
        // Increase the position
        this.pos.y += Math.floor(this.speed);
    };
    return InsideYourBoxSweet;
})();
///<reference path="Place.ts"/>
var InsideYourBox = (function (_super) {
    __extends(InsideYourBox, _super);
    // Constructor
    function InsideYourBox(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The sweets
        this.sweets = [];
        // Launch the interval
        this.intervalID = setInterval(this.actionInterval.bind(this), 100);
        // Resize and update
        this.renderArea.resize(100, 40);
        this.update();
    }
    // getRenderArea()
    InsideYourBox.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willStopBeingDisplayed()
    InsideYourBox.prototype.willStopBeingDisplayed = function () {
        clearInterval(this.intervalID);
    };
    // Private methods
    InsideYourBox.prototype.actionInterval = function () {
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    InsideYourBox.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Add a sweet
        this.sweets.push(new InsideYourBoxSweet());
        // Update the sweets and delete the one which need to be deleted
        for (var i = 0; i < this.sweets.length; i++) {
            if (this.sweets[i].update()) {
                this.sweets.splice(i, 1);
                i--;
            }
        }
        // Draw the sweets
        for (var i = 0; i < this.sweets.length; i++) {
            this.sweets[i].draw(this.renderArea);
        }
        // Draw the text
        this.renderArea.drawArray(Database.getAscii("general/insideYourBox/text"), 0, 5, new RenderTransparency(" ", "%"));
    };
    return InsideYourBox;
})(Place);
///<reference path="Place.ts"/>
var Inventory = (function (_super) {
    __extends(Inventory, _super);
    // Constructor
    function Inventory(game) {
        _super.call(this, game);
        // Render area
        this.renderArea = new RenderArea();
        // Resize the area
        this.renderArea.resize(99, 136);
        // Update
        this.update();
    }
    // Public methods
    Inventory.prototype.update = function () {
        // yGap, can increase depending on the stats panel
        var yGap = 0;
        // Erase everything
        this.renderArea.resetAllButSize();
        // Draw the inventory top
        this.renderArea.drawArray(Database.getAscii("general/inventoryTop"));
        // Draw equipment
        this.drawEquipment();
        // Draw statistics
        yGap += this.drawStats(0, 52);
        // Draw the inventory bottom
        this.renderArea.drawArray(Database.getAscii("general/inventoryBottom"), 0, 55 + yGap);
        // Draw items
        this.drawGridItems(4, 57 + yGap);
    };
    // getRenderArea()
    Inventory.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Inventory.prototype.createArrayFromEqItemsArrayForRenderAreaList = function (eqItemsArray, nothingId) {
        // Create the array
        var arr = [];
        // Add the "Nothing" item
        arr.push(nothingId);
        arr.push(Database.getText("inventorySpecialNothingEqItem") + (Database.getTranslatedText("inventorySpecialNothingEqItem") == "" ? "" : " (" + Database.getTranslatedText("inventorySpecialNothingEqItem") + ")"));
        // Fill the array with eqItems
        for (var savingName in eqItemsArray) {
            if (eqItemsArray[savingName].isPossessed()) {
                arr.push(savingName);
                arr.push(Database.getText(eqItemsArray[savingName].getDatabaseName()) + (Database.getTranslatedText(eqItemsArray[savingName].getDatabaseName()) == "" ? "" : " (" + Database.getTranslatedText(eqItemsArray[savingName].getDatabaseName()) + ")"));
            }
        }
        // Return the array
        return arr;
    };
    Inventory.prototype.disableAllLists = function () {
        $("#inventoryWeaponsList").prop("disabled", true);
        $("#inventoryHatsList").prop("disabled", true);
        $("#inventoryBodyArmoursList").prop("disabled", true);
        $("#inventoryGlovesList").prop("disabled", true);
        $("#inventoryBootsList").prop("disabled", true);
    };
    Inventory.prototype.drawEqItem = function (eqItem, pos, size) {
        // If the eqItem isn't null
        if (eqItem != null) {
            this.renderArea.drawArray(Database.getAscii(eqItem.getAscii()), Math.floor(pos.x + size.x / 2 - Database.getAsciiWidth(eqItem.getAscii()) / 2), Math.floor(pos.y + size.y / 2 - Database.getAsciiHeight(eqItem.getAscii()) / 2), null, eqItem.getSavingName() + "OnHover");
            // Add the tooltip
            this.renderArea.addTooltip(eqItem.getSavingName() + "Tooltip", Database.getText(eqItem.getDatabaseDescriptionName()) + (Database.getTranslatedText(eqItem.getDatabaseDescriptionName()) != "" ? "<br/><br/><i>" + Database.getTranslatedText(eqItem.getDatabaseDescriptionName()) + "</i>" : ""));
            // Add the link
            this.renderArea.addLinkOnHoverShowTooltip("." + eqItem.getSavingName() + "OnHover", "." + eqItem.getSavingName() + "Tooltip");
        }
    };
    Inventory.prototype.drawEquipment = function () {
        // Add backgrounds and lists
        var arr;
        // Weapon
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getWeapons(), "inventorySpecialNothingWeapon");
        if (arr.length > 2)
            this.renderArea.addList(8, 38, 15, "inventoryWeaponsList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        // Hat
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getHats(), "inventorySpecialNothingHat");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryHat"), 59, 12);
            this.renderArea.addList(61, 93, 14, "inventoryHatsList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }
        // Body armour
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getBodyArmours(), "inventorySpecialNothingBodyArmour");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryBodyArmour"), 59, 25);
            this.renderArea.addList(61, 78, 27, "inventoryBodyArmoursList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }
        // Gloves
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getGloves(), "inventorySpecialNothingGloves");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryGloves"), 82, 25);
            this.renderArea.addList(84, 93, 27, "inventoryGlovesList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }
        // Boots
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getBoots(), "inventorySpecialNothingBoots");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryBoots"), 59, 38);
            this.renderArea.addList(61, 93, 40, "inventoryBootsList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }
        // Add links which will call callbacks after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightEqItems.bind(this))); // Select the right items
        if (this.getGame().getWeAreQuesting() == true)
            this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.disableAllLists.bind(this))); // Disable all the lists
        // Draw the eqItems
        this.drawEqItem(this.getGame().getSelectedEqItems()["weapon"], new Pos(7, 16), new Pos(32, 33));
        this.drawEqItem(this.getGame().getSelectedEqItems()["hat"], new Pos(60, 16), new Pos(34, 8));
        this.drawEqItem(this.getGame().getSelectedEqItems()["bodyArmour"], new Pos(60, 28), new Pos(19, 8));
        this.drawEqItem(this.getGame().getSelectedEqItems()["gloves"], new Pos(83, 28), new Pos(11, 8));
        this.drawEqItem(this.getGame().getSelectedEqItems()["boots"], new Pos(60, 41), new Pos(34, 8));
    };
    Inventory.prototype.drawGridItem = function (gridItem, x, y) {
        // Draw the ascii art
        this.renderArea.drawArray(Database.getAscii(gridItem.getAscii()), x + gridItem.getPosition().x * 23 + Math.floor(23 / 2 - Database.getAsciiWidth(gridItem.getAscii()) / 2), y + gridItem.getPosition().y * 12 + Math.floor(11 / 2 - Database.getAsciiHeight(gridItem.getAscii()) / 2), null, gridItem.getSavingName() + "OnHover");
        // Add the tooltip
        this.renderArea.addTooltip(gridItem.getSavingName() + "Tooltip", "<b>" + Database.getText(gridItem.getDatabaseName()) + "</b><br/>" + Database.getText(gridItem.getDatabaseDescriptionName()) + (Database.getTranslatedText(gridItem.getDatabaseDescriptionName()) != "" ? "<br/><br/><i><b>" + Database.getTranslatedText(gridItem.getDatabaseName()) + "</b><br/>" + Database.getTranslatedText(gridItem.getDatabaseDescriptionName()) + "</i>" : ""));
        // Add the link
        this.renderArea.addLinkOnHoverShowTooltip("." + gridItem.getSavingName() + "OnHover", "." + gridItem.getSavingName() + "Tooltip");
    };
    Inventory.prototype.drawGridItems = function (x, y) {
        for (var savingName in this.getGame().getGridItems()) {
            // If we possess this item, we draw it
            if (this.getGame().getGridItems()[savingName].isPossessed())
                this.drawGridItem(this.getGame().getGridItems()[savingName], x, y);
        }
    };
    Inventory.prototype.drawStats = function (x, y) {
        // Set the additional damage text
        var additionalDamageText;
        if (Saving.loadBool("gridItemPossessedXinopherydonClaw") && (this.getGame().getSelectedEqItems()["bodyArmour"] != null && this.getGame().getSelectedEqItems()["bodyArmour"].getSavingName() == "eqItemBodyArmoursEnchantedKnightBodyArmour"))
            additionalDamageText = "";
        else if (Saving.loadBool("gridItemPossessedXinopherydonClaw"))
            additionalDamageText = " x 2";
        else if ((this.getGame().getSelectedEqItems()["bodyArmour"] != null && this.getGame().getSelectedEqItems()["bodyArmour"].getSavingName() == "eqItemBodyArmoursEnchantedKnightBodyArmour"))
            additionalDamageText = " / 2";
        else
            additionalDamageText = "";
        // This array will contain the special abilities
        var specialAbilities = [];
        // First line
        this.renderArea.drawString(this.getGame().getPlayer().getMaxHp().toString(), x + 16, y); // player's maximum HP
        this.renderArea.drawString(this.getGame().getPlayer().getQuestEntityWeapon().getRealDamageText() + additionalDamageText, x + 43, y); // weapon damage
        this.renderArea.drawString(this.getGame().getPlayer().getQuestEntityWeapon().getSpeedText(), x + 71, y); // weapon speed
        // Fill the special abilities array with grid items abilities
        for (var savingName in this.getGame().getGridItems()) {
            // If we possess this item
            if (this.getGame().getGridItems()[savingName].isPossessed()) {
                // If it has a special ability, we add it
                if (this.getGame().getGridItems()[savingName].getSpecialAbility() != null)
                    specialAbilities.push(this.getGame().getGridItems()[savingName].getSpecialAbility());
            }
        }
        // Fill the special abilities array with eq items abilities
        if (this.getGame().getSelectedEqItems()["weapon"] != null && this.getGame().getSelectedEqItems()["weapon"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["weapon"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["hat"] != null && this.getGame().getSelectedEqItems()["hat"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["hat"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["bodyArmour"] != null && this.getGame().getSelectedEqItems()["bodyArmour"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["bodyArmour"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["gloves"] != null && this.getGame().getSelectedEqItems()["gloves"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["gloves"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["boots"] != null && this.getGame().getSelectedEqItems()["boots"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["boots"].getSpecialAbility());
        // Fill the special abilities with gifts
        if (Saving.loadNumber("gameGiftPower") > 0) {
            specialAbilities.push("GIFT : your attacks are " + (Saving.loadNumber("gameGiftPower") * 20).toString() + "% more powerful.");
        }
        if (Saving.loadNumber("gameGiftHealth") > 0) {
            specialAbilities.push("GIFT : you have " + (Saving.loadNumber("gameGiftHealth") * 20).toString() + "% more health points.");
        }
        if (Saving.loadNumber("gameGiftMagic") > 0) {
            specialAbilities.push("GIFT : the spell and potion countdowns are reduced by " + (Saving.loadNumber("gameGiftMagic") * 15) + "%.");
        }
        // If the special abilities array is empty, add the "no special ability" text
        if (specialAbilities.length == 0)
            specialAbilities.push("You have no special ability.");
        // Draw the special abilities
        for (var i = 0; i < specialAbilities.length; i++) {
            // If it's not the first one, we draw the background
            if (i != 0) {
                this.renderArea.drawArray(Database.getAscii("general/specialAbilityBackground"), x, y + 2 + i);
            }
            // We draw the special ability
            this.renderArea.drawString(specialAbilities[i], x + 7, y + 2 + i);
        }
        // We return the height added by the drawing of the special abilities
        return specialAbilities.length - 1;
    };
    Inventory.prototype.selectedEqItem = function () {
        // Set the eqItems
        if ($("#inventoryWeaponsList").length)
            Saving.saveString("gameWeaponSelected", $("#inventoryWeaponsList").find(":selected").attr("id"));
        else
            Saving.saveString("gameWeaponSelected", "inventorySpecialNothingWeapon");
        if ($("#inventoryHatsList").length)
            Saving.saveString("gameHatSelected", $("#inventoryHatsList").find(":selected").attr("id"));
        else
            Saving.saveString("gameHatSelected", "inventorySpecialNothingHat");
        if ($("#inventoryBodyArmoursList").length)
            Saving.saveString("gameBodyArmourSelected", $("#inventoryBodyArmoursList").find(":selected").attr("id"));
        else
            Saving.saveString("gameBodyArmourSelected", "inventorySpecialNothingBodyArmour");
        if ($("#inventoryGlovesList").length)
            Saving.saveString("gameGlovesSelected", $("#inventoryGlovesList").find(":selected").attr("id"));
        else
            Saving.saveString("gameGlovesSelected", "inventorySpecialNothingGloves");
        if ($("#inventoryBootsList").length)
            Saving.saveString("gameBootsSelected", $("#inventoryBootsList").find(":selected").attr("id"));
        else
            Saving.saveString("gameBootsSelected", "inventorySpecialNothingBoots");
        // Fill the selected eqItems array
        this.getGame().emptyAndFillSelectedEqItemsArray();
        // Re calculate the player max hp, because it may have changed
        this.getGame().getPlayer().reCalcMaxHp();
        // Update inventory
        this.update();
        this.getGame().updatePlace();
    };
    Inventory.prototype.selectRightEqItems = function () {
        // We select the right eqItems
        $("#" + Saving.loadString("gameWeaponSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameHatSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameBodyArmourSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameGlovesSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameBootsSelected")).prop('selected', true);
    };
    return Inventory;
})(Place);
///<reference path="EqItem.ts"/>
var IronAxe = (function (_super) {
    __extends(IronAxe, _super);
    // Constructor
    function IronAxe() {
        _super.call(this, "eqItemWeaponIronAxe", "eqItemWeaponIronAxeName", "eqItemWeaponIronAxeDescription", "eqItems/weapons/ironAxe");
    }
    // Public getters
    IronAxe.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("An iron axe", "an iron axe"), player.getClassicCollisionBoxCollection(), 3);
        qew.getCloseCombatDelay().setFixedDelay(3, 0);
        return qew;
    };
    return IronAxe;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var JellyFish = (function (_super) {
    __extends(JellyFish, _super);
    // Constructor
    function JellyFish(quest, pos) {
        _super.call(this, quest, pos, new Naming("A jellyfish", "a jellyfish"), new RenderArea(6, 5), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(6, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(4, 1)), new CollisionBox(this, new Pos(1, 4), new Pos(4, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(42);
        this.setHp(42);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/jellyFish"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Poisoned tentacles", "poisoned tentacles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 7))), 2));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
    }
    // Public methods
    JellyFish.prototype.update = function () {
        // We follow the player
        this.goTowards(this.getRenderAreaCenter(), this.getQuest().getGame().getPlayer().getRenderAreaCenter(), 3);
        // We call the mother update method
        _super.prototype.update.call(this);
    };
    // willDie()
    JellyFish.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(120), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return JellyFish;
})(QuestEntity);
var Keyboard;
(function (Keyboard) {
    // The game
    var game;
    function setGame(gameGiven) {
        game = gameGiven;
    }
    Keyboard.setGame = setGame;
    function execute() {
        // Handle keydown events
        $(document).keydown(function (event) {
            // Can we use hotkeys ?
            var canUseHotkeys = getCanUseHotkeys();
            // Handle hotkeys
            for (var keyString in game.getHotkeys()) {
                if (event.which == game.getHotkeys()[keyString].getKey()) {
                    game.getHotkeys()[keyString].setPressed(true);
                    if (canUseHotkeys) {
                        if (game.getHotkeys()[keyString].getCallbackCollection() != null)
                            game.getHotkeys()[keyString].getCallbackCollection().fire();
                        event.preventDefault();
                        return false;
                    }
                }
            }
            // Handle special hotkeys
            if (canUseHotkeys) {
                for (var i = 0; i < game.getSpecialHotkeys().length; i++) {
                    if (event.which == game.getSpecialHotkeys()[i].getKey()) {
                        if (game.getSpecialHotkeys()[i].getCallbackCollection() != null)
                            game.getSpecialHotkeys()[i].getCallbackCollection().fire();
                        event.preventDefault();
                        return false;
                    }
                }
            }
        });
        // Handle keyup events
        $(document).keyup(function (event) {
            // Handle hotkeys
            for (var keyString in game.getHotkeys()) {
                if (event.which == game.getHotkeys()[keyString].getKey()) {
                    game.getHotkeys()[keyString].setPressed(false);
                }
            }
        });
    }
    Keyboard.execute = execute;
    function getCanUseHotkeys() {
        if ($(':focus').hasClass("noHotkeys"))
            return false;
        return true;
    }
    function isKeyPressed(keyString) {
        return game.getHotkeys()[keyString].getPressed();
    }
    Keyboard.isKeyPressed = isKeyPressed;
})(Keyboard || (Keyboard = {}));
///<reference path="EqItem.ts"/>
var KnightBodyArmour = (function (_super) {
    __extends(KnightBodyArmour, _super);
    // Constructor
    function KnightBodyArmour() {
        _super.call(this, "eqItemBodyArmoursKnightBodyArmour", "eqItemBodyArmoursKnightBodyArmourName", "eqItemBodyArmoursKnightBodyArmourDescription", "eqItems/bodyArmours/knightBodyArmour");
    }
    // Special ability
    KnightBodyArmour.prototype.getSpecialAbility = function () {
        return "Damage taken reduced by 30% (knight body armour)";
    };
    // inflictDamage()
    KnightBodyArmour.prototype.inflictDamage = function (player, quest, damage, reason) {
        return Math.ceil(damage - damage * 30 / 100);
    };
    return KnightBodyArmour;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var Knight = (function (_super) {
    __extends(Knight, _super);
    // Constructor
    function Knight(quest, pos) {
        _super.call(this, quest, pos, new Naming("A knight", "a knight"), new RenderArea(15, 6), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(3, 1), new Pos(1, 1)), new CollisionBox(this, new Pos(6, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(9, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(13, 1)), new CollisionBox(this, new Pos(3, 4), new Pos(9, 1)), new CollisionBox(this, new Pos(4, 5), new Pos(2, 1)), new CollisionBox(this, new Pos(9, 5), new Pos(2, 1))), new QuestEntityMovement(new Pos(0, 0)));
        // Default movement related variables values
        this.moving = false;
        this.currentAsciiNumber = 1;
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(150);
        this.setHp(150);
        // Set the ascii art and the transparent character
        this.reDrawAscii();
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A sword", "a sword"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(17, 7))), 70));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(8);
    }
    // update()
    Knight.prototype.update = function () {
        // If we're not moving
        if (this.moving == false) {
            // If we're able to move now
            if (this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(-3, 0)))) {
                this.moving = true; // We move
                this.getQuestEntityMovement().setOffset(new Pos(-3, 0)); // The movement
            }
        }
        else {
            // If we're not able to move anymore
            if (this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(-3, 0))) == false) {
                this.moving = false; // We stop moving
                this.getQuestEntityMovement().setOffset(new Pos(0, 0)); // The movement
                this.currentAsciiNumber = 1; // currentAsciiNumber
                this.reDrawAscii();
            }
            else {
                // Change the currentAsciiNumber
                this.currentAsciiNumber += 1;
                if (this.currentAsciiNumber > 5)
                    this.currentAsciiNumber = 1;
                this.reDrawAscii();
            }
        }
        // Call the mother class update
        _super.prototype.update.call(this);
    };
    // willDie()
    Knight.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(800 + Random.upTo(15) * 100), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        if (Random.oneChanceOutOf(5))
            this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemBodyArmoursKnightBodyArmour", "You found a body armour on a knight", "You gain a knight body armour"));
    };
    // Private methods
    Knight.prototype.reDrawAscii = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castleEntrance/knight" + this.currentAsciiNumber.toString()));
    };
    return Knight;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Lava = (function (_super) {
    __extends(Lava, _super);
    // Constructor
    function Lava(quest, globalPosition, size) {
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("Lava", "lava"));
        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Fire", "fire"), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), size)), 1000));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
    }
    return Lava;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var LeatherBoots = (function (_super) {
    __extends(LeatherBoots, _super);
    // Constructor
    function LeatherBoots() {
        _super.call(this, "eqItemBootsLeatherBoots", "eqItemBootsLeatherBootsName", "eqItemBootsLeatherBootsDescription", "eqItems/boots/leatherBoots");
    }
    return LeatherBoots;
})(EqItem);
///<reference path="EqItem.ts"/>
var LeatherGloves = (function (_super) {
    __extends(LeatherGloves, _super);
    // Constructor
    function LeatherGloves() {
        _super.call(this, "eqItemGlovesLeatherGloves", "eqItemGlovesLeatherGlovesName", "eqItemGlovesLeatherGlovesDescription", "eqItems/gloves/leatherGloves");
    }
    return LeatherGloves;
})(EqItem);
var LighthousePuzzlePart = (function () {
    // Constructor
    function LighthousePuzzlePart(lighthouse, type, lives, arrayPos, shown) {
        if (shown === void 0) { shown = false; }
        // Set from parameters
        this.lighthouse = lighthouse;
        this.type = type;
        this.lives = lives;
        this.arrayPos = arrayPos;
        this.shown = shown;
    }
    // Public methods
    LighthousePuzzlePart.prototype.addLives = function (howMany) {
        this.lives += howMany;
        if (this.lives > 5)
            this.lives = 5;
    };
    LighthousePuzzlePart.prototype.draw = function (renderArea, pos) {
        // If the part is shown already
        if (this.shown) {
            // Draw something different depending on the type
            switch (this.type) {
                case LighthousePuzzlePartType.BLANK:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/blankPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_AROUND:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showAroundPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_LEFT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showLeft"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_BELOW:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showBelow"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_ABOVE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showAbove"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_RIGHT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showRight"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_LEFT_RIGHT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showLeftRight"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/moveBelowLineToTheRight"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.MOVE_LEFT_LINE_ABOVE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/moveLeftLineAbove"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.LIVES:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/livesPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.WHAT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/whatPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.NOTHING_HERE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/nothingHerePart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.STONE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/stonePart"), pos.x, pos.y);
                    break;
            }
            // Draw the lives, depending on the type
            switch (this.type) {
                // By default, we draw the lives
                default:
                    renderArea.drawHorizontalLine("#", pos.x + 1, pos.x + 1 + this.lives, pos.y + 1);
                    break;
            }
            // Add a button if we have enough lives
            if (this.lives > 0) {
                // Buttons
                for (var i = 0; i < 4; i++) {
                    renderArea.addAsciiButton(pos.x + 1, pos.x + 6, pos.y + 1 + i, "lighthousePuzzlePart" + pos.x.toString() + "_" + pos.y.toString());
                }
                // The link
                renderArea.addLinkCall(".lighthousePuzzlePart" + pos.x.toString() + "_" + pos.y.toString(), new CallbackCollection(this.clicked.bind(this)));
            }
        }
    };
    // Public getters
    LighthousePuzzlePart.prototype.getLives = function () {
        return this.lives;
    };
    LighthousePuzzlePart.prototype.getShown = function () {
        return this.shown;
    };
    // Public setters
    LighthousePuzzlePart.prototype.setArrayPos = function (arrayPos) {
        this.arrayPos = arrayPos;
    };
    LighthousePuzzlePart.prototype.setShown = function (shown) {
        this.shown = shown;
    };
    // Private methods
    LighthousePuzzlePart.prototype.clicked = function () {
        // Create a temporary part, used later
        var tempPart;
        // Do something different depending on the type
        switch (this.type) {
            case LighthousePuzzlePartType.SHOW_AROUND:
                // If we can show the part above, we show it
                if (this.arrayPos.y > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].setShown(true);
                else if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].setShown(true);
                else if (this.arrayPos.y < 4 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].setShown(true);
                else if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_LEFT:
                // If we can show the part on the left, we show it
                if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_BELOW:
                // If we can show the part below, we show it
                if (this.arrayPos.y < 4 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_ABOVE:
                // If we can show the part above, we show it
                if (this.arrayPos.y > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_RIGHT:
                // If we can show the part on the right, we show it
                if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT:
                if (this.arrayPos.y < 4) {
                    tempPart = this.lighthouse.getPuzzle().getParts()[6][this.arrayPos.y + 1];
                    for (var i = 6; i > 0; i--) {
                        this.lighthouse.getPuzzle().getParts()[i][this.arrayPos.y + 1] = this.lighthouse.getPuzzle().getParts()[i - 1][this.arrayPos.y + 1];
                        if (this.lighthouse.getPuzzle().getParts()[i][this.arrayPos.y + 1] != null)
                            this.lighthouse.getPuzzle().getParts()[i][this.arrayPos.y + 1].setArrayPos(new Pos(i, this.arrayPos.y + 1));
                    }
                    this.lighthouse.getPuzzle().getParts()[0][this.arrayPos.y + 1] = tempPart;
                    if (this.lighthouse.getPuzzle().getParts()[0][this.arrayPos.y + 1] != null)
                        this.lighthouse.getPuzzle().getParts()[0][this.arrayPos.y + 1].setArrayPos(new Pos(0, this.arrayPos.y + 1));
                }
                break;
            case LighthousePuzzlePartType.MOVE_LEFT_LINE_ABOVE:
                if (this.arrayPos.x > 0) {
                    tempPart = this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][0];
                    for (var i = 0; i <= 3; i++) {
                        this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i] = this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i + 1];
                        if (this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i] != null)
                            this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i].setArrayPos(new Pos(this.arrayPos.x - 1, i));
                    }
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][4] = tempPart;
                    if (this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][4] != null)
                        this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][4].setArrayPos(new Pos(this.arrayPos.x - 1, 4));
                }
                break;
            case LighthousePuzzlePartType.LIVES:
                // If we can increase the lives of the part above, we show it
                if (this.arrayPos.y > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].addLives(1);
                // If we can increase the lives of the part on the right, we show it
                if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].addLives(1);
                // If we can increase the lives of the part below, we show it
                if (this.arrayPos.y < 4 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].addLives(1);
                // If we can increase the lives of the part on the left, we show it
                if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].addLives(1);
                break;
            case LighthousePuzzlePartType.SHOW_LEFT_RIGHT:
                // If we can show the part on the right, we show it
                if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].setShown(true);
                else if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.WHAT:
                // Change the type
                this.type = LighthousePuzzlePartType.STONE;
                // If we didn't have the stone before
                if (Saving.loadBool("gridItemPossessedP") == false) {
                    // Get the stone
                    this.lighthouse.getGame().gainItem("gridItemPossessedP");
                    // Change the speech
                    this.lighthouse.setSpeechId("lighthouseFoundStone");
                }
                else {
                    // Change the speech
                    this.lighthouse.setSpeechId("lighthouseFoundStoneAgain");
                }
                break;
        }
        // Decrease our lives
        this.lives -= 1;
        // Update the lighthouse
        this.lighthouse.update();
        this.lighthouse.getGame().updatePlace();
    };
    return LighthousePuzzlePart;
})();
var LighthousePuzzlePartType;
(function (LighthousePuzzlePartType) {
    LighthousePuzzlePartType[LighthousePuzzlePartType["BLANK"] = 0] = "BLANK";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_AROUND"] = 1] = "SHOW_AROUND";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_LEFT"] = 2] = "SHOW_LEFT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_BELOW"] = 3] = "SHOW_BELOW";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_ABOVE"] = 4] = "SHOW_ABOVE";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_RIGHT"] = 5] = "SHOW_RIGHT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["MOVE_BELOW_LINE_TO_THE_RIGHT"] = 6] = "MOVE_BELOW_LINE_TO_THE_RIGHT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["MOVE_LEFT_LINE_ABOVE"] = 7] = "MOVE_LEFT_LINE_ABOVE";
    LighthousePuzzlePartType[LighthousePuzzlePartType["LIVES"] = 8] = "LIVES";
    LighthousePuzzlePartType[LighthousePuzzlePartType["NOTHING_HERE"] = 9] = "NOTHING_HERE";
    LighthousePuzzlePartType[LighthousePuzzlePartType["WHAT"] = 10] = "WHAT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_LEFT_RIGHT"] = 11] = "SHOW_LEFT_RIGHT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["STONE"] = 12] = "STONE";
})(LighthousePuzzlePartType || (LighthousePuzzlePartType = {}));
var LighthousePuzzle = (function () {
    // Constructor
    function LighthousePuzzle(lighthouse) {
        // Create the parts
        this.createParts(lighthouse);
    }
    // Public methods
    LighthousePuzzle.prototype.draw = function (renderArea, pos) {
        for (var i = 0; i < 7; i++) {
            for (var j = 4; j >= 0; j--) {
                if (this.parts[i][j] != null)
                    this.parts[i][j].draw(renderArea, pos.plus(new Pos(i * 7, j * 4)));
            }
        }
    };
    // Public getters
    LighthousePuzzle.prototype.getParts = function () {
        return this.parts;
    };
    // Private methods
    LighthousePuzzle.prototype.createParts = function (lighthouse) {
        this.parts = [];
        // Add the arrays inside the arrays, and set each part to null
        for (var i = 0; i < 7; i++) {
            this.parts[i] = [];
            for (var j = 0; j < 5; j++) {
                this.parts[i][j] = null;
            }
        }
        // Add the central part, the first shown at first
        // It will allow use to show up to three other parts around
        this.parts[3][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_AROUND, 3, new Pos(3, 2), true);
        // Add the show right, show below move below to the right and show above parts
        this.parts[3][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(3, 1), false); // above the central part
        this.parts[4][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_BELOW, 1, new Pos(4, 1), false); // top right corner of the central part
        this.parts[4][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT, 5, new Pos(4, 2), false); // on the right of the central part
        this.parts[3][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(3, 3), false); // below the central part
        // Add the lives part
        this.parts[5][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 1, new Pos(5, 2), false);
        // Add the show below
        this.parts[4][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_BELOW, 1, new Pos(4, 3), false);
        // Add the cool path
        this.parts[3][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT_RIGHT, 2, new Pos(3, 4), false);
        this.parts[4][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(4, 4), false);
        this.parts[5][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(5, 4), false);
        this.parts[6][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(6, 4), false);
        this.parts[0][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(0, 3), false);
        this.parts[6][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(6, 2), false);
        this.parts[6][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(6, 1), false);
        // Add the lives part at the end of the cool path
        this.parts[5][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 1, new Pos(5, 1), false);
        // Add the path to the second move below line to the right
        this.parts[2][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(2, 4), false);
        this.parts[1][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(1, 4), false);
        this.parts[0][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT, 0, new Pos(0, 4), false);
        // And the end (9 parts allowing us to give life to the ? ?)
        this.parts[0][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(0, 0), false);
        this.parts[0][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(0, 1), false);
        this.parts[0][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(0, 2), false);
        this.parts[1][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 0, new Pos(1, 0), false);
        this.parts[1][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.MOVE_LEFT_LINE_ABOVE, 0, new Pos(1, 1), false);
        this.parts[1][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(1, 2), false);
        this.parts[2][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 1, new Pos(2, 0), false);
        this.parts[2][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(2, 1), false);
        this.parts[2][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(2, 2), false);
        // Add three useless parts to fill the blanks
        this.parts[3][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(3, 0), false);
        this.parts[4][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.BLANK, 0, new Pos(4, 0), false);
        this.parts[5][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_BELOW, 1, new Pos(5, 0), false);
        this.parts[6][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.WHAT, 0, new Pos(6, 0), true);
        // Add some more useless parts to fill the blanks
        this.parts[1][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.BLANK, 0, new Pos(1, 3), false);
        this.parts[2][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.NOTHING_HERE, 0, new Pos(2, 3), false);
        this.parts[5][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(5, 3), false);
        this.parts[6][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.BLANK, 0, new Pos(6, 3), false);
    };
    return LighthousePuzzle;
})();
///<reference path="Place.ts"/>
Saving.registerBool("lighthousePuzzleDone", false);
var Lighthouse = (function (_super) {
    __extends(Lighthouse, _super);
    // Constructor
    function Lighthouse(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Selected question id
        this.selectedQuestionId = "lighthouseQuestionWho";
        // Speech id
        this.speechId = null;
        // Show the puzzle?
        this.showPuzzle = false;
        // The puzzle
        this.puzzle = null;
        // We create the questions array
        this.createQuestionsArray();
        // We resize and update
        this.renderArea.resizeFromArray(Database.getAscii("places/lighthouse/lighthouse"), 0, 4); // 4 in order to add a space below the lighthouse, so that it looks nicer
        this.update();
    }
    // getRenderArea()
    Lighthouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Public methods
    Lighthouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "lighthouseBackToTheMapButton");
        // Draw the lighthouse
        this.renderArea.drawArray(Database.getAscii("places/lighthouse/lighthouse"), 0, 3);
        // Add the questions list
        this.renderArea.addList(1, 55, 7, "lighthouseQuestionsList", new CallbackCollection(this.questionSelected.bind(this)), this.questionsArray);
        // Add the ask button and the link
        this.renderArea.addAsciiRealButton(Database.getText("lighthouseAskButton"), 5, 10, "lighthouseAskButton", Database.getTranslatedText("lighthouseAskButton"));
        this.renderArea.addLinkCall(".lighthouseAskButton", new CallbackCollection(this.ask.bind(this)));
        // Draw the speech if there's a speech id
        if (this.speechId != null) {
            this.renderArea.drawSpeech(Database.getText(this.speechId), 17, 75, 99, "lighthouseSpeech", Database.getTranslatedText(this.speechId));
        }
        // If we should show the puzzle
        if (this.showPuzzle) {
            // Create the puzzle if it's not done yet
            if (this.puzzle == null)
                this.puzzle = new LighthousePuzzle(this);
            // Draw it
            this.puzzle.draw(this.renderArea, new Pos(2, 12));
            // Add the reset button
            this.renderArea.addAsciiRealButton(Database.getText("lighthousePuzzleResetButton"), 2, 34, "lighthousePuzzleResetButton", Database.getTranslatedText("lighthousePuzzleResetButton"));
            this.renderArea.addLinkCall(".lighthousePuzzleResetButton", new CallbackCollection(this.resetPuzzle.bind(this)));
        }
        // Add the link which will call the selectRightQuestion method after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightQuestion.bind(this)));
    };
    // Public getters
    Lighthouse.prototype.getPuzzle = function () {
        return this.puzzle;
    };
    // Public setters
    Lighthouse.prototype.setSpeechId = function (speechId) {
        this.speechId = speechId;
    };
    // Private methods
    Lighthouse.prototype.addQuestion = function (id, text, translatedText) {
        if (translatedText === void 0) { translatedText = null; }
        this.questionsArray.push(id);
        if (translatedText == null)
            this.questionsArray.push(text);
        else
            this.questionsArray.push(text + (translatedText != "" ? " (" + translatedText + ")" : ""));
    };
    Lighthouse.prototype.ask = function () {
        this.speechId = this.selectedQuestionId + "Speech";
        if (this.selectedQuestionId == "lighthouseQuestionDragon")
            this.showPuzzle = true;
        else
            this.showPuzzle = false;
        this.update();
        this.getGame().updatePlace();
    };
    Lighthouse.prototype.createQuestionsArray = function () {
        // We empty the array
        this.questionsArray = [];
        // Add the first basic questions
        this.addQuestion("lighthouseQuestionWho", Database.getText("lighthouseQuestionWho"), Database.getTranslatedText("lighthouseQuestionWho"));
        this.addQuestion("lighthouseQuestionWhat", Database.getText("lighthouseQuestionWhat"), Database.getTranslatedText("lighthouseQuestionWhat"));
        this.addQuestion("lighthouseQuestionWhyEatCandies", Database.getText("lighthouseQuestionWhyEatCandies"), Database.getTranslatedText("lighthouseQuestionWhyEatCandies"));
        this.addQuestion("lighthouseQuestionCandyBox", Database.getText("lighthouseQuestionCandyBox"), Database.getTranslatedText("lighthouseQuestionCandyBox"));
        // Add the question about the dragon is we unlocked it
        if (Saving.loadBool("dragonUnlockedCyclops")) {
            this.addQuestion("lighthouseQuestionDragon", Database.getText("lighthouseQuestionDragon"), Database.getTranslatedText("lighthouseQuestionDragon"));
        }
    };
    Lighthouse.prototype.questionSelected = function () {
        // Get the selected language id
        this.selectedQuestionId = $("#lighthouseQuestionsList").find(":selected").attr("id");
        // Update the ligthouse
        this.update();
        this.getGame().updatePlace();
    };
    Lighthouse.prototype.resetPuzzle = function () {
        // Re create the puzzle
        this.puzzle = new LighthousePuzzle(this);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Lighthouse.prototype.selectRightQuestion = function () {
        // We select the right question
        $("#" + this.selectedQuestionId).prop('selected', true);
    };
    return Lighthouse;
})(Place);
///<reference path="EqItem.ts"/>
var LightweightBodyArmour = (function (_super) {
    __extends(LightweightBodyArmour, _super);
    // Constructor
    function LightweightBodyArmour() {
        _super.call(this, "eqItemBodyArmoursLightweightBodyArmour", "eqItemBodyArmoursLightweightBodyArmourName", "eqItemBodyArmoursLightweightBodyArmourDescription", "eqItems/bodyArmours/lightweightBodyArmour");
    }
    // Special ability
    LightweightBodyArmour.prototype.getSpecialAbility = function () {
        return "Damage taken reduced by 15% (lightweight body armour)";
    };
    // inflictDamage()
    LightweightBodyArmour.prototype.inflictDamage = function (player, quest, damage, reason) {
        return Math.ceil(damage - damage * 15 / 100);
    };
    return LightweightBodyArmour;
})(EqItem);
var LocalSaving;
(function (LocalSaving) {
    // Public functions
    function getSlotSummaryAsString(slotId) {
        // If there's no save on this slot
        if (loadString(slotId) == null) {
            return "empty";
        }
        else {
            return loadString(slotId) + ", candies : " + loadString(slotId + ".gameCandiesCurrent");
        }
    }
    LocalSaving.getSlotSummaryAsString = getSlotSummaryAsString;
    function load(slotId) {
        // If this sot doesn't seem to exist, we return false
        if (loadString(slotId) == null)
            return false;
        // Load bools
        for (var str in Saving.getAllBools()) {
            Saving.saveBool(str, this.loadBool(slotId + "." + str));
        }
        // Load numbers
        for (var str in Saving.getAllNumbers()) {
            Saving.saveNumber(str, this.loadNumber(slotId + "." + str));
        }
        // Load strings
        for (var str in Saving.getAllStrings()) {
            Saving.saveString(str, this.loadString(slotId + "." + str));
        }
        // No error, return true
        return true;
    }
    LocalSaving.load = load;
    function save(slotId) {
        try {
            // Set the date on the slotId localStorage item
            localStorage.setItem(slotId, getDateAsString());
            // Save bools
            for (var str in Saving.getAllBools()) {
                localStorage.setItem(slotId + "." + str, Saving.boolToString(Saving.getAllBools()[str]));
            }
            // Save numbers
            for (var str in Saving.getAllNumbers()) {
                localStorage.setItem(slotId + "." + str, Saving.numberToString(Saving.getAllNumbers()[str]));
            }
            // Save strings
            for (var str in Saving.getAllStrings()) {
                localStorage.setItem(slotId + "." + str, Saving.getAllStrings()[str]);
            }
        }
        catch (e) {
            if (e == DOMException.QUOTA_EXCEEDED_ERR) {
                console.log("Quota exceeded error : we're trying to save some data through HTML5's web storage, but we don't have enough space to save what we want.");
            }
            // We return false, since there was an error
            return false;
        }
        // No error, return true
        return true;
    }
    LocalSaving.save = save;
    function supportsLocalSaving() {
        if ('localStorage' in window && window['localStorage'] !== null && 'applicationCache' in window && window['applicationCache'] !== null)
            return true;
        return false;
    }
    LocalSaving.supportsLocalSaving = supportsLocalSaving;
    // Private functions
    function getDateAsString() {
        var currentdate = new Date();
        return (currentdate.getDate() < 10 ? "0" : "") // 0 before day
            + currentdate.getDate() // Day
            + "/"
            + (currentdate.getMonth() + 1 < 10 ? "0" : "") // 0 before month
            + (currentdate.getMonth() + 1) // month
            + "/"
            + currentdate.getFullYear() // year
            + " @ "
            + (currentdate.getHours() < 10 ? "0" : "") // 0 before hours
            + currentdate.getHours() // hour
            + ":"
            + (currentdate.getMinutes() < 10 ? "0" : "") // 0 before minutes
            + currentdate.getMinutes() // minutes
            + ":"
            + (currentdate.getSeconds() < 10 ? "0" : "") // 0 before seconds
            + currentdate.getSeconds(); // seconds
    }
    function loadBool(key) {
        return Saving.stringToBool(localStorage.getItem(key));
    }
    LocalSaving.loadBool = loadBool;
    function loadNumber(key) {
        return Saving.stringToNumber(localStorage.getItem(key));
    }
    LocalSaving.loadNumber = loadNumber;
    function loadString(key) {
        return localStorage.getItem(key);
    }
    LocalSaving.loadString = loadString;
})(LocalSaving || (LocalSaving = {}));
///<reference path="Place.ts"/>
// Buttons unlocked
Saving.registerBool("lollipopFarmPlant1LollipopButtonUnlocked", false);
Saving.registerBool("lollipopFarmPlant10LollipopsButtonUnlocked", false);
Saving.registerBool("lollipopFarmPlant100LollipopsButtonUnlocked", false);
Saving.registerBool("lollipopFarmPlant1000LollipopsButtonUnlocked", false);
// How many lollipops planted ?
Saving.registerNumber("lollipopFarmLollipopsPlanted", 0);
// The production
Saving.registerNumber("lollipopFarmTimeSinceLastProduction", 0);
Saving.registerBool("lollipopFarmIsProductionEachSecond", false);
Saving.registerNumber("lollipopFarmProduction", 0);
// The mill
Saving.registerBool("lollipopFarmConstructMillButtonUnlocked", false);
Saving.registerBool("lollipopFarmMillConstructed", false);
// The pond
Saving.registerBool("lollipopFarmDigPondButtonUnlocked", false);
Saving.registerBool("lollipopFarmPondDug", false);
Saving.registerNumber("lollipopFarmPondHowManyLolligators", 0);
Saving.registerBool("lollipopFarmPondFeedingLolligators", false);
Saving.registerNumber("lollipopFarmPondConversionRate", 0);
// The candies production
Saving.registerNumber("lollipopFarmPreviousCandiesProduction", 1);
Saving.registerNumber("lollipopFarmCurrentCandiesProduction", 1);
var LollipopFarm = (function (_super) {
    __extends(LollipopFarm, _super);
    // Constructor
    function LollipopFarm(game) {
        _super.call(this, game);
        // Render area
        this.renderArea = new RenderArea();
        // Pond lines
        this.pondLines = [];
        // Pond lolligators
        this.pondLolligators = [];
        // Resize the area
        this.renderArea.resizeFromArray(Database.getAscii("places/lollipopFarm/lollipopFarm"), 0, 12);
        // Update
        this.update();
        // Add pond lines to the pond lines array
        this.addPondLine(new PondLine(8, 37)); // first line, index 0 but at y position 3 on the pond
        this.addPondLine(new PondLine(9, 38)); // second line, index 1, y position 4
        this.addPondLine(new PondLine(9, 40)); // etc
        this.addPondLine(new PondLine(8, 43));
        this.addPondLine(new PondLine(8, 46));
        this.addPondLine(new PondLine(3, 47));
        this.addPondLine(new PondLine(4, 48));
        this.addPondLine(new PondLine(9, 45));
        this.addPondLine(new PondLine(12, 44));
    }
    // Public methods
    LollipopFarm.prototype.willBeDisplayed = function () {
        // We check lollipops
        this.checkLollipops();
        // We add the lollipops callback
        this.getGame().getLollipops().getCallbackCollection().addCallback(this.checkLollipops.bind(this));
        // We add the one second callback for the pond
        this.getGame().getOneSecondCallbackCollection().addCallback(this.handlePond.bind(this));
    };
    // getRenderArea()
    LollipopFarm.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    LollipopFarm.prototype.addPondLine = function (pondLine) {
        this.pondLines.push(pondLine);
    };
    LollipopFarm.prototype.addPondLolligator = function (pondLolligator) {
        this.pondLolligators.push(pondLolligator);
    };
    LollipopFarm.prototype.beginFeedingLolligators = function () {
        // We set the bool
        Saving.saveBool("lollipopFarmPondFeedingLolligators", true);
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    LollipopFarm.prototype.buyLolligator = function () {
        if (this.getGame().getCandies().getCurrent() >= 1200) {
            this.getGame().getCandies().add(-1200);
            // Update the number of lolligators
            Saving.saveNumber("lollipopFarmPondHowManyLolligators", Saving.loadNumber("lollipopFarmPondHowManyLolligators") + 1);
            // Update the conversion rate
            this.updatePondConversionRate();
            // Update the place
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.checkLollipops = function () {
        // We possibly unlock some buttons used for planting lollipops
        if (Saving.loadBool("lollipopFarmPlant1LollipopButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 1) {
            Saving.saveBool("lollipopFarmPlant1LollipopButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        if (Saving.loadBool("lollipopFarmPlant10LollipopsButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 10) {
            Saving.saveBool("lollipopFarmPlant10LollipopsButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        if (Saving.loadBool("lollipopFarmPlant100LollipopsButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 100) {
            Saving.saveBool("lollipopFarmPlant100LollipopsButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        if (Saving.loadBool("lollipopFarmPlant1000LollipopsButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 1000) {
            Saving.saveBool("lollipopFarmPlant1000LollipopsButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        // We possibly unlock the button used to construct the mill
        if (Saving.loadBool("lollipopFarmConstructMillButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 10000) {
            Saving.saveBool("lollipopFarmConstructMillButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        // We possibly unlock the button used to dig the pond
        if (Saving.loadBool("lollipopFarmDigPondButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 100000) {
            Saving.saveBool("lollipopFarmDigPondButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.constructMill = function () {
        if (this.getGame().getLollipops().getCurrent() >= 10000) {
            this.getGame().getLollipops().add(-10000);
            Saving.saveBool("lollipopFarmMillConstructed", true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.digPond = function () {
        if (this.getGame().getLollipops().getCurrent() >= 100000) {
            this.getGame().getLollipops().add(-100000);
            Saving.saveBool("lollipopFarmPondDug", true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.drawFieldStuff = function (x, y) {
        // A variable useful later
        var plantingButtonsXPos;
        // How many lollipops planted
        this.renderArea.drawString("Lollipops planted : " + Algo.numberToStringButNicely(Saving.loadNumber("lollipopFarmLollipopsPlanted")), x, y);
        // Button(s) to plant lollipops
        // If the first button is unlocked but not the second
        if (Saving.loadBool("lollipopFarmPlant1LollipopButtonUnlocked") == true && Saving.loadBool("lollipopFarmPlant10LollipopsButtonUnlocked") == false) {
            this.renderArea.addAsciiRealButton("Plant 1 lollipop", x, y + 2, "lollipopFarmPlant1LollipopButton");
            this.renderArea.addLinkCall(".lollipopFarmPlant1LollipopButton", new CallbackCollection(this.plantLollipops.bind(this, 1)));
        }
        else if (Saving.loadBool("lollipopFarmPlant10LollipopsButtonUnlocked") == true) {
            // We set the x position to 0
            plantingButtonsXPos = 0;
            // We draw the first text
            this.renderArea.drawString("Plant", x, y + 2);
            plantingButtonsXPos += 6;
            // We add the button to plant 1
            this.renderArea.addAsciiRealButton("1", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant1LollipopButton");
            this.renderArea.addLinkCall(".lollipopFarmPlant1LollipopButton", new CallbackCollection(this.plantLollipops.bind(this, 1)));
            plantingButtonsXPos += 2;
            // We add the button to plant 10
            this.renderArea.addAsciiRealButton("10", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant10LollipopsButton");
            this.renderArea.addLinkCall(".lollipopFarmPlant10LollipopsButton", new CallbackCollection(this.plantLollipops.bind(this, 10)));
            plantingButtonsXPos += 3;
            // We possibly add the button to plant 100
            if (Saving.loadBool("lollipopFarmPlant100LollipopsButtonUnlocked") == true) {
                this.renderArea.addAsciiRealButton("100", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant100LollipopsButton");
                this.renderArea.addLinkCall(".lollipopFarmPlant100LollipopsButton", new CallbackCollection(this.plantLollipops.bind(this, 100)));
                plantingButtonsXPos += 4;
            }
            // We possibly add the button to plant 100
            if (Saving.loadBool("lollipopFarmPlant1000LollipopsButtonUnlocked") == true) {
                this.renderArea.addAsciiRealButton("1000", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant1000LollipopsButton");
                this.renderArea.addLinkCall(".lollipopFarmPlant1000LollipopsButton", new CallbackCollection(this.plantLollipops.bind(this, 1000)));
                plantingButtonsXPos += 5;
            }
            // We add the final text
            this.renderArea.drawString("lollipops", x + plantingButtonsXPos, y + 2);
        }
        // The production
        if (Saving.loadNumber("lollipopFarmLollipopsPlanted") > 0) {
            this.renderArea.drawString("Production : " + this.getProductionAsString(), x, y + 4);
        }
    };
    LollipopFarm.prototype.drawMillStuff = function (x, y) {
        // Button to construct the mill (show if the button is unlocked and the mill isn't constructed yet)
        if (Saving.loadBool("lollipopFarmConstructMillButtonUnlocked") == true && Saving.loadBool("lollipopFarmMillConstructed") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmConstructMill"), x + 30, y + 2, "lollipopFarmConstructMillButton", Database.getTranslatedText("lollipopFarmConstructMill"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmConstructMillButton", new CallbackCollection(this.constructMill.bind(this)));
        }
        // If the mill is constructed
        if (Saving.loadBool("lollipopFarmMillConstructed") == true) {
            // Draw the mill ascii art
            this.renderArea.drawArray(Database.getAscii("places/lollipopFarm/mill"), x, y);
            // Draw the button to feed the mill
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmFeedMill") + " (" + Algo.numberToStringButNicely(this.getNumberOfLollipopsToFeedTheMill()) + " lollipops)", x + 30, y, "lollipopFarmFeedMillButton", Database.getTranslatedText("lollipopFarmFeedMill"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmFeedMillButton", new CallbackCollection(this.feedMill.bind(this)));
            // Draw the current candies production if it's different from one
            if (Saving.loadNumber("lollipopFarmCurrentCandiesProduction") != 1) {
                this.renderArea.drawString(Database.getText("lollipopFarmCurrentCandiesProduction") + " : " + Saving.loadNumber("lollipopFarmCurrentCandiesProduction").toString() + " each second", x + 30, y + 3);
                this.renderArea.drawString(Database.getTranslatedText("lollipopFarmCurrentCandiesProduction"), x + 30, y + 4, true);
            }
        }
    };
    LollipopFarm.prototype.drawPondStuff = function (x, y) {
        // Y position used because some things need to be moved when the player uses a non-english language
        var yPos;
        // Button to dig the pond (show if the button is unlocked and the pond isn't constructed yet)
        if (Saving.loadBool("lollipopFarmDigPondButtonUnlocked") == true && Saving.loadBool("lollipopFarmPondDug") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmDigPond"), x + 10, y + 2, "lollipopFarmDigPondButton", Database.getTranslatedText("lollipopFarmDigPond"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmDigPondButton", new CallbackCollection(this.digPond.bind(this)));
        }
        // If the pond is constructed
        if (Saving.loadBool("lollipopFarmPondDug") == true) {
            // Init the y position
            yPos = y;
            // Draw the pond ascii art
            this.renderArea.drawArray(Database.getAscii("places/lollipopFarm/pond"), x, yPos, new RenderTransparency(" "));
            // Draw the lolligators
            yPos += 3;
            for (var i = 0; i < this.pondLolligators.length; i++) {
                this.pondLolligators[i].draw(this.renderArea, x, yPos);
            }
            // Add the button to buy a lolligator
            yPos += 13;
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmBuyLolligator"), x, yPos, "lollipopFarmBuyLolligatorButton", Database.getTranslatedText("lollipopFarmBuyLolligator"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmBuyLolligatorButton", new CallbackCollection(this.buyLolligator.bind(this)));
            // Add 1 to yPos if translated
            if (Database.isTranslated())
                yPos += 1;
            // If we have at least one lolligator
            if (Saving.loadNumber("lollipopFarmPondHowManyLolligators") > 0) {
                // Draw how many lolligators we have (if we have at least one)
                yPos += 2;
                this.renderArea.drawString("There " + (Saving.loadNumber("lollipopFarmPondHowManyLolligators") > 1 ? "are" : "is") + " " + Algo.pluralFormat(Saving.loadNumber("lollipopFarmPondHowManyLolligators"), " lolligator", " lolligators") + " in the pond.", x, yPos);
                // Draw the checkbox to feed the lolligators
                yPos += 2;
                this.renderArea.addCheckbox(x, yPos, new CallbackCollection(this.beginFeedingLolligators.bind(this)), new CallbackCollection(this.stopFeedingLolligators.bind(this)), "lollipopFarmPondCheckbox", Saving.loadBool("lollipopFarmPondFeedingLolligators"));
                if (Saving.loadNumber("lollipopFarmPondHowManyLolligators") == 1)
                    this.renderArea.drawString("Feed it with candies", x + 3, yPos);
                else
                    this.renderArea.drawString("Feed them with candies", x + 4, yPos);
                // If we're feeding lolligators
                if (Saving.loadBool("lollipopFarmPondFeedingLolligators")) {
                    // Draw the conversion text
                    yPos += 2;
                    this.renderArea.drawString(Database.getText("lollipopFarmLolligatorsConversionText"), x, yPos);
                    if (Database.isTranslated()) {
                        yPos += 1;
                        this.renderArea.drawString(Database.getTranslatedText("lollipopFarmLolligatorsConversionText"), x, yPos, true);
                    }
                    // Draw the conversion rate
                    yPos += 1;
                    this.renderArea.drawString("Conversion rate : " + Saving.loadNumber("lollipopFarmPondConversionRate") + "/sec", x, yPos);
                }
            }
        }
    };
    LollipopFarm.prototype.feedMill = function () {
        if (this.getGame().getLollipops().getCurrent() >= this.getNumberOfLollipopsToFeedTheMill()) {
            // Pay the lollipops
            this.getGame().getLollipops().add(-this.getNumberOfLollipopsToFeedTheMill());
            // Increase the candies production step
            var oldCurrent = Saving.loadNumber("lollipopFarmCurrentCandiesProduction");
            Saving.saveNumber("lollipopFarmCurrentCandiesProduction", Saving.loadNumber("lollipopFarmCurrentCandiesProduction") + Saving.loadNumber("lollipopFarmPreviousCandiesProduction"));
            Saving.saveNumber("lollipopFarmPreviousCandiesProduction", oldCurrent);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.getNumberOfLollipopsToFeedTheMill = function () {
        return Math.pow(Saving.loadNumber("lollipopFarmCurrentCandiesProduction") * 120, 2);
    };
    LollipopFarm.prototype.getProductionAsString = function () {
        // We create the string
        var str;
        // If we produce x lollipops each second
        if (Saving.loadBool("lollipopFarmIsProductionEachSecond")) {
            str = Algo.pluralFormat(Saving.loadNumber("lollipopFarmProduction"), " lollipop", " lollipops") + " each second";
        }
        else {
            str = "1 lollipop every ";
            // If the production is every hour
            if (Saving.loadNumber("lollipopFarmProduction") >= 3600) {
                if (Math.floor(Saving.loadNumber("lollipopFarmProduction") / 3600) == 1)
                    str += "hour";
                else
                    str += Math.floor(Saving.loadNumber("lollipopFarmProduction") / 3600).toString() + " hours";
            }
            else if (Saving.loadNumber("lollipopFarmProduction") >= 60) {
                if (Math.floor(Saving.loadNumber("lollipopFarmProduction") / 60) == 1)
                    str += "minute";
                else
                    str += Math.floor(Saving.loadNumber("lollipopFarmProduction") / 60).toString() + " minutes";
            }
            else {
                if (Saving.loadNumber("lollipopFarmProduction") == 1)
                    str += "second";
                else
                    str += Saving.loadNumber("lollipopFarmProduction").toString() + " seconds";
            }
        }
        // We return the string
        return str;
    };
    LollipopFarm.prototype.handlePond = function () {
        // Used later
        var lineIndex;
        // If the pond is dug
        if (Saving.loadBool("lollipopFarmPondDug") == true) {
            // Move all the lolligators
            for (var i = 0; i < this.pondLolligators.length; i++) {
                this.pondLolligators[i].move();
            }
            // Delete lolligators which need to be deleted
            for (var i = 0; i < this.pondLolligators.length; i++) {
                // If this lolligator should be deleted, then we delete it
                if (this.pondLolligators[i].shouldBeDeleted()) {
                    // Warn that it will be deleted
                    this.pondLolligators[i].willBeDeleted();
                    // Delete it
                    this.pondLolligators.splice(i, 1);
                    // Reduce i
                    i--;
                }
            }
            // Possibly add a lolligator if there wouldn't be more lolligators than we actually have (the more lollipops we have the more chance there is that one will be added)
            if (Random.oneChanceOutOf(Math.ceil(20 * (1 / Saving.loadNumber("lollipopFarmPondHowManyLolligators")))) && this.pondLolligators.length < Saving.loadNumber("lollipopFarmPondHowManyLolligators")) {
                // Choose a line
                lineIndex = Random.between(0, this.pondLines.length - 1);
                // If the line isn't used and the line above (if there is one) isn't used either
                if (this.pondLines[lineIndex].getIsUsed() == false && (lineIndex == 0 || this.pondLines[lineIndex - 1].getIsUsed() == false)) {
                    // Add a lolligator here
                    this.addPondLolligator(new PondLolligator(this.pondLines, lineIndex));
                }
            }
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.plantLollipops = function (howMany) {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= howMany) {
            this.getGame().getLollipops().add(-howMany);
            Saving.saveNumber("lollipopFarmLollipopsPlanted", Saving.loadNumber("lollipopFarmLollipopsPlanted") + howMany);
            this.getGame().calcLollipopFarmProduction();
            this.update();
            this.getGame().updatePlace();
        }
    };
    LollipopFarm.prototype.stopFeedingLolligators = function () {
        // We set the bool
        Saving.saveBool("lollipopFarmPondFeedingLolligators", false);
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    LollipopFarm.prototype.update = function () {
        // Reset
        this.renderArea.resetAllButSize();
        // Draw the farm
        this.renderArea.drawArray(Database.getAscii("places/lollipopFarm/lollipopFarm"), 0, 5);
        // Draw the field stuff
        this.drawFieldStuff(1, 34);
        // Draw the mill stuff
        this.drawMillStuff(7, 0);
        // Draw the pond stuff
        this.drawPondStuff(50, 14);
    };
    LollipopFarm.prototype.updatePondConversionRate = function () {
        Saving.saveNumber("lollipopFarmPondConversionRate", Math.ceil(Saving.loadNumber("lollipopFarmPondHowManyLolligators") * 3 + Math.pow(1.3, Saving.loadNumber("lollipopFarmPondHowManyLolligators"))));
    };
    return LollipopFarm;
})(Place);
///<reference path="StatusBarResource.ts"/>
var Lollipops = (function (_super) {
    __extends(Lollipops, _super);
    // Constructor
    function Lollipops(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    Lollipops.prototype.getCurrentAsString = function (totalSize) {
        if (totalSize === void 0) { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;
        var base = "";
        var prefix = "";
        var suffix = "";
        // We set the base or return right now in some special cases
        if (n < 0)
            return "What, negative lollipops?!";
        else if (n == 1)
            return "You have 1 lollipop";
        else
            base = Algo.numberToStringButNicely(n);
        // How much space do we still have ?
        size = totalSize - base.length;
        // We set the suffix
        if (size >= 10) {
            suffix = " lollipops";
            // We add a suffix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;
            // We set the prefix
            if (size >= 9)
                prefix = "You have ";
            else if (size >= 3)
                prefix = "-> ";
        }
        else if (size >= 3)
            suffix = " lp";
        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;
        return prefix + base + suffix;
    };
    return Lollipops;
})(StatusBarResource);
///<reference path="Place.ts"/>
Saving.registerBool("lonelyHouseOpenBoxDone", false);
Saving.registerBool("lonelyHouseShakeBoxDone", false);
Saving.registerBool("lonelyHouseBreakLockDone", false);
Saving.registerBool("lonelyHouseKickBoxDone", false);
Saving.registerBool("lonelyHouseAskTheBoxToOpenItselfDone", false);
Saving.registerBool("lonelyHouseLureTheBoxWithACandyDone", false);
Saving.registerBool("lonelyHouseTakeTheBoxDone", false);
var LonelyHouse = (function (_super) {
    __extends(LonelyHouse, _super);
    // Constructor
    function LonelyHouse(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/village/fifthHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    LonelyHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    LonelyHouse.prototype.askTheBoxToOpenItself = function () {
        Saving.saveBool("lonelyHouseAskTheBoxToOpenItselfDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.breakLock = function () {
        Saving.saveBool("lonelyHouseBreakLockDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.kickBox = function () {
        Saving.saveBool("lonelyHouseKickBoxDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.lureTheBoxWithACandy = function () {
        Saving.saveBool("lonelyHouseLureTheBoxWithACandyDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.openBox = function () {
        Saving.saveBool("lonelyHouseOpenBoxDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.shakeBox = function () {
        Saving.saveBool("lonelyHouseShakeBoxDone", true);
        this.update();
        this.getGame().updatePlace();
    };
    LonelyHouse.prototype.takeTheBox = function () {
        // Change the bool
        Saving.saveBool("lonelyHouseTakeTheBoxDone", true);
        // We update
        this.update();
        // Select the candy box tab
        this.getGame().getStatusBar().selectTabByType(StatusBarTabType.CANDY_BOX);
        // Go to the candy box
        this.getGame().goToCandyBox();
    };
    LonelyHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "lonelyHouseBackToTheMapButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/lonelyHouse"), 0, 3);
        // Draw the box
        if (Saving.loadBool("lonelyHouseTakeTheBoxDone") == false) {
            this.renderArea.drawArray(Database.getAscii("general/box"), 54, 9);
        }
        // Add the buttons or texts
        if (Saving.loadBool("lonelyHouseOpenBoxDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseOpenBox"), 4, 4, "lonelyHouseOpenBoxButton", Database.getTranslatedText("lonelyHouseOpenBox"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseOpenBoxButton", new CallbackCollection(this.openBox.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseOpenBoxResult"), 4, 4);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseOpenBoxResult"), 4, 5, true);
        }
        if (Saving.loadBool("lonelyHouseShakeBoxDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseShakeBox"), 4, 8, "lonelyHouseShakeBoxButton", Database.getTranslatedText("lonelyHouseShakeBox"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseShakeBoxButton", new CallbackCollection(this.shakeBox.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseShakeBoxResult"), 4, 8);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseShakeBoxResult"), 4, 9, true);
        }
        if (Saving.loadBool("lonelyHouseBreakLockDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseBreakLock"), 4, 12, "lonelyHouseBreakLockButton", Database.getTranslatedText("lonelyHouseBreakLock"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseBreakLockButton", new CallbackCollection(this.breakLock.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseBreakLockResult"), 4, 12);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseBreakLockResult"), 4, 13, true);
        }
        if (Saving.loadBool("lonelyHouseKickBoxDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseKickBox"), 4, 16, "lonelyHouseKickBoxButton", Database.getTranslatedText("lonelyHouseKickBox"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseKickBoxButton", new CallbackCollection(this.kickBox.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseKickBoxResult"), 4, 16);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseKickBoxResult"), 4, 17, true);
        }
        if (Saving.loadBool("lonelyHouseAskTheBoxToOpenItselfDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseAskTheBoxToOpenItself"), 4, 20, "lonelyHouseAskTheBoxToOpenItselfButton", Database.getTranslatedText("lonelyHouseAskTheBoxToOpenItself"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseAskTheBoxToOpenItselfButton", new CallbackCollection(this.askTheBoxToOpenItself.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseAskTheBoxToOpenItselfResult"), 4, 20);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseAskTheBoxToOpenItselfResult"), 4, 21, true);
        }
        if (Saving.loadBool("lonelyHouseLureTheBoxWithACandyDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseLureTheBoxWithACandy"), 4, 24, "lonelyHouseLureTheBoxWithACandyButton", Database.getTranslatedText("lonelyHouseLureTheBoxWithACandy"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseLureTheBoxWithACandyButton", new CallbackCollection(this.lureTheBoxWithACandy.bind(this)));
        }
        else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseLureTheBoxWithACandyResult"), 4, 24);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseLureTheBoxWithACandyResult"), 4, 25, true);
        }
        // Final button
        if (Saving.loadBool("lonelyHouseOpenBoxDone") &&
            Saving.loadBool("lonelyHouseShakeBoxDone") &&
            Saving.loadBool("lonelyHouseBreakLockDone") &&
            Saving.loadBool("lonelyHouseKickBoxDone") &&
            Saving.loadBool("lonelyHouseAskTheBoxToOpenItselfDone") &&
            Saving.loadBool("lonelyHouseLureTheBoxWithACandyDone")) {
            if (Saving.loadBool("lonelyHouseTakeTheBoxDone") == false) {
                this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseTakeTheBox"), 6, 35, "lonelyHouseTakeTheBoxButton", Database.getTranslatedText("lonelyHouseTakeTheBox"), true, -1, null, false);
                this.getRenderArea().addLinkCall(".lonelyHouseTakeTheBoxButton", new CallbackCollection(this.takeTheBox.bind(this)));
            }
            else {
                this.getRenderArea().drawString(Database.getText("lonelyHouseTakeTheBoxResult"), 6, 35);
                this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseTakeTheBoxResult"), 6, 36, true);
            }
        }
    };
    return LonelyHouse;
})(Place);
///<reference path="QuestEntity.ts"/>
var LostTribeWarrior = (function (_super) {
    __extends(LostTribeWarrior, _super);
    // Constructor
    function LostTribeWarrior(quest, pos, watchedAreaPosition, watchedAreaPosition2) {
        _super.call(this, quest, pos, new Naming("A lost tribe warrior", "a lost tribe warrior"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(4, 3))), new QuestEntityMovement());
        // Create the watched area
        this.watchedAreaPosition = watchedAreaPosition;
        this.watchedAreaPosition2 = watchedAreaPosition2;
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(200);
        this.setHp(200);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theHole/lostTribeWarrior"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A tribal spear", "a tribal spear"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(6, 6))), 80));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(1, 2);
    }
    // update()
    LostTribeWarrior.prototype.update = function () {
        _super.prototype.update.call(this);
        // If the player is inside the watched area
        if (this.playerInsideWatchedArea()) {
            // We go towards the player
            this.goTowards(this.getRenderAreaCenter(), this.getQuest().getGame().getPlayer().getRenderAreaCenter());
        }
        else {
            // We heal ourselves
            this.heal(1);
        }
    };
    // willDie()
    LostTribeWarrior.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(3000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        // The tribal spear
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponTribalSpear", "You found a tribal spear.", "You gain a tribal spear."));
    };
    // Private methods
    LostTribeWarrior.prototype.playerInsideWatchedArea = function () {
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.watchedAreaPosition.x)
            return false;
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x > this.watchedAreaPosition2.x)
            return false;
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().y < this.watchedAreaPosition.y)
            return false;
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().y > this.watchedAreaPosition2.y)
            return false;
        // Else, the player is inside : return true
        return true;
    };
    return LostTribeWarrior;
})(QuestEntity);
var MainLoadingType;
(function (MainLoadingType) {
    MainLoadingType[MainLoadingType["NONE"] = 0] = "NONE";
    MainLoadingType[MainLoadingType["LOCAL"] = 1] = "LOCAL";
    MainLoadingType[MainLoadingType["FILE"] = 2] = "FILE";
})(MainLoadingType || (MainLoadingType = {}));
///<reference path="Place.ts"/>
// The default scroll
Saving.registerNumber("mainMapDefaultScroll", 400);
// Various steps
Saving.registerBool("mainMapDoneDesert", false);
Saving.registerBool("mainMapDoneBridge", false);
Saving.registerBool("mainMapDoneCaveEntrance", false);
Saving.registerBool("mainMapDonePier", false);
Saving.registerBool("mainMapDoneForest", false);
Saving.registerBool("mainMapDoneCastleEntrance", false);
var MainMap = (function (_super) {
    __extends(MainMap, _super);
    // Constructor
    function MainMap(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.load();
    }
    // willStopBeingDisplayed()
    MainMap.prototype.willStopBeingDisplayed = function () {
        Saving.saveNumber("mainMapDefaultScroll", this.getGame().getMainContentLocation().getScroll());
    };
    // Public getters
    MainMap.prototype.getDefaultScroll = function () {
        return Saving.loadNumber("mainMapDefaultScroll");
    };
    MainMap.prototype.getScrolling = function () {
        return true; // Scrolling is enabled
    };
    MainMap.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    MainMap.prototype.load = function () {
        // We erase the map
        this.renderArea.resetAllButSize();
        // We load the map itself
        this.renderArea.resizeFromArray(Database.getAscii("maps/map"));
        this.renderArea.drawArray(Database.getAscii("maps/map"));
        // We add various locations
        this.loadATree(143, 26);
        if (Saving.loadBool("gridItemPossessedFortressKey"))
            this.loadFortress(117, 39);
        this.loadTheDesert(114, 42);
        this.loadVillage(150, 36);
        this.loadLonelyHouse(159, 23);
        if (Saving.loadBool("TheCavePattern_TreasureMapSawMap") == true && Saving.loadBool("TheCavePattern_TreasureMapFoundTreasure") == false)
            this.loadTreasure(163, 29);
        if (Saving.loadBool("mainMapDoneDesert")) {
            this.loadFarm(115, 57);
            this.loadBridge(99, 61);
            this.loadCaveEntrance(52, 57);
            this.loadWishingWell(55, 66);
            if (Saving.loadBool("gridItemPossessedPogoStick") == false)
                this.loadMoutains(71, 52);
        }
        if (Saving.loadBool("mainMapDoneBridge"))
            this.loadSorceressHut(95, 68);
        if (Saving.loadBool("mainMapDoneCaveEntrance")) {
            this.loadPier(44, 33);
            this.loadForest(58, 30);
        }
        if (Saving.loadBool("mainMapDonePier")) {
            this.loadLighthouse(38, 16);
        }
        if (Saving.loadBool("mainMapDoneForest")) {
            this.loadCastleEntrance(88, 25);
            this.loadTheHole(126, 25);
        }
        if (Saving.loadBool("mainMapDoneCastleEntrance")) {
            this.loadCastle(87, 17);
        }
        if (Saving.loadBool("dragonDone")) {
            this.loadDragon(92, 11);
        }
    };
    // Private "go to" methods
    MainMap.prototype.goToATree = function () {
        this.getGame().setPlace(new ATree(this.getGame()));
    };
    MainMap.prototype.goToBridge = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new Bridge(this.getGame()));
    };
    MainMap.prototype.goToCastle = function () {
        this.getGame().goToCastle();
    };
    MainMap.prototype.goToDragon = function () {
        this.getGame().setPlace(new Dragon(this.getGame()));
    };
    MainMap.prototype.goToFarm = function () {
        Saving.saveBool("statusBarUnlockedLollipopFarm", true); // We unlock the farm tab
        this.getGame().updateStatusBar(true); // We update the status bar
        this.getGame().getStatusBar().selectTabByType(StatusBarTabType.FARM); // We select the farm tab
        this.getGame().goToLollipopFarm(); // We show the farm
    };
    MainMap.prototype.goToForest = function () {
        this.getGame().setPlace(new Forest(this.getGame()));
    };
    MainMap.prototype.goToFortress = function () {
        this.getGame().goToInsideFortress();
    };
    MainMap.prototype.goToLighthouse = function () {
        this.getGame().goToLighthouse();
    };
    MainMap.prototype.goToLonelyHouse = function () {
        this.getGame().setPlace(new LonelyHouse(this.getGame()));
    };
    MainMap.prototype.goToMoutains = function () {
        this.getGame().setPlace(new Moutains(this.getGame()));
    };
    MainMap.prototype.goToPier = function () {
        this.getGame().setPlace(new Pier(this.getGame()));
    };
    MainMap.prototype.goToSorceressHut = function () {
        this.getGame().goToSorceressHut();
    };
    MainMap.prototype.goToTheCave = function () {
        this.getGame().goToTheCave();
    };
    MainMap.prototype.goToTheDesert = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new Desert(this.getGame()));
    };
    MainMap.prototype.goToTheHole = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new OutsideTheHole(this.getGame()));
    };
    MainMap.prototype.goToTreasure = function () {
        this.getGame().setPlace(new Treasure(this.getGame()));
    };
    MainMap.prototype.goToWishingWell = function () {
        this.getGame().setPlace(new WishingWell(this.getGame()));
    };
    // Private "load" methods
    MainMap.prototype.loadATree = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapATreeButton", x + 2, x + 5, y, x + 1, x + 6, y + 1, x, x + 7, y + 2, x + 2, x + 5, y + 3, x + 2, x + 5, y + 4);
        // Comments
        this.renderArea.addFullComment(x - 2, y + 3, Database.getText("mapATreeComment"), Database.getTranslatedText("mapATreeComment"), "mapATreeComment");
        // Interactions
        this.renderArea.addLinkOver(".mapATreeButton, .mapATreeComment", ".mapATreeComment");
        this.renderArea.addLinkCall(".mapATreeButton, .mapATreeComment", new CallbackCollection(this.goToATree.bind(this)));
    };
    MainMap.prototype.loadBridge = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapBridgeButton", x, x + 3, y, x, x + 3, y + 1, x, x + 3, y + 2, x, x + 3, y + 3, x, x + 3, y + 4, x, x + 3, y + 5);
        // Comments
        this.renderArea.addFullComment(x + 2, y + 2, Database.getText("mapBridgeComment"), Database.getTranslatedText("mapBridgeComment"), "mapBridgeComment");
        // Interactions
        this.renderArea.addLinkOver(".mapBridgeButton, .mapBridgeComment", ".mapBridgeComment");
        this.renderArea.addLinkCall(".mapBridgeButton, .mapBridgeComment", new CallbackCollection(this.goToBridge.bind(this)));
    };
    MainMap.prototype.loadCastle = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapCastleButton", x + 2, x + 4, y, x + 17, x + 19, y, x + 1, x + 3, y + 1, x + 16, x + 18, y + 1, x, x + 4, y + 2, x + 15, x + 19, y + 2, x, x + 4, y + 3, x + 15, x + 19, y + 3, x, x + 19, y + 4, x, x + 19, y + 5, x, x + 19, y + 6);
        // Comments
        this.renderArea.addFullComment(x + 25, y + 4, Database.getText("mapCastleComment"), Database.getTranslatedText("mapCastleComment"), "mapCastleComment");
        // Interactions
        this.renderArea.addLinkOver(".mapCastleButton, .mapCastleComment", ".mapCastleComment");
        this.renderArea.addLinkCall(".mapCastleButton, .mapCastleComment", new CallbackCollection(this.goToCastle.bind(this)));
    };
    MainMap.prototype.loadCastleEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapCastleEntranceButton", x + 6, x + 11, y, x + 6, x + 11, y + 1, x, x + 17, y + 2, x, x + 17, y + 3);
        // Comments
        this.renderArea.addFullComment(x + 9, y + 4, Database.getText("mapCastleEntranceComment"), Database.getTranslatedText("mapCastleEntranceComment"), "mapCastleEntranceComment");
        // Interactions
        this.renderArea.addLinkOver(".mapCastleEntranceButton, .mapCastleEntranceComment", ".mapCastleEntranceComment");
        this.renderArea.addLinkCall(".mapCastleEntranceButton, .mapCastleEntranceComment", new CallbackCollection(this.getGame().goToCastleEntrance.bind(this.getGame())));
    };
    MainMap.prototype.loadCaveEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapCaveEntranceButton", x, x + 5, y);
        // Comments
        this.renderArea.addFullComment(x + 3, y + 1, Database.getText("mapCaveEntranceComment"), Database.getTranslatedText("mapCaveEntranceComment"), "mapCaveEntranceComment");
        // Interactions
        this.renderArea.addLinkOver(".mapCaveEntranceButton, .mapCaveEntranceComment", ".mapCaveEntranceComment");
        this.renderArea.addLinkCall(".mapCaveEntranceButton, .mapCaveEntranceComment", new CallbackCollection(this.goToTheCave.bind(this)));
    };
    MainMap.prototype.loadDragon = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapDragonButton", x + 5, x + 10, y, x + 4, x + 10, y + 1, x + 3, x + 7, y + 2, x + 2, x + 7, y + 3, x + 2, x + 7, y + 4, x + 1, x + 8, y + 5, x + 1, x + 8, y + 6, x + 1, x + 8, y + 7, x, x + 9, y + 8, x, x + 9, y + 9);
        // Comments
        this.renderArea.addFullComment(x + 5, y - 2, Database.getText("mapDragonComment"), Database.getTranslatedText("mapDragonComment"), "mapDragonComment");
        // Interactions
        this.renderArea.addLinkOver(".mapDragonButton, .mapDragonComment", ".mapDragonComment");
        this.renderArea.addLinkCall(".mapDragonButton, .mapDragonComment", new CallbackCollection(this.goToDragon.bind(this)));
    };
    MainMap.prototype.loadFarm = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapFarmButton", x + 5, x + 15, y, x + 5, x + 15, y + 1, x + 6, x + 16, y + 2, x + 6, x + 16, y + 3, x, x + 16, y + 3, x, x + 16, y + 4, x, x + 16, y + 5, x, x + 16, y + 6, x, x + 16, y + 7, x, x + 16, y + 8, x, x + 16, y + 9, x + 6, x + 16, y + 10);
        // Comments
        this.renderArea.addFullComment(x + 16, y + 5, Database.getText("mapFarmComment"), Database.getTranslatedText("mapFarmComment"), "mapFarmComment");
        // Interactions
        this.renderArea.addLinkOver(".mapFarmButton, .mapFarmComment", ".mapFarmComment");
        this.renderArea.addLinkCall(".mapFarmButton, .mapFarmComment", new CallbackCollection(this.goToFarm.bind(this)));
    };
    MainMap.prototype.loadForest = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapForestButton", x + 9, x + 11, y, x + 3, x + 12, y + 1, x + 2, x + 25, y + 2, x + 3, x + 43, y + 3, x + 1, x + 44, y + 4, x + 54, x + 56, y + 4, x, x + 47, y + 5, x + 53, x + 57, y + 5, x + 1, x + 56, y + 6, x + 2, x + 53, y + 7, x + 3, x + 52, y + 8, x + 7, x + 49, y + 9, x + 8, x + 48, y + 10, x + 17, x + 46, y + 11, x + 16, x + 45, y + 12, x + 17, x + 34, y + 13, x + 21, x + 35, y + 14, x + 23, x + 34, y + 15, x + 24, x + 25, y + 16);
        // Comments
        this.renderArea.addFullComment(x + 25, y + 7, Database.getText("mapForestComment"), Database.getTranslatedText("mapForestComment"), "mapForestComment");
        // Interactions
        this.renderArea.addLinkOver(".mapForestButton, .mapForestComment", ".mapForestComment");
        this.renderArea.addLinkCall(".mapForestButton, .mapForestComment", new CallbackCollection(this.goToForest.bind(this)));
    };
    MainMap.prototype.loadFortress = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapFortressButton", x + 1, x + 3, y, x + 10, x + 12, y, x, x + 4, y + 1, x + 9, x + 13, y + 1, x, x + 13, y + 2, x, x + 13, y + 3, x, x + 13, y + 4);
        // Comments
        this.renderArea.addFullComment(x + 7, y + 2, Database.getText("mapFortressComment"), Database.getTranslatedText("mapFortressComment"), "mapFortressComment");
        // Interactions
        this.renderArea.addLinkOver(".mapFortressButton, .mapFortressComment", ".mapFortressComment");
        this.renderArea.addLinkCall(".mapFortressButton, .mapFortressComment", new CallbackCollection(this.goToFortress.bind(this)));
    };
    MainMap.prototype.loadLighthouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapLighthouseButton", x + 1, x + 4, y, x, x + 5, y + 1, x, x + 5, y + 2, x, x + 5, y + 3, x, x + 5, y + 4, x, x + 5, y + 5, x, x + 5, y + 6, x, x + 5, y + 7, x, x + 5, y + 8, x, x + 5, y + 9);
        // Comments
        this.renderArea.addFullComment(x + 2, y + 3, Database.getText("mapLighthouseComment"), Database.getTranslatedText("mapLighthouseComment"), "mapLighthouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapLighthouseButton, .mapLighthouseComment", ".mapLighthouseComment");
        this.renderArea.addLinkCall(".mapLighthouseButton, .mapLighthouseComment", new CallbackCollection(this.goToLighthouse.bind(this)));
    };
    MainMap.prototype.loadLonelyHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapLonelyHouseButton", x, x + 3, y, x, x + 3, y + 1);
        // Comments
        this.renderArea.addFullComment(x + 1, y - 3, Database.getText("mapLonelyHouseComment"), Database.getTranslatedText("mapLonelyHouseComment"), "mapLonelyHouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapLonelyHouseButton, .mapLonelyHouseComment", ".mapLonelyHouseComment");
        this.renderArea.addLinkCall(".mapLonelyHouseButton, .mapLonelyHouseComment", new CallbackCollection(this.goToLonelyHouse.bind(this)));
    };
    MainMap.prototype.loadMoutains = function (x, y) {
        // The "*" show that there's a pogo stick here
        this.renderArea.drawString("*", 71, 52);
        // Button
        this.renderArea.addMultipleAsciiButtons("mapMoutainsButton", x, x + 1, y);
        // Interactions
        this.renderArea.addLinkOver(".mapMoutainsButton, .mapMoutainsComment", ".mapMoutainsComment");
        this.renderArea.addLinkCall(".mapMoutainsButton, .mapMoutainsComment", new CallbackCollection(this.goToMoutains.bind(this)));
    };
    MainMap.prototype.loadPier = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapPierButton", x + 1, x + 3, y, x + 2, x + 3, y + 1, x, x + 7, y + 2, x + 4, x + 7, y + 3);
        // Comments
        this.renderArea.addFullComment(x + 4, y + 4, Database.getText("mapPierComment"), Database.getTranslatedText("mapPierComment"), "mapPierComment");
        // Interactions
        this.renderArea.addLinkOver(".mapPierButton, .mapPierComment", ".mapPierComment");
        this.renderArea.addLinkCall(".mapPierButton, .mapPierComment", new CallbackCollection(this.goToPier.bind(this)));
    };
    MainMap.prototype.loadSorceressHut = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapSorceressHutButton", x, x + 3, y, x, x + 3, y + 1);
        // Comments
        this.renderArea.addFullComment(x + 2, y + 3, Database.getText("mapSorceressHutComment"), Database.getTranslatedText("mapSorceressHutComment"), "mapSorceressHutComment");
        // Interactions
        this.renderArea.addLinkOver(".mapSorceressHutButton, .mapSorceressHutComment", ".mapSorceressHutComment");
        this.renderArea.addLinkCall(".mapSorceressHutButton, .mapSorceressHutComment", new CallbackCollection(this.goToSorceressHut.bind(this)));
    };
    MainMap.prototype.loadTheDesert = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapTheDesertButton", x, x + 29, y + 2, x, x + 29, y + 3, x, x + 29, y + 4, x, x + 29, y + 5, x, x + 29, y + 6, x, x + 29, y + 7, x, x + 28, y + 8, x, x + 27, y + 9, x + 1, x + 26, y + 10, x + 2, x + 25, y + 11);
        // Comments
        this.renderArea.addFullComment(x + 14, y + 6, Database.getText("mapTheDesertComment"), Database.getTranslatedText("mapTheDesertComment"), "mapTheDesertComment");
        // Interactions
        this.renderArea.addLinkOver(".mapTheDesertButton, .mapTheDesertComment", ".mapTheDesertComment");
        this.renderArea.addLinkCall(".mapTheDesertButton, .mapTheDesertComment", new CallbackCollection(this.goToTheDesert.bind(this)));
    };
    MainMap.prototype.loadTheHole = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapTheHoleButton", x + 1, x + 4, y, x + 1, x + 3, y + 1);
        // Comments
        this.renderArea.addFullComment(x + 2, y + 3, Database.getText("mapTheHoleComment"), Database.getTranslatedText("mapTheHoleComment"), "mapTheHoleComment");
        // Interactions
        this.renderArea.addLinkOver(".mapTheHoleButton, .mapTheHoleComment", ".mapTheHoleComment");
        this.renderArea.addLinkCall(".mapTheHoleButton, .mapTheHoleComment", new CallbackCollection(this.goToTheHole.bind(this)));
    };
    MainMap.prototype.loadTreasure = function (x, y) {
        // The button
        this.renderArea.addAsciiNinjaButton(x, x + 3, y, "mapTreasureButton");
        // Interactions
        this.renderArea.addLinkCall(".mapTreasureButton", new CallbackCollection(this.goToTreasure.bind(this)));
    };
    MainMap.prototype.loadVillage = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageButton", x + 11, x + 19, y, x + 7, x + 19, y + 1, x + 4, x + 21, y + 2, x, x + 21, y + 3, x, x + 18, y + 4, x + 4, x + 18, y + 5, x + 8, x + 11, y + 6);
        // Comments
        this.renderArea.addFullComment(x + 11, y + 3, Database.getText("mapVillageComment"), Database.getTranslatedText("mapVillageComment"), "mapVillageComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageButton, .mapVillageComment", ".mapVillageComment");
        this.renderArea.addLinkCall(".mapVillageButton, .mapVillageComment", new CallbackCollection(this.getGame().goToVillage.bind(this.getGame())));
    };
    MainMap.prototype.loadWishingWell = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapWishingWellButton", x, x + 3, y);
        // Comments
        this.renderArea.addFullComment(x + 1, y + 1, Database.getText("mapWishingWellComment"), Database.getTranslatedText("mapWishingWellComment"), "mapWishingWellComment");
        // Interactions
        this.renderArea.addLinkOver(".mapWishingWellButton, .mapWishingWellComment", ".mapWishingWellComment");
        this.renderArea.addLinkCall(".mapWishingWellButton, .mapWishingWellComment", new CallbackCollection(this.goToWishingWell.bind(this)));
    };
    return MainMap;
})(Place);
///<reference path="Game.ts"/>
///<reference path="./../../libs/jquery.d.ts"/>
var Main;
(function (Main) {
    // The game
    var game = null;
    // Information about loading
    var loadingType = MainLoadingType.NONE;
    var loadingString = null;
    // Information about the game mode
    var gameMode = null;
    // Public functions    
    function documentIsReady() {
        Keyboard.execute(); // Execute the Kayboard jquery stuff
        start(); // Start the game
    }
    Main.documentIsReady = documentIsReady;
    function reloadEverythingFromFile(fileContent) {
        // Clear intervals for the current game
        game.clearAllIntervals();
        // Set the loading type
        loadingType = MainLoadingType.FILE;
        // Set the loading string
        loadingString = fileContent;
        // Set the gamemode (null so that it is set from loading)
        gameMode = null;
        // We can't register anymore
        Saving.canRegister = false;
        // Finally start (this will erase the current game)
        start();
    }
    Main.reloadEverythingFromFile = reloadEverythingFromFile;
    function setUrlData(urlData) {
        // Create some variables
        var beforeEqual;
        var afterEqual;
        // If there's something in the url and we can find an equal sign and this equal sign isn't the last character of the string
        if (urlData != "" && urlData.indexOf("=") != -1 && urlData.indexOf("=") < urlData.length - 1) {
            // Strip the question mark
            urlData = urlData.substr(1);
            // Separate the data in two parts : before and after the equal sign
            beforeEqual = urlData.substr(0, urlData.indexOf("="));
            afterEqual = urlData.substr(urlData.indexOf("=") + 1);
            // Do different things depending on the value of beforeEqual
            switch (beforeEqual) {
                // If we're trying to load a local slot
                case "slot":
                    loadingType = MainLoadingType.LOCAL;
                    loadingString = "slot" + afterEqual;
                    break;
                // If we're trying to launch a new game with a special mode
                case "gamemode":
                    gameMode = afterEqual;
                    break;
            }
        }
    }
    Main.setUrlData = setUrlData;
    function start() {
        game = new Game(gameMode);
        Keyboard.setGame(game);
        Saving.load(game, loadingType, loadingString);
        game.postLoad();
    }
})(Main || (Main = {}));
$(document).ready(function () {
    Main.setUrlData(window.location.search);
    Main.documentIsReady();
});
///<reference path="QuestEntity.ts"/>
var MediumFish = (function (_super) {
    __extends(MediumFish, _super);
    // Constructor
    function MediumFish(quest, pos) {
        _super.call(this, quest, pos, new Naming("A fish", "a fish"), new RenderArea(8, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(1, 1), new Pos(7, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(8, 1)), new CollisionBox(this, new Pos(1, 3), new Pos(7, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(30);
        this.setHp(30);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/mediumFish"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fins", "its fins"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(10, 6))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(4);
    }
    // willDie()
    MediumFish.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(15), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return MediumFish;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var MerchantHat = (function (_super) {
    __extends(MerchantHat, _super);
    // Constructor
    function MerchantHat() {
        _super.call(this, "eqItemHatMerchantHat", "eqItemHatMerchantHatName", "eqItemHatMerchantHatDescription", "eqItems/hats/merchantHat");
    }
    // Special ability
    MerchantHat.prototype.getSpecialAbility = function () {
        return "Multiplies the number of candies found in quests by 7 (merchant hat).";
    };
    // Candies found * 7
    MerchantHat.prototype.foundCandies = function (player, quest, howMany) {
        return howMany * 7;
    };
    return MerchantHat;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var MiniShark = (function (_super) {
    __extends(MiniShark, _super);
    // Constructor
    function MiniShark(quest, pos) {
        _super.call(this, quest, pos, new Naming("A dangerous fish", "a dangerous fish"), new RenderArea(19, 5), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(8, 1), new Pos(2, 1)), new CollisionBox(this, new Pos(17, 1), new Pos(2, 1)), new CollisionBox(this, new Pos(5, 2), new Pos(14, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(17, 1)), new CollisionBox(this, new Pos(0, 4), new Pos(12, 1)), new CollisionBox(this, new Pos(18, 4), new Pos(1, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(70);
        this.setHp(70);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/miniShark"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its teeth", "its teeth"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(21, 7))), 8));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(2);
    }
    // willDie()
    MiniShark.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(50 + 10 * Random.upTo(5)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return MiniShark;
})(QuestEntity);
///<reference path="Fireball.ts"/>
var MonkeyWizardMagicalPurpleBall = (function (_super) {
    __extends(MonkeyWizardMagicalPurpleBall, _super);
    // Constructor
    function MonkeyWizardMagicalPurpleBall(quest, pos, naming, color, size, damage, questEntityDamageReason, timer) {
        // Call the mother class constructor
        _super.call(this, quest, pos, naming, color, size, damage, questEntityDamageReason);
        // Set the timer
        this.timer = timer;
    }
    // Public methods
    MonkeyWizardMagicalPurpleBall.prototype.update = function () {
        // If the timer isn't null (which means we should be stored and then go down)
        if (this.timer != null) {
            // If the timer is > 0, decrease it
            if (this.timer > 0)
                this.timer -= 1;
            else {
                this.timer = null; // No more timer
                this.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer());
            }
        }
        // Call the fireball update method
        _super.prototype.update.call(this);
    };
    return MonkeyWizardMagicalPurpleBall;
})(Fireball);
///<reference path="Quest.ts"/>
var MonkeyWizardQuest = (function (_super) {
    __extends(MonkeyWizardQuest, _super);
    // Constructor
    function MonkeyWizardQuest(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 20);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 17));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the roof and the floor
        this.addRoofAndFloor();
        // Add the monkey wizard
        this.addMonkeyWizard(new Pos(88, 16));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You challenged the monkey wizard. Let the fight begin!"));
    }
    // Public methods
    MonkeyWizardQuest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    MonkeyWizardQuest.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You continue to explore the cave."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    MonkeyWizardQuest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/monkeyWizard/roof"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToTheCave.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    MonkeyWizardQuest.prototype.addMonkeyWizard = function (pos) {
        var monkey = new MonkeyWizard(this, pos);
        monkey.setHealthBar(new QuestEntityHealthBar(monkey, new Pos(100, 1), new Pos(0, 5), QuestEntityHealthBarPositionType.FIXED, false, true, BarType.HEALTH));
        this.addEntity(monkey);
    };
    MonkeyWizardQuest.prototype.addRoofAndFloor = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the roof
        wall.addBox(new Pos(0, 0), new Pos(100, 2));
        wall.addBox(new Pos(0, 2), new Pos(7, 1));
        wall.addBox(new Pos(18, 2), new Pos(50, 1));
        wall.addBox(new Pos(71, 2), new Pos(29, 1));
        wall.addBox(new Pos(0, 3), new Pos(2, 1));
        wall.addBox(new Pos(24, 3), new Pos(21, 1));
        wall.addBox(new Pos(83, 3), new Pos(17, 1));
        wall.addBox(new Pos(0, 4), new Pos(1, 1));
        wall.addBox(new Pos(99, 4), new Pos(1, 1));
        // Add the floor
        wall.addBox(new Pos(-20, 20), new Pos(120, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    return MonkeyWizardQuest;
})(Quest);
///<reference path="MonkeyWizardStaffMotherClass.ts"/>
var MonkeyWizardStaff = (function (_super) {
    __extends(MonkeyWizardStaff, _super);
    // Constructor
    function MonkeyWizardStaff() {
        _super.call(this, "eqItemWeaponMonkeyWizardStaff", "eqItemWeaponMonkeyWizardStaffName", "eqItemWeaponMonkeyWizardStaffDescription", "eqItems/weapons/monkeyWizardStaff");
        // Set the timer
        this.timer = 0;
    }
    // Public getters
    MonkeyWizardStaff.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("The monkey wizard staff", "the monkey wizard staff"), player.getClassicCollisionBoxCollection(), 2);
        qew.getCloseCombatDelay().setFixedDelay(1);
        return qew;
    };
    // update()
    MonkeyWizardStaff.prototype.update = function (player, quest) {
        // Handle the timer
        if (this.timer < 10)
            this.timer += 1;
        else {
            this.timer = 0;
            var ent = this.getRandomEnemy(player, quest);
            if (ent != null)
                this.castPurpleBall(player, quest, ent);
        }
    };
    return MonkeyWizardStaff;
})(MonkeyWizardStaffMotherClass);
///<reference path="QuestEntity.ts"/>
var MonkeyWizard = (function (_super) {
    __extends(MonkeyWizard, _super);
    // Constructor
    function MonkeyWizard(quest, pos) {
        _super.call(this, quest, pos, new Naming("A monkey wizard", "a monkey wizard"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(3, 0), new Pos(1, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(4, 1))), new QuestEntityMovement());
        // Set the timers
        this.timer = 0;
        this.bigTimer = 0;
        // At first we're going left
        this.goingLeft = true;
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(300);
        this.setHp(300);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/monkeyWizard/monkeyWizard"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its staff", "its staff"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(6, 6))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
    }
    // update()
    MonkeyWizard.prototype.update = function () {
        _super.prototype.update.call(this);
        // Is the monkey angry?
        var angry = (this.getHp() < 70 ? true : false);
        // Store the player position
        var playerPos = this.getQuest().getGame().getPlayer().getGlobalPosition();
        // Handle the timer
        if (this.timer < 80)
            this.timer += 1;
        else
            this.timer = 0;
        // Handle the big timer
        if (this.bigTimer < 350)
            this.bigTimer += 1;
        else
            this.bigTimer = 0;
        // Cast spells depending on the timer
        if (this.timer == 80 ||
            this.timer == 12 ||
            this.timer == 24 ||
            this.timer == 36 ||
            this.timer == 48 ||
            (angry && this.timer == 6) ||
            (angry && this.timer == 18) ||
            (angry && this.timer == 30) ||
            (angry && this.timer == 42) ||
            (angry && this.timer == 54)) {
            this.castSpell(false); // Not stored
        }
        else if (this.timer == 60 || this.timer == 64 || this.timer == 68 || this.timer == 72 || this.timer == 76 && this.bigTimer < 300) {
            this.castSpell(true); // Stored
        }
        // If the player is near us (< 9) horizontally
        if (Math.abs(playerPos.x - this.getGlobalPosition().x) < 9) {
            // We jump (hoping to jump above the player)
            this.jump3();
        }
        // If the player is even more near us (< 15) horizontally
        if (Math.abs(playerPos.x - this.getGlobalPosition().x) < 15) {
            // If we're going left
            if (this.goingLeft) {
                // If we're on the right of the quest
                if (this.getGlobalPosition().x > 25)
                    this.goLeft();
                else {
                    this.goRight();
                    this.goingLeft = false;
                }
            }
            else {
                // If the player is on the left
                if (playerPos.x < this.getGlobalPosition().x) {
                    // If we're on the left side of the quest
                    if (this.getGlobalPosition().x < 75)
                        this.goRight();
                    else {
                        this.goLeft();
                        this.goingLeft = true;
                    }
                }
                else if (this.getGlobalPosition().x > 25) {
                    // We go left
                    this.goLeft();
                }
                else
                    this.dontMove();
            }
        }
        else
            this.dontMove();
    };
    // willDie()
    MonkeyWizard.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        // The monkey wizard staff
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponMonkeyWizardStaff", "You found a staff.", "You gain the monkey wizard staff."));
    };
    // Private methods
    MonkeyWizard.prototype.castSpell = function (stored) {
        var ball = new MonkeyWizardMagicalPurpleBall(this.getQuest(), this.getGlobalPosition().plus(new Pos(3, 0)), new Naming("An magical purple ball", "a magical purple ball"), (stored ? new Color(ColorType.MONKEY_WIZARD_BALL_STORED) : new Color(ColorType.MONKEY_WIZARD_BALL)), new Pos(2, 1), 15, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("An magical purple ball", "a magical purple ball")), (stored ? 350 - this.bigTimer : null));
        // If we're not going to be stored
        if (stored == false) {
            // Target the player
            ball.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer());
        }
        else {
            // Target the roof
            ball.setTargetTypeTargetPosition(new Pos(Random.between(1, 99), Random.between(4, 9)));
        }
        // Add it to the quest
        this.getQuest().addEntity(ball);
    };
    MonkeyWizard.prototype.dontMove = function () {
        this.getQuestEntityMovement().setOffset(new Pos(0, 0));
    };
    MonkeyWizard.prototype.goLeft = function () {
        this.getQuestEntityMovement().setOffset(new Pos(-1, 0));
    };
    MonkeyWizard.prototype.goRight = function () {
        this.getQuestEntityMovement().setOffset(new Pos(1, 0));
    };
    MonkeyWizard.prototype.jump3 = function () {
        this.jump(3);
    };
    return MonkeyWizard;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Monster = (function (_super) {
    __extends(Monster, _super);
    // Constructor
    function Monster(quest, globalPosition) {
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("The monster", "the monster"), new RenderArea(13, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(13, 1)), new CollisionBox(this, new Pos(1, 0), new Pos(11, 1)), new CollisionBox(this, new Pos(2, 0), new Pos(9, 1)), new CollisionBox(this, new Pos(3, 0), new Pos(7, 1))), new QuestEntityMovement());
        // At first, no egg was destroyed
        this.anEggWasDestroyed = false;
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room3/monster"));
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("??", "??"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(15, 6))), 10000));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
    }
    // update()
    Monster.prototype.update = function () {
        // If no egg was destroyed, we go towards the player but we stay on the roof
        if (this.anEggWasDestroyed == false) {
            this.goTowards(this.getGlobalPosition().plus(new Pos(6, 4)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(2, 0), true);
        }
        else {
            this.goTowards(this.getGlobalPosition().plus(new Pos(6, 4)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(4, 4));
        }
        // Call the mother classe update
        _super.prototype.update.call(this);
    };
    // Public methods
    Monster.prototype.eggDestroyed = function () {
        this.anEggWasDestroyed = true;
    };
    return Monster;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Mosquito = (function (_super) {
    __extends(Mosquito, _super);
    // Constructor
    function Mosquito(quest, pos, groundYPosition) {
        _super.call(this, quest, pos, new Naming("A forest mosquito", "a forest mosquito"), new RenderArea(1, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1))), new QuestEntityMovement());
        // Set the ground y position from the value given in parameter
        this.groundYPosition = groundYPosition;
        // Set the perfect position above the ground
        this.perfectYPositionAboveGround = Random.between(8, 13);
        // Set gravity
        this.getQuestEntityMovement().setGravity(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(1);
        this.setHp(1);
        // Set the ascii art (well, it's actually just a ".")
        this.getRenderArea().drawString(".");
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A proboscis", "a proboscis"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(3, 3))), 12));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setOnceThenWaitDelay(20);
    }
    // update()
    Mosquito.prototype.update = function () {
        // Calculate the distance from the player
        var distanceFromPlayer = this.getGlobalPosition().getDistance(this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)));
        // Go towards the player
        this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)));
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    return Mosquito;
})(QuestEntity);
///<reference path="Place.ts"/>
var Moutains = (function (_super) {
    __extends(Moutains, _super);
    // Constructor
    function Moutains(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/mountains"), 0, 10);
        this.update();
    }
    // getRenderArea()
    Moutains.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Moutains.prototype.getPogoStick = function () {
        // Get the pogo stick
        this.getGame().gainItem("gridItemPossessedPogoStick");
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Moutains.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "mountainsBackToTheMapButton");
        // Draw the moutains
        this.renderArea.drawArray(Database.getAscii("places/mountains"), 0, 3);
        // If we didn't get the pogo stick yet
        if (Saving.loadBool("gridItemPossessedPogoStick") == false) {
            // Add the "*" showing that there's a pogo stick here
            this.renderArea.drawString("*", 52, 11);
            // Draw the text
            this.renderArea.drawString(Database.getText("mountainsText0"), 19, 22);
            this.renderArea.drawString(Database.getText("mountainsText1"), 19, 23);
            // Add the button
            this.renderArea.addAsciiRealButton(Database.getText("mountainsTextButton"), 19, 25, "mountainsClimbButton", Database.getTranslatedText("mountainsTextButton"));
            this.renderArea.addLinkCall(".mountainsClimbButton", new CallbackCollection(this.getPogoStick.bind(this)));
            // Draw the translated text
            this.renderArea.drawString(Database.getTranslatedText("mountainsText0"), 19, 27, true);
            this.renderArea.drawString(Database.getTranslatedText("mountainsText1"), 19, 28, true);
        }
        else {
            this.renderArea.drawString(Database.getText("mountainsTextAfter"), 19, 22);
            this.renderArea.drawString(Database.getTranslatedText("mountainsTextAfter"), 19, 24, true);
        }
    };
    return Moutains;
})(Place);
var Naming = (function () {
    // Constructor
    function Naming(beginning, anywhere) {
        if (anywhere === void 0) { anywhere = null; }
        this.beginning = beginning;
        if (anywhere != null)
            this.anywhere = anywhere;
        else
            this.anywhere = this.beginning;
    }
    // Public getters
    Naming.prototype.getAnywhere = function () {
        return this.anywhere;
    };
    Naming.prototype.getBeginning = function () {
        return this.beginning;
    };
    return Naming;
})();
///<reference path="QuestEntitySpell.ts"/>
var ObsidianBrick = (function (_super) {
    __extends(ObsidianBrick, _super);
    // Constructor
    function ObsidianBrick(quest, pos, hp) {
        _super.call(this, quest, pos, new Naming("An obsidian brick", "an obsidian brick"), null, new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(2, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(hp);
        this.setHp(hp);
        // Add the color
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(0, 0), new Pos(2, 1), new Color(ColorType.PLAYER_OBSIDIAN_BRICK)));
    }
    return ObsidianBrick;
})(QuestEntitySpell);
///<reference path="EqItem.ts"/>
var OctopusKingCrown = (function (_super) {
    __extends(OctopusKingCrown, _super);
    // Constructor
    function OctopusKingCrown() {
        _super.call(this, "eqItemHatOctopusKingCrown", "eqItemHatOctopusKingCrownName", "eqItemHatOctopusKingCrownDescription", "eqItems/hats/octopusKingCrown");
    }
    // Special ability
    OctopusKingCrown.prototype.getSpecialAbility = function () {
        return "You are a lot more confident.";
    };
    return OctopusKingCrown;
})(EqItem);
///<reference path="EqItem.ts"/>
var OctopusKingCrownWithJaspers = (function (_super) {
    __extends(OctopusKingCrownWithJaspers, _super);
    // Constructor
    function OctopusKingCrownWithJaspers() {
        _super.call(this, "eqItemHatOctopusKingCrownWithJaspers", "eqItemHatOctopusKingCrownWithJaspersName", "eqItemHatOctopusKingCrownWithJaspersDescription", "eqItems/hats/octopusKingCrownWithJaspers");
        // The timer (to avoid casting fireballs too often..)
        this.currentTimer = 0;
        this.maxTimer = 3;
    }
    // Special ability
    OctopusKingCrownWithJaspers.prototype.getSpecialAbility = function () {
        return "Randomly cast powerful fireballs around you (Octopus King crown with jaspers).";
    };
    // update
    OctopusKingCrownWithJaspers.prototype.update = function (player, quest) {
        this.currentTimer += 1;
        // If the timer is ready
        if (this.currentTimer >= this.maxTimer) {
            // Cast the fireball
            this.castFireball(player, quest);
            // Reset the timer
            this.currentTimer = 0;
        }
    };
    // Private methods
    OctopusKingCrownWithJaspers.prototype.castFireball = function (player, quest) {
        // Create the fireball
        var fireball = new Fireball(quest, player.getSpellCastingPosition(), new Naming("A small fireball", "a small fireball"), new Color(ColorType.RED_ENCHANTED_GLOVES_FIREBALL), new Pos(4, 2), 18, player.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A fireball", "a fireball")));
        // Set the direction
        fireball.setTargetTypeNoTarget(Algo.getRandomNotImmobileDirectionUpToThisSpeed(1).multiply(new Pos(2, 2)));
        // Add the entity
        quest.addEntity(fireball);
    };
    return OctopusKingCrownWithJaspers;
})(EqItem);
///<reference path="EqItem.ts"/>
var OctopusKingCrownWithObsidian = (function (_super) {
    __extends(OctopusKingCrownWithObsidian, _super);
    // Constructor
    function OctopusKingCrownWithObsidian() {
        _super.call(this, "eqItemHatOctopusKingCrownWithObsidian", "eqItemHatOctopusKingCrownWithObsidianName", "eqItemHatOctopusKingCrownWithObsidianDescription", "eqItems/hats/octopusKingCrownWithObsidian");
        // Reset the timer for the first time
        this.resetTimer();
    }
    // Special ability
    OctopusKingCrownWithObsidian.prototype.getSpecialAbility = function () {
        return "Summon the Octopus King once in a while to help you.";
    };
    // update
    OctopusKingCrownWithObsidian.prototype.update = function (player, quest) {
        this.currentTimer -= 1;
        // If the timer is ready
        if (this.currentTimer <= 0) {
            // Summon the king
            if (this.summonOctopusKing(player, quest)) {
                // If it worked, reset the timer
                this.resetTimer();
            }
        }
    };
    // Private methods
    OctopusKingCrownWithObsidian.prototype.summonOctopusKing = function (player, quest) {
        // Create the king
        var king = new PlayerSummonedOctopusKing(quest, Random.fromPosition(new Pos(quest.getRealQuestSize().x - 1, quest.getRealQuestSize().y - 1)));
        // If we manage to add it, we return true
        if (quest.addEntity(king))
            return true;
        // No king added, we return false
        return false;
    };
    OctopusKingCrownWithObsidian.prototype.resetTimer = function () {
        this.currentTimer = Random.between(60, 120);
    };
    return OctopusKingCrownWithObsidian;
})(EqItem);
///<reference path="Quest.ts"/>
var OctopusKingQuest = (function (_super) {
    __extends(OctopusKingQuest, _super);
    // Constructor
    function OctopusKingQuest(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 20);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 17));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the roof and the floor
        this.addRoofAndFloor();
        // Add the monkey wizard
        this.addOctopusKing(new Pos(88, 16));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You challenged the Octopus King. Let the fight begin!"));
    }
    // Public methods
    OctopusKingQuest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    OctopusKingQuest.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You continue to explore the cave."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    OctopusKingQuest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so end the quest (he won) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/octopusKing/roof"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToTheCave.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    OctopusKingQuest.prototype.addOctopusKing = function (pos) {
        var king = new OctopusKing(this, pos);
        king.setHealthBar(new QuestEntityHealthBar(king, new Pos(100, 1), new Pos(0, 5), QuestEntityHealthBarPositionType.FIXED, false, true, BarType.HEALTH));
        this.addEntity(king);
    };
    OctopusKingQuest.prototype.addRoofAndFloor = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));
        // Add the roof
        wall.addBox(new Pos(0, 0), new Pos(100, 2));
        wall.addBox(new Pos(0, 2), new Pos(7, 1));
        wall.addBox(new Pos(18, 2), new Pos(50, 1));
        wall.addBox(new Pos(71, 2), new Pos(29, 1));
        wall.addBox(new Pos(0, 3), new Pos(2, 1));
        wall.addBox(new Pos(24, 3), new Pos(21, 1));
        wall.addBox(new Pos(83, 3), new Pos(17, 1));
        wall.addBox(new Pos(0, 4), new Pos(1, 1));
        wall.addBox(new Pos(99, 4), new Pos(1, 1));
        // Add the floor
        wall.addBox(new Pos(-20, 20), new Pos(120, 1));
        // Add the wall entity
        this.addEntity(wall);
    };
    return OctopusKingQuest;
})(Quest);
///<reference path="QuestEntity.ts"/>
var OctopusKing = (function (_super) {
    __extends(OctopusKing, _super);
    // Constructor
    function OctopusKing(quest, pos) {
        _super.call(this, quest, pos, new Naming("The Octopus King", "the Octopus King"), new RenderArea(6, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(2, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(4, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(6, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(false);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(380);
        this.setHp(380);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/octopusKing/octopusKing"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its tentacles", "its tentacles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 6))), 16));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    // update()
    OctopusKing.prototype.update = function () {
        // Go towards the player
        this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition(), 0, new Pos(1, 0));
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // willDie()
    OctopusKing.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(4000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        // The monkey wizard staff
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemHatOctopusKingCrown", "You found the Octopus King crown.", "You gain the Octopus King crown."));
    };
    return OctopusKing;
})(QuestEntity);
///<reference path="Place.ts"/>
var OutsideTheHole = (function (_super) {
    __extends(OutsideTheHole, _super);
    // Constructor
    function OutsideTheHole(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/outsideTheHole"), 0, 4);
        this.update();
    }
    // getRenderArea()
    OutsideTheHole.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods 
    OutsideTheHole.prototype.jump = function () {
        this.getGame().setPlace(new TheHole(this.getGame()));
    };
    OutsideTheHole.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "theHoleBackToTheMapButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/outsideTheHole"), 0, 3);
        // Add the button to jump in the hole
        this.renderArea.addAsciiRealButton(Database.getText("outsideTheHoleButton"), 34, 23, "outsideTheHoleButton", Database.getTranslatedText("outsideTheHoleButton"), true);
        this.renderArea.addLinkCall(".outsideTheHoleButton", new CallbackCollection(this.jump.bind(this)));
    };
    return OutsideTheHole;
})(Place);
///<reference path="StatusBarResource.ts"/>
var PainsAuChocolat = (function (_super) {
    __extends(PainsAuChocolat, _super);
    // Constructor
    function PainsAuChocolat(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    PainsAuChocolat.prototype.getCurrentAsString = function (totalSize) {
        if (totalSize === void 0) { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;
        var base = "";
        var prefix = "";
        var suffix = "";
        // We set the base or return right now in some special cases
        if (n < 0)
            return "What, negative pains au chocolat?!";
        else if (n == 1)
            return "-> 1 pain au chocolat";
        else
            base = Algo.numberToStringButNicely(n);
        // How much space do we still have ?
        size = totalSize - base.length;
        // We set the suffix
        if (size >= 18) {
            suffix = " pains au chocolat";
            // We add a suffix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;
            // We set the prefix
            if (size >= 9)
                prefix = "You have ";
            else if (size >= 3)
                prefix = "-> ";
        }
        else if (size >= 3)
            suffix = " pc";
        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;
        return prefix + base + suffix;
    };
    return PainsAuChocolat;
})(StatusBarResource);
///<reference path="Place.ts"/>
var Pier = (function (_super) {
    __extends(Pier, _super);
    // Constructor
    function Pier(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/pier"), 0, 6);
        this.update();
    }
    // getRenderArea()
    Pier.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Pier.prototype.addLighthouseButton = function (x, y) {
        this.renderArea.addAsciiRealButton(Database.getText("pierLighthouseButton"), x, y, "pierLighthouseButton", Database.getTranslatedText("pierLighthouseButton"), true);
        this.renderArea.addLinkCall(".pierLighthouseButton", new CallbackCollection(this.clickedOnLighthouseButton.bind(this), this.getGame().goToLighthouse.bind(this.getGame())));
    };
    Pier.prototype.addTheSeaButton = function (x, y) {
        this.renderArea.addAsciiRealButton(Database.getText("pierTheSeaButton"), x, y, "pierTheSeaButton", Database.getTranslatedText("pierTheSeaButton"), true);
        this.renderArea.addLinkCall(".pierTheSeaButton", new CallbackCollection(this.goToTheSea.bind(this)));
    };
    Pier.prototype.clickedOnLighthouseButton = function () {
        Saving.saveBool("mainMapDonePier", true);
    };
    Pier.prototype.goToTheSea = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new TheSea(this.getGame()));
    };
    Pier.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "thePierBackToTheMapButton");
        // Draw the pier
        this.renderArea.drawArray(Database.getAscii("places/pier"), 0, 3);
        // Add the button to go to the lighthouse
        this.addLighthouseButton(3, 27);
        // Add the button to jump into the sea
        this.addTheSeaButton(52, 9);
    };
    return Pier;
})(Place);
///<reference path="EqItem.ts"/>
var PinkEnchantedGloves = (function (_super) {
    __extends(PinkEnchantedGloves, _super);
    // Constructor
    function PinkEnchantedGloves() {
        _super.call(this, "eqItemGlovesPinkEnchantedGloves", "eqItemGlovesPinkEnchantedGlovesName", "eqItemGlovesPinkEnchantedGlovesDescription", "eqItems/gloves/pinkEnchantedGloves");
    }
    // Special ability
    PinkEnchantedGloves.prototype.getSpecialAbility = function () {
        return "Slowly regain your health points in quests (pink enchanted gloves).";
    };
    // update
    PinkEnchantedGloves.prototype.update = function (player, quest) {
        player.heal(1);
    };
    return PinkEnchantedGloves;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var Plant = (function (_super) {
    __extends(Plant, _super);
    // Constructor
    function Plant(quest, leftDownCornerPosition, minPlantNumber, maxPlantNumber) {
        // Set the ascii art name
        var asciiArtName = "places/quests/theSea/plant" + Random.between(minPlantNumber, maxPlantNumber).toString();
        // Create the real global position
        var globalPosition = leftDownCornerPosition;
        globalPosition.add(new Pos(0, -Database.getAsciiHeight(asciiArtName) + 1));
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("A plant", "a plant"), new RenderArea());
        // Draw the ascii art
        this.getRenderArea().resizeFromArray(Database.getAscii(asciiArtName));
        this.getRenderArea().drawArray(Database.getAscii(asciiArtName));
        // Set different transparency settings depending on the ascii art
        if (asciiArtName == "places/quests/theSea/plant0" || asciiArtName == "places/quests/theSea/plant8" || asciiArtName == "places/quests/theSea/plant9" || asciiArtName == "places/quests/theSea/plant10") {
            this.setTransparency(new RenderTransparency(" ", "%"));
        }
        else {
            this.setTransparency(new RenderTransparency(" "));
        }
    }
    return Plant;
})(QuestEntity);
///<reference path="QuestEntityWeapon.ts"/>
var PlayerBludgeon = (function (_super) {
    __extends(PlayerBludgeon, _super);
    function PlayerBludgeon() {
        _super.apply(this, arguments);
    }
    // Public methods
    PlayerBludgeon.prototype.getRealDamage = function () {
        return Random.between(12, 16);
    };
    PlayerBludgeon.prototype.getRealDamageText = function () {
        return "12-16";
    };
    return PlayerBludgeon;
})(QuestEntityWeapon);
var PlayerCharacterType;
(function (PlayerCharacterType) {
    PlayerCharacterType[PlayerCharacterType["CANDYBOX"] = 0] = "CANDYBOX";
    PlayerCharacterType[PlayerCharacterType["MEDIUM"] = 1] = "MEDIUM";
    PlayerCharacterType[PlayerCharacterType["CANDYBOX_SQUEEZED"] = 2] = "CANDYBOX_SQUEEZED";
    PlayerCharacterType[PlayerCharacterType["MEDIUM_SQUEEZED"] = 3] = "MEDIUM_SQUEEZED";
})(PlayerCharacterType || (PlayerCharacterType = {}));
///<reference path="QuestEntity.ts"/>
var PlayerCloneCandyBox = (function (_super) {
    __extends(PlayerCloneCandyBox, _super);
    // Constructor
    function PlayerCloneCandyBox(quest, pos) {
        _super.call(this, quest, pos, new Naming("A clone", "a clone"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement());
        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(quest.getGame().getPlayer().getHp());
        this.setHp(quest.getGame().getPlayer().getHp());
        // Set the ascii art and the transparent character
        this.getRenderArea().drawString("\\o/");
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fists", "its fists"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    return PlayerCloneCandyBox;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var PlayerCloneMedium = (function (_super) {
    __extends(PlayerCloneMedium, _super);
    // Constructor
    function PlayerCloneMedium(quest, pos) {
        _super.call(this, quest, pos, new Naming("A clone", "a clone"), new RenderArea(11, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(11, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(9, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(7, 1)), new CollisionBox(this, new Pos(4, 3), new Pos(3, 1))), new QuestEntityMovement());
        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(quest.getGame().getPlayer().getHp());
        this.setHp(quest.getGame().getPlayer().getHp());
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("players/medium"));
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fists", "its fists"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(13, 6))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    return PlayerCloneMedium;
})(QuestEntity);
///<reference path="QuestEntitySpell.ts"/>
var PlayerSummonedDemon = (function (_super) {
    __extends(PlayerSummonedDemon, _super);
    // Constructor
    function PlayerSummonedDemon(quest, globalPosition, damage) {
        _super.call(this, quest, globalPosition, new Naming("A demon", "a demon"));
        // Set the damage
        this.damage = damage;
        // Create the damage reason
        this.damageReason = new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.SPELL);
        this.damageReason.setQuestEntity(this.getQuest().getGame().getPlayer(), QuestEntityTeam.NATURE);
        this.damageReason.setSpellNaming(this.getRandomNaming());
        // Create the collision box collection
        this.damageCollisionBoxCollection = new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(8, 4)));
        // Add the demon colors randomly
        this.addRandomQuestEntitySpellColors();
        // Add the quest entity movement
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(3, 0)));
    }
    // Public methods
    PlayerSummonedDemon.prototype.update = function () {
        // Handle damage
        this.handleDamage();
        // Update
        _super.prototype.update.call(this);
    };
    // Private generation methods
    PlayerSummonedDemon.prototype.addRandomQuestEntitySpellColors = function () {
        // Array of 4*4 used to decide of the colors to add
        var arr = [];
        // Fill the array with false values
        for (var i = 0; i < 4; i++) {
            arr.push([]);
            for (var j = 0; j < 4; j++) {
                arr[i].push(false);
            }
        }
        // Fill the array with some true values
        switch (Random.upTo(1)) {
            // Symmetrical demon (vertical symmetry)
            case 0:
                for (var i = 0; i < 2; i++) {
                    for (var j = 0; j < 4; j++) {
                        if (Random.flipACoin()) {
                            arr[i][j] = true;
                            arr[3 - i][j] = true;
                        }
                    }
                }
                break;
            // Symmetrical demon (horizontal symmetry)
            case 1:
                for (var i = 0; i < 4; i++) {
                    for (var j = 0; j < 2; j++) {
                        if (Random.flipACoin()) {
                            arr[i][j] = true;
                            arr[i][3 - j] = true;
                        }
                    }
                }
                break;
        }
        // Add the colors depending on the array's content
        for (var i = 0; i < 4; i++) {
            for (var j = 0; j < 4; j++) {
                // If we should add a color here, we do so
                if (arr[i][j])
                    this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(i * 2, j), new Pos(2, 1), new Color(ColorType.PLAYER_SUMMONED_DEMON, true)));
            }
        }
    };
    PlayerSummonedDemon.prototype.getRandomNaming = function () {
        // The final name in a string
        var finalName = "";
        // How many syllables?
        var howManySyllables;
        if (Random.flipACoin())
            howManySyllables = 3; // a lot of chance
        else if (Random.oneChanceOutOf(10))
            howManySyllables = 4; // small chance
        else if (Random.oneChanceOutOf(10))
            howManySyllables = 1; // small chance
        else
            howManySyllables = 2; // a lot of chance, a but still a little bit less chance then 3 syllables
        // The syllables array
        var syllablesArray = [];
        // Add the syllables to the array
        for (var i = 0; i < howManySyllables; i++) {
            syllablesArray.push(Random.fromArray(["lael", "ezek", "bal", "sen", "zen", "aps", "hir", "ta", "ozn", "eres", "non", "enon", "cesti", "mal", "aser", "oex", "nax", "arir", "nikon", "taor", "rael", "mael", "sael", "epit", "uer", "pod", "ehon", "edeo", "xa"]));
        }
        // Turn the first letter of the firsy syllable into upper case
        syllablesArray[0] = syllablesArray[0].charAt(0).toUpperCase() + syllablesArray[0].slice(1);
        // Create the final name from the syllables
        for (var i = 0; i < syllablesArray.length; i++) {
            finalName += syllablesArray[i];
        }
        // Finally return the naming
        return new Naming("the demon " + finalName);
    };
    // Other private methods
    PlayerSummonedDemon.prototype.handleDamage = function () {
        // We iterate over entities
        for (var i = 0; i < this.getQuest().getEntities().length; i++) {
            // If it is destructible
            if (this.getQuest().getEntities()[i].getDestructible()) {
                // If it has a collision box collection
                if (this.getQuest().getEntities()[i].getCbc() != null) {
                    // If this collision box collection collides with ours
                    if (this.getQuest().getEntities()[i].getCbc().collidesWith(this.damageCollisionBoxCollection)) {
                        // We inflict the damage
                        this.getQuest().getEntities()[i].inflictDamage(this.damage, this.damageReason);
                    }
                }
            }
        }
    };
    return PlayerSummonedDemon;
})(QuestEntitySpell);
///<reference path="QuestEntity.ts"/>
var PlayerSummonedOctopusKing = (function (_super) {
    __extends(PlayerSummonedOctopusKing, _super);
    // Constructor
    function PlayerSummonedOctopusKing(quest, pos) {
        _super.call(this, quest, pos, new Naming("An Octopus King", "an Octopus King"), new RenderArea(6, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(2, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(4, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(6, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(380);
        this.setHp(380);
        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/octopusKing/octopusKing"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its tentacles", "its tentacles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 6))), 16));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    // update()
    PlayerSummonedOctopusKing.prototype.update = function () {
        // Go towards the player
        this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition(), 0, new Pos(1, 0));
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    return PlayerSummonedOctopusKing;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var PlayerSummonedTribeWarrior = (function (_super) {
    __extends(PlayerSummonedTribeWarrior, _super);
    // Constructor
    function PlayerSummonedTribeWarrior(quest, pos) {
        _super.call(this, quest, pos, new Naming("A tribe warrior", "a tribe warrior"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(4, 3))), new QuestEntityMovement());
        // Set gravity and worms like
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(25);
        this.setHp(25);
        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theHole/lostTribeWarrior"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A tribal spear", "a tribal spear"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(6, 6))), 8));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(2);
    }
    // update()
    PlayerSummonedTribeWarrior.prototype.update = function () {
        _super.prototype.update.call(this);
    };
    return PlayerSummonedTribeWarrior;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
// Register our hp
Saving.registerNumber("playerHp", 100);
var Player = (function (_super) {
    __extends(Player, _super);
    // Constructor
    function Player(game) {
        _super.call(this, null, new Pos(0, 0), new Naming("You", "you"));
        // Set the game
        this.game = game;
        // Set destructible
        this.setDestructible(true);
    }
    // Public methods
    Player.prototype.beginBerserk = function (duration) {
        // Call the mother class method
        if (_super.prototype.beginBerserk.call(this, duration)) {
            // Update the render area
            this.drawOnRenderArea();
            // Return true
            return true;
        }
        // We didn't become a turtle : return false
        return false;
    };
    Player.prototype.beginTurtle = function (duration) {
        // Call the mother class method
        if (_super.prototype.beginTurtle.call(this, duration)) {
            // Update the render area
            this.drawOnRenderArea();
            // Return true
            return true;
        }
        // We didn't become a turtle : return false
        return false;
    };
    Player.prototype.canJumpInMidAir = function () {
        // If we have the rocket boots, we can!
        if (this.game.isEquipped("boots", "eqItemBootsRocketBoots"))
            return true;
        return false;
    };
    Player.prototype.checkCollision = function (pos) {
        if (pos === void 0) { pos = new Pos(0, 0); }
        // If our mother class detects a collision, we return true
        if (_super.prototype.checkCollision.call(this, pos) == true)
            return true;
        // We also try collisions with the special player collision boxes
        if (this.collidesWith(this.getQuest().getPlayerCollisionBoxes(), pos))
            return true;
        return false;
    };
    Player.prototype.getCharacterType = function () {
        return this.characterType;
    };
    Player.prototype.getClassicCollisionBoxCollection = function () {
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3)));
                break;
            case PlayerCharacterType.MEDIUM:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(13, 6)));
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(3, 3)));
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 5)));
                break;
        }
    };
    Player.prototype.getQuestEntityWeapon = function (quest) {
        if (quest === void 0) { quest = null; }
        var qew;
        // If a weapon is equipped, we use the quest entity weapon it provides us
        if (this.game.getSelectedEqItems()["weapon"] != null) {
            qew = this.game.getSelectedEqItems()["weapon"].getQuestEntityWeapon(quest, this);
        }
        else {
            qew = new QuestEntityWeapon(this.getQuest(), this, new Naming("Your fists", "your fists"), this.getClassicCollisionBoxCollection(), 1);
            qew.getCloseCombatDelay().setFixedDelay(6, 0);
        }
        return qew;
    };
    Player.prototype.getSpellCastingPosition = function (facingRight) {
        if (facingRight === void 0) { facingRight = true; }
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(3, -1));
                else
                    return this.getGlobalPosition().plus(new Pos(-1, -1));
                break;
            case PlayerCharacterType.MEDIUM:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(11, 0));
                else
                    return this.getGlobalPosition().plus(new Pos(-1, 0));
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(0, -1));
                else
                    return this.getGlobalPosition().plus(new Pos(0, -1));
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(6, 0));
                else
                    return this.getGlobalPosition().plus(new Pos(-1, 0));
                break;
        }
    };
    Player.prototype.getThornsPositionsArray = function () {
        // Create the array
        var arr;
        // Fill the array with different positons depending on the character type
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                arr = [new Pos(-6, 0),
                    new Pos(-4, -1),
                    new Pos(-2, -2),
                    new Pos(1, -2),
                    new Pos(3, -1),
                    new Pos(5, 0),
                    new Pos(3, 1),
                    new Pos(1, 2),
                    new Pos(-2, 2),
                    new Pos(-4, 1)
                ];
                break;
            case PlayerCharacterType.MEDIUM:
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                arr = [new Pos(11, -2),
                    new Pos(12, -1),
                    new Pos(13, 0),
                    new Pos(13, 1),
                    new Pos(13, 2),
                    new Pos(12, 3),
                    new Pos(11, 4)
                ];
                break;
        }
        // Return the array
        return arr;
    };
    Player.prototype.hit = function (questEntity, damage, reason) {
        for (var savingName in this.game.getSelectedEqItems()) {
            damage = this.game.getSelectedEqItems()[savingName].hit(this, this.getQuest(), questEntity, damage, reason);
        }
        for (var savingName in this.game.getGridItems()) {
            if (Saving.loadBool(savingName))
                damage = this.game.getGridItems()[savingName].hit(this, this.getQuest(), questEntity, damage, reason);
        }
        // Gift of power
        if (Saving.loadNumber("gameGiftPower") > 0) {
            damage = Math.ceil(damage + damage * (Saving.loadNumber("gameGiftPower") / 5));
        }
        _super.prototype.hit.call(this, questEntity, damage, reason);
    };
    Player.prototype.inflictDamage = function (damage, reason) {
        for (var savingName in this.game.getSelectedEqItems()) {
            damage = this.game.getSelectedEqItems()[savingName].inflictDamage(this, this.getQuest(), damage, reason);
        }
        _super.prototype.inflictDamage.call(this, damage, reason);
    };
    Player.prototype.load = function () {
        this.setHp(Saving.loadNumber("playerHp"));
    };
    Player.prototype.loadCandyBoxCharacter = function (quest, firstTime) {
        if (firstTime === void 0) { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.CANDYBOX;
        // Load stuff common to all characters if it's the first time we load the character in this quest
        if (firstTime)
            this.loadCharacter(quest);
        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(3, 1));
        this.drawOnRenderArea();
        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))));
        // Transparency
        this.setTransparency(null);
    };
    Player.prototype.loadCandyBoxSqueezedCharacter = function (quest, firstTime) {
        if (firstTime === void 0) { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.CANDYBOX_SQUEEZED;
        // Load stuff common to all characters if it's the first time we load the character in this quest
        if (firstTime)
            this.loadCharacter(quest);
        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(1, 1));
        this.drawOnRenderArea();
        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1))));
        // Transparency
        this.setTransparency(null);
    };
    Player.prototype.loadCharacter = function (quest) {
        // Set the quest
        this.setQuest(quest);
        // Add the quest entity weapon
        this.addQuestEntityWeapon(this.getQuestEntityWeapon(this.getQuest()));
        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);
    };
    Player.prototype.loadMediumCharacter = function (quest, firstTime) {
        if (firstTime === void 0) { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.MEDIUM;
        // Load stuff common to all characters if it's the first time we load the character in this quest
        if (firstTime)
            this.loadCharacter(quest);
        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(11, 4));
        this.drawOnRenderArea();
        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(11, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(9, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(7, 1)), new CollisionBox(this, new Pos(4, 3), new Pos(3, 1))));
        // Transparent character
        this.setTransparency(new RenderTransparency(" ", "%"));
    };
    Player.prototype.loadMediumSqueezedCharacter = function (quest, firstTime) {
        if (firstTime === void 0) { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.MEDIUM_SQUEEZED;
        // Load stuff common to all characters if it's the first time we load the character in this quest
        if (firstTime)
            this.loadCharacter(quest);
        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(6, 3));
        this.drawOnRenderArea();
        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(2, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(6, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(2, 1))));
        // Transparent character
        this.setTransparency(new RenderTransparency(" ", "%"));
    };
    Player.prototype.magicHealthRegain = function () {
        // If we're not questing
        if (this.game.getWeAreQuesting() == false) {
            var hpBonus = Math.ceil((1 - Math.exp(-this.game.getCandiesEaten().getCurrent() / 400000000)) * 500);
            if (hpBonus < 1)
                hpBonus = 1; // We need to gain at least one hp each second
            this.setHp(this.getHp() + hpBonus);
        }
    };
    Player.prototype.move = function (pos, force) {
        if (force === void 0) { force = false; }
        // Position
        var posToUse = pos.copy();
        // If we are wearing the boots of introspection and we would collide by going below, we don't move horizontally and the movement isn't forced
        if (posToUse.x != 0 && this.game.isEquipped("boots", "eqItemBootsBootsOfIntrospection") && this.checkCollision(new Pos(0, 1)) == true && force == false)
            posToUse.x = 0;
        return _super.prototype.move.call(this, posToUse, force);
    };
    Player.prototype.moveWormsLike = function (pos) {
        // Position
        var posToUse = pos.copy();
        // If we are wearing the boots of introspection and we would collide by going below, we don't move horizontally
        if (posToUse.x != 0 && this.game.isEquipped("boots", "eqItemBootsBootsOfIntrospection") && this.checkCollision(new Pos(0, 1)) == true)
            posToUse.x = 0;
        return _super.prototype.moveWormsLike.call(this, posToUse);
    };
    Player.prototype.reCalcMaxHp = function () {
        // Base maximum hp : 100
        var maxHp = 100;
        // We add to the base, depending on how much candies eaten, if we're not playing in hard mode
        if (Saving.loadString("gameGameMode") != "hard") {
            maxHp += Math.ceil((1 - Math.exp(-this.game.getCandiesEaten().getCurrent() / 3000)) * 100) + Math.ceil((1 - Math.exp(-this.game.getCandiesEaten().getCurrent() / 400000)) * 800);
        }
        // We add 300 if we have the heart pendant
        if (Saving.loadBool("gridItemPossessedHeartPendant"))
            maxHp += 300;
        // We add 20% if we have the heart plug
        if (Saving.loadBool("gridItemPossessedHeartPlug"))
            maxHp = Math.ceil(maxHp * 1.2);
        // Health gift
        if (Saving.loadNumber("gameGiftHealth") > 0) {
            maxHp = maxHp + maxHp * (Saving.loadNumber("gameGiftHealth") / 5);
        }
        // We finally set the value we calculated
        this.setMaxHp(maxHp);
        // We update the status bar
        this.game.updateStatusBar();
    };
    Player.prototype.save = function () {
        Saving.saveNumber("playerHp", this.getHp());
    };
    Player.prototype.shouldDie = function () {
        // We use the method of our mother class PLUS we're also dead if out of area
        if (_super.prototype.shouldDie.call(this) || this.getOutOfArea())
            return true;
        return false;
    };
    Player.prototype.squeeze = function () {
        // Do different things depending on the current character type
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                // We squeeze
                this.loadCandyBoxSqueezedCharacter(this.getQuest(), false);
                this.move(new Pos(1, 0), true);
                // We add a message to the log
                this.game.getQuestLog().addMessage(new QuestLogMessage("You squeezed!"));
                break;
            case PlayerCharacterType.MEDIUM:
                // We squeeze
                this.loadMediumSqueezedCharacter(this.getQuest(), false);
                this.move(new Pos(2, 1), true);
                // We add a message to the log
                this.game.getQuestLog().addMessage(new QuestLogMessage("You squeezed!"));
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                // We unsqueeze
                this.loadCandyBoxCharacter(this.getQuest(), false);
                this.move(new Pos(-1, 0), true);
                // If there's a collision
                if (this.checkCollision()) {
                    // We squeeze again
                    this.loadCandyBoxSqueezedCharacter(this.getQuest(), false);
                    this.move(new Pos(1, 0), true);
                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You can't unsqueeze because there isn't enough space."));
                }
                else {
                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You unsqueezed!"));
                }
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                // We unsqueeze
                this.loadMediumCharacter(this.getQuest(), false);
                this.move(new Pos(-2, -1), true);
                // If there's a collision
                if (this.checkCollision()) {
                    // We squeeze again
                    this.loadMediumSqueezedCharacter(this.getQuest(), false);
                    this.move(new Pos(2, 1), true);
                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You can't unsqueeze because there isn't enough space."));
                }
                else {
                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You unsqueezed!"));
                }
                break;
        }
    };
    Player.prototype.stopBerserk = function () {
        // Mother class method
        _super.prototype.stopBerserk.call(this);
        // Update the render area
        this.drawOnRenderArea();
    };
    Player.prototype.stopTurtle = function () {
        // Mother class method
        _super.prototype.stopTurtle.call(this);
        // Update the render area
        this.drawOnRenderArea();
    };
    Player.prototype.update = function () {
        for (var savingName in this.game.getSelectedEqItems()) {
            this.game.getSelectedEqItems()[savingName].update(this, this.getQuest());
        }
        for (var savingName in this.game.getGridItems()) {
            if (Saving.loadBool(savingName))
                this.game.getGridItems()[savingName].update(this, this.getQuest());
        }
        _super.prototype.update.call(this);
    };
    // Public setters : they must be public, because sometimes we have to set these things (at loading for example)
    Player.prototype.setHp = function (hp) {
        _super.prototype.setHp.call(this, hp);
        this.game.updateStatusBar();
    };
    Player.prototype.setMaxHp = function (hp) {
        _super.prototype.setMaxHp.call(this, hp);
        this.game.updateStatusBar();
    };
    // Private methods
    Player.prototype.drawOnRenderArea = function () {
        // Erase the render area
        this.getRenderArea().resetAllButSize();
        // Draw depending on the type
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawString("TUR");
                else if (this.getTurtle())
                    this.getRenderArea().drawString("tur");
                else if (this.getBerserk())
                    this.getRenderArea().drawString("O_O");
                else
                    this.getRenderArea().drawString("\\o/");
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawString("T");
                else if (this.getTurtle())
                    this.getRenderArea().drawString("t");
                else if (this.getBerserk())
                    this.getRenderArea().drawString("B");
                else
                    this.getRenderArea().drawString("o");
                break;
            case PlayerCharacterType.MEDIUM:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumTurtleBerserk"));
                else if (this.getTurtle())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumTurtle"));
                else if (this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumBerserk"));
                else
                    this.getRenderArea().drawArray(Database.getAscii("players/medium"));
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezedTurtleBerserk"));
                else if (this.getTurtle())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezedTurtle"));
                else if (this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezedBerserk"));
                else
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezed"));
                break;
        }
    };
    return Player;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var PolishedSilverSword = (function (_super) {
    __extends(PolishedSilverSword, _super);
    // Constructor
    function PolishedSilverSword() {
        _super.call(this, "eqItemWeaponPolishedSilverSword", "eqItemWeaponPolishedSilverSwordName", "eqItemWeaponPolishedSilverSwordDescription", "eqItems/weapons/polishedSilverSword");
    }
    // Public getters
    PolishedSilverSword.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A polished silver sword", "a polished silver sword"), player.getClassicCollisionBoxCollection(), 7);
        qew.getCloseCombatDelay().setFixedDelay(4, 0);
        return qew;
    };
    return PolishedSilverSword;
})(EqItem);
var PondLine = (function () {
    // Constructor
    function PondLine(x1, x2) {
        // Is the line currently used by a lolligator ?
        this.isUsed = false;
        this.x1 = x1;
        this.x2 = x2;
    }
    // Public getters
    PondLine.prototype.getIsUsed = function () {
        return this.isUsed;
    };
    PondLine.prototype.getX1 = function () {
        return this.x1;
    };
    PondLine.prototype.getX2 = function () {
        return this.x2;
    };
    // Public setters
    PondLine.prototype.setIsUsed = function (isUsed) {
        this.isUsed = isUsed;
    };
    return PondLine;
})();
var PondLolligator = (function () {
    // Constructor
    function PondLolligator(pondLines, pondLineIndex) {
        // Out width
        this.width = 13;
        // Set from the parameters
        this.pondLines = pondLines;
        this.pondLineIndex = pondLineIndex;
        // Set the orientation (randomly)
        this.isLeft = Random.flipACoin();
        // Set the position (depending on the orientation)
        if (this.isLeft == false)
            this.x = this.pondLines[this.pondLineIndex].getX1();
        else
            this.x = this.pondLines[this.pondLineIndex].getX2() - this.width;
        // At first, we're not fully visible
        this.visibleType = PondLolligatorVisibleType.NOT_FULLY_VISIBLE_YET;
        // Set isUsed for the pond lines we use
        this.setIsUsedForPondLines(true);
    }
    // Public methods
    PondLolligator.prototype.draw = function (renderArea, x, y) {
        renderArea.drawArray(Database.getAscii("places/lollipopFarm/lolligator" + (this.isLeft ? "Left" : "Right") + (this.visibleType == PondLolligatorVisibleType.FULLY_VISIBLE ? "Full" : "Top")), x + this.x, y + this.pondLineIndex);
    };
    PondLolligator.prototype.move = function () {
        // If the lolligator is facing left, then it goes to the left
        if (this.isLeft) {
            this.x -= 1;
            // If we're not fully visible but we should be
            if (this.visibleType == PondLolligatorVisibleType.NOT_FULLY_VISIBLE_YET && this.x + this.width < this.pondLines[this.pondLineIndex].getX2() - 2 && Random.oneChanceOutOf(5))
                this.visibleType = PondLolligatorVisibleType.FULLY_VISIBLE;
            else if (this.visibleType == PondLolligatorVisibleType.FULLY_VISIBLE && (this.x < this.pondLines[this.pondLineIndex].getX1() + 2 || Random.oneChanceOutOf(2)))
                this.visibleType = PondLolligatorVisibleType.NOT_FULLY_VISIBLE_ANYMORE;
        }
        else {
            this.x += 1;
            // If we're not fully visible but we should be
            if (this.visibleType == PondLolligatorVisibleType.NOT_FULLY_VISIBLE_YET && this.x > this.pondLines[this.pondLineIndex].getX1() + 2 && Random.oneChanceOutOf(5))
                this.visibleType = PondLolligatorVisibleType.FULLY_VISIBLE;
            else if (this.visibleType == PondLolligatorVisibleType.FULLY_VISIBLE && (this.x + this.width > this.pondLines[this.pondLineIndex].getX2() - 2 || Random.oneChanceOutOf(2)))
                this.visibleType = PondLolligatorVisibleType.NOT_FULLY_VISIBLE_ANYMORE;
        }
    };
    // Called to know if the lolligator should be deleted or not
    PondLolligator.prototype.shouldBeDeleted = function () {
        // It depends on the orientation
        if (this.isLeft == false) {
            // If we're too much on the right, return true
            if (this.x + this.width > this.pondLines[this.pondLineIndex].getX2())
                return true;
            return false;
        }
        else {
            // If we're too much on the left, return true
            if (this.x < this.pondLines[this.pondLineIndex].getX1())
                return true;
            return false;
        }
    };
    // Called just before the lolligator is deleted
    PondLolligator.prototype.willBeDeleted = function () {
        this.setIsUsedForPondLines(false);
    };
    // Private setters
    PondLolligator.prototype.setIsUsedForPondLines = function (isUsed) {
        // Set for the line of the lolligator
        this.pondLines[this.pondLineIndex].setIsUsed(isUsed);
        // Set for the line above if there's a line above
        if (this.pondLineIndex > 0)
            this.pondLines[this.pondLineIndex - 1].setIsUsed(isUsed);
    };
    return PondLolligator;
})();
var PondLolligatorVisibleType;
(function (PondLolligatorVisibleType) {
    PondLolligatorVisibleType[PondLolligatorVisibleType["NOT_FULLY_VISIBLE_YET"] = 0] = "NOT_FULLY_VISIBLE_YET";
    PondLolligatorVisibleType[PondLolligatorVisibleType["FULLY_VISIBLE"] = 1] = "FULLY_VISIBLE";
    PondLolligatorVisibleType[PondLolligatorVisibleType["NOT_FULLY_VISIBLE_ANYMORE"] = 2] = "NOT_FULLY_VISIBLE_ANYMORE";
})(PondLolligatorVisibleType || (PondLolligatorVisibleType = {}));
var Pos = (function () {
    // Constructor
    function Pos(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this.x = x;
        this.y = y;
    }
    // Public methods
    Pos.prototype.add = function (pos) {
        this.x += pos.x;
        this.y += pos.y;
    };
    Pos.prototype.copy = function () {
        return new Pos(this.x, this.y);
    };
    Pos.prototype.getDistance = function (pos) {
        return new Pos(this.x - pos.x, this.y - pos.y);
    };
    Pos.prototype.invert = function () {
        var temp = this.x;
        this.x = this.y;
        this.y = temp;
    };
    Pos.prototype.multiply = function (pos) {
        this.x = this.x * pos.x;
        this.y = this.y * pos.y;
        return this;
    };
    Pos.prototype.plus = function (pos) {
        return new Pos(this.x + pos.x, this.y + pos.y);
    };
    return Pos;
})();
var QuestEntityAnimation = (function () {
    // Constructor
    function QuestEntityAnimation(intervalTime, currentTime, currentAsciiIndex) {
        var asciiNames = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            asciiNames[_i - 3] = arguments[_i];
        }
        this.intervalTime = intervalTime;
        this.currentTime = currentTime;
        this.currentAsciiIndex = currentAsciiIndex;
        this.asciiNames = asciiNames;
    }
    // Public methods
    QuestEntityAnimation.prototype.draw = function (renderArea) {
        renderArea.drawArray(Database.getAscii(this.asciiNames[this.currentAsciiIndex]));
    };
    QuestEntityAnimation.prototype.shouldUpdateRenderAreaAtThisFrame = function () {
        return (this.currentTime == this.intervalTime);
    };
    QuestEntityAnimation.prototype.update = function () {
        this.currentTime += 1;
        if (this.currentTime > this.intervalTime) {
            this.currentTime = 0;
            this.currentAsciiIndex += 1;
            if (this.currentAsciiIndex >= this.asciiNames.length)
                this.currentAsciiIndex = 0;
        }
    };
    // Public getters
    QuestEntityAnimation.prototype.getCurrentAsciiIndex = function () {
        return this.currentAsciiIndex;
    };
    return QuestEntityAnimation;
})();
var QuestEntityDamageReason = (function () {
    // Constructor
    function QuestEntityDamageReason(whoType, whatType) {
        // Additional parameters, depeding on the who type
        // NATURE : no parameter
        // ENTITY
        this.questEntity = null;
        this.questEntityTeam = null;
        // Additional parameters, depeding on the what type
        // WEAPON
        this.questEntityWeapon = null;
        // SPELL
        this.spellNaming = null;
        this.whoType = whoType;
        this.whatType = whatType;
    }
    // Public methods
    QuestEntityDamageReason.prototype.getQuestEntityTeam = function () {
        return this.questEntityTeam;
    };
    QuestEntityDamageReason.prototype.getWhatNaming = function () {
        switch (this.whatType) {
            case QuestEntityDamageReasonWhatType.WEAPON:
                return this.questEntityWeapon.getNaming();
                break;
            case QuestEntityDamageReasonWhatType.SPELL:
                return this.spellNaming;
                break;
        }
    };
    QuestEntityDamageReason.prototype.getWhoNaming = function () {
        switch (this.whoType) {
            case QuestEntityDamageReasonWhoType.NATURE:
                return new Naming("Nature", "nature");
                break;
            case QuestEntityDamageReasonWhoType.ENTITY:
                return this.questEntity.getNaming();
                break;
        }
    };
    // Public setters
    QuestEntityDamageReason.prototype.setQuestEntity = function (questEntity, questEntityTeam) {
        if (questEntityTeam === void 0) { questEntityTeam = null; }
        this.questEntity = questEntity;
        if (questEntityTeam == null)
            this.questEntityTeam = questEntity.getTeam();
        else
            this.questEntityTeam = questEntityTeam;
        return this;
    };
    QuestEntityDamageReason.prototype.setQuestEntityWeapon = function (questEntityWeapon) {
        this.questEntityWeapon = questEntityWeapon;
        return this;
    };
    QuestEntityDamageReason.prototype.setSpellNaming = function (naming) {
        this.spellNaming = naming;
        return this;
    };
    return QuestEntityDamageReason;
})();
var QuestEntityDamageReasonWhatType;
(function (QuestEntityDamageReasonWhatType) {
    QuestEntityDamageReasonWhatType[QuestEntityDamageReasonWhatType["WEAPON"] = 0] = "WEAPON";
    QuestEntityDamageReasonWhatType[QuestEntityDamageReasonWhatType["SPELL"] = 1] = "SPELL";
})(QuestEntityDamageReasonWhatType || (QuestEntityDamageReasonWhatType = {}));
var QuestEntityDamageReasonWhoType;
(function (QuestEntityDamageReasonWhoType) {
    QuestEntityDamageReasonWhoType[QuestEntityDamageReasonWhoType["NATURE"] = 0] = "NATURE";
    QuestEntityDamageReasonWhoType[QuestEntityDamageReasonWhoType["ENTITY"] = 1] = "ENTITY";
})(QuestEntityDamageReasonWhoType || (QuestEntityDamageReasonWhoType = {}));
var QuestEntityHealthBarPositionType;
(function (QuestEntityHealthBarPositionType) {
    QuestEntityHealthBarPositionType[QuestEntityHealthBarPositionType["RELATIVE"] = 0] = "RELATIVE";
    QuestEntityHealthBarPositionType[QuestEntityHealthBarPositionType["FIXED"] = 1] = "FIXED";
    QuestEntityHealthBarPositionType[QuestEntityHealthBarPositionType["FIXED_ON_PAGE"] = 2] = "FIXED_ON_PAGE"; // The position of the bar is fixd in the quest and not affected by scrolling
})(QuestEntityHealthBarPositionType || (QuestEntityHealthBarPositionType = {}));
var QuestEntityHealthBar = (function () {
    // Constructor
    function QuestEntityHealthBar(questEntity, barSize, position, // By default, the bar will be above the entity
        positionType, drawEvenIfFull, showText, barType) {
        if (position === void 0) { position = new Pos(0, -1); }
        if (positionType === void 0) { positionType = QuestEntityHealthBarPositionType.RELATIVE; }
        if (drawEvenIfFull === void 0) { drawEvenIfFull = false; }
        if (showText === void 0) { showText = false; }
        if (barType === void 0) { barType = BarType.UNICOLOR_HEALTH; }
        // Create the bar
        this.bar = new Bar(barType);
        // Set the parameters
        this.setBarSize(barSize);
        this.questEntity = questEntity;
        this.position = position;
        this.positionType = positionType;
        this.drawEvenIfFull = drawEvenIfFull;
        this.showText = showText;
        // Update for the first time
        this.update();
    }
    // Public methods
    QuestEntityHealthBar.prototype.draw = function (renderArea) {
        // Draw if we should be drawn
        if (this.shouldBeDrawn) {
            switch (this.positionType) {
                case QuestEntityHealthBarPositionType.FIXED_ON_PAGE:
                    renderArea.drawArea(this.bar, ((this.questEntity.getQuest().getRenderArea().getWidth() - 100) - this.questEntity.getQuest().getGap()) / 2 + this.questEntity.getQuest().getRealQuestPosition().x + this.position.x + this.questEntity.getQuest().getGlobalDrawingOffset().x, this.questEntity.getQuest().getRealQuestPosition().y + this.position.y + this.questEntity.getQuest().getGlobalDrawingOffset().y, new RenderTransparency(" "));
                    break;
                case QuestEntityHealthBarPositionType.FIXED:
                    renderArea.drawArea(this.bar, this.questEntity.getQuest().getRealQuestPosition().x + this.position.x + this.questEntity.getQuest().getGlobalDrawingOffset().x, this.questEntity.getQuest().getRealQuestPosition().y + this.position.y + this.questEntity.getQuest().getGlobalDrawingOffset().y, new RenderTransparency(" "));
                    break;
                case QuestEntityHealthBarPositionType.RELATIVE:
                    if (this.questEntity.getQuest().getRealQuestPosition().x + this.questEntity.getGlobalPosition().x + this.position.x > 0 &&
                        this.questEntity.getQuest().getRealQuestPosition().x + this.questEntity.getGlobalPosition().x + this.position.x + this.bar.getWidth() <= renderArea.getWidth() &&
                        this.questEntity.getGlobalPosition().y + this.position.y > 0 &&
                        this.questEntity.getGlobalPosition().y + this.position.y <= this.questEntity.getQuest().getRealQuestSize().y // And at the bottom
                    ) {
                        renderArea.drawArea(this.bar, this.questEntity.getQuest().getRealQuestPosition().x + this.questEntity.getGlobalPosition().x + this.position.x + this.questEntity.getQuest().getGlobalDrawingOffset().x, this.questEntity.getQuest().getRealQuestPosition().y + this.questEntity.getGlobalPosition().y + this.position.y + this.questEntity.getQuest().getGlobalDrawingOffset().y, new RenderTransparency(" "));
                    }
                    break;
            }
        }
    };
    QuestEntityHealthBar.prototype.update = function () {
        // If we should draw the bar even if full or it isn't full, then we set that we should draw it
        if (this.drawEvenIfFull || this.questEntity.getHp() / this.questEntity.getMaxHp() != 1) {
            this.shouldBeDrawn = true;
        }
        else
            this.shouldBeDrawn = false;
        // Update the bar only if it should be draw
        if (this.shouldBeDrawn) {
            // If we don't have to show text
            if (this.showText == false)
                this.bar.update(this.questEntity.getHp() / this.questEntity.getMaxHp(), this.questEntity.getHp().toString());
            else
                this.bar.update(this.questEntity.getHp() / this.questEntity.getMaxHp(), this.questEntity.getNaming().getBeginning() + " : " + this.questEntity.getHp().toString() + "/" + this.questEntity.getMaxHp().toString());
        }
    };
    // Public setters
    QuestEntityHealthBar.prototype.setBarSize = function (barSize) {
        this.barSize = barSize;
        this.bar.resize(this.barSize.x, this.barSize.y);
    };
    QuestEntityHealthBar.prototype.setDrawEvenIfFull = function (value) {
        this.drawEvenIfFull = value;
    };
    return QuestEntityHealthBar;
})();
var QuestEntityMovement = (function () {
    // Constructor
    function QuestEntityMovement(offset, intervalTime, currentTime) {
        if (offset === void 0) { offset = new Pos(0, 0); }
        if (intervalTime === void 0) { intervalTime = 0; }
        if (currentTime === void 0) { currentTime = 0; }
        // Special bools
        this.gravity = false; // If true, then the entity which has this movement is affected by gravity
        this.wormsLike = false; // If true, then the entity which has this movement will move like a worms (in the Team 17 games) : it can climb steps of one character and don't "fall" if the go down of just one character
        this.offset = offset;
        this.intervalTime = intervalTime;
        this.currentTime = currentTime;
    }
    // Public methods
    QuestEntityMovement.prototype.shouldMoveAtThisFrame = function () {
        return (this.currentTime == this.intervalTime);
    };
    QuestEntityMovement.prototype.update = function () {
        this.currentTime += 1;
        if (this.currentTime > this.intervalTime)
            this.currentTime = 0;
    };
    // Public getters
    QuestEntityMovement.prototype.getCurrentFrameMovement = function () {
        if (this.shouldMoveAtThisFrame())
            return this.offset;
        else
            return new Pos(0, 0);
    };
    QuestEntityMovement.prototype.getGravity = function () {
        return this.gravity;
    };
    QuestEntityMovement.prototype.getOffset = function () {
        return this.offset;
    };
    QuestEntityMovement.prototype.getWormsLike = function () {
        return this.wormsLike;
    };
    // Public setters
    QuestEntityMovement.prototype.setGravity = function (value) {
        this.gravity = value;
    };
    QuestEntityMovement.prototype.setOffset = function (offset) {
        this.offset = offset;
    };
    QuestEntityMovement.prototype.setWormsLike = function (value) {
        this.wormsLike = value;
    };
    return QuestEntityMovement;
})();
var QuestEntitySpellCaster = (function () {
    // Constructor
    function QuestEntitySpellCaster(callbackCollection) {
        // The delay
        this.delay = new QuestEntityWeaponDelay();
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    QuestEntitySpellCaster.prototype.tryToCast = function () {
        if (this.delay.tryToAttack()) {
            this.callbackCollection.fire();
        }
    };
    // Public getters
    QuestEntitySpellCaster.prototype.getDelay = function () {
        return this.delay;
    };
    return QuestEntitySpellCaster;
})();
var QuestEntitySpellColor = (function () {
    // Constructor
    function QuestEntitySpellColor(quest, position, size, color) {
        this.quest = quest;
        this.position = position;
        this.size = size;
        this.color = color;
    }
    // Public methods
    QuestEntitySpellColor.prototype.draw = function (renderArea, areaPosition) {
        var x1;
        var x2;
        var y;
        for (var i = 0; i < this.size.y; i++) {
            // x1
            x1 = this.position.x + areaPosition.x;
            if (x1 < this.quest.getRealQuestPosition().x)
                x1 = this.quest.getRealQuestPosition().x;
            // x2
            x2 = this.position.x + areaPosition.x + this.size.x;
            if (x2 > this.quest.getRealQuestPosition().x + this.quest.getRealQuestSize().x)
                x2 = this.quest.getRealQuestPosition().x + this.quest.getRealQuestSize().x;
            // y
            y = this.position.y + areaPosition.y + i;
            if (x1 < x2 && y >= this.quest.getRealQuestPosition().y && y < this.quest.getRealQuestPosition().y + this.quest.getRealQuestSize().y) {
                renderArea.addBackgroundColor(x1, x2, y, this.color);
            }
        }
    };
    return QuestEntitySpellColor;
})();
var QuestEntityTeam;
(function (QuestEntityTeam) {
    QuestEntityTeam[QuestEntityTeam["PLAYER"] = 0] = "PLAYER";
    QuestEntityTeam[QuestEntityTeam["MOBS"] = 1] = "MOBS";
    QuestEntityTeam[QuestEntityTeam["NATURE"] = 2] = "NATURE";
})(QuestEntityTeam || (QuestEntityTeam = {}));
var QuestEntityWeaponDelay = (function () {
    // Constructor
    function QuestEntityWeaponDelay() {
        // By default, the type is FIXED and the maxDelay is 0
        this.type = QuestEntityWeaponDelayType.FIXED;
        this.currentDelay = 0;
        this.maxDelay = 0;
    }
    // Public methods
    QuestEntityWeaponDelay.prototype.getText = function () {
        // Create the delay var
        var delay;
        // Set the delay we should use
        if (this.type == QuestEntityWeaponDelayType.BETWEEN)
            delay = Math.floor(this.minBetweenDelay + (this.maxBetweenDelay - this.minBetweenDelay) / 2);
        else
            delay = this.maxDelay;
        // Return the text depending on this delay
        switch (delay) {
            case 0:
                return "incredibly fast";
                break;
            case 1:
                return "very fast";
                break;
            case 2:
                return "fast";
                break;
            case 3:
                return "rather fast";
                break;
            case 4: return "medium speed";
            case 5:
                return "rather slow";
                break;
            case 6:
            case 7:
                return "slow";
                break;
            case 8:
            case 9:
                return "very slow";
                break;
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                return "incredibly slow";
                break;
            default:
                "couldn't be slower";
                break;
        }
    };
    QuestEntityWeaponDelay.prototype.tryToAttack = function () {
        // We increase the current delay
        this.currentDelay++;
        switch (this.type) {
            case QuestEntityWeaponDelayType.FIXED:
                // If it's time to attack
                if (this.currentDelay > this.maxDelay) {
                    this.currentDelay = 0;
                    return true;
                }
                break;
            case QuestEntityWeaponDelayType.BETWEEN:
                // If it's time to attack
                if (this.currentDelay > this.maxDelay) {
                    this.currentDelay = 0;
                    this.chooseBetweenDelay();
                    return true;
                }
                break;
            case QuestEntityWeaponDelayType.ONCE_THEN_WAIT:
                // If it's time to attack
                if (this.currentDelay > this.maxDelay) {
                    return true;
                }
                break;
        }
        return false;
    };
    QuestEntityWeaponDelay.prototype.setBetweenDelay = function (minBetweenDelay, maxBetweenDelay, currentDelay) {
        if (currentDelay === void 0) { currentDelay = 0; }
        this.type = QuestEntityWeaponDelayType.BETWEEN;
        this.minBetweenDelay = minBetweenDelay;
        this.maxBetweenDelay = maxBetweenDelay;
        this.chooseBetweenDelay();
    };
    QuestEntityWeaponDelay.prototype.setFixedDelay = function (maxDelay, currentDelay) {
        if (maxDelay === void 0) { maxDelay = 0; }
        if (currentDelay === void 0) { currentDelay = 0; }
        this.type = QuestEntityWeaponDelayType.FIXED;
        this.maxDelay = maxDelay;
        this.currentDelay = currentDelay;
    };
    QuestEntityWeaponDelay.prototype.setOnceThenWaitDelay = function (maxDelay, currentDelay) {
        if (maxDelay === void 0) { maxDelay = 0; }
        if (currentDelay === void 0) { currentDelay = 0; }
        this.type = QuestEntityWeaponDelayType.ONCE_THEN_WAIT;
        this.maxDelay = maxDelay;
        this.currentDelay = currentDelay;
    };
    QuestEntityWeaponDelay.prototype.theWeaponAttacked = function () {
        if (this.type == QuestEntityWeaponDelayType.ONCE_THEN_WAIT)
            this.currentDelay = 0;
    };
    // Private methods
    QuestEntityWeaponDelay.prototype.chooseBetweenDelay = function () {
        this.maxDelay = Random.between(this.minBetweenDelay, this.maxBetweenDelay);
    };
    return QuestEntityWeaponDelay;
})();
var QuestEntityWeaponDelayType;
(function (QuestEntityWeaponDelayType) {
    QuestEntityWeaponDelayType[QuestEntityWeaponDelayType["FIXED"] = 0] = "FIXED";
    QuestEntityWeaponDelayType[QuestEntityWeaponDelayType["BETWEEN"] = 1] = "BETWEEN";
    QuestEntityWeaponDelayType[QuestEntityWeaponDelayType["ONCE_THEN_WAIT"] = 2] = "ONCE_THEN_WAIT"; // We can attack immediately once, but then we have to wait for another attack
})(QuestEntityWeaponDelayType || (QuestEntityWeaponDelayType = {}));
var QuestItemFound = (function () {
    // Constructor
    function QuestItemFound(quest, savingName, foundText, getText) {
        this.quest = quest;
        this.savingName = savingName;
        this.foundText = foundText;
        this.getText = getText;
    }
    // Public methods
    QuestItemFound.prototype.found = function () {
        this.quest.getGame().getQuestLog().addMessage(new QuestLogMessage(this.foundText, null, true));
    };
    QuestItemFound.prototype.get = function () {
        this.quest.getGame().getQuestLog().addMessage(new QuestLogMessage(this.getText, null, true));
    };
    // Public getters    
    QuestItemFound.prototype.getSavingName = function () {
        return this.savingName;
    };
    return QuestItemFound;
})();
var QuestLogMessage = (function () {
    // Constructor
    function QuestLogMessage(left, right, bold) {
        if (right === void 0) { right = null; }
        if (bold === void 0) { bold = false; }
        // Strings
        this.left = null;
        this.right = null;
        // Set the parameters
        this.left = left;
        this.right = right;
        this.bold = bold;
        // If the left string is too big
        if (this.left.length > 100 - (this.right != null ? this.right.length : 0)) {
            this.left = this.left.substr(0, 100 - (this.right != null ? this.right.length : 0) - 7) + " (...)";
        }
    }
    // Public methods
    QuestLogMessage.prototype.draw = function (renderArea, pos, width) {
        if (this.left != null) {
            renderArea.drawString(this.left, pos.x, pos.y);
            if (this.bold)
                renderArea.addBold(pos.x, pos.x + this.left.length, pos.y);
        }
        if (this.right != null) {
            renderArea.drawString(this.right, pos.x + width - this.right.length, pos.y);
            if (this.bold)
                renderArea.addBold(pos.x + width - this.right.length, width, pos.y);
        }
    };
    return QuestLogMessage;
})();
var QuestLog = (function () {
    // Constructor
    function QuestLog() {
        // Array of messages contained in the quest log
        this.messages = [];
    }
    // Public method
    QuestLog.prototype.addDelimiter = function () {
        this.messages.push(new QuestLogMessage("----------------------------------------------------------------------------------------------------"));
        this.messages.push(new QuestLogMessage(""));
    };
    QuestLog.prototype.addMessage = function (message) {
        // We add the message
        this.messages.push(message);
        // We check the log size
        this.checkLogSize();
    };
    QuestLog.prototype.draw = function (renderArea, pos) {
        // We draw the lines
        renderArea.drawHorizontalLine("-", pos.x, pos.x + 100, pos.y);
        renderArea.drawHorizontalLine("-", pos.x, pos.x + 100, pos.y + 11);
        // We draw the messages
        for (var i = 0; i < this.messages.length; i++) {
            this.messages[i].draw(renderArea, new Pos(pos.x, 1 + pos.y + this.messages.length - 1 - i), 100);
        }
    };
    // Private methods
    QuestLog.prototype.checkLogSize = function () {
        if (this.messages.length > 10) {
            this.messages.splice(0, this.messages.length - 10);
        }
    };
    return QuestLog;
})();
var QuestPlayerSpellCountdownType;
(function (QuestPlayerSpellCountdownType) {
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["SPELLS"] = 0] = "SPELLS";
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["POTIONS"] = 1] = "POTIONS";
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["ITEM_CAPACITIES"] = 2] = "ITEM_CAPACITIES";
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["BLACKHOLE"] = 3] = "BLACKHOLE";
})(QuestPlayerSpellCountdownType || (QuestPlayerSpellCountdownType = {}));
// Potions
Saving.registerBool("questPlayerSpellHealthPotionHasSpell", false);
Saving.registerBool("questPlayerSpellTurtlePotionHasSpell", false);
Saving.registerBool("questPlayerSpellAntiGravityPotionHasSpell", false);
Saving.registerBool("questPlayerSpellBerserkPotionHasSpell", false);
Saving.registerBool("questPlayerSpellCloningPotionHasSpell", false);
Saving.registerBool("questPlayerSpellPPotionHasSpell", false);
Saving.registerBool("questPlayerSpellXPotionHasSpell", false);
Saving.registerNumber("questPlayerSpellHealthPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellAntiGravityPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellTurtlePotionQuantity", 0);
Saving.registerNumber("questPlayerSpellBerserkPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellCloningPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellPPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellXPotionQuantity", 0);
var QuestPlayerSpell = (function () {
    // Constructor
    function QuestPlayerSpell(quest, buttonClassName, buttonPosition, buttonText, buttonColor, callbackCollection, countdownType, countdownTime, underlinedLetter, hotkeyLetter, numberIdWichLimitsQuantity) {
        if (underlinedLetter === void 0) { underlinedLetter = null; }
        if (hotkeyLetter === void 0) { hotkeyLetter = null; }
        if (numberIdWichLimitsQuantity === void 0) { numberIdWichLimitsQuantity = null; }
        this.quest = quest;
        this.buttonClassName = buttonClassName;
        this.buttonPosition = buttonPosition;
        this.buttonText = buttonText;
        this.buttonColor = buttonColor;
        this.callbackCollection = callbackCollection;
        this.countdownType = countdownType;
        this.countdownTime = countdownTime;
        this.underlinedLetter = underlinedLetter;
        this.hotkeyLetter = hotkeyLetter;
        this.numberIdWichLimitsQuantity = numberIdWichLimitsQuantity;
    }
    // Public methods
    QuestPlayerSpell.prototype.draw = function (renderArea, position) {
        // Set the text
        var text = this.buttonText;
        // Possibly modify the text depending on numberIdWichLimitsQuantity
        if (this.numberIdWichLimitsQuantity != null) {
            if (Saving.loadNumber(this.numberIdWichLimitsQuantity) <= 999)
                text += " " + Saving.loadNumber(this.numberIdWichLimitsQuantity);
            else
                text += " 999+";
        }
        // Add the button
        renderArea.addAsciiRealButton(text, position.x + this.buttonPosition.x, position.y + this.buttonPosition.y, this.buttonClassName + " keepBlackTextWhenInverted", "", false, this.underlinedLetter, this.buttonColor);
        // Add the link
        renderArea.addLinkCall("." + this.buttonClassName, new CallbackCollection(this.cast.bind(this)));
    };
    QuestPlayerSpell.prototype.getHotkey = function () {
        return new Hotkey(this.hotkeyLetter, new CallbackCollection(this.cast.bind(this)));
    };
    // Public getters
    QuestPlayerSpell.prototype.getButtonPosition = function () {
        return this.buttonPosition;
    };
    // Private methods
    QuestPlayerSpell.prototype.cast = function () {
        var canWeCast = true;
        // Ceck if the quest is ended to possibly set canWeCast to false
        if (this.quest.getQuestEnded())
            canWeCast = false;
        // Check the countdown to possibly set canWeCast to false
        if (canWeCast == true) {
            switch (this.countdownType) {
                case QuestPlayerSpellCountdownType.SPELLS:
                    if (this.quest.getPlayerSpellsCountdown() > 0)
                        canWeCast = false;
                    break;
                case QuestPlayerSpellCountdownType.POTIONS:
                    if (this.quest.getPlayerPotionsCountdown() > 0)
                        canWeCast = false;
                    break;
                case QuestPlayerSpellCountdownType.BLACKHOLE:
                    if (this.countdownTime <= 0)
                        canWeCast = false;
                    break;
                default: break;
            }
        }
        // Check the numberIdWichLimitsQuantity to possibly set canWeCast to false
        if (this.numberIdWichLimitsQuantity != null) {
            if (Saving.loadNumber(this.numberIdWichLimitsQuantity) <= 0) {
                canWeCast = false;
            }
        }
        // If we can cast
        if (canWeCast == true) {
            // Handle the countdown
            switch (this.countdownType) {
                case QuestPlayerSpellCountdownType.SPELLS:
                    this.quest.increasePlayerSpellsCountdown(this.countdownTime);
                    break;
                case QuestPlayerSpellCountdownType.POTIONS:
                    this.quest.increasePlayerPotionsCountdown(this.countdownTime);
                    break;
                case QuestPlayerSpellCountdownType.BLACKHOLE:
                    this.countdownTime -= 1;
                    break;
                default: break;
            }
            // Handle numberIdWichLimitsQuantity
            if (this.numberIdWichLimitsQuantity != null) {
                Saving.saveNumber(this.numberIdWichLimitsQuantity, Saving.loadNumber(this.numberIdWichLimitsQuantity) - 1);
            }
            // Fire the callback collection which was given to us
            this.callbackCollection.fire();
        }
    };
    return QuestPlayerSpell;
})();
var Random;
(function (Random) {
    function between(a, b) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 2)
            return b;
        return Math.floor(Math.random() * (b - a + 1)) + a;
    }
    Random.between = between;
    function flipACoin() {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 2)
            return true;
        if (Math.random() < 0.5)
            return false;
        return true;
    }
    Random.flipACoin = flipACoin;
    function fromArray(arr) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 4)
            return fromArray(["a", "b", "c", "d", -852, null, "aniwey", "ilovebugs", "42", 42]);
        return arr[upTo(arr.length - 1)];
    }
    Random.fromArray = fromArray;
    function fromPosition(pos) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 3)
            return new Pos(-pos.x, -pos.y);
        return new Pos(Random.upTo(pos.x), Random.upTo(pos.y));
    }
    Random.fromPosition = fromPosition;
    function oneChanceOutOf(n) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 1)
            return flipACoin();
        if (this.upTo(n - 1) == 0)
            return true;
        return false;
    }
    Random.oneChanceOutOf = oneChanceOutOf;
    function upTo(n) {
        // BUGS
        if (Bugs.getUltimateBugLevel() >= 3)
            return -n;
        return Math.floor(Math.random() * (n + 1));
    }
    Random.upTo = upTo;
})(Random || (Random = {}));
///<reference path="QuestEntity.ts"/>
var Rat = (function (_super) {
    __extends(Rat, _super);
    // Constructor
    function Rat(quest, pos) {
        _super.call(this, quest, pos, new Naming("A rat", "a rat"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(3);
        this.setHp(3);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/cellar/rat"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its teeth", "its teeth"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 2))), 1));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    // Public methods
    Rat.prototype.willDie = function () {
        // We find a candy
        if (Random.oneChanceOutOf(3))
            this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        else
            this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage()));
    };
    return Rat;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var RedEnchantedGloves = (function (_super) {
    __extends(RedEnchantedGloves, _super);
    // Constructor
    function RedEnchantedGloves() {
        _super.call(this, "eqItemGlovesRedEnchantedGloves", "eqItemGlovesRedEnchantedGlovesName", "eqItemGlovesRedEnchantedGlovesDescription", "eqItems/gloves/redEnchantedGloves");
        // The timer (to avoid casting fireballs too often..)
        this.currentTimer = 0;
        this.maxTimer = 5;
    }
    // Special ability
    RedEnchantedGloves.prototype.getSpecialAbility = function () {
        return "Randomly cast small fireballs around you (red enchanted gloves).";
    };
    // update
    RedEnchantedGloves.prototype.update = function (player, quest) {
        this.currentTimer += 1;
        // If the timer is ready
        if (this.currentTimer >= this.maxTimer) {
            // Cast the fireball
            this.castFireball(player, quest);
            // Reset the timer
            this.currentTimer = 0;
        }
    };
    // Private methods
    RedEnchantedGloves.prototype.castFireball = function (player, quest) {
        // Create the fireball
        var fireball = new Fireball(quest, player.getSpellCastingPosition(), new Naming("A small fireball", "a small fireball"), new Color(ColorType.RED_ENCHANTED_GLOVES_FIREBALL), new Pos(2, 1), 15, player.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A small fireball", "a small fireball")));
        // Set the direction
        fireball.setTargetTypeNoTarget(Algo.getRandomNotImmobileDirectionUpToThisSpeed(1).multiply(new Pos(2, 2)));
        // Add the entity
        quest.addEntity(fireball);
    };
    return RedEnchantedGloves;
})(EqItem);
var RenderLinkCallbackCollection = (function (_super) {
    __extends(RenderLinkCallbackCollection, _super);
    // Constructor
    function RenderLinkCallbackCollection(callbackCollection) {
        _super.call(this);
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    RenderLinkCallbackCollection.prototype.run = function () {
        this.callbackCollection.fire();
    };
    return RenderLinkCallbackCollection;
})(RenderLink);
var RenderLinkChange = (function (_super) {
    __extends(RenderLinkChange, _super);
    // Constructor
    function RenderLinkChange(element, callbackCollection) {
        _super.call(this);
        this.element = element;
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    RenderLinkChange.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        $(this.element).change(function (event) {
            renderLink.callbackCollection.fire();
            return false; // Avoid event bubbling
        });
    };
    return RenderLinkChange;
})(RenderLink);
var RenderLinkCheckbox = (function (_super) {
    __extends(RenderLinkCheckbox, _super);
    // Constructor
    function RenderLinkCheckbox(element, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked) {
        _super.call(this);
        this.element = element;
        this.callbackCollectionWhenChecked = callbackCollectionWhenChecked;
        this.callbackCollectionWhenUnchecked = callbackCollectionWhenUnchecked;
    }
    // Public methods
    RenderLinkCheckbox.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        // We set the change event
        $(this.element).change(function (event) {
            if ($(this).is(':checked')) {
                // We fire the callback collection
                renderLink.callbackCollectionWhenChecked.fire();
            }
            else {
                renderLink.callbackCollectionWhenUnchecked.fire();
            }
            return false; // Avoid event bubbling
        });
    };
    return RenderLinkCheckbox;
})(RenderLink);
var RenderLinkClick = (function (_super) {
    __extends(RenderLinkClick, _super);
    // Constructor
    function RenderLinkClick(element, callbackCollection) {
        _super.call(this);
        this.element = element;
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    RenderLinkClick.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        $(this.element).mouseup(function (event) {
            renderLink.callbackCollection.fire();
            return false; // Avoid event bubbling
        });
    };
    return RenderLinkClick;
})(RenderLink);
var RenderLinkInput = (function (_super) {
    __extends(RenderLinkInput, _super);
    // Constructor
    function RenderLinkInput(element, enigmaAnswer, callbackCollection, callbackCollectionWrong) {
        _super.call(this);
        this.element = element;
        this.enigmaAnswer = enigmaAnswer;
        this.callbackCollection = callbackCollection;
        this.callbackCollectionWrong = callbackCollectionWrong;
    }
    // Public methods
    RenderLinkInput.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        // We set the change event
        $(this.element).change(function (event) {
            // We check if the new value correspond to the answer (if it does we fire the callbacks)
            if (renderLink.enigmaAnswer.isRight($(this).val()))
                renderLink.callbackCollection.fire();
            else if (renderLink.callbackCollectionWrong != null) {
                renderLink.callbackCollectionWrong.fire();
            }
            // We empty the input area
            $(this).val("");
            return false; // Avoid event bubbling
        });
        // We set the focus
        $(this.element).focus();
    };
    return RenderLinkInput;
})(RenderLink);
var RenderLinkOnHoverShowTooltip = (function (_super) {
    __extends(RenderLinkOnHoverShowTooltip, _super);
    // Constructor
    function RenderLinkOnHoverShowTooltip(classHover, classTooltip) {
        _super.call(this);
        this.classHover = classHover;
        this.classTooltip = classTooltip;
    }
    // Public methods
    RenderLinkOnHoverShowTooltip.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        // If we hover on the classHover elements
        $(this.classHover).hover(function (event) {
            // We show the classTooltip tooltips
            $(renderLink.classTooltip).css({
                "display": "block"
            });
            // Avoid event bubbling
            return false;
        });
        // Else, if we're out of the classHover elements
        $(this.classHover).mouseout(function (event) {
            // We stop showing the classTooltip tooltips
            $(renderLink.classTooltip).css({
                display: "none"
            });
            // Avoid event bubbling
            return false;
        });
        // If the mouse moves, we put the classTooltip elements under the mouse
        $(this.classHover).on('mousemove', function (e) {
            $(renderLink.classTooltip).css({
                left: e.pageX - $(document).scrollLeft(),
                top: e.pageY - $(document).scrollTop()
            });
        });
    };
    return RenderLinkOnHoverShowTooltip;
})(RenderLink);
///<reference path="RenderLink.ts"/>
var RenderLinkOver = (function (_super) {
    __extends(RenderLinkOver, _super);
    // Constructor
    function RenderLinkOver(firstElement, secondElement) {
        _super.call(this);
        this.firstElement = firstElement;
        this.secondElement = secondElement;
    }
    // Public methods
    RenderLinkOver.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        $(this.firstElement).mouseenter(function (event) {
            $(renderLink.secondElement).show();
            return false; // Avoid event bubbling
        })
            .mouseleave(function (event) {
            $(renderLink.secondElement).hide();
            return false; // Avoid event bubbling
        });
        /*
        $(this.firstElement).hover(
            function(){
                $(renderLink.secondElement).css('visibility', 'visible');
            },
            function(){
                $(renderLink.secondElement).css('visibility', 'hidden');
            }
        );
        */
    };
    return RenderLinkOver;
})(RenderLink);
var RenderLinkSimpleInput = (function (_super) {
    __extends(RenderLinkSimpleInput, _super);
    // Constructor
    function RenderLinkSimpleInput(element, callbackCollection, defaultValue, hasFocus) {
        _super.call(this);
        this.element = element;
        this.callbackCollection = callbackCollection;
        this.defaultValue = defaultValue;
        this.hasFocus = hasFocus;
    }
    // Public methods
    RenderLinkSimpleInput.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;
        // If the default value isn't null
        if (this.defaultValue != null) {
            // We set the default value
            $(this.element).val(this.defaultValue);
        }
        // We set the change event
        $(this.element).change(function (event) {
            // We fire the callback collection
            renderLink.callbackCollection.fire();
            return false; // Avoid event bubbling
        });
        if (this.hasFocus)
            $(this.element).focus();
    };
    return RenderLinkSimpleInput;
})(RenderLink);
///<reference path="RenderTag.ts"/>
var RenderTagLt = (function (_super) {
    __extends(RenderTagLt, _super);
    // Constructor
    function RenderTagLt(x) {
        _super.call(this, x, "");
    }
    // Public methods
    RenderTagLt.prototype.clone = function () {
        return _super.prototype.clone.call(this);
    };
    RenderTagLt.prototype.draw = function (str) {
        // Instead of adding ourselves, we delete one character under the x position and then add the "&lt;"
        str = str.replaceAt(this.getX(), "&");
        return str.addAt(this.getX() + 1, "lt;");
    };
    return RenderTagLt;
})(RenderTag);
var RenderTransparency = (function () {
    // Constructor
    function RenderTransparency(alphaCharacter, metaAlphaCharacter) {
        if (metaAlphaCharacter === void 0) { metaAlphaCharacter = null; }
        this.alphaCharacter = alphaCharacter;
        this.metaAlphaCharacter = metaAlphaCharacter;
    }
    // Public getters
    RenderTransparency.prototype.getAlphaCharacter = function () {
        return this.alphaCharacter;
    };
    RenderTransparency.prototype.getMetaAlphaCharacter = function () {
        return this.metaAlphaCharacter;
    };
    return RenderTransparency;
})();
///<reference path="EqItem.ts"/>
var RocketBoots = (function (_super) {
    __extends(RocketBoots, _super);
    // Constructor
    function RocketBoots() {
        _super.call(this, "eqItemBootsRocketBoots", "eqItemBootsRocketBootsName", "eqItemBootsRocketBootsDescription", "eqItems/boots/rocketBoots");
    }
    // Special ability
    RocketBoots.prototype.getSpecialAbility = function () {
        return "Jump in mid-air without limit (rocket boots).";
    };
    return RocketBoots;
})(EqItem);
///<reference path="Place.ts"/>
///<reference path="main.ts"/>
var Save = (function (_super) {
    __extends(Save, _super);
    // Constructor
    function Save(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The currently selected slot (slot1 by default)
        this.selectedSlot = "slot1";
        // The last local autosave minute we drew (used to refresh the page at the right time)
        this.lastLocalAutosaveMinute = null;
        // Should we show the file save warning?
        this.showFileSaveWarning = false;
        // The textarea content
        this.fileSaveTextareaContent = null;
        // Resize
        this.resize();
        // Create the slots array
        this.createSlotsArray();
        // Update
        this.update();
    }
    // getRenderArea()
    Save.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willBeDisplayed()
    Save.prototype.willBeDisplayed = function () {
        // We resize (we must do this there and not in the constructor because the size depends on the translation)
        this.resize();
        // We add a callback : we will be updated every second (in order to show the correct time for the local autosave countdown)
        this.getGame().getOneSecondCallbackCollection().addCallback(this.oneSecondCallback.bind(this));
    };
    // Private methods
    Save.prototype.clickedAutosave = function () {
        // Save on the selected slot
        Saving.save(this.getGame(), MainLoadingType.LOCAL, this.selectedSlot);
        // Enable autosaving
        this.getGame().enableLocalAutosave(this.selectedSlot);
        // Re-create the slots array
        this.createSlotsArray();
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Save.prototype.clickedDisableAutosave = function () {
        // We disable auto saving
        this.getGame().disableLocalAutosave();
        // We update
        this.update();
        this.getGame().updatePlace();
    };
    Save.prototype.clickedFileLoad = function () {
        Main.reloadEverythingFromFile($(".saveFileLoadTextarea").val());
    };
    Save.prototype.clickedFileSave = function () {
        // Save some special variables by calling the save() methods of various objects
        this.getGame().save(); // Various variables owned by the game object
        this.getGame().getPlayer().save(); // The player
        // We now show the warning
        this.showFileSaveWarning = true;
        // Reset the textarea content
        this.fileSaveTextareaContent = "";
        // Write bools
        for (var str in Saving.getAllBools()) {
            if (this.fileSaveTextareaContent != "")
                this.fileSaveTextareaContent += ", "; // We add a comma if we're not adding the very first variable
            this.fileSaveTextareaContent += "bool " + str + "=" + Saving.boolToString(Saving.getAllBools()[str]);
        }
        // Write numbers
        for (var str in Saving.getAllNumbers()) {
            if (this.fileSaveTextareaContent != "")
                this.fileSaveTextareaContent += ", "; // We add a comma if we're not adding the very first variable
            this.fileSaveTextareaContent += "number " + str + "=" + Saving.numberToString(Saving.getAllNumbers()[str]);
        }
        // Write strings
        for (var str in Saving.getAllStrings()) {
            if (this.fileSaveTextareaContent != "")
                this.fileSaveTextareaContent += ", "; // We add a comma if we're not adding the very first variable
            this.fileSaveTextareaContent += "string " + str + "=" + Saving.getAllStrings()[str];
        }
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Save.prototype.clickedSave = function () {
        // Save on the selected slot
        Saving.save(this.getGame(), MainLoadingType.LOCAL, this.selectedSlot);
        // Re-create the slots array
        this.createSlotsArray();
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Save.prototype.createSlotsArray = function () {
        // Reset the array
        this.slotsArray = [];
        // Fill it
        for (var i = 1; i <= 5; i++) {
            this.slotsArray.push("slot" + i.toString());
            this.slotsArray.push("Slot " + i.toString() + " (" + LocalSaving.getSlotSummaryAsString("slot" + i.toString()) + ")");
        }
    };
    Save.prototype.drawGreen = function (text, x, y, translated) {
        if (translated === void 0) { translated = false; }
        this.renderArea.drawString(text, x, y, translated);
        this.renderArea.addColor(x, x + text.length, y, new Color(ColorType.SAVE_GREEN));
    };
    Save.prototype.drawLocalLoad = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;
        // Var we will use for link generation
        var link;
        // Title
        this.drawTitle("saveLocalLoadTitle", y + yAdd);
        // If we support local saving
        if (LocalSaving.supportsLocalSaving()) {
            // "You can load.."
            this.drawPoint("saveLocalLoadYouCan", x, y + yAdd + 2);
            if (Database.isTranslated())
                yAdd += 1;
            // The links
            for (var i = 1; i <= 5; i++) {
                link = "http://candybox2.net/?slot=" + i.toString();
                this.renderArea.addHtmlLink(x + 2, y + yAdd + 3 + i, link, link);
                this.renderArea.drawString("(slot " + i.toString() + ")", x + link.length + 4, y + yAdd + 3 + i);
            }
            // "Thanks to.."
            this.drawPoint("saveLocalLoadThanksTo", x, y + yAdd + 10);
            if (Database.isTranslated())
                yAdd += 1;
        }
        else {
            // Warning messages
            this.drawWarning(Database.getText("saveLocalSaveWarning0") + " (local storage and application cache)", x, y + yAdd + 2);
            this.drawWarning(Database.getText("saveLocalSaveWarning1"), x, y + yAdd + 3);
            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning0"), x, y + yAdd + 5, true);
            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning1"), x, y + yAdd + 6, true);
        }
        // Return yAdd
        return yAdd;
    };
    Save.prototype.drawLocalSave = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;
        // Title & why
        this.drawTitle("saveLocalSaveTitle", y + yAdd);
        this.drawPoint("saveLocalSaveWhy", x, y + yAdd + 2);
        if (Database.isTranslated())
            yAdd += 1;
        // If we support local saving
        if (LocalSaving.supportsLocalSaving()) {
            // Choose a slot text
            this.drawPoint("saveLocalSaveChooseSlot", x, y + yAdd + 4);
            // Slots list
            this.renderArea.addList(x + 5, x + 45, y + yAdd + 7, "saveLocalSaveSlotsList", new CallbackCollection(this.slotSelected.bind(this)), this.slotsArray);
            // Autosave enabled ?
            if (this.getGame().getLocalAutosaveEnabled()) {
                this.drawGreen(Database.getText("saveLocalSaveAutosaveEnabled"), x, y + yAdd + 9);
                if (Database.getTranslatedText("saveLocalSaveAutosaveEnabled") != "")
                    this.drawGreen("(" + Database.getTranslatedText("saveLocalSaveAutosaveEnabled") + ")", x, y + yAdd + 10, true);
                this.drawGreen("Next save in " + Algo.pluralFormat(Math.ceil(this.getGame().getLocalAutosaveTime() / 60), " minute", " minutes") + " on slot " + this.getGame().getLocalAutosaveSlot().substr(4, 1) + ".", x, y + yAdd + 11);
            }
            // Separation lines
            this.renderArea.drawVerticalLine("|", x + 50, y + yAdd + 5, y + yAdd + 11);
            this.renderArea.drawHorizontalLine("-", x, x + 100, y + yAdd + 3);
            this.renderArea.drawHorizontalLine("-", x, x + 100, y + yAdd + 12);
            // Choose what to do text
            this.drawPoint("saveLocalSaveChooseWhatToDo", x + 51, y + yAdd + 4);
            // Add save button
            this.renderArea.addAsciiRealButton(Database.getText("saveLocalSaveSaveButton") + " on slot " + this.selectedSlot.substr(4, 1), x + 51, y + yAdd + 7, "saveLocalSaveSaveButton", Database.getTranslatedText("saveLocalSaveSaveButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".saveLocalSaveSaveButton", new CallbackCollection(this.clickedSave.bind(this)));
            // If autosave is disabled or it's not enabled on the currently selected slot
            if (this.getGame().getLocalAutosaveEnabled() == false) {
                // Add autosave button
                this.renderArea.addAsciiRealButton(Database.getText("saveLocalSaveAutosaveButton") + " on slot " + this.selectedSlot.substr(4, 1), x + 51, y + yAdd + 10, "saveLocalSaveAutosaveButton", Database.getTranslatedText("saveLocalSaveAutosaveButton"), true, -1, null, false);
                this.renderArea.addLinkCall(".saveLocalSaveAutosaveButton", new CallbackCollection(this.clickedAutosave.bind(this)));
            }
            else {
                // Add disable autosave button
                this.renderArea.addAsciiRealButton(Database.getText("saveLocalSaveDisableAutosaveButton"), x + 51, y + yAdd + 10, "saveLocalSaveDisableAutosaveButton", Database.getTranslatedText("saveLocalSaveDisableAutosaveButton"), true, -1, null, false);
                this.renderArea.addLinkCall(".saveLocalSaveDisableAutosaveButton", new CallbackCollection(this.clickedDisableAutosave.bind(this)));
            }
        }
        else {
            // Warning messages
            this.drawWarning(Database.getText("saveLocalSaveWarning0") + " (local storage and application cache)", x, y + yAdd + 4);
            this.drawWarning(Database.getText("saveLocalSaveWarning1"), x, y + yAdd + 5);
            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning0"), x, y + yAdd + 7, true);
            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning1"), x, y + yAdd + 8, true);
        }
        // Return yAdd
        return yAdd;
    };
    Save.prototype.drawFileLoad = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;
        // Title
        this.drawTitle("saveFileLoadTitle", y + yAdd);
        // Instructions
        this.renderArea.drawString(Database.getText("saveFileLoadPaste"), x, y + yAdd + 2);
        this.renderArea.drawString(Database.getTranslatedText("saveFileLoadPaste"), x, y + yAdd + 3, true);
        // Add the text area
        this.renderArea.addTextarea(x + 2, y + yAdd + 5, 96, 6, "saveFileLoadTextarea");
        // Add the load button
        this.renderArea.addAsciiRealButton(Database.getText("saveFileLoadButton"), 48, y + yAdd + 13, "saveFileLoadButton", Database.getTranslatedText("saveFileLoadButton"), true);
        this.renderArea.addLinkCall(".saveFileLoadButton", new CallbackCollection(this.clickedFileLoad.bind(this)));
        // Return yAdd
        return yAdd;
    };
    Save.prototype.drawFileSave = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;
        // The title
        this.drawTitle("saveFileSaveTitle", y + yAdd);
        // The "why"
        this.renderArea.drawString(Database.getText("saveFileSaveWhy0"), x, y + yAdd + 2);
        this.renderArea.drawString(" - " + Database.getText("saveFileSaveWhy1"), x, y + yAdd + 3);
        this.renderArea.drawString(" - " + Database.getText("saveFileSaveWhy2"), x, y + yAdd + 4);
        this.renderArea.drawString(" - " + Database.getText("saveFileSaveWhy3"), x, y + yAdd + 5);
        this.renderArea.drawString("   " + Database.getText("saveFileSaveWhy4"), x, y + yAdd + 6);
        // The translated "why" (only if there's a translation)
        if (Database.isTranslated()) {
            this.renderArea.drawString(Database.getTranslatedText("saveFileSaveWhy0"), x, y + yAdd + 8, true);
            this.renderArea.drawString(" - " + Database.getTranslatedText("saveFileSaveWhy1"), x, y + yAdd + 9, true);
            this.renderArea.drawString(" - " + Database.getTranslatedText("saveFileSaveWhy2"), x, y + yAdd + 10, true);
            this.renderArea.drawString(" - " + Database.getTranslatedText("saveFileSaveWhy3"), x, y + yAdd + 11, true);
            this.renderArea.drawString("   " + Database.getTranslatedText("saveFileSaveWhy4"), x, y + yAdd + 12, true);
            yAdd += 6; // We increase yAdd by 6 because the translations took 6 lines
        }
        // Add the button
        this.renderArea.addAsciiRealButton(Database.getText("saveFileSaveButton"), 35, y + yAdd + 8, "saveFileSaveButton", Database.getTranslatedText("saveFileSaveButton"), true);
        this.renderArea.addLinkCall(".saveFileSaveButton", new CallbackCollection(this.clickedFileSave.bind(this)));
        // Add the text area
        this.renderArea.addTextarea(x + 2, y + yAdd + 11, 96, 6, "saveFileSaveTextarea", (this.fileSaveTextareaContent != null ? this.fileSaveTextareaContent : ""));
        // Should we show the warning?
        if (this.showFileSaveWarning) {
            this.drawWarning(Database.getText("saveFileSaveWarning"), x + 2, y + yAdd + 12);
            this.drawWarning(Database.getTranslatedText("saveFileSaveWarning"), x + 2, y + yAdd + 13, true);
        }
        // We return yAdd
        return yAdd;
    };
    Save.prototype.drawPoint = function (textName, x, y) {
        this.renderArea.drawString(Database.getText(textName), x, y);
        this.renderArea.drawString(Database.getTranslatedText(textName), x, y + 1, true);
    };
    Save.prototype.drawTitle = function (textName, y) {
        var x = 50 - Math.floor((Database.getText(textName).length / 2 + 1 + Database.getTranslatedText(textName).length / 2));
        this.renderArea.drawString(Database.getText(textName), x, y);
        this.renderArea.addBold(x, x + Database.getText(textName).length, y);
        this.renderArea.drawString(Database.getTranslatedText(textName), x + Database.getText(textName).length + 1, y, true);
    };
    Save.prototype.drawWarning = function (text, x, y, translated) {
        if (translated === void 0) { translated = false; }
        if (text != "") {
            this.renderArea.drawString(text, x, y, translated);
            this.renderArea.addColor(x, x + text.length, y, new Color(ColorType.SAVE_RED));
        }
    };
    Save.prototype.oneSecondCallback = function () {
        // If there's no last minute or it's different from the current minute
        if (this.lastLocalAutosaveMinute == null || this.lastLocalAutosaveMinute != Math.ceil(this.getGame().getLocalAutosaveTime() / 60)) {
            // We set the minute
            this.lastLocalAutosaveMinute = Math.ceil(this.getGame().getLocalAutosaveTime() / 60);
            // We update
            this.createSlotsArray();
            this.update();
            this.getGame().updatePlace();
        }
    };
    Save.prototype.resize = function () {
        // The size depends on if there's a translation or not
        if (Database.isTranslated())
            this.renderArea.resize(100, 84);
        else
            this.renderArea.resize(100, 74);
    };
    Save.prototype.selectRightSlot = function () {
        // We select the right slot
        $("#" + this.selectedSlot).prop('selected', true);
    };
    Save.prototype.slotSelected = function () {
        // Get the selected language id
        this.selectedSlot = $("#saveLocalSaveSlotsList").find(":selected").attr("id");
        // Update the ligthouse
        this.update();
        this.getGame().updatePlace();
    };
    Save.prototype.update = function () {
        var yPosition = 0; // The y position where we will add things. Can be incremented sometimes, depending on the user's language..
        // Erase everything
        this.renderArea.resetAllButSize();
        // Saving
        this.renderArea.drawArray(Database.getAscii("text/Saving"), 50 - Math.floor((Database.getAsciiWidth("text/Saving") / 2)), yPosition);
        yPosition += this.drawLocalSave(0, yPosition + 7);
        yPosition += this.drawFileSave(0, yPosition + 21);
        // Loading
        this.renderArea.drawArray(Database.getAscii("text/Loading"), 50 - Math.floor((Database.getAsciiWidth("text/Loading") / 2)), yPosition + 40);
        yPosition += this.drawLocalLoad(0, yPosition + 47);
        yPosition += this.drawFileLoad(0, yPosition + 59);
        // Add the link which will call the selectRightSlot method after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightSlot.bind(this)));
    };
    return Save;
})(Place);
///<reference path="EqItem.ts"/>
var Scythe = (function (_super) {
    __extends(Scythe, _super);
    // Constructor
    function Scythe() {
        _super.call(this, "eqItemWeaponScythe", "eqItemWeaponScytheName", "eqItemWeaponScytheDescription", "eqItems/weapons/scythe");
    }
    // Public getters
    Scythe.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A scythe", "a scythe"), player.getClassicCollisionBoxCollection(), 21);
        qew.getCloseCombatDelay().setFixedDelay(0);
        return qew;
    };
    return Scythe;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var Seahorse = (function (_super) {
    __extends(Seahorse, _super);
    // Constructor
    function Seahorse(quest, pos, intendedXPosition) {
        _super.call(this, quest, pos, new Naming("A magical seahorse", "a magical seahorse"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(1, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(1, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set the intended x position
        this.intendedXPosition = intendedXPosition;
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(20);
        this.setHp(20);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/seahorse"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" "));
        // Add a spell caster
        this.addQuestEntitySpellCaster(new QuestEntitySpellCaster(new CallbackCollection(this.castWaterBall.bind(this))));
        this.getLastQuestEntitySpellCaster().getDelay().setFixedDelay(30, Random.upTo(30));
    }
    // Public methods
    Seahorse.prototype.tryToGoToIntendedXPosition = function (baseX) {
        this.goTowards(this.getGlobalPosition(), new Pos(baseX + this.intendedXPosition, this.getGlobalPosition().y), 0, new Pos(1, 0));
    };
    // Private methods
    Seahorse.prototype.castWaterBall = function () {
        // Create the waterBall
        var waterBall = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos(-2, 0)), new Naming("A magical water ball", "a magical water ball"), new Color(ColorType.SEAHORSE_WATER_BALL), new Pos(2, 1), 70, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical water ball", "a magical water ball")));
        // No target
        waterBall.setTargetTypeNoTarget(new Pos(-2, 0));
        // Add the entity
        this.getQuest().addEntity(waterBall);
    };
    // willDie()
    Seahorse.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(150), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return Seahorse;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var SeaSnake = (function (_super) {
    __extends(SeaSnake, _super);
    // Constructor
    function SeaSnake(quest, pos) {
        _super.call(this, quest, pos, new Naming("A sea snake", "a sea snake"), new RenderArea(78, 11), new Pos(0, 0));
        // Set the movement and the animation
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(-Random.between(3, 5), 0)));
        this.setQuestEntityAnimation(new QuestEntityAnimation(0, 0, Random.upTo(11), "places/quests/theSea/seaSnake/1", "places/quests/theSea/seaSnake/2", "places/quests/theSea/seaSnake/3", "places/quests/theSea/seaSnake/4", "places/quests/theSea/seaSnake/5", "places/quests/theSea/seaSnake/6", "places/quests/theSea/seaSnake/7", "places/quests/theSea/seaSnake/8", "places/quests/theSea/seaSnake/9", "places/quests/theSea/seaSnake/10", "places/quests/theSea/seaSnake/11", "places/quests/theSea/seaSnake/12"));
        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));
        // Set destructible
        this.setDestructible(false);
    }
    // update()
    SeaSnake.prototype.update = function () {
        // Launch a magic ball! (2 chances out of 3 to launch one)
        if (Random.oneChanceOutOf(3) == false)
            this.castWaterBall();
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    // Private methods
    SeaSnake.prototype.castWaterBall = function () {
        // Create the waterBall
        var waterBall = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos(-2, this.getYCastingOffset())), new Naming("A magical water ball", "a magical water ball"), new Color(ColorType.SEAHORSE_WATER_BALL), new Pos(2, 1), 300, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical water ball", "a magical water ball")));
        // No target
        waterBall.setTargetTypeNoTarget(new Pos(-Random.between(2, 4), Random.fromArray([-1, 0, 1])));
        // Add the entity
        this.getQuest().addEntity(waterBall);
    };
    SeaSnake.prototype.getYCastingOffset = function () {
        switch (this.getQuestEntityAnimation().getCurrentAsciiIndex()) {
            case 0:
                return 4;
                break;
            case 1:
                return 5;
                break;
            case 2:
                return 6;
                break;
            case 3:
                return 7;
                break;
            case 4:
                return 8;
                break;
            case 5:
                return 9;
                break;
            case 6:
                return 10;
                break;
            case 7:
                return 9;
                break;
            case 8:
                return 8;
                break;
            case 9:
                return 7;
                break;
            case 10:
                return 6;
                break;
            case 11:
                return 5;
                break;
        }
    };
    return SeaSnake;
})(QuestEntity);
///<reference path="House.ts"/>
// Lollipops
Saving.registerBool("secondHouseLollipop1Bought", false);
Saving.registerBool("secondHouseLollipop2Bought", false);
Saving.registerBool("secondHouseLollipop3Bought", false);
// The leather boots
Saving.registerBool("secondHouseLeatherBootsBought", false);
// The chocolate bar
Saving.registerBool("secondHouseChocolateBarBought", false);
// The merchant's hat
Saving.registerBool("secondHouseMerchantHatBought", false);
// The time ring
Saving.registerBool("secondHouseTimeRingBought", false);
var SecondHouse = (function (_super) {
    __extends(SecondHouse, _super);
    // Constructor
    function SecondHouse(game) {
        // House constructor
        _super.call(this, game);
        this.renderArea = new RenderArea();
        // Items sold by the candy merchant
        this.items = [];
        // Selected item (an item is selected when the players clicks on it)
        this.selectedItemIndex = null;
        // Should we draw the intro speech ? (will be set to false as soon as we select an item)
        this.shouldDrawIntroSpeech = true;
        // We add all the items
        // Lollipops
        this.addItem(new CandyMerchantItem_Lollipop(this.getGame(), "secondHouseLollipop1Bought", "places/village/candyMerchantItems/lollipopRight", new Pos(14, 22), "secondHouseLollipop1Speech", 60, "secondHouseLollipopButtonText", "secondHouseLollipop1Button"));
        this.addItem(new CandyMerchantItem_Lollipop(this.getGame(), "secondHouseLollipop2Bought", "places/village/candyMerchantItems/lollipopLeft", new Pos(12, 23), "secondHouseLollipop2Speech", 60, "secondHouseLollipopButtonText", "secondHouseLollipop2Button"));
        this.addItem(new CandyMerchantItem_Lollipop(this.getGame(), "secondHouseLollipop3Bought", "places/village/candyMerchantItems/lollipopRight", new Pos(18, 24), "secondHouseLollipop3Speech", 60, "secondHouseLollipopButtonText", "secondHouseLollipop3Button"));
        // The leather boots
        this.addItem(new CandyMerchantItem_LeatherBoots(this.getGame(), "eqItemBootsLeatherBoots", "places/village/candyMerchantItems/boots", new Pos(5, 25), "secondHouseLeatherBootsSpeech", 300, "secondHouseLeatherBootsButtonText", "secondHouseLeatherBootsButton"));
        // The chocolate bar
        this.addItem(new CandyMerchantItem_ChocolateBar(this.getGame(), "secondHouseChocolateBarBought", "places/village/candyMerchantItems/chocolateBar", new Pos(62, 27), "secondHouseChocolateBarSpeech", 800, "secondHouseChocolateBarButtonText", "secondHouseChocolateBarButton"));
        // The merchant hat
        this.addItem(new CandyMerchantItem_MerchantHat(this.getGame(), "secondHouseMerchantHatBought", "places/village/candyMerchantItems/hat", new Pos(53, 13), "secondHouseMerchantHatSpeech", 1000000, "secondHouseMerchantHatButtonText", "secondHouseMerchantHatButton"));
        // The time ring
        this.addItem(new CandyMerchantItem_TimeRing(this.getGame(), "secondHouseTimeRingBought", "places/village/candyMerchantItems/timeRing", new Pos(43, 28), "secondHouseTimeRingSpeech", 500, "secondHouseTimeRingButtonText", "secondHouseTimeRingButton"));
        // Leather gloves
        this.addItem(new CandyMerchantItem_LeatherGloves(this.getGame(), "eqItemGlovesLeatherGloves", "places/village/candyMerchantItems/leatherGloves", new Pos(82, 27), "secondHouseLeatherGlovesSpeech", 300, "secondHouseLeatherGlovesButtonText", "secondHouseLeatherGlovesButton"));
        // We resize the render area and update it
        this.renderArea.resizeFromArray(Database.getAscii("places/village/secondHouse"), 0, 3);
        this.update();
    }
    // Public methods
    SecondHouse.prototype.willBeDisplayed = function () {
        // We need to update each time we're going to be displayed in case some item should not be sold anymore because of some stuff we were doing while this place wasn't displayed
        this.update();
    };
    // getRenderArea()
    SecondHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    SecondHouse.prototype.addItem = function (item) {
        this.items.push(item);
    };
    SecondHouse.prototype.buySelectedItem = function () {
        // If we have enough candies to buy it
        if (this.getGame().getCandies().getCurrent() >= this.items[this.selectedItemIndex].getPrice()) {
            // We pay the price
            this.getGame().getCandies().add(-this.items[this.selectedItemIndex].getPrice());
            // We tell the item that we just bought it
            this.items[this.selectedItemIndex].buy();
            // No more selected item
            this.selectedItemIndex = null;
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    SecondHouse.prototype.clickedOnItem = function (index) {
        // Set the currently selected item index
        this.selectedItemIndex = index;
        // We shouldn't draw the intro speech anymore
        this.shouldDrawIntroSpeech = false;
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    SecondHouse.prototype.drawIntroSpeech = function () {
        this.drawSpeech("secondHouseIntroSpeech");
    };
    SecondHouse.prototype.drawItems = function () {
        for (var i = 0; i < this.items.length; i++) {
            // If we can show this item
            if (this.items[i].canBeShown()) {
                // We draw the item at the correct position
                this.renderArea.drawArray(Database.getAscii(this.items[i].getAsciiName()), this.items[i].getAsciiPosition().x, this.items[i].getAsciiPosition().y, new RenderTransparency(" ", "%"));
                // If it can be clicked
                if (this.items[i].canBeClicked()) {
                    // We add the button and the link to be able to click it (we add it on each line of the ascii art)
                    for (var j = 0; j < Database.getAsciiHeight(this.items[i].getAsciiName()); j++) {
                        // Button
                        this.renderArea.addAsciiButton(this.items[i].getAsciiPosition().x, this.items[i].getAsciiPosition().x + Database.getAsciiWidth(this.items[i].getAsciiName()), this.items[i].getAsciiPosition().y + j, this.items[i].getButtonName() + "RealItem");
                        // Link
                        this.renderArea.addLinkCall("." + this.items[i].getButtonName() + "RealItem", new CallbackCollection(this.clickedOnItem.bind(this, i)));
                    }
                }
            }
        }
    };
    SecondHouse.prototype.drawSelectedItemStuff = function () {
        var yPos; // Will contain the y position of the bottom of the speech
        // Draw the speech
        yPos = this.drawSpeech(this.items[this.selectedItemIndex].getMerchantSpeech());
        // If we can buy this item
        if (this.items[this.selectedItemIndex].canBeBought()) {
            // Add the buying button
            this.renderArea.addAsciiRealButton(Database.getText(this.items[this.selectedItemIndex].getButtonText()), 45 - Math.floor(Database.getText(this.items[this.selectedItemIndex].getButtonText()).length / 2), yPos + 2, this.items[this.selectedItemIndex].getButtonName() + "BuyingButton", Database.getTranslatedText(this.items[this.selectedItemIndex].getButtonText()), true);
            // Add the link
            this.renderArea.addLinkCall("." + this.items[this.selectedItemIndex].getButtonName() + "BuyingButton", new CallbackCollection(this.buySelectedItem.bind(this)));
        }
    };
    SecondHouse.prototype.drawSpeech = function (speechName) {
        return this.renderArea.drawSpeech(Database.getText(speechName), 3, 30, 60, "secondHouseMerchantSpeech", Database.getTranslatedText(speechName));
    };
    SecondHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the village button
        this.addBackToTheVillageButton(this.renderArea, "secondHouseBackToTheVillageButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/secondHouse"), 0, 3);
        // Draw items
        this.drawItems();
        // Should we draw the intro speech ?
        if (this.shouldDrawIntroSpeech)
            this.drawIntroSpeech();
        // If there's a selected item, draw the stuff related to it (speech and possibly buying button)
        if (this.selectedItemIndex != null) {
            this.drawSelectedItemStuff();
        }
    };
    return SecondHouse;
})(House);
///<reference path="QuestEntity.ts"/>
var ShellPowder = (function (_super) {
    __extends(ShellPowder, _super);
    // Constructor
    function ShellPowder(quest, leftDownCornerPosition) {
        // Create the real global position
        var globalPosition = leftDownCornerPosition;
        globalPosition.add(new Pos(0, -Database.getAsciiHeight("places/quests/theSea/shellPowder") + 1));
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("Shell powder", "shell powder"), new RenderArea(), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 3))));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(10);
        this.setHp(10);
        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);
        // Draw the ascii art
        this.getRenderArea().resizeFromArray(Database.getAscii("places/quests/theSea/shellPowder"));
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/shellPowder"));
    }
    // willDie()
    ShellPowder.prototype.willDie = function () {
        _super.prototype.willDie.call(this);
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedShellPowder", "You found shell powder.", "You gain shell powder."));
    };
    return ShellPowder;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var SmallestFish = (function (_super) {
    __extends(SmallestFish, _super);
    // Constructor
    function SmallestFish(quest, pos) {
        _super.call(this, quest, pos, new Naming("A very small fish", "a very small fish"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(10);
        this.setHp(10);
        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/smallestFish"));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fins", "its fins"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 2))), 1));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(6);
    }
    return SmallestFish;
})(QuestEntity);
var Smoke = (function () {
    // Constructor
    function Smoke(x, y, width, height, minWaitingTime, maxWaitingTime) {
        if (minWaitingTime === void 0) { minWaitingTime = 0; }
        if (maxWaitingTime === void 0) { maxWaitingTime = 0; }
        // Position
        this.x = x;
        this.y = y;
        // Size
        this.width = width;
        this.height = height;
        // Waiting time
        this.minWaitingTime = minWaitingTime;
        this.maxWaitingTime = maxWaitingTime;
        // Init the smoke
        this.init(false);
    }
    // Public methods
    Smoke.prototype.draw = function (renderArea) {
        // If we're not waiting, we draw a smoke
        if (this.weAreWaiting == false) {
            if (this.inverted == false) {
                renderArea.drawString("(", this.x + this.xGap, this.y + this.yGap);
                renderArea.drawString(")", this.x + this.xGap + 1, this.y + this.yGap - 1);
            }
            else {
                renderArea.drawString("(", this.x + this.xGap, this.y + this.yGap - 1);
                renderArea.drawString(")", this.x + this.xGap + 1, this.y + this.yGap);
            }
        }
    };
    Smoke.prototype.move = function () {
        if (this.weAreWaiting == false) {
            // We make the smoke going up
            this.yGap--;
            // If it's too high, we call init()
            if (-this.yGap >= this.height) {
                this.init();
            }
            else {
                this.inverted = !this.inverted;
            }
        }
        else {
            this.currentWaitingTime++;
            if (this.currentWaitingTime > this.chosenWaitingTime)
                this.weAreWaiting = false;
        }
    };
    // Private methods
    Smoke.prototype.init = function (weMustBeWaitingAtFirst) {
        if (weMustBeWaitingAtFirst === void 0) { weMustBeWaitingAtFirst = true; }
        // Inverted
        this.inverted = Random.flipACoin();
        // Step
        this.xGap = Random.upTo(this.width - 1);
        // At first we're not waiting
        if (Random.flipACoin() && weMustBeWaitingAtFirst == false) {
            // Y position
            this.yGap = -Random.upTo(this.height - 1);
            // Waiting stuff
            this.weAreWaiting = false;
        }
        else {
            // Y position
            this.yGap = 0;
            // Waiting stuff
            this.weAreWaiting = true;
            this.chosenWaitingTime = Random.between(this.minWaitingTime, this.maxWaitingTime); // We choose the waiting time
            this.currentWaitingTime = 0; // We begin at 0
        }
    };
    return Smoke;
})();
///<reference path="EqItem.ts"/>
var SorceressHat = (function (_super) {
    __extends(SorceressHat, _super);
    // Constructor
    function SorceressHat() {
        _super.call(this, "eqItemHatSorceressHat", "eqItemHatSorceressHatName", "eqItemHatSorceressHatDescription", "eqItems/hats/sorceressHat");
    }
    // Special ability
    SorceressHat.prototype.getSpecialAbility = function () {
        return "Enhances your spells & potions effects (sorceress hat).";
    };
    return SorceressHat;
})(EqItem);
///<reference path="Place.ts"/>
Saving.registerBool("sorceressHutTookLollipop", false);
Saving.registerBool("sorceressHutBoughtGrimoire", false);
Saving.registerBool("sorceressHutBoughtGrimoire2", false);
Saving.registerBool("sorceressHutBoughtCauldron", false);
Saving.registerBool("sorceressHutBoughtHat", false);
var SorceressHut = (function (_super) {
    __extends(SorceressHut, _super);
    // Constructor
    function SorceressHut(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Set the default speech
        this.currentSpeech = "sorceressHutHello";
        // Resize & update
        this.renderArea.resize(144, 48);
        this.update();
    }
    // getRenderArea()
    SorceressHut.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    SorceressHut.prototype.buyCauldron = function () {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= 100000) {
            this.getGame().getLollipops().add(-100000); // We spend the lollipops
            Saving.saveBool("statusBarUnlockedCauldron", true); // We unlock the cauldron
            Saving.saveBool("sorceressHutBoughtCauldron", true); // We now bought the cauldron
            this.getGame().updateStatusBar(true); // We update the status bar
            this.currentSpeech = "sorceressHutBuyCauldronSpeech"; // We set the speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    SorceressHut.prototype.buyGrimoire = function () {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= 5000) {
            this.getGame().getLollipops().add(-5000); // We spend the lollipops
            this.getGame().gainItem("gridItemPossessedBeginnersGrimoire"); // We gain the grimoire
            Saving.saveBool("sorceressHutBoughtGrimoire", true); // We now bought the grimoire
            this.currentSpeech = "sorceressHutBuyGrimoireSpeech"; // We set the speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    SorceressHut.prototype.buyGrimoire2 = function () {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= 20000) {
            this.getGame().getLollipops().add(-20000); // We spend the lollipops
            this.getGame().gainItem("gridItemPossessedAdvancedGrimoire"); // We gain the grimoire
            Saving.saveBool("sorceressHutBoughtGrimoire2", true); // We now bought the grimoire
            this.currentSpeech = "sorceressHutBuyGrimoire2Speech"; // We set the speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    SorceressHut.prototype.buyHat = function () {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= 1000000000) {
            this.getGame().getLollipops().add(-1000000000); // We spend the lollipops
            Saving.saveBool("sorceressHutBoughtHat", true); // We now bought the hat
            this.getGame().gainItem("eqItemHatSorceressHat"); // We have the hat!
            this.currentSpeech = "sorceressHutBuyHatSpeech"; // We set the speech
            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };
    SorceressHut.prototype.clickedCauldron = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedCauldron";
        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyCauldronButton", new CallbackCollection(this.buyCauldron.bind(this)));
        this.getGame().updatePlace();
    };
    SorceressHut.prototype.clickedGrimoire = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedGrimoire";
        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyGrimoireButton", new CallbackCollection(this.buyGrimoire.bind(this)));
        this.getGame().updatePlace();
    };
    SorceressHut.prototype.clickedGrimoire2 = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedGrimoire2";
        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyGrimoire2Button", new CallbackCollection(this.buyGrimoire2.bind(this)));
        this.getGame().updatePlace();
    };
    SorceressHut.prototype.clickedHat = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedHat";
        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyHatButton", new CallbackCollection(this.buyHat.bind(this)));
        this.getGame().updatePlace();
    };
    SorceressHut.prototype.drawBackground = function (x, y) {
        this.renderArea.drawArray(Database.getAscii("places/sorceressHut/background"), x, y);
    };
    SorceressHut.prototype.drawBroom = function (x, y) {
        this.renderArea.drawArray(Database.getAscii("places/sorceressHut/broom"), x, y);
    };
    SorceressHut.prototype.drawBuyingButton = function (textName, callbackCollection) {
        this.renderArea.addAsciiRealButton(Database.getText(textName), 73, 22, "sorceressHutBuyingButton", Database.getTranslatedText(textName), true, -1, null, false);
        this.renderArea.addLinkCall(".sorceressHutBuyingButton", callbackCollection);
    };
    SorceressHut.prototype.drawCauldron = function (x, y) {
        // If we didn't buy the cauldron yet
        if (Saving.loadBool("sorceressHutBoughtCauldron") == false) {
            // Draw it
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/cauldron"), x, y, new RenderTransparency(" ", "%"));
            // Add the button
            this.renderArea.addMultipleAsciiButtons("sorceressHutBuyCauldronButton", x + 11, x + 30, y + 1, x + 10, x + 31, y + 2, x + 8, x + 33, y + 3, x + 7, x + 34, y + 4, x + 6, x + 35, y + 5, x + 5, x + 36, y + 6, x + 4, x + 37, y + 7, x + 4, x + 37, y + 8, x + 4, x + 37, y + 9, x + 5, x + 36, y + 10, x + 6, x + 35, y + 11, x + 8, x + 33, y + 12);
            // Add the link
            this.renderArea.addLinkCall(".sorceressHutBuyCauldronButton", new CallbackCollection(this.clickedCauldron.bind(this)));
        }
    };
    SorceressHut.prototype.drawCurrentSpeech = function (x, y) {
        this.renderArea.drawSpeech(Database.getText(this.currentSpeech), y, x, x + 27, "sorceressHutSpeech", Database.getTranslatedText(this.currentSpeech));
    };
    SorceressHut.prototype.drawHat = function (x, y) {
        // If we didn't buy the hat yet
        if (Saving.loadBool("sorceressHutBoughtHat") == false) {
            // Draw it
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/hat"), x, y, new RenderTransparency(" ", "%"));
            // Add the button
            this.renderArea.addMultipleAsciiButtons("sorceressHutBuyHatButton", x + 20, x + 23, y, x + 16, x + 25, y + 1, x + 14, x + 26, y + 2, x + 11, x + 19, y + 3, x + 10, x + 19, y + 4, x + 9, x + 20, y + 5, x + 1, x + 27, y + 6);
            // Add the link
            this.renderArea.addLinkCall(".sorceressHutBuyHatButton", new CallbackCollection(this.clickedHat.bind(this)));
        }
    };
    SorceressHut.prototype.drawShelves = function (x, y) {
        // Draw the ascii art
        this.renderArea.drawArray(Database.getAscii("places/sorceressHut/shelves"), x, y);
        // If we didn't take the lollipop yet
        if (Saving.loadBool("sorceressHutTookLollipop") == false) {
            // Draw the lollipop
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/lollipop"), x + 32, y + 16);
            // Add the button and the link
            this.renderArea.addAsciiButton(x + 32, x + 37, y + 16, "sorceressHutTakeLollipopButton");
            this.renderArea.addLinkCall(".sorceressHutTakeLollipopButton", new CallbackCollection(this.takeLollipop.bind(this)));
        }
        // If we didn't buy the grimoire yet
        if (Saving.loadBool("sorceressHutBoughtGrimoire") == false) {
            // Draw the grimoire
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/grimoire"), x + 18, y + 8);
            // Add the button and the link
            this.renderArea.addAsciiButton(x + 18, x + 20, y + 9, "sorceressHutBuyGrimoireButton");
            this.renderArea.addAsciiButton(x + 18, x + 20, y + 10, "sorceressHutBuyGrimoireButton");
            this.renderArea.addAsciiButton(x + 18, x + 20, y + 11, "sorceressHutBuyGrimoireButton");
            this.renderArea.addLinkCall(".sorceressHutBuyGrimoireButton", new CallbackCollection(this.clickedGrimoire.bind(this)));
        }
        // If we didn't buy the second grimoire yet
        if (Saving.loadBool("sorceressHutBoughtGrimoire2") == false) {
            // Draw the grimoire
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/grimoire2"), x + 30, y + 1);
            // Add the button and the link
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 2, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 3, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 4, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 5, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 6, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addLinkCall(".sorceressHutBuyGrimoire2Button", new CallbackCollection(this.clickedGrimoire2.bind(this)));
        }
    };
    SorceressHut.prototype.takeLollipop = function () {
        // We took the lollipop
        Saving.saveBool("sorceressHutTookLollipop", true);
        // Add 1 lollipop
        this.getGame().getLollipops().add(1);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    SorceressHut.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "theHoleBackToTheMapButton");
        // Draw everything
        this.drawBackground(0, 3);
        this.drawHat(14, 3);
        this.drawShelves(73, 3);
        this.drawCauldron(80, 27);
        this.drawBroom(49, 18);
        // Draw the speech
        this.drawCurrentSpeech(43, 4);
    };
    return SorceressHut;
})(Place);
///<reference path="QuestEntity.ts"/>
var Spikes = (function (_super) {
    __extends(Spikes, _super);
    // Constructor
    function Spikes(quest, globalPosition, width, damage, inverted) {
        if (damage === void 0) { damage = 200; }
        if (inverted === void 0) { inverted = false; }
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("Some spikes", "some spikes"), new RenderArea(), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(width, 1))));
        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its spikes", "its spikes"), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, (inverted ? 1 : -1)), new Pos(width, 1))), damage));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
        // Draw the ascii art
        this.getRenderArea().resize(width, 1);
        for (var i = 0; i < Math.floor(width / 2); i++) {
            if (inverted == false)
                this.getRenderArea().drawString("/\\", i * 2, 0);
            else
                this.getRenderArea().drawString("\\/", i * 2, 0);
        }
    }
    return Spikes;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Sponge = (function (_super) {
    __extends(Sponge, _super);
    // Constructor
    function Sponge(quest, leftDownCornerPosition) {
        // Create the real global position
        var globalPosition = leftDownCornerPosition;
        globalPosition.add(new Pos(0, -Database.getAsciiHeight("places/quests/theSea/sponge") + 1));
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("A sponge", "a sponge"), new RenderArea(), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 3))));
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(40);
        this.setHp(40);
        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);
        // Draw the ascii art
        this.getRenderArea().resizeFromArray(Database.getAscii("places/quests/theSea/sponge"));
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/sponge"));
    }
    // willDie()
    Sponge.prototype.willDie = function () {
        _super.prototype.willDie.call(this);
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedSponge", "You found a sponge.", "You gain a sponge."));
    };
    return Sponge;
})(QuestEntity);
var StatusBarTab = (function () {
    // Constructor
    function StatusBarTab(statusBar, type, xPos, text1, text2, text3, tabIndexWhenSelected, callbackCollectionWhenSelected) {
        if (tabIndexWhenSelected === void 0) { tabIndexWhenSelected = -1; }
        if (callbackCollectionWhenSelected === void 0) { callbackCollectionWhenSelected = new CallbackCollection(); }
        // Set the status bar
        this.statusBar = statusBar;
        // Set teh type
        this.type = type;
        // Set xPos
        this.xPos = xPos;
        // Add the three strings to our 3 strings array
        this.setText(text1, text2, text3);
        // Set the rest
        this.tabIndexWhenSelected = tabIndexWhenSelected;
        this.callbackCollectionWhenSelected = callbackCollectionWhenSelected;
    }
    // Public methods
    StatusBarTab.prototype.clicked = function () {
        this.callbackCollectionWhenSelected.fire();
        this.statusBar.selectTab(this.tabIndexWhenSelected);
    };
    StatusBarTab.prototype.render = function (renderArea, x, y, selected) {
        // We draw the borders
        renderArea.drawVerticalLine("|", x + this.xPos - 1, y, 3);
        renderArea.drawVerticalLine("|", x + this.xPos + this.width, y, 3);
        // We draw the text
        for (var i = 0; i < 3; i++) {
            // We draw the string
            renderArea.drawString(this.text[i], x + this.xPos + 1, y + i);
            // If the tab is selected, we add a special color
            if (selected)
                renderArea.addBackgroundColor(x + this.xPos, x + this.xPos + this.width, y + i, new Color(ColorType.STATUS_BAR_SELECTED_TAB, true));
        }
        // If the tab isn't selected, we add a button to click it !
        if (selected == false) {
            renderArea.addMultipleAsciiButtons("statusBarTabButton" + this.tabIndexWhenSelected, x + this.xPos, x + this.xPos + this.width, y, x + this.xPos, x + this.xPos + this.width, y + 1, x + this.xPos, x + this.xPos + this.width, y + 2);
            renderArea.addLinkCall(".statusBarTabButton" + this.tabIndexWhenSelected, new CallbackCollection(this.clicked.bind(this)));
        }
    };
    // Public getters
    StatusBarTab.prototype.getType = function () {
        return this.type;
    };
    StatusBarTab.prototype.getWidth = function () {
        return this.width;
    };
    // Private methods
    StatusBarTab.prototype.calculateWidth = function () {
        this.width = 0;
        for (var i = 0; i < 3; i++) {
            if (this.text[i].length > this.width)
                this.width = this.text[i].length;
        }
        // We add two ! (because a tab has two spaces on left and right
        this.width += 2;
    };
    StatusBarTab.prototype.setText = function (text1, text2, text3) {
        // We empty the text array
        this.text = [];
        // We add the three strings given in parameters
        this.text.push(text1);
        this.text.push(text2);
        this.text.push(text3);
        // We re-calculate the tab's width
        this.calculateWidth();
    };
    return StatusBarTab;
})();
var StatusBarTabType;
(function (StatusBarTabType) {
    StatusBarTabType[StatusBarTabType["CANDY_BOX"] = 0] = "CANDY_BOX";
    StatusBarTabType[StatusBarTabType["INVENTORY"] = 1] = "INVENTORY";
    StatusBarTabType[StatusBarTabType["MAP"] = 2] = "MAP";
    StatusBarTabType[StatusBarTabType["FARM"] = 3] = "FARM";
    StatusBarTabType[StatusBarTabType["CAULDRON"] = 4] = "CAULDRON";
    StatusBarTabType[StatusBarTabType["INSIDE_YOUR_BOX"] = 5] = "INSIDE_YOUR_BOX";
    StatusBarTabType[StatusBarTabType["THE_COMPUTER"] = 6] = "THE_COMPUTER";
    StatusBarTabType[StatusBarTabType["THE_ARENA"] = 7] = "THE_ARENA";
    StatusBarTabType[StatusBarTabType["SAVE"] = 8] = "SAVE";
    StatusBarTabType[StatusBarTabType["CFG"] = 9] = "CFG";
})(StatusBarTabType || (StatusBarTabType = {}));
// Saving stuff related to the status bar itself
Saving.registerBool("statusBarUnlocked", false);
// Saving stuff related to unlocked tabs
Saving.registerBool("statusBarUnlockedCfg", false);
Saving.registerBool("statusBarUnlockedSave", false);
Saving.registerBool("statusBarUnlockedMap", false);
Saving.registerBool("statusBarUnlockedInventory", false);
Saving.registerBool("statusBarUnlockedLollipopFarm", false);
Saving.registerBool("statusBarUnlockedCauldron", false);
Saving.registerBool("statusBarUnlockedInsideYourBox", false);
Saving.registerBool("statusBarUnlockedTheComputer", false);
Saving.registerBool("statusBarUnlockedTheArena", false);
// Saving stuff for the unlocked health bar
Saving.registerBool("statusBarUnlockedHealthBar", false);
// The corner step
Saving.registerNumber("statusBarCornerStep", 0);
var StatusBar = (function () {
    // Constructor
    function StatusBar(game, selectedTabIndex) {
        // Render areas
        this.playerHealthBar = null;
        this.renderArea = new RenderArea(100, 6, " ");
        // Tabs
        this.tabs = [];
        // Se the game
        this.game = game;
        // Set the default selected tab index
        this.selectedTabIndex = selectedTabIndex;
        // Add everything for the first time
        this.deleteAndReAddEverything();
    }
    // Public methods
    StatusBar.prototype.deleteAndReAddEverything = function () {
        // Delete tabs
        this.tabs = [];
        // Reset special hotkeys
        this.game.resetSpecialHotkeys();
        // Delete the player health bar
        this.playerHealthBar = null;
        // Add the player health bar
        if (Saving.loadBool("statusBarUnlockedHealthBar")) {
            this.playerHealthBar = new Bar(BarType.HEALTH);
            this.playerHealthBar.resize(72, 1);
        }
        // Add tabs
        if (Saving.loadBool("statusBarUnlocked"))
            this.addTab(StatusBarTabType.CANDY_BOX, 0, " THE", "CANDY", " BOX", new CallbackCollection(this.game.goToCandyBox.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedInventory"))
            this.addTab(StatusBarTabType.INVENTORY, 8, "INV", " ENT", "ORY", new CallbackCollection(this.game.goToInventory.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedMap"))
            this.addTab(StatusBarTabType.MAP, 15, "", "MAP", "", new CallbackCollection(this.game.goToMap.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedLollipopFarm"))
            this.addTab(StatusBarTabType.FARM, 21, "LOLL", "IPOP", "FARM", new CallbackCollection(this.game.goToLollipopFarm.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedCauldron"))
            this.addTab(StatusBarTabType.CAULDRON, 28, "", "CLDR", "", new CallbackCollection(this.game.goToCauldron.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedInsideYourBox"))
            this.addTab(StatusBarTabType.INSIDE_YOUR_BOX, 35, "INSIDE", " YOUR", " BOX!", new CallbackCollection(this.game.goToInsideYourBox.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedTheComputer"))
            this.addTab(StatusBarTabType.THE_COMPUTER, 44, " THE", " COM", "PUTER", new CallbackCollection(this.game.goToTheComputer.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedTheArena"))
            this.addTab(StatusBarTabType.THE_ARENA, 52, " THE", "ARENA", " /!\\", new CallbackCollection(this.game.goToTheArena.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedSave"))
            this.addTab(StatusBarTabType.SAVE, 60, "", "SAVE", "", new CallbackCollection(this.game.goToSave.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedCfg"))
            this.addTab(StatusBarTabType.CFG, 67, "C", "F", "G", new CallbackCollection(this.game.goToCfg.bind(this.game)));
        // Add special hotkeys to go to the next or previous tab
        if (Saving.loadBool("statusBarUnlocked")) {
            this.game.addSpecialHotkey(new Hotkey("n", new CallbackCollection(this.nextTab.bind(this))));
        }
    };
    StatusBar.prototype.selectTab = function (index) {
        this.selectedTabIndex = index;
        this.game.updateStatusBar();
    };
    StatusBar.prototype.selectTabByType = function (type) {
        for (var i = 0; i < this.tabs.length; i++) {
            // If this is the tab we're searching for
            if (this.tabs[i].getType() == type) {
                // We select it and we break
                this.selectedTabIndex = i;
                this.game.updateStatusBar();
            }
        }
    };
    StatusBar.prototype.updateAll = function () {
        // We erase
        this.renderArea.resetAllButSize();
        // We draw the borders
        if (Saving.loadBool("statusBarUnlocked")) {
            this.renderArea.drawString("+", 0, 0);
            this.renderArea.drawString("+", this.renderArea.getWidth() - 1, 0);
            this.renderArea.drawString("+", 0, 5);
            this.renderArea.drawString("+", this.renderArea.getWidth() - 1, 5);
            this.renderArea.drawVerticalLine("|", 0, 1, 4);
            this.renderArea.drawVerticalLine("|", this.renderArea.getWidth() - 1, 1, 4);
            this.renderArea.drawHorizontalLine("-", 1, this.renderArea.getWidth() - 1, 0);
            this.renderArea.drawHorizontalLine("-", 1, this.renderArea.getWidth() - 1, 5);
        }
        // We draw the candies we have
        this.renderArea.drawString(this.game.getCandies().getCurrentAsString(26), 2, 1);
        // We draw the lollipops we have, if we had at least one at some point
        if (this.game.getLollipops().getMax() > 0)
            this.renderArea.drawString(this.game.getLollipops().getCurrentAsString(26), 2, 2);
        // We draw the chocolate bars we have, if we had at least one at some point
        if (this.game.getChocolateBars().getMax() > 0)
            this.renderArea.drawString(this.game.getChocolateBars().getCurrentAsString(26), 2, 3);
        // We draw the pains au chocolat we have, if we had at least one at some point
        if (this.game.getPainsAuChocolat().getMax() > 0)
            this.renderArea.drawString(this.game.getPainsAuChocolat().getCurrentAsString(26), 2, 4);
        // We draw tabs
        this.drawTabs();
        // We draw the health bar
        this.updateHealthBar();
        // We draw the stuff about the status bar's corners
        this.drawStatusBarCornersStuff();
    };
    StatusBar.prototype.updateHealthBar = function () {
        // We update the health bar if it isn't null
        if (this.playerHealthBar != null) {
            // We update the bar from the player's health
            this.playerHealthBar.update(this.game.getPlayer().getHp() / this.game.getPlayer().getMaxHp(), "Your health : " + this.game.getPlayer().getHp() + "/" + this.game.getPlayer().getMaxHp());
            // We draw the bar
            this.renderArea.drawArea(this.playerHealthBar, 28, 4);
        }
    };
    // Public getters
    StatusBar.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    StatusBar.prototype.addTab = function (type, xPos, text1, text2, text3, callbackCollection) {
        // We add the tab
        this.tabs.push(new StatusBarTab(this, type, xPos, text1, text2, text3, this.tabs.length, callbackCollection));
    };
    StatusBar.prototype.clickedOnCorner = function () {
        this.setNextCornerStep();
        this.game.updateStatusBar();
    };
    StatusBar.prototype.drawAllCorners = function (character) {
        this.drawUpLeftCorner(character);
        this.drawUpRightCorner(character);
        this.drawDownLeftCorner(character);
        this.drawDownRightCorner(character);
    };
    StatusBar.prototype.drawDownLeftCorner = function (character) {
        this.renderArea.drawString(character, 0, 5);
    };
    StatusBar.prototype.drawDownRightCorner = function (character) {
        this.renderArea.drawString(character, 99, 5);
    };
    StatusBar.prototype.drawStatusBarCornersStuff = function () {
        // We add buttons
        this.renderArea.addAsciiNinjaButton(0, 1, 0, "statusBarCornerButton");
        this.renderArea.addAsciiNinjaButton(99, 100, 0, "statusBarCornerButton");
        this.renderArea.addAsciiNinjaButton(0, 1, 5, "statusBarCornerButton");
        this.renderArea.addAsciiNinjaButton(99, 100, 5, "statusBarCornerButton");
        // We add the link
        this.renderArea.addLinkCall(".statusBarCornerButton", new CallbackCollection(this.clickedOnCorner.bind(this)));
        // We possibly draw a different corner, depending on the corner step
        switch (Saving.loadNumber("statusBarCornerStep")) {
            case 0: break; // Default corner, we do nothing
            case 1:
                this.drawAllCorners("*");
                break;
            case 2:
                this.drawAllCorners("#");
                break;
            case 3:
                this.drawAllCorners("-");
                break;
            case 4:
                this.drawUpLeftCorner("A");
                this.drawUpRightCorner("B");
                this.drawDownRightCorner("C");
                this.drawDownLeftCorner("D");
                break;
            case 5:
                this.drawUpLeftCorner("0");
                this.drawUpRightCorner("1");
                this.drawDownRightCorner("2");
                this.drawDownLeftCorner("3");
                break;
            case 6:
                this.drawAllCorners("@");
                break;
        }
    };
    StatusBar.prototype.drawTabs = function () {
        if (Saving.loadBool("statusBarUnlocked")) {
            this.renderArea.drawVerticalLine("|", 28, 1, 4);
            for (var i = 0; i < this.tabs.length; i++) {
                this.tabs[i].render(this.renderArea, 29, 1, (this.selectedTabIndex == i ? true : false));
            }
        }
    };
    StatusBar.prototype.drawUpLeftCorner = function (character) {
        this.renderArea.drawString(character, 0, 0);
    };
    StatusBar.prototype.drawUpRightCorner = function (character) {
        this.renderArea.drawString(character, 99, 0);
    };
    StatusBar.prototype.previousTab = function () {
        if (this.selectedTabIndex - 1 >= 0)
            this.tabs[this.selectedTabIndex - 1].clicked();
    };
    StatusBar.prototype.nextTab = function () {
        // If we're allowed to.. (this will be disable when using the computer)
        if (this.game.getIsStatusBarAllowedToUseTheNKey()) {
            if (this.selectedTabIndex + 1 < this.tabs.length)
                this.tabs[this.selectedTabIndex + 1].clicked();
            else
                this.tabs[0].clicked();
        }
    };
    StatusBar.prototype.setNextCornerStep = function () {
        var nextCornerStep = Saving.loadNumber("statusBarCornerStep");
        nextCornerStep += 1;
        if (nextCornerStep > 6)
            nextCornerStep = 0;
        Saving.saveNumber("statusBarCornerStep", nextCornerStep);
    };
    return StatusBar;
})();
///<reference path="EqItem.ts"/>
var SummoningTribalSpear = (function (_super) {
    __extends(SummoningTribalSpear, _super);
    // Constructor
    function SummoningTribalSpear() {
        _super.call(this, "eqItemWeaponSummoningTribalSpear", "eqItemWeaponSummoningTribalSpearName", "eqItemWeaponSummoningTribalSpearDescription", "eqItems/weapons/summoningTribalSpear");
        // Time since we last summoned a warrior
        this.timeSinceSummon = 0;
    }
    // Public getters
    SummoningTribalSpear.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A summoning tribal spear", "a summoning tribal spear"), player.getClassicCollisionBoxCollection(), 10);
        qew.getCloseCombatDelay().setFixedDelay(2);
        return qew;
    };
    // Special ability
    SummoningTribalSpear.prototype.getSpecialAbility = function () {
        return "Frequently summons tribe warriors fighting on your side (summoning tribal spear).";
    };
    // update()
    SummoningTribalSpear.prototype.update = function (player, quest) {
        this.timeSinceSummon += 1;
        if (this.timeSinceSummon > 35) {
            this.summon(player, quest);
        }
    };
    // Private methods
    SummoningTribalSpear.prototype.summon = function (player, quest) {
        // Create the warrior
        var warrior = new PlayerSummonedTribeWarrior(quest, player.getSpellCastingPosition().plus(new Pos(1, -3)));
        // Add the health bar
        warrior.setHealthBar(new QuestEntityHealthBar(warrior, new Pos(4, 1)));
        // Add it to the quest
        quest.addEntity(warrior);
        // Reset the summon time
        this.timeSinceSummon = 0;
    };
    return SummoningTribalSpear;
})(EqItem);
var SuperRPGFloorStep;
(function (SuperRPGFloorStep) {
    SuperRPGFloorStep[SuperRPGFloorStep["SHOP"] = 0] = "SHOP";
    SuperRPGFloorStep[SuperRPGFloorStep["MONSTER1"] = 1] = "MONSTER1";
    SuperRPGFloorStep[SuperRPGFloorStep["MONSTER2"] = 2] = "MONSTER2";
    SuperRPGFloorStep[SuperRPGFloorStep["MONSTER3"] = 3] = "MONSTER3";
})(SuperRPGFloorStep || (SuperRPGFloorStep = {}));
var SuperRPGMenuEntry = (function () {
    // Constructor
    function SuperRPGMenuEntry(text, callbackCollection) {
        this.text = text;
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    SuperRPGMenuEntry.prototype.draw = function (renderArea, x, y, selected, width) {
        // Create a var which will contain the text to draw
        var textToDraw;
        // Set the text to draw
        if (selected)
            textToDraw = "> " + this.text + " <";
        else
            textToDraw = this.text;
        // Draw the text to draw
        renderArea.drawString(textToDraw, x + Math.floor((width - textToDraw.length) / 2), y);
    };
    // Public getters
    SuperRPGMenuEntry.prototype.getCallbackCollection = function () {
        return this.callbackCollection;
    };
    return SuperRPGMenuEntry;
})();
var SuperRPGMenu = (function () {
    // Constructor
    function SuperRPGMenu(superRPG, asciiName, currentlySelectedEntryIndex) {
        // Menu entries
        this.entries = [];
        // Set from parameters
        this.superRPG = superRPG;
        this.asciiName = asciiName;
        this.currentlySelectedEntryIndex = currentlySelectedEntryIndex;
    }
    // Public methods
    SuperRPGMenu.prototype.addEntry = function (entry) {
        this.entries.push(entry);
    };
    SuperRPGMenu.prototype.draw = function (renderArea) {
        // Draw the separating line
        renderArea.drawVerticalLine("|", 26, 3, 11);
        // Draw the ascii art on the left
        renderArea.drawArray(Database.getAscii(this.asciiName), 0 + Math.floor((26 - Database.getAsciiWidth(this.asciiName)) / 2), 2 + Math.floor((10 - Database.getAsciiHeight(this.asciiName)) / 2));
        // Draw the entries
        for (var i = 0; i < this.entries.length; i++) {
            this.entries[i].draw(renderArea, 27, 3 + Math.floor((10 - (this.entries.length * 2)) / 2) + i * 2, (this.currentlySelectedEntryIndex == i), 26);
        }
    };
    SuperRPGMenu.prototype.pressedDownButton = function () {
        this.currentlySelectedEntryIndex += 1;
        if (this.currentlySelectedEntryIndex >= this.entries.length)
            this.currentlySelectedEntryIndex = this.entries.length - 1;
    };
    SuperRPGMenu.prototype.pressedSpaceButton = function () {
        this.entries[this.currentlySelectedEntryIndex].getCallbackCollection().fire();
    };
    SuperRPGMenu.prototype.pressedUpButton = function () {
        this.currentlySelectedEntryIndex -= 1;
        if (this.currentlySelectedEntryIndex < 0)
            this.currentlySelectedEntryIndex = 0;
    };
    // Public getters
    SuperRPGMenu.prototype.getSuperRPG = function () {
        return this.superRPG;
    };
    // Public setters
    SuperRPGMenu.prototype.setAsciiName = function (asciiName) {
        this.asciiName = asciiName;
    };
    SuperRPGMenu.prototype.setEntries = function () {
        var entries = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            entries[_i - 0] = arguments[_i];
        }
        this.entries = entries;
    };
    return SuperRPGMenu;
})();
///<reference path="SuperRPGMenu.ts"/>
var SuperRPGMenu_Ingame = (function (_super) {
    __extends(SuperRPGMenu_Ingame, _super);
    function SuperRPGMenu_Ingame() {
        _super.apply(this, arguments);
    }
    // Public methods
    SuperRPGMenu_Ingame.prototype.draw = function (renderArea) {
        // First status bar line
        // Floor
        renderArea.drawString("Floor " + this.getSuperRPG().getFloor(), 0, 0);
        // Separation bar
        renderArea.drawString("|", 10, 0);
        // Shop / 1st monster / etc
        switch (this.getSuperRPG().getFloorStep()) {
            case SuperRPGFloorStep.SHOP:
                renderArea.drawString("shop", 15, 0);
                break;
            case SuperRPGFloorStep.MONSTER1:
                renderArea.drawString("1st monster", 12, 0);
                break;
            case SuperRPGFloorStep.MONSTER2:
                renderArea.drawString("2nd monster", 12, 0);
                break;
            case SuperRPGFloorStep.MONSTER3:
                renderArea.drawString("3rd monster", 12, 0);
                break;
        }
        // Separation bar
        renderArea.drawString("|", 24, 0);
        // Hp and max hp
        renderArea.drawString("HP " + this.getSuperRPG().getHp().toString() + "/" + this.getSuperRPG().getMaxHp().toString(), 26, 0);
        // Separation bar
        renderArea.drawString("|", 39, 0);
        // Coins
        renderArea.drawString("Coins " + this.getSuperRPG().getCoins(), 41, 0);
        // Second status bar line
        // ATK + weapon + damage
        renderArea.drawString("ATK " + this.getSuperRPG().getWeapon() + " (" + this.getSuperRPG().getDamage() + ")", 0, 1);
        // Separation bar
        renderArea.drawString("|", 24, 1);
        // DEF + defense item + defense
        renderArea.drawString("DEF " + this.getSuperRPG().getDefenseItem() + " (" + this.getSuperRPG().getDefense() + ")", 26, 1);
        // Call the mother class draw method
        _super.prototype.draw.call(this, renderArea);
    };
    return SuperRPGMenu_Ingame;
})(SuperRPGMenu);
///<reference path="SuperRPGMenu.ts"/>
var SuperRPGMenu_Main = (function (_super) {
    __extends(SuperRPGMenu_Main, _super);
    // Constructor
    function SuperRPGMenu_Main(superRPG) {
        _super.call(this, superRPG, "places/village/thirdHouseGames/SuperRPG/mainMenu", 0);
        this.addEntry(new SuperRPGMenuEntry("Start", new CallbackCollection(this.getSuperRPG().startGame.bind(this.getSuperRPG(), false))));
        if (Saving.loadBool("SuperRPGUnlockedHardmode"))
            this.addEntry(new SuperRPGMenuEntry("Start (hardmode)", new CallbackCollection(this.getSuperRPG().startGame.bind(this.getSuperRPG(), true))));
        this.addEntry(new SuperRPGMenuEntry("Exit", new CallbackCollection(this.getSuperRPG().exitGame.bind(this.getSuperRPG()))));
    }
    // Public methods
    SuperRPGMenu_Main.prototype.draw = function (renderArea) {
        // Draw the "main menu" text
        renderArea.drawString("Main menu", 22, 0);
        // Mother class draw method
        _super.prototype.draw.call(this, renderArea);
    };
    return SuperRPGMenu_Main;
})(SuperRPGMenu);
///<reference path="SuperRPGMenu_Ingame.ts"/>
var SuperRPGMenu_Monster = (function (_super) {
    __extends(SuperRPGMenu_Monster, _super);
    // Constructor
    function SuperRPGMenu_Monster(superRPG) {
        _super.call(this, superRPG, "", 0);
    }
    // Public methods
    SuperRPGMenu_Monster.prototype.addUsualEntries = function () {
        this.addEntry(new SuperRPGMenuEntry("Attack", new CallbackCollection(this.playerAttacks.bind(this))));
    };
    SuperRPGMenu_Monster.prototype.draw = function (renderArea) {
        // Draw the monster damage
        renderArea.drawString("ATK " + this.damage, 0, 11);
        // Draw the monster defense
        renderArea.drawString("DEF " + this.defense, 7, 11);
        // Draw the monster hp and max hp
        renderArea.drawString("HP " + this.hp + "/" + this.maxHp, 14, 11);
        // Call the mother class draw method
        _super.prototype.draw.call(this, renderArea);
    };
    SuperRPGMenu_Monster.prototype.setAbstract = function (atk, def, coins, hp) {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/" + Random.fromArray(["cross", "mobius", "triforce", "randomShape", "circle", "dna", "hive", "star"]), atk, def, coins, hp);
    };
    SuperRPGMenu_Monster.prototype.setBabyVampire = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/babyVampire", 10, 2, 8, 30);
    };
    SuperRPGMenu_Monster.prototype.setBlob = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/blob", Random.between(1, 3), 0, Random.between(5, 8), 3);
    };
    SuperRPGMenu_Monster.prototype.setBomb = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/bomb", 99, 0, 0, 12);
    };
    SuperRPGMenu_Monster.prototype.setChest = function (coins) {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/chest", 0, 0, coins, 10);
    };
    SuperRPGMenu_Monster.prototype.setCorpse1 = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/corpse1", 0, 0, (Random.flipACoin() ? 0 : Random.between(1, 300)), 0);
    };
    SuperRPGMenu_Monster.prototype.setCorpse2 = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/corpse2", 0, 0, (Random.flipACoin() ? 0 : Random.between(1, 300)), 0);
    };
    SuperRPGMenu_Monster.prototype.setDragon = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/dragon", Random.between(28, 32), Random.between(7, 9), 1000, Random.fromArray([45, 50, 55]));
    };
    SuperRPGMenu_Monster.prototype.setFerociousBlob = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/ferociousBlob", Random.between(2, 4), 0, Random.between(7, 10), 2);
    };
    SuperRPGMenu_Monster.prototype.setFerociousGoblin = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/ferociousGoblin", 5, 3, 20, 5);
    };
    SuperRPGMenu_Monster.prototype.setFerociousSkeleton = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/ferociousSkeleton", 8, 1, 40, 10);
    };
    SuperRPGMenu_Monster.prototype.setGoblin = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/goblin", 4, 1, 15, 5);
    };
    SuperRPGMenu_Monster.prototype.setSkeletonOrBillGatesSkeleton = function () {
        // Bill gates skeleton
        if (Random.oneChanceOutOf(10))
            this.setMonster("places/village/thirdHouseGames/SuperRPG/billGatesSkeleton", 6, 1, 50, 7);
        else
            this.setMonster("places/village/thirdHouseGames/SuperRPG/skeleton", 6, 1, 25, 7);
    };
    SuperRPGMenu_Monster.prototype.setSpider = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/spider", 10, 5, Random.between(100, 200), 25);
    };
    SuperRPGMenu_Monster.prototype.setSpiders = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/spiders", 9, 2, 9, 15);
    };
    SuperRPGMenu_Monster.prototype.setThing = function () {
        switch (Random.between(0, 2)) {
            case 0:
                this.setMonster("places/village/thirdHouseGames/SuperRPG/thing", 20, 3, 120, 10);
                break;
            case 1:
                this.setMonster("places/village/thirdHouseGames/SuperRPG/thing", 12, 6, 120, 30);
                break;
            case 2:
                this.setMonster("places/village/thirdHouseGames/SuperRPG/thing", 14, 4, 120, 20);
                break;
        }
    };
    // Private methods
    SuperRPGMenu_Monster.prototype.playerAttacks = function () {
        // Variable used for damage calculation
        var damage;
        // We lose hp
        damage = this.getSuperRPG().getDamage() - this.defense;
        if (damage > 0) {
            this.hp -= damage;
            // If we have 0 or less hp, we get the coins, go to the next floor step and return
            if (this.hp <= 0) {
                this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() + this.coins);
                this.getSuperRPG().nextFloorStep();
                return;
            }
        }
        // We didn't return : it means we're still alive : we counter attack
        damage = this.damage - this.getSuperRPG().getDefense();
        if (damage > 0) {
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() - damage);
        }
    };
    SuperRPGMenu_Monster.prototype.setMonster = function (asciiName, damage, defense, coins, hp, maxHp) {
        if (maxHp === void 0) { maxHp = null; }
        // Set from the parameters
        this.setAsciiName(asciiName);
        this.damage = (this.getSuperRPG().getHardmode() ? Math.floor(damage * 1.2) : damage);
        this.defense = (this.getSuperRPG().getHardmode() ? Math.floor(defense * 1.2) : defense);
        this.coins = (this.getSuperRPG().getHardmode() ? Math.ceil(coins * 0.8) : coins);
        this.hp = (this.getSuperRPG().getHardmode() ? Math.floor(hp * 1.2) : hp);
        if (maxHp == null)
            this.maxHp = this.hp;
        else
            this.maxHp = (this.getSuperRPG().getHardmode() ? Math.floor(maxHp * 1.2) : maxHp);
    };
    return SuperRPGMenu_Monster;
})(SuperRPGMenu_Ingame);
///<reference path="SuperRPGMenu_Ingame.ts"/>
var SuperRPGMenu_Shop = (function (_super) {
    __extends(SuperRPGMenu_Shop, _super);
    // Constructor
    function SuperRPGMenu_Shop(superRPG) {
        _super.call(this, superRPG, "places/village/thirdHouseGames/SuperRPG/shop", 0);
    }
    // Public methods
    SuperRPGMenu_Shop.prototype.addBuyingDefenseItem = function (defenseItem, defense, price) {
        this.addEntry(new SuperRPGMenuEntry(defenseItem + " (" + price + ")", new CallbackCollection(this.buyDefenseItem.bind(this, defenseItem, defense, price))));
    };
    SuperRPGMenu_Shop.prototype.addBuyingHealthCrystal = function () {
        this.addEntry(new SuperRPGMenuEntry("Health crystal (100)", new CallbackCollection(this.buyHealthCrystal.bind(this))));
    };
    SuperRPGMenu_Shop.prototype.addBuyingHealthPendant = function () {
        this.addEntry(new SuperRPGMenuEntry("Health pendant (30)", new CallbackCollection(this.buyHealthPendant.bind(this))));
    };
    SuperRPGMenu_Shop.prototype.addBuyingHealthPotion = function () {
        this.addEntry(new SuperRPGMenuEntry("Health potion (5)", new CallbackCollection(this.buyHealthPotion.bind(this))));
    };
    SuperRPGMenu_Shop.prototype.addBuyingSuperHealthPotion = function () {
        this.addEntry(new SuperRPGMenuEntry("Health potion ++ (25)", new CallbackCollection(this.buySuperHealthPotion.bind(this))));
    };
    SuperRPGMenu_Shop.prototype.addBuyingWeapon = function (weapon, damage, price) {
        this.addEntry(new SuperRPGMenuEntry(weapon + " (" + price + ")", new CallbackCollection(this.buyWeapon.bind(this, weapon, damage, price))));
    };
    SuperRPGMenu_Shop.prototype.addQuitTheShop = function () {
        this.addEntry(new SuperRPGMenuEntry("Quit the shop", new CallbackCollection(this.getSuperRPG().nextFloorStep.bind(this.getSuperRPG()))));
    };
    // Private methods
    SuperRPGMenu_Shop.prototype.buyDefenseItem = function (defenseItem, defense, price) {
        if (this.getSuperRPG().getCoins() >= price && this.getSuperRPG().getDefense() < defense) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - price);
            this.getSuperRPG().setDefenseItem(defenseItem);
            this.getSuperRPG().setDefense(defense);
        }
    };
    SuperRPGMenu_Shop.prototype.buyHealthCrystal = function () {
        if (this.getSuperRPG().getCoins() >= 100) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 100);
            this.getSuperRPG().setMaxHp(this.getSuperRPG().getMaxHp() + 20);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 20);
        }
    };
    SuperRPGMenu_Shop.prototype.buyHealthPendant = function () {
        if (this.getSuperRPG().getCoins() >= 30) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 30);
            this.getSuperRPG().setMaxHp(this.getSuperRPG().getMaxHp() + 5);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 5);
        }
    };
    SuperRPGMenu_Shop.prototype.buyHealthPotion = function () {
        if (this.getSuperRPG().getCoins() >= 5 && this.getSuperRPG().getHp() < this.getSuperRPG().getMaxHp()) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 5);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 8);
        }
    };
    SuperRPGMenu_Shop.prototype.buySuperHealthPotion = function () {
        if (this.getSuperRPG().getCoins() >= 25 && this.getSuperRPG().getHp() < this.getSuperRPG().getMaxHp()) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 25);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 50);
        }
    };
    SuperRPGMenu_Shop.prototype.buyWeapon = function (weapon, damage, price) {
        if (this.getSuperRPG().getCoins() >= price && this.getSuperRPG().getDamage() < damage) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - price);
            this.getSuperRPG().setWeapon(weapon);
            this.getSuperRPG().setDamage(damage);
        }
    };
    return SuperRPGMenu_Shop;
})(SuperRPGMenu_Ingame);
var SuperRPGStep;
(function (SuperRPGStep) {
    SuperRPGStep[SuperRPGStep["SPLASH_SCREEN"] = 0] = "SPLASH_SCREEN";
    SuperRPGStep[SuperRPGStep["GAME"] = 1] = "GAME";
    SuperRPGStep[SuperRPGStep["LOSE"] = 2] = "LOSE";
})(SuperRPGStep || (SuperRPGStep = {}));
///<reference path="ThirdHouseGame.ts"/>
Saving.registerBool("SuperRPGReward1", false);
Saving.registerBool("SuperRPGReward2", false);
Saving.registerBool("SuperRPGReward3", false);
Saving.registerBool("SuperRPGReward4", false);
Saving.registerBool("SuperRPGUnlockedHardmode", false);
var SuperRPG = (function (_super) {
    __extends(SuperRPG, _super);
    function SuperRPG() {
        _super.apply(this, arguments);
        // The global step of the game (splash screen, the menu, or the game itself
        this.step = SuperRPGStep.SPLASH_SCREEN;
        // The timer used for the splash screen
        this.splashScreenTimer = 39;
        // The current menu
        this.menu = null;
        // Should we exit the game?
        this.shouldExitGame = false;
    }
    // Public methods
    SuperRPG.prototype.exitGame = function () {
        this.shouldExitGame = true;
    };
    SuperRPG.prototype.nextFloorStep = function () {
        switch (this.floorStep) {
            case SuperRPGFloorStep.SHOP:
                this.floorStep = SuperRPGFloorStep.MONSTER1;
                this.goToMonster();
                break;
            case SuperRPGFloorStep.MONSTER1:
                this.floorStep = SuperRPGFloorStep.MONSTER2;
                this.goToMonster();
                break;
            case SuperRPGFloorStep.MONSTER2:
                this.floorStep = SuperRPGFloorStep.MONSTER3;
                this.goToMonster();
                break;
            case SuperRPGFloorStep.MONSTER3:
                this.floorStep = SuperRPGFloorStep.SHOP;
                this.floor += 1;
                this.goToShop();
                break;
        }
    };
    SuperRPG.prototype.startGame = function (hardmode) {
        // Set the hardmode (from parameter)
        this.hardmode = hardmode;
        // Set various stuff
        this.floor = 0;
        this.floorStep = SuperRPGFloorStep.SHOP;
        this.coins = 15;
        this.hp = 10;
        this.maxHp = 10;
        this.weapon = "Your fists";
        this.damage = 1;
        this.defenseItem = "Nothing";
        this.defense = 0;
        // Load the shop
        this.goToShop();
    };
    SuperRPG.prototype.run = function () {
        // To store the return value
        var returnValue = false;
        // If we should exit the game, we do so now
        if (this.shouldExitGame)
            return true;
        // Reset the area
        this.getRenderArea().resetAllButSize();
        // Do something different depending on the step
        switch (this.step) {
            case SuperRPGStep.SPLASH_SCREEN:
                this.drawSplashScreen();
                returnValue = this.runSplashScreen();
                break;
            case SuperRPGStep.GAME:
                this.drawGame();
                returnValue = this.runGame();
                break;
            case SuperRPGStep.LOSE:
                this.drawLose();
                returnValue = false;
                break;
        }
        // We return
        return returnValue;
    };
    // Public getters
    SuperRPG.prototype.getCoins = function () {
        return this.coins;
    };
    SuperRPG.prototype.getDamage = function () {
        return this.damage;
    };
    SuperRPG.prototype.getDefense = function () {
        return this.defense;
    };
    SuperRPG.prototype.getDefenseItem = function () {
        return this.defenseItem;
    };
    SuperRPG.prototype.getFloor = function () {
        return this.floor;
    };
    SuperRPG.prototype.getFloorStep = function () {
        return this.floorStep;
    };
    SuperRPG.prototype.getHardmode = function () {
        return this.hardmode;
    };
    SuperRPG.prototype.getHp = function () {
        return this.hp;
    };
    SuperRPG.prototype.getMaxHp = function () {
        return this.maxHp;
    };
    SuperRPG.prototype.getWeapon = function () {
        return this.weapon;
    };
    // Public setters
    SuperRPG.prototype.setCoins = function (coins) {
        this.coins = coins;
    };
    SuperRPG.prototype.setDamage = function (damage) {
        this.damage = damage;
    };
    SuperRPG.prototype.setDefense = function (defense) {
        this.defense = defense;
    };
    SuperRPG.prototype.setDefenseItem = function (defenseItem) {
        this.defenseItem = defenseItem;
    };
    SuperRPG.prototype.setHp = function (hp) {
        this.hp = hp;
        // If we have more hp than the maximum, we correct that
        if (this.hp > this.maxHp)
            this.hp = this.maxHp;
        // If we have 0 or less hp, we lose!!
        if (this.hp <= 0)
            this.goToLose();
    };
    SuperRPG.prototype.setMaxHp = function (maxHp) {
        this.maxHp = maxHp;
    };
    SuperRPG.prototype.setWeapon = function (weapon) {
        this.weapon = weapon;
    };
    // Private methods
    SuperRPG.prototype.drawGame = function () {
        this.menu.draw(this.getRenderArea());
    };
    SuperRPG.prototype.drawLose = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/SuperRPG/youLose"), 8, 1);
        if (this.reward == 0)
            this.getRenderArea().drawString("At floor " + this.floor + ". And got no candies.", 8, 7);
        else
            this.getRenderArea().drawString("At floor " + this.floor + ". And got " + this.reward + " candies.", 8, 7);
    };
    SuperRPG.prototype.drawSplashScreen = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/SuperRPG/splashScreen"), -67 + this.splashScreenTimer * 3, 2);
    };
    SuperRPG.prototype.getCandiesWeWillGain = function () {
        // The reward
        var reward = 0;
        // Test the first reward
        if (Saving.loadBool("SuperRPGReward1") == false && this.floor > 5) {
            reward += 100;
            Saving.saveBool("SuperRPGReward1", true);
        }
        // Test the second reward
        if (Saving.loadBool("SuperRPGReward2") == false && this.floor > 10) {
            reward += 1000;
            Saving.saveBool("SuperRPGReward2", true);
        }
        // Test the third reward
        if (Saving.loadBool("SuperRPGReward3") == false && this.floor > 13) {
            reward += 10000;
            Saving.saveBool("SuperRPGReward3", true);
        }
        // Test the fourth reward
        if (Saving.loadBool("SuperRPGReward4") == false && this.floor > 20) {
            reward += 30000;
            Saving.saveBool("SuperRPGReward4", true);
            Saving.saveBool("SuperRPGUnlockedHardmode", true);
        }
        // We return the reward
        return reward;
    };
    SuperRPG.prototype.goToLose = function () {
        // No more menu
        this.menu = null;
        // Change the step
        this.step = SuperRPGStep.LOSE;
        // Get the candies
        this.reward = this.getCandiesWeWillGain();
        this.getThirdHouse().getGame().getCandies().add(this.reward);
    };
    SuperRPG.prototype.goToMainMenu = function () {
        // Change the step
        this.step = SuperRPGStep.GAME;
        // Set the main menu
        this.menu = new SuperRPGMenu_Main(this);
    };
    SuperRPG.prototype.goToMonster = function () {
        // Create the new menu
        var menu = new SuperRPGMenu_Monster(this);
        // Add the entry used to quit the shop
        menu.addUsualEntries();
        // Set the monster / add entries, depending on the floor
        switch (this.floor) {
            case 0:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(20);
                else
                    menu.setBlob();
                break;
            case 1:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(30);
                else if (Random.flipACoin())
                    menu.setBlob();
                else
                    menu.setFerociousBlob();
                break;
            case 2:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(40);
                else if (Random.flipACoin()) {
                    if (Random.oneChanceOutOf(5))
                        menu.setBlob();
                    else
                        menu.setFerociousBlob();
                }
                else
                    menu.setGoblin();
                break;
            case 3:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(50);
                else if (this.floorStep == SuperRPGFloorStep.MONSTER3)
                    menu.setGoblin();
                else
                    menu.setFerociousGoblin();
                break;
            case 4:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(60);
                else if (Random.oneChanceOutOf(3))
                    menu.setFerociousGoblin();
                else
                    menu.setSkeletonOrBillGatesSkeleton();
                break;
            case 5:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(70);
                else if (Random.oneChanceOutOf(3))
                    menu.setSkeletonOrBillGatesSkeleton();
                else
                    menu.setFerociousSkeleton();
                break;
            case 6:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(80);
                else
                    menu.setFerociousSkeleton();
                break;
            case 7:
                // Big spider
                if (this.floorStep == SuperRPGFloorStep.MONSTER3)
                    menu.setSpider();
                else
                    menu.setSpiders();
                break;
            case 8:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(100);
                else
                    menu.setBabyVampire();
                break;
            case 9:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(110);
                else {
                    if (this.floorStep == SuperRPGFloorStep.MONSTER2)
                        menu.setSpiders();
                    else
                        menu.setSpider();
                }
                break;
            case 10:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(120);
                else
                    menu.setThing();
                break;
            case 11:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(130);
                else
                    menu.setSpider();
                break;
            case 12:
                if (Random.flipACoin())
                    menu.setChest(140);
                else
                    menu.setBomb();
                break;
            case 13:
                switch (this.floorStep) {
                    case SuperRPGFloorStep.MONSTER1:
                        menu.setCorpse1();
                        break;
                    case SuperRPGFloorStep.MONSTER2:
                        menu.setCorpse2();
                        break;
                    case SuperRPGFloorStep.MONSTER3:
                        menu.setDragon();
                        break;
                }
                break;
            default:
                menu.setAbstract(10 + (this.floor - 14) * 12, 0, Math.ceil(500 * (1 / (this.floor - 13))), 30 + (this.floor - 13) * 3);
                break;
        }
        // Set the menu
        this.menu = menu;
    };
    SuperRPG.prototype.goToShop = function () {
        // Create the new menu
        var menu = new SuperRPGMenu_Shop(this);
        // Add different items depending on the floor
        switch (this.floor) {
            case 0:
                menu.addBuyingWeapon("Wooden sword", 2, 10);
                menu.addBuyingDefenseItem("Wooden shield", 1, 10);
                break;
            case 1:
                menu.addBuyingWeapon("Copper sword", 3, 15);
                menu.addBuyingDefenseItem("Copper shield", 2, 15);
                menu.addBuyingHealthPotion();
                break;
            case 2:
                menu.addBuyingWeapon("Iron sword", 4, 20);
                menu.addBuyingDefenseItem("Iron shield", 3, 20);
                menu.addBuyingHealthPotion();
                break;
            case 3:
                menu.addBuyingWeapon("Silver sword", 5, 30);
                menu.addBuyingDefenseItem("Silver shield", 4, 30);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 4:
                menu.addBuyingWeapon("Gold sword", 6, 40);
                menu.addBuyingDefenseItem("Gold shield", 5, 40);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 5:
                menu.addBuyingWeapon("Diamond sword", 7, 50);
                menu.addBuyingDefenseItem("Diamond shield", 6, 50);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 6:
                menu.addBuyingWeapon("Falchion", 8, 100);
                menu.addBuyingDefenseItem("Diamond shield", 6, 50);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 7:
                menu.addBuyingWeapon("Falchion", 8, 100);
                menu.addBuyingDefenseItem("Shield of El Cid", 8, 100);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 8:
                menu.addBuyingWeapon("Dagger of Time", 10, 180);
                menu.addBuyingDefenseItem("Shield of El Cid", 8, 100);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 9:
                menu.addBuyingWeapon("Dagger of Time", 10, 180);
                menu.addBuyingDefenseItem("Shield of Achilles", 10, 180);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 10:
                menu.addBuyingWeapon("Vorpal sword", 12, 250);
                menu.addBuyingDefenseItem("Shield of Achilles", 10, 180);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 11:
                menu.addBuyingWeapon("Vorpal sword", 12, 250);
                menu.addBuyingDefenseItem("Wynebgwrthucher", 12, 250);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 12:
                menu.addBuyingWeapon("Morgul-blade", 14, 400);
                menu.addBuyingDefenseItem("Wynebgwrthucher", 12, 250);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 13:
                menu.addBuyingWeapon("Morgul-blade", 14, 400);
                menu.addBuyingDefenseItem("Ancile", 14, 400);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 14:
                menu.addBuyingWeapon("Excalibur", 16, 600);
                menu.addBuyingDefenseItem("Ancile", 14, 400);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            case 15:
                menu.addBuyingWeapon("Excalibur", 16, 600);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            case 16:
                menu.addBuyingWeapon("Tonbogiri", 18, 1000);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            case 17:
            case 18:
            case 19:
                menu.addBuyingWeapon("Gungnir", 20, 1500);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            default:
                menu.addBuyingWeapon("Mjolnir", 30, 2000);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
        }
        // Add the entry used to quit the shop
        menu.addQuitTheShop();
        // Set the menu
        this.menu = menu;
    };
    SuperRPG.prototype.pressedDownButton = function () {
        if (this.menu != null)
            this.menu.pressedDownButton();
    };
    SuperRPG.prototype.pressedSpaceButton = function () {
        if (this.step == SuperRPGStep.LOSE) {
            this.shouldExitGame = true;
        }
        if (this.menu != null)
            this.menu.pressedSpaceButton();
    };
    SuperRPG.prototype.pressedUpButton = function () {
        if (this.menu != null)
            this.menu.pressedUpButton();
    };
    SuperRPG.prototype.runGame = function () {
        return false;
    };
    SuperRPG.prototype.runSplashScreen = function () {
        // If the timer is >= 0
        if (this.splashScreenTimer >= 0) {
            // Reduce the timer
            this.splashScreenTimer -= 1;
        }
        else {
            // Switch to the next step
            this.goToMainMenu();
        }
        // We can't end the game during the splash screen
        return false;
    };
    return SuperRPG;
})(ThirdHouseGame);
///<reference path="QuestEntity.ts"/>
var Teapot = (function (_super) {
    __extends(Teapot, _super);
    // Constructor
    function Teapot(quest, pos) {
        _super.call(this, quest, pos, new Naming("A teapot", "a teapot"), new RenderArea(19, 6), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(6, 1), new Pos(8, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(18, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(17, 1)), new CollisionBox(this, new Pos(3, 4), new Pos(16, 1)), new CollisionBox(this, new Pos(5, 5), new Pos(12, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(1000000);
        this.setHp(1000000);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/teapot"));
        this.setTransparency(new RenderTransparency(" ", "%"));
    }
    // update()
    Teapot.prototype.update = function () {
        _super.prototype.update.call(this);
        console.log(this.getHp());
        // We heal ourselves if the player is too far on the left
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.getGlobalPosition().x - 50)
            this.heal(50);
    };
    // willDie()
    Teapot.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage()));
        // The spoon
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponGiantSpoon", "You found a giant spoon inside the teapot.", "You gain a giant spoon."));
    };
    return Teapot;
})(QuestEntity);
var TheArenaModuleQuest = (function () {
    // Constructor
    function TheArenaModuleQuest(questFolderName, specialCallback) {
        // Set from parameters
        this.questFolderName = questFolderName;
        this.specialCallback = specialCallback;
    }
    // Public methods
    TheArenaModuleQuest.prototype.drawLogo = function (renderArea, x, y, game) {
        // Draw the logo ascii art
        renderArea.drawArray(Database.getAscii("arena/" + this.questFolderName + "/logo"), x + 1, y + 1);
        // Add the button and the link
        renderArea.addMultipleAsciiButtons("theArenaQuest" + this.questFolderName, x + 1, x + 19, y + 1, x + 1, x + 19, y + 2, x + 1, x + 19, y + 3, x + 1, x + 19, y + 4);
        renderArea.addLinkCall(".theArenaQuest" + this.questFolderName, new CallbackCollection(this.launchQuest.bind(this, game)));
    };
    // Public getters
    TheArenaModuleQuest.prototype.getQuestFolderName = function () {
        return this.questFolderName;
    };
    // Private methods
    TheArenaModuleQuest.prototype.launchQuest = function (game) {
        if (game.canStartQuest()) {
            game.getStatusBar().selectTabByType(StatusBarTabType.MAP);
            game.goToMap();
            game.setPlace(this.specialCallback(game));
        }
    };
    return TheArenaModuleQuest;
})();
var TheArenaModule;
(function (TheArenaModule) {
    var quests = {};
    // Add a quest
    function addQuest(quest) {
        quests[quest.getQuestFolderName()] = quest;
    }
    TheArenaModule.addQuest = addQuest;
    // Get a quest
    function getQuest(questFolderName) {
        return quests[questFolderName];
    }
    TheArenaModule.getQuest = getQuest;
})(TheArenaModule || (TheArenaModule = {}));
///<reference path="Place.ts"/>
var TheArena = (function (_super) {
    __extends(TheArena, _super);
    // Constructor
    function TheArena(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resize(100, 20);
        this.update();
    }
    // getRenderArea()
    TheArena.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    TheArena.prototype.drawQuestLogo = function (questFolderName, x, y) {
        // If the quest folder name given isn't null
        if (questFolderName != null) {
            // If this quest doesn't exist
            if (TheArenaModule.getQuest(questFolderName) == null)
                console.log("Trying to draw the arena quest " + questFolderName + " which wasn't added to the arena module.");
            else {
                // Draw the logo
                TheArenaModule.getQuest(questFolderName).drawLogo(this.renderArea, x, y, this.getGame());
            }
        }
        // Draw the borders
        this.renderArea.drawHorizontalLine("-", x, x + 19, y);
        this.renderArea.drawHorizontalLine("-", x, x + 19, y + 5);
        this.renderArea.drawVerticalLine("|", x, y, y + 5);
        this.renderArea.drawVerticalLine("|", x + 19, y, y + 5);
    };
    TheArena.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Quick explanation
        this.renderArea.drawString("The Arena is a special area featuring additional quests written by players.", 12, 1);
        // List of quests
        this.drawQuestLogo("peacefulForest", 2, 3);
        this.drawQuestLogo("hardcorePlatformer", 21, 3);
        this.drawQuestLogo(null, 40, 3);
        this.drawQuestLogo(null, 59, 3);
        this.drawQuestLogo(null, 78, 3);
        this.drawQuestLogo(null, 2, 8);
        this.drawQuestLogo(null, 21, 8);
        this.drawQuestLogo(null, 40, 8);
        this.drawQuestLogo(null, 59, 8);
        this.drawQuestLogo(null, 78, 8);
        // Hardmode
        this.renderArea.drawString("If you want more challenge, you can also play hardmode here : ", 1, 17);
        this.renderArea.addHtmlLink(63, 17, "http://candybox2.net/?gamemode=hard", "http://candybox2.net/?gamemode=hard");
        // Create your quest!
        this.renderArea.drawString("If you're a programmer and you want to create a quest,                     and                 !", 1, 15);
        this.renderArea.addHtmlLink(56, 15, "source_code.html", "get the source code");
        this.renderArea.addHtmlLink(80, 15, "create_quest.html", "follow the guide");
    };
    return TheArena;
})(Place);
var TheCaveAdditionalCharacter = (function () {
    // Constructor
    function TheCaveAdditionalCharacter(theCave, characterString, characterPosition) {
        if (characterString === void 0) { characterString = null; }
        if (characterPosition === void 0) { characterPosition = null; }
        // We set the cave
        this.theCave = theCave;
        // If the string given in parameter isn't null
        if (characterString != null) {
            // We set our string from this one
            this.characterString = characterString;
        }
        else {
            // We choose a string randomly from the possible strings
            this.characterString = this.theCave.getAdditionalCharactersPossible()[Random.upTo(this.theCave.getAdditionalCharactersPossible().length - 1)];
        }
        // If the position given in parameters isn't null
        if (characterPosition != null) {
            // We set our position from this one
            this.characterPosition = characterPosition;
        }
        else {
            // We choose a position randomly from the possible positions
            this.characterPosition = this.theCave.getAdditionalCharactersPositionsPossible()[Random.upTo(this.theCave.getAdditionalCharactersPositionsPossible().length - 1)];
        }
    }
    // Public getters
    TheCaveAdditionalCharacter.prototype.getPosition = function () {
        return this.characterPosition;
    };
    TheCaveAdditionalCharacter.prototype.getString = function () {
        return this.characterString;
    };
    return TheCaveAdditionalCharacter;
})();
///<reference path="Place.ts"/>
var TheCaveExit = (function (_super) {
    __extends(TheCaveExit, _super);
    // Constructor
    function TheCaveExit(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/theCave/exit"), 42, 3);
        this.update();
    }
    // getRenderArea()
    TheCaveExit.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    TheCaveExit.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Draw the background
        this.renderArea.drawArray(Database.getAscii("places/theCave/exit"), 21, 3);
        // Draw the text
        this.renderArea.drawString(Database.getText("theCaveExitText0"), 30, 3);
        this.renderArea.drawString(Database.getText("theCaveExitText1"), 30, 4);
        // Draw the translated text
        this.renderArea.drawString(Database.getTranslatedText("theCaveExitText0"), 30, 6, true);
        this.renderArea.drawString(Database.getTranslatedText("theCaveExitText1"), 30, 7, true);
        // Add the button to return to the main map
        this.renderArea.addAsciiRealButton(Database.getText("theCaveExitButtonText"), 41, 20, "theCaveExitReturnToMapButton", Database.getTranslatedText("theCaveExitButtonText"), true);
        this.renderArea.addLinkCall(".theCaveExitReturnToMapButton", new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())));
    };
    return TheCaveExit;
})(Place);
var TheCaveMoveType;
(function (TheCaveMoveType) {
    TheCaveMoveType[TheCaveMoveType["LEFT"] = 0] = "LEFT";
    TheCaveMoveType[TheCaveMoveType["RIGHT"] = 1] = "RIGHT";
    TheCaveMoveType[TheCaveMoveType["STRAIGHT"] = 2] = "STRAIGHT";
})(TheCaveMoveType || (TheCaveMoveType = {}));
var TheCavePattern = (function () {
    // Constructor
    function TheCavePattern(theCave) {
        this.theCave = theCave;
    }
    // Public methods
    TheCavePattern.prototype.draw = function (renderArea, x, y) {
    };
    TheCavePattern.prototype.ended = function () {
        return false;
    };
    TheCavePattern.prototype.getSentence = function () {
        return null;
    };
    TheCavePattern.prototype.move = function (type) {
    };
    // Public getters
    TheCavePattern.prototype.getTheCave = function () {
        return this.theCave;
    };
    return TheCavePattern;
})();
///<reference path="TheCavePattern.ts"/>
var TheCavePattern_ArrowsToHeartPlug = (function (_super) {
    __extends(TheCavePattern_ArrowsToHeartPlug, _super);
    // Constructor
    function TheCavePattern_ArrowsToHeartPlug(theCave) {
        _super.call(this, theCave);
        // Is the pattern stopped?
        this.stopped = false;
        // Should we draw an arrow?
        this.arrow = true;
        // Number of times the player correctly followed the arrows
        this.followedNumber = 0;
        // Did we find the heart plug?
        this.foundPlug = false;
        // Did we get the heart plug? (true if the player clicked on it)
        this.gotPlug = false;
        // Choose a random direction
        this.arrowAtRight = Random.flipACoin();
    }
    // Public methods
    TheCavePattern_ArrowsToHeartPlug.prototype.draw = function (renderArea, x, y) {
        // If we should draw an arrow
        if (this.arrow) {
            // Draw a different arrow depending on the direction
            if (this.arrowAtRight == true) {
                renderArea.drawString("->", x + 71, y + 17);
            }
            else {
                renderArea.drawString("<-", x + 26, y + 17);
            }
        }
        // If we found the plug and didn't pick it up yet
        if (this.foundPlug == true && this.gotPlug == false) {
            // Draw the plug ascii art
            renderArea.drawArray(Database.getAscii("places/theCave/heartPlug"), x + 46, y + 14);
            // Draw the button over the plug
            renderArea.addMultipleAsciiButtons("theCavePattern_ArrowsToHeartPlugButton", x + 46, x + 53, y + 14, x + 46, x + 53, y + 15);
            // Add the button link
            renderArea.addLinkCall(".theCavePattern_ArrowsToHeartPlugButton", new CallbackCollection(this.getPlug.bind(this)));
        }
    };
    TheCavePattern_ArrowsToHeartPlug.prototype.ended = function () {
        return this.stopped;
    };
    TheCavePattern_ArrowsToHeartPlug.prototype.getSentence = function () {
        // If we found the plug but didn't get it yet, we return the sentence
        if (this.foundPlug == true && this.gotPlug == false) {
            return "theCavePattern_ArrowsToHeartPlugSeeStrangePlug";
        }
        // Else, we return null
        return null;
    };
    TheCavePattern_ArrowsToHeartPlug.prototype.move = function (type) {
        // If the arrow is at right and we just went right or the arrow is at left and we just went left, we continue
        if ((this.arrowAtRight == true && type == TheCaveMoveType.RIGHT) ||
            (this.arrowAtRight == false && type == TheCaveMoveType.LEFT)) {
            // If we didn't find the plug yet
            if (this.foundPlug == false) {
                // If we followed at least six arrows
                if (this.followedNumber > 6) {
                    this.foundPlug = true;
                    this.arrow = false;
                }
                else {
                    // Possibly change the arrow direction
                    this.arrowAtRight = Random.flipACoin();
                    // Increase the followed number
                    this.followedNumber += 1;
                }
            }
            else
                this.stopped = true;
        }
        else {
            this.stopped = true;
        }
    };
    // Private methods
    TheCavePattern_ArrowsToHeartPlug.prototype.getPlug = function () {
        // Get the plug
        this.getTheCave().getGame().gainItem("gridItemPossessedHeartPlug");
        this.gotPlug = true;
        // Ask the cave for an update
        this.getTheCave().aPatternNeedsUpdating();
    };
    return TheCavePattern_ArrowsToHeartPlug;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
Saving.registerBool("TheCavePattern_ChocolateBarNowGotTheBar", false);
var TheCavePattern_ChocolateBarNow = (function (_super) {
    __extends(TheCavePattern_ChocolateBarNow, _super);
    // Constructor
    function TheCavePattern_ChocolateBarNow(theCave) {
        _super.call(this, theCave);
        // Did we clicked to get the bar?
        this.gotTheBar = false;
    }
    // Public methods
    TheCavePattern_ChocolateBarNow.prototype.draw = function (renderArea, x, y) {
        // If we didn't pick the bar yet
        if (this.gotTheBar == false) {
            // Draw the bar ascii art
            renderArea.drawArray(Database.getAscii("places/theCave/chocolateBar"), x + 40, y + 25);
            // Draw the button over the plug
            renderArea.addMultipleAsciiButtons("theCavePattern_ChocolateBarNowButton", x + 40, x + 57, y + 26, x + 40, x + 57, y + 27);
            // Add the button link
            renderArea.addLinkCall(".theCavePattern_ChocolateBarNowButton", new CallbackCollection(this.getTheBar.bind(this)));
        }
    };
    TheCavePattern_ChocolateBarNow.prototype.ended = function () {
        return true;
    };
    TheCavePattern_ChocolateBarNow.prototype.getSentence = function () {
        // If we didn't pick the bar yet, we return the sentence
        if (this.gotTheBar == false) {
            return "theCavePattern_ChocolateBarNowSeeChocolateBar";
        }
        // Else, we return null
        return null;
    };
    // Private methods
    TheCavePattern_ChocolateBarNow.prototype.getTheBar = function () {
        // Get the bar
        this.getTheCave().getGame().getChocolateBars().add(1);
        this.gotTheBar = true;
        // We can't get the bar anymore (we can't start this pattern)
        Saving.saveBool("TheCavePattern_ChocolateBarNowGotTheBar", true);
        // Ask the cave for an update
        this.getTheCave().aPatternNeedsUpdating();
    };
    return TheCavePattern_ChocolateBarNow;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
var TheCavePattern_MonkeyWizard = (function (_super) {
    __extends(TheCavePattern_MonkeyWizard, _super);
    // Constructor
    function TheCavePattern_MonkeyWizard(theCave) {
        _super.call(this, theCave);
    }
    // Public methods
    TheCavePattern_MonkeyWizard.prototype.draw = function (renderArea, x, y) {
        // Draw the monkey wizard
        renderArea.drawArray(Database.getAscii("places/theCave/monkeyWizard"), x + 32, y + 6, new RenderTransparency(" ", "%"));
        // Add the button & the link allowing the player to challenge him
        renderArea.addAsciiRealButton(Database.getText("theCavePattern_MonkeyWizardButton"), x + 39, y + 26, "theCavePattern_MonkeyWizardButton", Database.getTranslatedText("theCavePattern_MonkeyWizardButton"));
        renderArea.addLinkCall(".theCavePattern_MonkeyWizardButton", new CallbackCollection(this.challenge.bind(this)));
    };
    TheCavePattern_MonkeyWizard.prototype.ended = function () {
        return true;
    };
    TheCavePattern_MonkeyWizard.prototype.getSentence = function () {
        return "theCavePattern_MonkeyWizardSentence";
    };
    // Private methods
    TheCavePattern_MonkeyWizard.prototype.challenge = function () {
        if (this.getTheCave().getGame().canStartQuest())
            this.getTheCave().getGame().setPlace(new MonkeyWizardQuest(this.getTheCave().getGame()));
    };
    return TheCavePattern_MonkeyWizard;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
var TheCavePattern_OctopusKing = (function (_super) {
    __extends(TheCavePattern_OctopusKing, _super);
    // Constructor
    function TheCavePattern_OctopusKing(theCave) {
        _super.call(this, theCave);
    }
    // Public methods
    TheCavePattern_OctopusKing.prototype.draw = function (renderArea, x, y) {
        // Draw the monkey wizard
        renderArea.drawArray(Database.getAscii("places/theCave/octopusKing"), x + 32, y + 6, new RenderTransparency(" ", "%"));
        // Add the button & the link allowing the player to challenge him
        renderArea.addAsciiRealButton(Database.getText("theCavePattern_OctopusKingButton"), x + 39, y + 26, "theCavePattern_OctopusKingButton", Database.getTranslatedText("theCavePattern_OctopusKingButton"));
        renderArea.addLinkCall(".theCavePattern_OctopusKingButton", new CallbackCollection(this.challenge.bind(this)));
    };
    TheCavePattern_OctopusKing.prototype.ended = function () {
        return true;
    };
    TheCavePattern_OctopusKing.prototype.getSentence = function () {
        return "theCavePattern_OctopusKingSentence";
    };
    // Private methods
    TheCavePattern_OctopusKing.prototype.challenge = function () {
        if (this.getTheCave().getGame().canStartQuest())
            this.getTheCave().getGame().setPlace(new OctopusKingQuest(this.getTheCave().getGame()));
    };
    return TheCavePattern_OctopusKing;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
Saving.registerBool("TheCavePattern_TreasureMapSawMap", false);
Saving.registerBool("TheCavePattern_TreasureMapFoundTreasure", false);
var TheCavePattern_TreasureMap = (function (_super) {
    __extends(TheCavePattern_TreasureMap, _super);
    // Constructor
    function TheCavePattern_TreasureMap(theCave) {
        _super.call(this, theCave);
        // We saw the map!
        Saving.saveBool("TheCavePattern_TreasureMapSawMap", true);
    }
    // Public methods
    TheCavePattern_TreasureMap.prototype.draw = function (renderArea, x, y) {
        renderArea.drawArray(Database.getAscii("places/theCave/treasureMap"), x + 38, y + 22);
    };
    TheCavePattern_TreasureMap.prototype.ended = function () {
        return true;
    };
    TheCavePattern_TreasureMap.prototype.getSentence = function () {
        return "theCavePattern_TreasureMapSentence";
    };
    return TheCavePattern_TreasureMap;
})(TheCavePattern);
///<reference path="Place.ts"/>
var TheCave = (function (_super) {
    __extends(TheCave, _super);
    // Constructor
    function TheCave(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Last moves chosen
        this.lastMoves = [];
        // Database text names for the first sentence below
        this.firstSentence = null;
        // Pattern currently in use
        this.pattern = null;
        // Add the additional characters to the array
        this.createAdditionalCharactersPossible();
        // Add the additional characters positions to the array
        this.createAdditionalCharactersPositionsPossible();
        // Create the current way
        this.createWay();
        // Resize & update
        this.renderArea.resizeFromArray(Database.getAscii("places/theCave/ways"), 42, 7); // 3 for the return to map button + 4 for the two sentences = 7
        this.update();
    }
    // getRenderArea()
    TheCave.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Public methods
    TheCave.prototype.aPatternNeedsUpdating = function () {
        this.update();
        this.getGame().updatePlace();
    };
    // Public getters
    TheCave.prototype.getAdditionalCharactersPositionsPossible = function () {
        return this.additionalCharactersPositionsPossible;
    };
    TheCave.prototype.getAdditionalCharactersPossible = function () {
        return this.additionalCharactersPossible;
    };
    // Private methods
    TheCave.prototype.createAdditionalCharactersPositionsPossible = function () {
        // Reset the array
        this.additionalCharactersPositionsPossible = [];
        // Add positions
        this.additionalCharactersPositionsPossible.push(new Pos(20, 6));
        this.additionalCharactersPositionsPossible.push(new Pos(19, 9));
        this.additionalCharactersPositionsPossible.push(new Pos(17, 13));
        this.additionalCharactersPositionsPossible.push(new Pos(20, 18));
        this.additionalCharactersPositionsPossible.push(new Pos(17, 24));
        this.additionalCharactersPositionsPossible.push(new Pos(41, 19));
        this.additionalCharactersPositionsPossible.push(new Pos(56, 16));
        this.additionalCharactersPositionsPossible.push(new Pos(52, 22));
        this.additionalCharactersPositionsPossible.push(new Pos(31, 23));
        this.additionalCharactersPositionsPossible.push(new Pos(64, 28));
        this.additionalCharactersPositionsPossible.push(new Pos(64, 12));
        this.additionalCharactersPositionsPossible.push(new Pos(75, 5));
        this.additionalCharactersPositionsPossible.push(new Pos(80, 12));
        this.additionalCharactersPositionsPossible.push(new Pos(77, 17));
        this.additionalCharactersPositionsPossible.push(new Pos(80, 20));
        this.additionalCharactersPositionsPossible.push(new Pos(78, 26));
    };
    TheCave.prototype.createAdditionalCharactersPossible = function () {
        // Reset the array
        this.additionalCharactersPossible = [];
        // Add characters
        this.additionalCharactersPossible.push("V");
        this.additionalCharactersPossible.push("\\");
        this.additionalCharactersPossible.push("/");
        this.additionalCharactersPossible.push("'");
        this.additionalCharactersPossible.push("`");
        this.additionalCharactersPossible.push("~");
        this.additionalCharactersPossible.push(")");
        this.additionalCharactersPossible.push("(");
        this.additionalCharactersPossible.push("}");
        this.additionalCharactersPossible.push("{");
        this.additionalCharactersPossible.push("@");
        this.additionalCharactersPossible.push(">");
        this.additionalCharactersPossible.push("^");
    };
    TheCave.prototype.createWay = function (moveType) {
        if (moveType === void 0) { moveType = null; }
        // A variable used in the loop choosing the new pattern
        var cont;
        // Reset the additional characters array
        this.additionalCharacters = [];
        // Set the first sentence
        switch (moveType) {
            case TheCaveMoveType.STRAIGHT:
                this.firstSentence = "theCaveFirstSentenceWentStraight";
                break;
            case TheCaveMoveType.LEFT:
                this.firstSentence = "theCaveFirstSentenceWentLeft";
                break;
            case TheCaveMoveType.RIGHT:
                this.firstSentence = "theCaveFirstSentenceWentRight";
                break;
            case null:
                this.firstSentence = "theCaveFirstSentenceYouAre";
                break;
        }
        // If there's a pattern, we possibly set it to null
        if (this.pattern != null) {
            // If this pattern should end, there's no pattern anymore
            if (this.pattern.ended()) {
                this.pattern = null;
            }
        }
        // If there's no pattern (and we moved at least once)
        if (this.pattern == null && this.lastMoves.length > 0) {
            // One chance out of two to use a new one
            if (Random.flipACoin()) {
                cont = 10;
                while (cont > 0 && this.pattern == null) {
                    cont -= 1;
                    switch (Random.upTo(4)) {
                        case 0:
                            if (Saving.loadBool("gridItemPossessedHeartPlug") == false)
                                this.pattern = new TheCavePattern_ArrowsToHeartPlug(this);
                            break;
                        case 1:
                            if (Saving.loadBool("TheCavePattern_ChocolateBarNowGotTheBar") == false)
                                this.pattern = new TheCavePattern_ChocolateBarNow(this);
                            break;
                        case 2:
                            if (Saving.loadBool("TheCavePattern_TreasureMapFoundTreasure") == false)
                                this.pattern = new TheCavePattern_TreasureMap(this);
                            break;
                        case 3:
                            this.pattern = new TheCavePattern_MonkeyWizard(this);
                            break;
                        case 4:
                            this.pattern = new TheCavePattern_OctopusKing(this);
                            break;
                    }
                }
            }
        }
        // Add some additional characters
        for (var i = 0; i < 10; i++) {
            this.additionalCharacters.push(new TheCaveAdditionalCharacter(this));
        }
    };
    TheCave.prototype.drawWays = function (x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 3; }
        // Draw the background
        this.renderArea.drawArray(Database.getAscii("places/theCave/ways"), x + 21, y);
        // Draw additional characters
        for (var i = 0; i < this.additionalCharacters.length; i++) {
            this.renderArea.drawString(this.additionalCharacters[i].getString(), x + this.additionalCharacters[i].getPosition().x, y + this.additionalCharacters[i].getPosition().y);
        }
        // Draw the sentences
        if (this.firstSentence != null) {
            this.renderArea.drawString(Database.getText(this.firstSentence), x + 23, y + 32);
            this.renderArea.drawString(Database.getTranslatedText(this.firstSentence), x + 23, y + 33, true);
        }
        if (this.pattern != null && this.pattern.getSentence() != null) {
            this.renderArea.drawString(Database.getText(this.pattern.getSentence()), x + 23, y + 34);
            this.renderArea.drawString(Database.getTranslatedText(this.pattern.getSentence()), x + 23, y + 35, true);
        }
        // If there's a pattern, draw pattern related stuff
        if (this.pattern != null)
            this.pattern.draw(this.renderArea, x, y);
        // Add the black background color
        for (var i = 0; i <= 4; i++) {
            this.renderArea.addBackgroundColor(x + 46, x + 54, y + 1 + i, new Color(ColorType.THECAVE_BACKGROUND_COLOR));
        }
        // Add the button to go left
        this.renderArea.addMultipleAsciiButtons("theCaveGoLeftButton", x + 30, x + 32, y + 5, x + 29, x + 33, y + 6, x + 27, x + 33, y + 7, x + 26, x + 32, y + 8, x + 26, x + 32, y + 9, x + 26, x + 32, y + 10, x + 25, x + 32, y + 11, x + 24, x + 32, y + 12, x + 25, x + 31, y + 13, x + 25, x + 31, y + 14, x + 25, x + 32, y + 15, x + 25, x + 32, y + 16, x + 25, x + 32, y + 17, x + 25, x + 32, y + 18, x + 24, x + 32, y + 19, x + 24, x + 31, y + 20, x + 25, x + 30, y + 21, x + 26, x + 29, y + 22, x + 26, x + 28, y + 23, x + 25, x + 27, y + 24, x + 25, x + 26, y + 25);
        this.renderArea.addLinkCall(".theCaveGoLeftButton", new CallbackCollection(this.move.bind(this, TheCaveMoveType.LEFT)));
        // Add the button to go right
        this.renderArea.addMultipleAsciiButtons("theCaveGoRightButton", x + 68, x + 70, y + 6, x + 68, x + 72, y + 7, x + 68, x + 73, y + 8, x + 68, x + 73, y + 9, x + 69, x + 74, y + 10, x + 69, x + 74, y + 11, x + 69, x + 74, y + 12, x + 69, x + 75, y + 13, x + 69, x + 75, y + 14, x + 68, x + 74, y + 15, x + 68, x + 74, y + 16, x + 68, x + 74, y + 17, x + 68, x + 74, y + 18, x + 68, x + 74, y + 19, x + 69, x + 74, y + 20, x + 70, x + 74, y + 21, x + 71, x + 74, y + 22, x + 72, x + 73, y + 23);
        this.renderArea.addLinkCall(".theCaveGoRightButton", new CallbackCollection(this.move.bind(this, TheCaveMoveType.RIGHT)));
        // Add the button to go straight
        this.renderArea.addMultipleAsciiButtons("theCaveGoStraightButton", x + 46, x + 54, y + 1, x + 46, x + 54, y + 2, x + 46, x + 54, y + 3, x + 46, x + 54, y + 4, x + 46, x + 54, y + 5);
        this.renderArea.addLinkCall(".theCaveGoStraightButton", new CallbackCollection(this.move.bind(this, TheCaveMoveType.STRAIGHT)));
    };
    TheCave.prototype.goToTheCaveExit = function () {
        Saving.saveBool("mainMapDoneCaveEntrance", true);
        this.getGame().setPlace(new TheCaveExit(this.getGame()));
    };
    TheCave.prototype.move = function (type) {
        // If we made more than 12 moves and there's no pattern, we reach the exit
        if (this.lastMoves.length > 12 && this.pattern == null) {
            this.goToTheCaveExit();
        }
        // If there's a pattern, we call its move method
        if (this.pattern != null)
            this.pattern.move(type);
        // Add this move to the last moves
        this.lastMoves.push(type);
        // Create the new way
        this.createWay(type);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    TheCave.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "theCaveBackToTheMapButton");
        // Draw the ways
        this.drawWays();
    };
    return TheCave;
})(Place);
var TheComputerLine = (function () {
    // Constructor
    function TheComputerLine(type, text) {
        // Set the type
        this.type = type;
        // Set the lines of text depending on the text given in parameter
        this.setLinesFromText(text);
    }
    // Public methods
    TheComputerLine.prototype.draw = function (renderArea, pos, minY) {
        // Draw our lines of text
        for (var i = this.linesOfText.length - 1; i >= 0; i--) {
            // If the line isn't out of the screen
            if (pos.y - (this.linesOfText.length - 1 - i) >= minY) {
                // If our type isn't "CENTER"
                if (this.type != TheComputerLineType.CENTER) {
                    // We draw it
                    renderArea.drawString(this.linesOfText[i], pos.x, pos.y - (this.linesOfText.length - 1 - i));
                }
                else {
                    // We draw it centered
                    renderArea.drawString(this.linesOfText[i], pos.x + 16 - Math.floor(this.linesOfText[i].length / 2), pos.y - (this.linesOfText.length - 1 - i));
                }
            }
        }
        // We return the extra lines we took to draw
        return this.linesOfText.length - 1;
    };
    TheComputerLine.prototype.setLinesFromText = function (text) {
        // Set the first line, empty
        this.linesOfText = [""];
        // Possibly change the text given in parameter, depending on the type
        switch (this.type) {
            case TheComputerLineType.COMMAND:
                text = " > " + text;
                break;
        }
        // Create the array of words
        var words = text.split(" ");
        // Add the words one by one to our lines
        for (var i = 0; i < words.length; i++) {
            // If we can add this word to the line OR the word is way too big to fit in any line anyway
            if (words[i].length + this.linesOfText[this.linesOfText.length - 1].length < 32 || words[i].length > 30) {
                // We add the word
                this.linesOfText[this.linesOfText.length - 1] = this.linesOfText[this.linesOfText.length - 1] + words[i] + " ";
            }
            else {
                // We add a new line
                this.linesOfText.push(words[i] + " ");
            }
        }
    };
    // Public getters
    TheComputerLine.prototype.getType = function () {
        return this.type;
    };
    return TheComputerLine;
})();
var TheComputerLineType;
(function (TheComputerLineType) {
    TheComputerLineType[TheComputerLineType["TEXT"] = 0] = "TEXT";
    TheComputerLineType[TheComputerLineType["COMMAND"] = 1] = "COMMAND";
    TheComputerLineType[TheComputerLineType["CENTER"] = 2] = "CENTER"; // Centered text
})(TheComputerLineType || (TheComputerLineType = {}));
var TheComputerState;
(function (TheComputerState) {
    TheComputerState[TheComputerState["WAITING_FOR_RETURN"] = 0] = "WAITING_FOR_RETURN";
    TheComputerState[TheComputerState["WAITING_FOR_COMMAND"] = 1] = "WAITING_FOR_COMMAND";
})(TheComputerState || (TheComputerState = {}));
///<reference path="Place.ts"/>
var TheComputer = (function (_super) {
    __extends(TheComputer, _super);
    // Constructor
    function TheComputer(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The lines
        this.lines = [];
        // The current command text
        this.currentCommandText = "";
        // Did we already add hotkeys?
        this.hotkeysAdded = false;
        // Resize and update
        this.renderArea.resize(100, 40);
        this.update();
    }
    // getRenderArea()
    TheComputer.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willStopBeingDisplayed()
    TheComputer.prototype.willStopBeingDisplayed = function () {
        this.getGame().setIsStatusBarAllowedToUseTheNKey(true); // The status bar can use the n key now
    };
    // Private methods
    TheComputer.prototype.addHotkeys = function () {
        // Hotkeys are added now
        this.hotkeysAdded = true;
        // Add the enter hotkey
        this.getGame().addHotkey(new Hotkey("enter", new CallbackCollection(this.pressedEnter.bind(this))));
        // Add hotkeys for each letter from a to z
        for (var i = 97; i <= 122; i++) {
            this.getGame().addHotkey(new Hotkey(String.fromCharCode(i), new CallbackCollection(this.pressedKey.bind(this, String.fromCharCode(i)))));
        }
        // Same thing for the numbers from 0 to 9
        for (var i = 48; i <= 57; i++) {
            this.getGame().addHotkey(new Hotkey(String.fromCharCode(i), new CallbackCollection(this.pressedKey.bind(this, String.fromCharCode(i)))));
            this.getGame().addHotkey(new Hotkey("numpad" + String.fromCharCode(i), new CallbackCollection(this.pressedKey.bind(this, String.fromCharCode(i)))));
        }
        // Add the hotkey for the space key
        this.getGame().addHotkey(new Hotkey("space", new CallbackCollection(this.pressedKey.bind(this, " "))));
        // Add the hotkey for the delete key
        this.getGame().addHotkey(new Hotkey("delete", new CallbackCollection(this.pressedDelete.bind(this))));
    };
    TheComputer.prototype.addLine = function (line) {
        this.lines.push(line);
    };
    TheComputer.prototype.addMisunderstood = function () {
        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "This command was misunderstood. Try \"help\" for a list of available commands."));
    };
    TheComputer.prototype.draw = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Draw the computer
        this.renderArea.drawArray(Database.getAscii("general/theComputer/computer"), 19, 0);
        // Draw the on button
        this.drawOnButton(69, 14);
        // Draw the lines
        this.drawLines(22, 16, 6);
    };
    TheComputer.prototype.drawOnButton = function (x, y) {
        // Draw the button
        this.renderArea.addMultipleAsciiButtons("theComputerOnButton", x + 1, x + 4, y, x, x + 5, y + 1, x + 1, x + 4, y + 2);
        // Add the link
        this.renderArea.addLinkCall(".theComputerOnButton", new CallbackCollection(this.switchOnOff.bind(this)));
    };
    TheComputer.prototype.drawLines = function (x, y, minY) {
        for (var i = this.lines.length - 1; i >= 0; i--) {
            // We add the return value to our y var because it returns the extra lines it used
            y -= this.lines[i].draw(this.renderArea, new Pos(x, y - (this.lines.length - 1 - i)), minY);
        }
    };
    TheComputer.prototype.executeCommand = function (commandText) {
        // Create an array from the command words
        var words = commandText.split(" ");
        // Try to understand the command from the first word
        if (commandText.length > 0 && words.length > 0) {
            switch (words[0]) {
                // Some hidden commands :P
                case "no":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Yes!"));
                    break;
                case "yes":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No!"));
                    break;
                case "aniwey":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "He made this game :)"));
                    break;
                case "cedric":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A nice guy who made the online saving system of the first Candy Box."));
                    break;
                case "17":
                case "dixsept":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A beta tester and ascii artist. Some people say that he has a big nose. Don't listen to them."));
                    break;
                case "soinou":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A beta tester. He also made the tab system of the first Candy Box."));
                    break;
                case "42":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The answer to the ultimate question of life, the universe, and everything."));
                    break;
                case "cp":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No, you can't copy anything, sorry."));
                    break;
                case "rm":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No, you can't remove anything, sorry."));
                    break;
                case "cd":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Where would you like to go anyway?"));
                    break;
                case "ls":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ". .."));
                    break;
                case "emacs":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The best text editor ever after vim."));
                    break;
                case "vim":
                case "vi":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The best text editor ever after emacs."));
                    break;
                case "nano":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Come on, do you seriously want to use this?"));
                    break;
                case "startx":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Fatal server error: Cannot establish any listening sockets - Make sure an X server isn't already running"));
                    break;
                case "mkdir":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Cannot create directory. No, you won't be given any precision."));
                    break;
                case "sudo":
                case "su":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "To gain root access, please use \"su -\". (hint : you can't type the \"-\")"));
                    break;
                case "lol":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Haha. That's funny."));
                    break;
                case "pwd":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "/home/player"));
                    break;
                case "mv":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "What would you like to move anyway?"));
                    break;
                case "man":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Nah. Use help instead."));
                    break;
                case "pacman":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The best package manager ever."));
                    break;
                case "whoami":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "player"));
                    break;
                case "tobias":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Tobias Nordqvist, an ascii artist. From sweden. Thanks to him!"));
                    break;
                case "deinol":
                case "dani":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Dani \"Deinol\" GÃ³mez, an ascii artist. Thanks to him!"));
                    break;
                case "godsturf":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "GodsTurf, an ascii artist. Thanks to him!"));
                    break;
                case "mlp":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "PONIES PONIES PONIES PONIES PONIES PONIES PONIES PONIES PONIES PONIES"));
                    break;
                // The help command
                case "help":
                    // If there's a second word
                    if (words.length > 1) {
                        // If there's a third word, the command is incorrect
                        if (words.length > 2) {
                            this.addMisunderstood();
                        }
                        else {
                            switch (words[1]) {
                                case "help":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The help command displays informations about other system commands."));
                                    break;
                                case "add":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The add command allows you to add a given quantity of a given resource. Usage : \"add quantity resource\"."));
                                    break;
                                case "quantity":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A quantity is expressed by a number, which is composed of multiple figures."));
                                    break;
                                case "resource":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "List of available resources : candies, lollipops, chocolatebars, painsauchocolat."));
                                    break;
                                case "bug":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug command allows you to configure the bugs generated by the computer. Usage : \"bug type level\"."));
                                    break;
                                case "type":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug type is the kind of bug you want to configure. Allowed types are \"graphical\", \"quest\" and \"ultimate\". Use \"help graphical\", \"help quest\" or \"help ultimate\" for more information."));
                                    break;
                                case "graphical":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Graphical bugs only affect how the game display informations. They won't be kept after reloading your game."));
                                    break;
                                case "quest":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Quest bugs affect the quests gameplay. Results are unexpected. They probably won't be kept after reloading your game."));
                                    break;
                                case "ultimate":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Ultimate bugs can affect a lot of things. They will probably be kept after reloading your game, and they basically could destroy your save. Your browser may even crash. Be careful with them."));
                                    break;
                                case "level":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug level describes how much the bugs will impact the game. Allowed values are 0, 1, 2, 3 and 4. 0 means no bug and 4 is the most powerful bug."));
                                    break;
                                case "command":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No, you're not supposed to type \"help command\", you should type \"help bug\" or \"help add\" for example."));
                                    break;
                                // Default : misunderstood
                                default:
                                    this.addMisunderstood();
                                    break;
                            }
                        }
                    }
                    else {
                        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "List of available commands : add, bug, help. Use \"help command\" to get more informations about a specific command. There are probably no hidden commands. I guess."));
                    }
                    break;
                // The add command
                case "add":
                    // If there's a second word
                    if (words.length > 1) {
                        // If there's a third word
                        if (words.length > 2) {
                            // If there's a fourth word
                            if (words.length > 3) {
                                // Misunderstood
                                this.addMisunderstood();
                            }
                            else {
                                // If the second word cannot be converted to a number
                                if (isNaN(parseFloat(words[1])))
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The quantity must be a number. See \"help quantity\" for more informations."));
                                else if (words[2] != "candies" && words[2] != "lollipops" && words[2] != "chocolatebars" && words[2] != "painsauchocolat")
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The resource is invalid. See \"help resource\" for more informations."));
                                else {
                                    // Execute the command, depending on the resource given
                                    switch (words[2]) {
                                        case "candies":
                                            this.getGame().getCandies().add(parseFloat(words[1]));
                                            break;
                                        case "lollipops":
                                            this.getGame().getLollipops().add(parseFloat(words[1]));
                                            break;
                                        case "chocolatebars":
                                            this.getGame().getChocolateBars().add(parseFloat(words[1]));
                                            break;
                                        case "painsauchocolat":
                                            this.getGame().getPainsAuChocolat().add(parseFloat(words[1]));
                                            break;
                                    }
                                    // Write the result
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, words[1] + " " + words[2] + " added successfully."));
                                }
                            }
                        }
                        else {
                            this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a resource. See \"help add\" for more informations."));
                        }
                    }
                    else {
                        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a quantity. See \"help add\" for more informations."));
                    }
                    break;
                // The bug command
                case "bug":
                    // If there's a second word
                    if (words.length > 1) {
                        // If there's a third word
                        if (words.length > 2) {
                            // If there's a fourth word
                            if (words.length > 3) {
                                // Misunderstood
                                this.addMisunderstood();
                            }
                            else {
                                // If the second word isn't a valid type
                                if (words[1] != "graphical" && words[1] != "quest" && words[1] != "ultimate")
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug type is incorrect. See \"help type\" for more informations."));
                                else if (words[2] != "0" && words[2] != "1" && words[2] != "2" && words[2] != "3" && words[2] != "4")
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug level is invalid. See \"help level\" for more informations."));
                                else {
                                    // Execute the command, depending on the type given
                                    switch (words[1]) {
                                        case "graphical":
                                            Bugs.setGraphicalBugLevel(parseInt(words[2]));
                                            break;
                                        case "quest":
                                            Bugs.setQuestBugLevel(parseInt(words[2]));
                                            break;
                                        case "ultimate":
                                            Bugs.setUltimateBugLevel(parseInt(words[2]));
                                            break;
                                    }
                                    // Write the result
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Bug type " + words[1] + " set successfully at level " + words[2] + "."));
                                }
                            }
                        }
                        else {
                            this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a bug level. See \"help level\" for more informations."));
                        }
                    }
                    else {
                        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a bug type. See \"help type\" for more informations."));
                    }
                    break;
                // Default : misunderstood
                default:
                    this.addMisunderstood();
                    break;
            }
        }
    };
    TheComputer.prototype.pressedDelete = function () {
        // If we're currently waiting for a command
        if (this.state == TheComputerState.WAITING_FOR_COMMAND) {
            // If the current command text contains at least one letter
            if (this.currentCommandText.length > 0) {
                // We delete the last character
                this.currentCommandText = this.currentCommandText.slice(0, this.currentCommandText.length - 1);
                // We update
                this.update();
                this.getGame().updatePlace();
            }
        }
    };
    TheComputer.prototype.pressedEnter = function () {
        // Do something different depending on the current state
        switch (this.state) {
            // If we were waiting for the return key
            case TheComputerState.WAITING_FOR_RETURN:
                // We change our state
                this.state = TheComputerState.WAITING_FOR_COMMAND;
                // We add an empty text line
                this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ""));
                // We add an empty command line
                this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, ""));
                // We update
                this.update();
                this.getGame().updatePlace();
                break;
            // If we were writing a command
            case TheComputerState.WAITING_FOR_COMMAND:
                // We try to execute the command
                this.executeCommand(this.currentCommandText);
                // We empty the current command text
                this.currentCommandText = "";
                // We add an empty text line
                this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ""));
                // We add an empty command line
                this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, ""));
                // We update
                this.update();
                this.getGame().updatePlace();
                break;
        }
    };
    TheComputer.prototype.pressedKey = function (key) {
        // If we're currently waiting for a command
        if (this.state == TheComputerState.WAITING_FOR_COMMAND) {
            // Create an array of words from the current command text (for checking purposes)
            var words = this.currentCommandText.split(" ");
            // If the last word of the current command text isn't too big and the current command text itself isn't too big either
            if ((words.length == 0 || words[words.length - 1].length < 25 || key == " ") && this.currentCommandText.length < 100) {
                // We add the letter to the command
                this.currentCommandText = this.currentCommandText + key;
                // We update
                this.update();
                this.getGame().updatePlace();
            }
        }
    };
    TheComputer.prototype.switchOnOff = function () {
        // If the computer was on
        if (this.on) {
            this.on = false; // Now it's off
            this.lines = []; // Clear the lines
            this.getGame().setIsStatusBarAllowedToUseTheNKey(true); // The status bar can use the n key now
        }
        else {
            this.on = true; // Now it's on
            // Add the first lines
            this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, "Booting GNU/Candies system version 4.2... OK"));
            this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, "Initializing the memory stack... OK"));
            this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, "Checking every piece of the system is free software... OK"));
            this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ""));
            this.addLine(new TheComputerLine(TheComputerLineType.CENTER, "Press return to continue"));
            // Set the current computer state
            this.state = TheComputerState.WAITING_FOR_RETURN;
            // The status bar isn't allowed to use the n key anymore
            this.getGame().setIsStatusBarAllowedToUseTheNKey(false);
            // If we didn't add hotkeys yet, we do so
            if (this.hotkeysAdded == false)
                this.addHotkeys();
        }
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    TheComputer.prototype.update = function () {
        // If we have too much lines, delete some of them
        if (this.lines.length > 12) {
            this.lines.splice(0, this.lines.length - 12);
        }
        // If the last line type is COMMAND, we change its text by the current command text
        if (this.lines.length > 0 && this.lines[this.lines.length - 1].getType() == TheComputerLineType.COMMAND) {
            this.lines[this.lines.length - 1].setLinesFromText(this.currentCommandText);
        }
        // Draw
        this.draw();
    };
    return TheComputer;
})(Place);
///<reference path="Quest.ts"/>
// To know if the player found the chests
Saving.registerBool("theHoleFirstChestFound", false);
Saving.registerBool("theHoleSecondChestFound", false);
Saving.registerBool("theHoleThirdChestFound", false);
Saving.registerBool("theHoleFourthChestFound", false);
var TheHole = (function (_super) {
    __extends(TheHole, _super);
    // Constructor
    function TheHole(game) {
        _super.call(this, game, "You can move with the left and right arrow keys!");
        // Variables which store the open states of the chests for the current quest
        this.firstChestOpened = false;
        this.secondChestOpened = false;
        this.thirdChestOpened = false;
        this.fourthChestOpened = false;
        // A bool to know if the player is going left or right (useful to choose the fireball spell direction)
        // By default we're going right because in most quests the fireball is launched to the right, so it just seems more logical
        // But anyway as soon as the player will press the left key this can change
        this.isGoingRight = true;
        // Resize the quest
        this.resizeQuest(100, 35, new Pos(100, 136));
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(48, 0));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the walls
        this.createWalls();
        // Add the spikes
        this.addSpikes(new Spikes(this, new Pos(44, 42), 20));
        this.addSpikes(new Spikes(this, new Pos(23, 59), 22));
        this.addSpikes(new Spikes(this, new Pos(90, 62), 8));
        this.addSpikes(new Spikes(this, new Pos(87, 69), 4));
        this.addSpikes(new Spikes(this, new Pos(94, 69), 4));
        this.addSpikes(new Spikes(this, new Pos(93, 74), 2));
        this.addSpikes(new Spikes(this, new Pos(66, 74), 14));
        this.addSpikes(new Spikes(this, new Pos(66, 82), 4));
        this.addSpikes(new Spikes(this, new Pos(76, 83), 6));
        this.addSpikes(new Spikes(this, new Pos(3, 95), 8));
        this.addSpikes(new Spikes(this, new Pos(13, 97), 10));
        this.addSpikes(new Spikes(this, new Pos(24, 96), 2));
        this.addSpikes(new Spikes(this, new Pos(29, 96), 2));
        this.addSpikes(new Spikes(this, new Pos(33, 95), 12));
        this.addSpikes(new Spikes(this, new Pos(64, 64), 4));
        // Add the chests
        this.addChest(new Chest(this, new Pos(27, 67), true, new CallbackCollection(this.openFirstChest.bind(this)), Saving.loadBool("theHoleFirstChestFound")));
        this.addChest(new Chest(this, new Pos(59, 74), true, new CallbackCollection(this.openSecondChest.bind(this)), Saving.loadBool("theHoleSecondChestFound")));
        this.addChest(new Chest(this, new Pos(37, 107), false, new CallbackCollection(this.openThirdChest.bind(this)), Saving.loadBool("theHoleThirdChestFound")));
        this.addChest(new Chest(this, new Pos(4, 129), true, new CallbackCollection(this.openFourthChest.bind(this)), Saving.loadBool("theHoleFourthChestFound")));
        // Add the lost tribe warrior alone in its room
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(68, 89), new Pos(63, 85), new Pos(93, 95)));
        // Add the lost tribe warriors in the big room
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(14, 126), new Pos(2, 112), new Pos(79, 129)));
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(21, 126), new Pos(2, 112), new Pos(79, 129)));
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(31, 125), new Pos(2, 112), new Pos(79, 129)));
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(51, 123), new Pos(2, 112), new Pos(79, 129)));
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You jumped into the big hole! You're falling quickly, try to stay alive!"));
    }
    // willBeDisplayed()
    TheHole.prototype.willBeDisplayed = function () {
        // We call the mother willBeDisplayed()
        _super.prototype.willBeDisplayed.call(this);
        // Register hotkeys so that they can't be used by the player's browser
        this.getGame().addHotkey(new Hotkey("left", null));
        this.getGame().addHotkey(new Hotkey("right", null));
    };
    // Public methods
    TheHole.prototype.castPlayerFireball = function () {
        // If we're going right, we cast a fireball going right ; if we're going left, we cast a fireball going left
        if (this.isGoingRight)
            _super.prototype.castPlayerFireball.call(this, new Pos(2, 0));
        else
            _super.prototype.castPlayerFireball.call(this, new Pos(-2, 0));
    };
    TheHole.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(48, 0), new Pos(1, 1));
    };
    TheHole.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement());
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    TheHole.prototype.endQuest = function (win) {
        if (win) {
            // We add the message
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to reach the bottom of the hole!"));
        }
        else {
            // We add the message
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died while falling in the hole. No one will probably ever find your body down there."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
        // If we won, we possibly confirm the opening of some of the chests, depending on our variables
        if (win) {
            if (this.firstChestOpened)
                Saving.saveBool("theHoleFirstChestFound", true);
            if (this.secondChestOpened)
                Saving.saveBool("theHoleSecondChestFound", true);
            if (this.thirdChestOpened)
                Saving.saveBool("theHoleThirdChestFound", true);
            if (this.fourthChestOpened)
                Saving.saveBool("theHoleFourthChestFound", true);
        }
    };
    TheHole.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Move the player horizontally
            this.moveHorizontally();
            // Update entities
            this.updateEntities();
            // Calculate the new global drawing offset
            this.calcNewGlobalDrawingOffset();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getPartOfAscii("places/quests/theHole/background", -this.getGlobalDrawingOffset().y, -this.getGlobalDrawingOffset().y + 35), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    TheHole.prototype.addChest = function (chest) {
        this.addEntity(chest);
    };
    TheHole.prototype.addLostTribeWarrior = function (lostTribeWarrior) {
        lostTribeWarrior.setHealthBar(new QuestEntityHealthBar(lostTribeWarrior, new Pos(4, 1)));
        this.addEntity(lostTribeWarrior);
    };
    TheHole.prototype.addSpikes = function (spikes) {
        this.addEntity(spikes);
    };
    TheHole.prototype.addWalls = function () {
        var positions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            positions[_i - 0] = arguments[_i];
        }
        // Create the wall entity
        this.addEntity(new Wall(this, new Pos(0, 0)));
        var wall = (this.getLastEntity());
        // Add the boxes
        for (var i = 0; i < positions.length / 4; i++) {
            wall.addBox(new Pos(positions[i * 4], positions[i * 4 + 1]), new Pos(positions[i * 4 + 2] - positions[i * 4] + 1, positions[i * 4 + 3] - positions[i * 4 + 1] + 1));
        }
    };
    TheHole.prototype.calcNewGlobalDrawingOffset = function () {
        // If the player is too low or too high on the screen (that's why we take the offset in account here), we set the offset to follow the player
        if (this.getGame().getPlayer().getGlobalPosition().y + this.getGlobalDrawingOffset().y > 10)
            this.setGlobalDrawingOffset(new Pos(0, -this.getGame().getPlayer().getGlobalPosition().y + 10));
        else if (this.getGame().getPlayer().getGlobalPosition().y + this.getGlobalDrawingOffset().y < 5) {
            if (this.getGame().getPlayer().getGlobalPosition().y > 5)
                this.setGlobalDrawingOffset(new Pos(0, -this.getGame().getPlayer().getGlobalPosition().y + 5));
            else
                this.setGlobalDrawingOffset(new Pos(0, 0));
        }
    };
    TheHole.prototype.createWalls = function () {
        // Yes, I know that the code below is quite ugly
        // But I had two choices : either write the bounding boxes manually (this is what I chose)
        // Or write a specific level editor to do the work for me (it could work with something like the height maps in 3d games - there would be a second "ascii art" composed of 0 and 1 for example, 0 would mean no collision and 1 would mean collision)
        // But this is the only level which requires such complicated bounding boxes, so really, writing a level editor for one level isn't worth it
        this.addWalls(0, 0, 40, 22, 0, 23, 39, 23, 0, 24, 38, 24, 0, 25, 37, 25, 0, 26, 36, 26, 0, 27, 33, 27, 0, 28, 32, 28, 0, 29, 31, 29, 0, 30, 30, 30, 0, 31, 29, 31, 0, 32, 28, 32, 0, 33, 27, 33, 0, 34, 26, 34, 0, 35, 25, 35, 0, 36, 24, 36, 0, 37, 23, 37, 0, 38, 22, 59, 0, 60, 44, 60, 0, 61, 43, 61, 0, 62, 27, 62, 34, 62, 38, 62, 0, 63, 26, 63, 0, 64, 25, 66, 0, 67, 26, 67, 0, 68, 33, 68, 0, 69, 32, 69, 0, 70, 31, 70, 0, 71, 27, 71, 0, 72, 26, 72, 0, 73, 25, 73, 0, 74, 24, 74, 0, 75, 16, 75, 0, 76, 15, 76, 0, 77, 4, 77, 0, 78, 3, 80, 0, 81, 2, 81, 0, 82, 1, 95, 36, 73, 39, 73, 35, 74, 40, 74, 34, 75, 41, 75, 33, 76, 49, 76, 32, 77, 49, 77, 32, 78, 49, 78, 33, 79, 49, 79, 34, 80, 49, 80, 35, 81, 49, 81, 36, 82, 49, 82, 37, 83, 49, 85, 37, 86, 49, 86, 38, 87, 50, 87, 39, 88, 51, 88, 45, 89, 52, 89, 46, 90, 54, 90, 47, 91, 54, 94, 46, 95, 54, 95, 0, 96, 11, 96, 32, 96, 54, 96, 0, 97, 12, 97, 23, 97, 26, 97, 28, 97, 54, 97, 0, 98, 26, 101, 28, 98, 54, 101, 0, 102, 26, 102, 28, 102, 57, 102, 0, 103, 23, 103, 35, 103, 65, 103, 0, 104, 20, 104, 36, 104, 69, 104, 0, 105, 19, 105, 41, 105, 74, 105, 0, 106, 18, 106, 41, 106, 87, 106, 0, 107, 17, 109, 40, 107, 87, 107, 29, 108, 87, 108, 28, 109, 87, 109, 0, 110, 18, 110, 27, 110, 68, 110, 0, 111, 57, 111, 0, 112, 39, 112, 0, 113, 30, 113, 0, 114, 8, 114, 0, 115, 7, 115, 0, 116, 6, 116, 0, 117, 5, 119, 0, 120, 4, 120, 0, 121, 3, 121, 0, 122, 2, 128, 0, 129, 3, 129, 79, 112, 87, 112, 78, 113, 87, 113, 77, 114, 87, 114, 76, 115, 87, 115, 75, 116, 87, 116, 74, 117, 87, 117, 73, 118, 87, 118, 71, 119, 87, 119, 70, 120, 87, 120, 69, 121, 87, 121, 68, 122, 87, 122, 66, 123, 87, 123, 64, 124, 87, 124, 61, 125, 87, 125, 56, 126, 87, 126, 50, 127, 86, 127, 41, 128, 85, 128, 27, 129, 84, 129, 0, 130, 79, 130, 0, 131, 72, 131, 0, 132, 71, 132, 0, 133, 70, 134, 0, 135, 100, 135, 59, 0, 100, 24, 60, 25, 100, 25, 61, 26, 100, 26, 62, 27, 100, 27, 63, 28, 100, 28, 64, 29, 100, 42, 44, 43, 100, 43, 45, 44, 100, 44, 46, 45, 100, 45, 50, 46, 100, 46, 57, 47, 100, 47, 69, 48, 100, 48, 70, 49, 100, 49, 75, 50, 100, 50, 84, 51, 100, 51, 85, 52, 100, 52, 92, 53, 100, 53, 93, 54, 100, 54, 83, 55, 89, 55, 94, 55, 100, 55, 82, 56, 88, 56, 94, 56, 100, 56, 81, 57, 87, 57, 94, 57, 100, 57, 77, 58, 86, 58, 95, 58, 100, 58, 76, 59, 86, 59, 96, 59, 100, 59, 75, 60, 86, 60, 97, 60, 100, 60, 71, 61, 86, 61, 98, 61, 100, 69, 90, 63, 98, 63, 70, 62, 86, 62, 69, 63, 86, 63, 59, 64, 63, 64, 68, 64, 86, 64, 58, 65, 86, 65, 53, 66, 86, 66, 52, 67, 86, 67, 51, 68, 86, 68, 46, 69, 86, 69, 45, 70, 90, 70, 94, 70, 100, 70, 45, 71, 60, 71, 82, 71, 89, 71, 95, 71, 100, 74, 51, 72, 58, 72, 52, 73, 57, 73, 53, 74, 58, 74, 54, 75, 100, 75, 55, 76, 100, 77, 55, 78, 62, 78, 75, 78, 100, 78, 55, 79, 59, 79, 87, 79, 100, 79, 88, 80, 100, 80, 89, 81, 100, 81, 90, 82, 100, 82, 53, 83, 75, 83, 91, 83, 100, 83, 54, 84, 87, 84, 92, 84, 100, 84, 55, 85, 87, 85, 93, 85, 100, 95, 59, 86, 86, 86, 60, 87, 78, 87, 60, 88, 66, 88, 59, 89, 64, 89, 58, 90, 63, 91, 58, 92, 64, 92, 58, 93, 73, 93, 58, 94, 78, 94, 58, 95, 83, 95, 58, 96, 100, 97, 59, 98, 100, 98, 60, 99, 100, 99, 71, 100, 100, 100, 82, 101, 100, 101, 92, 102, 100, 103, 91, 104, 100, 129, 90, 130, 100, 130, 89, 131, 100, 131, 88, 132, 100, 132, 85, 133, 100, 133, 78, 134, 100, 134);
    };
    TheHole.prototype.openFirstChest = function () {
        this.firstChestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedHeartPendant", "You opened a chest and found a heart pendant!", "You gain a heart pendant."));
    };
    TheHole.prototype.openFourthChest = function () {
        this.fourthChestOpened = true;
        this.foundChocolateBars(4);
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You opened a chest and found four chocolate bars!", null, true));
    };
    TheHole.prototype.openSecondChest = function () {
        this.secondChestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedFortressKey", "You opened a chest and found the desert fortress key!", "You gain the desert fortress key."));
    };
    TheHole.prototype.openThirdChest = function () {
        this.thirdChestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedBlackMagicGrimoire", "You opened a chest and found a grimoire!", "You gain a black magic grimoire."));
    };
    TheHole.prototype.moveHorizontally = function () {
        var leftPressed = Keyboard.isKeyPressed("left");
        var rightPressed = Keyboard.isKeyPressed("right");
        if (leftPressed && !rightPressed) {
            this.getGame().getPlayer().move(new Pos(-1, 0));
            this.isGoingRight = false;
        }
        else if (rightPressed && !leftPressed) {
            this.getGame().getPlayer().move(new Pos(1, 0));
            this.isGoingRight = true;
        }
    };
    TheHole.prototype.thePlayerWon = function () {
        // If the player reached the bottom of the hole
        if (this.getGame().getPlayer().getGlobalPosition().y >= 134)
            return true;
        return false;
    };
    return TheHole;
})(Quest);
var TheSeaFloor = (function () {
    // Constructor
    function TheSeaFloor(type, height, previousFloor) {
        if (previousFloor === void 0) { previousFloor = null; }
        // Does this floor have a plant on it ?
        this.hasAPlant = false;
        this.type = type;
        this.height = height;
        // If the previous floor is null or has a different type
        if (previousFloor == null || previousFloor.getType() != this.type) {
            // There's no floor of the same type before
            this.howManyFloorsOfTheSameTypeBefore = 0;
        }
        else {
            // We take the howManyFloorsOfTheSameTypeBefore of the previous floor and we add one
            this.howManyFloorsOfTheSameTypeBefore = previousFloor.howManyFloorsOfTheSameTypeBefore + 1;
        }
        // Special character stuff
        if (Random.oneChanceOutOf(3) && (previousFloor == null || previousFloor.getHasSpecialCharacter() == false)) {
            // We will have a special character
            this.hasSpecialCharacter = true;
            // Set the height
            this.specialCharacterHeight = Random.between(0, this.height - 1);
            // Set the character
            if (Random.oneChanceOutOf(4)) {
                this.specialCharacter = "^";
            }
            else {
                this.specialCharacter = "-";
            }
        }
        else {
            // We won't have a special character
            this.hasSpecialCharacter = false;
        }
    }
    // Public methods
    TheSeaFloor.prototype.draw = function (renderArea, floorPosition, xPosition) {
        // We can draw different characters for the floor, depending on the type
        switch (this.type) {
            case TheSeaFloorType.NORMAL:
                renderArea.drawString("_", xPosition, floorPosition - this.height);
                break;
            case TheSeaFloorType.GOING_DOWN:
                renderArea.drawString("\\", xPosition, floorPosition - this.height);
                break;
            case TheSeaFloorType.GOING_UP:
                renderArea.drawString("/", xPosition, floorPosition - this.height);
                break;
        }
        // If we have a special character
        if (this.hasSpecialCharacter) {
            // We draw it
            renderArea.drawString(this.specialCharacter, xPosition, floorPosition - this.specialCharacterHeight);
        }
    };
    // Pubic getters
    TheSeaFloor.prototype.getHasAPlant = function () {
        return this.hasAPlant;
    };
    TheSeaFloor.prototype.getHasSpecialCharacter = function () {
        return this.hasSpecialCharacter;
    };
    TheSeaFloor.prototype.getHeight = function () {
        return this.height;
    };
    TheSeaFloor.prototype.getHowManyFloorsOfTheSameTypeBefore = function () {
        return this.howManyFloorsOfTheSameTypeBefore;
    };
    TheSeaFloor.prototype.getType = function () {
        return this.type;
    };
    // Public setters
    TheSeaFloor.prototype.setHasAPlant = function (hasAPlant) {
        this.hasAPlant = hasAPlant;
    };
    return TheSeaFloor;
})();
var TheSeaFloorType;
(function (TheSeaFloorType) {
    TheSeaFloorType[TheSeaFloorType["NORMAL"] = 0] = "NORMAL";
    TheSeaFloorType[TheSeaFloorType["GOING_DOWN"] = 1] = "GOING_DOWN";
    TheSeaFloorType[TheSeaFloorType["GOING_UP"] = 2] = "GOING_UP";
})(TheSeaFloorType || (TheSeaFloorType = {}));
var TheSeaPattern = (function () {
    // Constructor
    function TheSeaPattern(theSea, initialDistance) {
        this.theSea = theSea;
        this.initialDistance = initialDistance;
    }
    // Public methods
    TheSeaPattern.prototype.isPatternDone = function () {
        return false;
    };
    TheSeaPattern.prototype.run = function (x1, x2) {
    };
    // Public getters
    TheSeaPattern.prototype.getInitialDistance = function () {
        return this.initialDistance;
    };
    TheSeaPattern.prototype.getTheSea = function () {
        return this.theSea;
    };
    return TheSeaPattern;
})();
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_BigSharks = (function (_super) {
    __extends(TheSeaPattern_BigSharks, _super);
    // Constructor
    function TheSeaPattern_BigSharks(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_BigSharks.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 125)
            return true;
        return false;
    };
    TheSeaPattern_BigSharks.prototype.run = function (x1, x2) {
        if (this.getTheSea().getDistance() % 60 == 0)
            this.getTheSea().addBigShark(new Pos(x2, Random.fromArray([2, 6])));
    };
    return TheSeaPattern_BigSharks;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_Boss0_Shapes = (function (_super) {
    __extends(TheSeaPattern_Boss0_Shapes, _super);
    // Constructor
    function TheSeaPattern_Boss0_Shapes(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Fishes of the squares
        this.fishes = [];
        // Did we add the fishes already ?
        this.fishesAdded = false;
        // Are fishes moving right now ?
        this.fishesAreMoving = true;
        // Set the shape type
        this.shapeType = Random.upTo(2);
    }
    // Public methods    
    TheSeaPattern_Boss0_Shapes.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 50)
            return true;
        return false;
    };
    TheSeaPattern_Boss0_Shapes.prototype.run = function (x1, x2) {
        // If it's time to add the fishes
        if (this.fishesAdded == false && this.getTheSea().getDistance() > this.getInitialDistance() + 30) {
            this.fishesAdded = true;
            this.addShape(x1, 1);
            this.addShape(x1, 8);
            this.addShape(x1, 15);
            this.addShape(x1 + 15, 0);
            this.addShape(x1 + 15, 7);
            this.addShape(x1 + 15, 14);
            this.addShape(x1 + 30, 1);
            this.addShape(x1 + 30, 8);
            this.addShape(x1 + 30, 15);
        }
        // Handle fishes movement (to make them stop if the player stop moving)
        this.handleFishesMovement();
    };
    // Private methods
    TheSeaPattern_Boss0_Shapes.prototype.addFish = function (smallestFish) {
        if (smallestFish != null)
            this.fishes.push(smallestFish);
    };
    TheSeaPattern_Boss0_Shapes.prototype.addCross = function (x, y) {
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x, y + 1)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 3, y + 2)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 6, y + 3)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 9, y + 4)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x, y + 4)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 3, y + 3)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 6, y + 2)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 9, y + 1)));
    };
    TheSeaPattern_Boss0_Shapes.prototype.addLines = function (x, y) {
        for (var i = x; i <= x + 9; i += 3) {
            for (var j = y; j <= y + 4; j += 2) {
                this.addFish(this.getTheSea().addSmallestFish(new Pos(i, j)));
            }
        }
    };
    TheSeaPattern_Boss0_Shapes.prototype.addShape = function (x, y) {
        // Call a random shape method
        switch (this.shapeType) {
            case 0:
                this.addSquare(x, y);
                break;
            case 1:
                this.addLines(x, y);
                break;
            case 2:
                this.addCross(x, y);
                break;
        }
    };
    TheSeaPattern_Boss0_Shapes.prototype.addSquare = function (x, y) {
        // Top & bottom
        for (var i = x; i <= x + 9; i += 3) {
            // Top of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(i, y)));
            // Bottom of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(i, y + 5)));
        }
        // Left & right
        for (var j = y; j <= y + 4; j++) {
            // Left of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(x, j)));
            // Right of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 9, j)));
        }
    };
    TheSeaPattern_Boss0_Shapes.prototype.handleFishesMovement = function () {
        // If fishes are moving but shouldn't be
        if (this.fishesAreMoving == true && this.getTheSea().getLastPlayerMovement().x == 0 && this.getTheSea().getGame().getPlayer().getGlobalPosition().y >= 20) {
            // Fishes are not moving any more
            this.fishesAreMoving = false;
            for (var i = 0; i < this.fishes.length; i++) {
                this.fishes[i].setQuestEntityMovement(new QuestEntityMovement(new Pos(0, 0)));
            }
        }
        else if (this.fishesAreMoving == false && (this.getTheSea().getLastPlayerMovement().x > 0 || this.getTheSea().getGame().getPlayer().getGlobalPosition().y < 20)) {
            // Fishes are now moving
            this.fishesAreMoving = true;
            for (var i = 0; i < this.fishes.length; i++) {
                this.fishes[i].setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
            }
        }
    };
    return TheSeaPattern_Boss0_Shapes;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_Boss1_Seahorses = (function (_super) {
    __extends(TheSeaPattern_Boss1_Seahorses, _super);
    // Constructor
    function TheSeaPattern_Boss1_Seahorses(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Variables
        this.seahorses = [];
        this.seahorsesAdded = false;
        this.seaHorsesStopped = false;
        // The special seahorse wandering
        this.seahorseWandering = null;
        this.seahorseWanderingIsGoingUp = false;
        // The special seahorse following player
        this.seahorseFollowingPlayer = null;
    }
    // Public methods
    TheSeaPattern_Boss1_Seahorses.prototype.addSeahorse = function (seahorse) {
        if (seahorse != null) {
            this.seahorses.push(seahorse);
            return seahorse;
        }
        return null;
    };
    TheSeaPattern_Boss1_Seahorses.prototype.isPatternDone = function () {
        // Return false if seahorses aren't added yet
        if (this.seahorsesAdded == false)
            return false;
        // Return false if any of the seahorses is still alive
        for (var i = 0; i < this.seahorses.length; i++) {
            if (this.seahorses[i].getDead() == false)
                return false;
        }
        return true;
    };
    TheSeaPattern_Boss1_Seahorses.prototype.run = function (x1, x2) {
        // If we didn't add seahorses already (and we're far enough), we do so
        if (this.seahorsesAdded == false && this.getTheSea().getDistance() > this.getInitialDistance() + 30) {
            this.seahorsesAdded = true;
            // First column
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1, 2), 75));
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1, 12), 75));
            // Second column
            this.seahorseWandering = this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 7, 10), 81));
            // Third Column
            this.seahorseFollowingPlayer = this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 14, 10), 87));
            // Fourth column
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 21, 7), 93));
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 21, 17), 93));
        }
        // If we already added seahorses, we increase the moving counter
        if (this.seahorsesAdded == true && this.seaHorsesStopped == false) {
            // Find the seahorse which is the most on the left and store its x position
            var mostLeftX = 500;
            for (var i = 0; i < this.seahorses.length; i++) {
                if (this.seahorses[i].getGlobalPosition().x < mostLeftX)
                    mostLeftX = this.seahorses[i].getGlobalPosition().x;
            }
            // If this mostLeftX is <= 75
            if (mostLeftX - this.getTheSea().getGame().getPlayer().getGlobalPosition().x <= 75) {
                // We stop the seahorses
                this.seaHorsesStopped = true;
                for (var i = 0; i < this.seahorses.length; i++) {
                    this.seahorses[i].getQuestEntityMovement().setOffset(new Pos(0, 0));
                }
            }
        }
        // If the sea horses are stopped, we adjust their movement so that they swim with the player
        if (this.seaHorsesStopped) {
            for (var i = 0; i < this.seahorses.length; i++) {
                this.seahorses[i].tryToGoToIntendedXPosition(this.getTheSea().getGame().getPlayer().getGlobalPosition().x);
            }
        }
        // We handle the special seahorse wandering
        if (this.seahorseWandering != null) {
            if (this.seahorseWanderingIsGoingUp) {
                this.seahorseWandering.getQuestEntityMovement().getOffset().y = -1;
                if (this.seahorseWandering.getGlobalPosition().y <= 0)
                    this.seahorseWanderingIsGoingUp = false;
            }
            else {
                this.seahorseWandering.getQuestEntityMovement().getOffset().y = 1;
                if (this.seahorseWandering.getGlobalPosition().y >= 16)
                    this.seahorseWanderingIsGoingUp = true;
            }
        }
        // We handle the special seahorse following the player
        if (this.seahorseFollowingPlayer != null) {
            // By default we don't move
            this.seahorseFollowingPlayer.getQuestEntityMovement().getOffset().y = 0;
            // If the player is above
            if (this.getTheSea().getGame().getPlayer().getGlobalPosition().y < this.seahorseFollowingPlayer.getGlobalPosition().y - 1) {
                // If we're not too high
                if (this.seahorseFollowingPlayer.getGlobalPosition().y > 0)
                    // We go up
                    this.seahorseFollowingPlayer.getQuestEntityMovement().getOffset().y = -1;
            }
            else if (this.getTheSea().getGame().getPlayer().getGlobalPosition().y > this.seahorseFollowingPlayer.getGlobalPosition().y - 1) {
                // If we're not too low
                if (this.seahorseFollowingPlayer.getGlobalPosition().y < 17)
                    // We go down
                    this.seahorseFollowingPlayer.getQuestEntityMovement().getOffset().y = +1;
            }
        }
    };
    return TheSeaPattern_Boss1_Seahorses;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_JellyFishStorm = (function (_super) {
    __extends(TheSeaPattern_JellyFishStorm, _super);
    // Constructor
    function TheSeaPattern_JellyFishStorm(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_JellyFishStorm.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };
    TheSeaPattern_JellyFishStorm.prototype.run = function (x1, x2) {
        if (Random.oneChanceOutOf(10))
            this.getTheSea().addJellyFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 6)));
    };
    return TheSeaPattern_JellyFishStorm;
})(TheSeaPattern);
var TheSeaPatternLevel = (function () {
    // Constructor
    function TheSeaPatternLevel(theSea) {
        // How many patterns launched already ?
        this.howManyPatterns = 0;
        this.theSea = theSea;
    }
    // Public methods
    TheSeaPatternLevel.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel(this.theSea);
    };
    TheSeaPatternLevel.prototype.getPattern = function (initialDistance) {
        return new TheSeaPattern(this.theSea, initialDistance);
    };
    TheSeaPatternLevel.prototype.increaseHowManyPatterns = function () {
        this.howManyPatterns += 1;
    };
    TheSeaPatternLevel.prototype.isLevelDone = function () {
        return false;
    };
    // Public getters
    TheSeaPatternLevel.prototype.getHowManyPatterns = function () {
        return this.howManyPatterns;
    };
    TheSeaPatternLevel.prototype.getTheSea = function () {
        return this.theSea;
    };
    return TheSeaPatternLevel;
})();
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Boss0 = (function (_super) {
    __extends(TheSeaPatternLevel_Boss0, _super);
    // Constructor
    function TheSeaPatternLevel_Boss0(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Boss0.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Level1(this.getTheSea());
    };
    TheSeaPatternLevel_Boss0.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();
        return new TheSeaPattern_Boss0_Shapes(this.getTheSea(), initialDistance);
    };
    TheSeaPatternLevel_Boss0.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 1)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Boss0;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Boss1 = (function (_super) {
    __extends(TheSeaPatternLevel_Boss1, _super);
    // Constructor
    function TheSeaPatternLevel_Boss1(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Boss1.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Level2(this.getTheSea());
    };
    TheSeaPatternLevel_Boss1.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();
        return new TheSeaPattern_Boss1_Seahorses(this.getTheSea(), initialDistance);
    };
    TheSeaPatternLevel_Boss1.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 1)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Boss1;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Level0 = (function (_super) {
    __extends(TheSeaPatternLevel_Level0, _super);
    // Constructor
    function TheSeaPatternLevel_Level0(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Level0.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Boss0(this.getTheSea());
    };
    TheSeaPatternLevel_Level0.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();
        switch (Random.upTo(2)) {
            case 0:
                return new TheSeaPattern_MaybeOneSmallestFish(this.getTheSea(), initialDistance);
                break;
            case 1:
                return new TheSeaPattern_OneSmallestFish(this.getTheSea(), initialDistance);
                break;
            case 2:
                return new TheSeaPattern_MaybeOneMediumFish(this.getTheSea(), initialDistance);
                break;
        }
    };
    TheSeaPatternLevel_Level0.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 2)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Level0;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Level1 = (function (_super) {
    __extends(TheSeaPatternLevel_Level1, _super);
    // Constructor
    function TheSeaPatternLevel_Level1(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Level1.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Boss1(this.getTheSea());
    };
    TheSeaPatternLevel_Level1.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();
        switch (Random.upTo(1)) {
            case 0:
                return new TheSeaPattern_LotOfMiniSharks(this.getTheSea(), initialDistance);
                break;
            case 1:
                return new TheSeaPattern_JellyFishStorm(this.getTheSea(), initialDistance);
                break;
        }
    };
    TheSeaPatternLevel_Level1.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 2)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Level1;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Level2 = (function (_super) {
    __extends(TheSeaPatternLevel_Level2, _super);
    // Constructor
    function TheSeaPatternLevel_Level2(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Level2.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Level2(this.getTheSea());
    };
    TheSeaPatternLevel_Level2.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();
        // If this is the first pattern, then we return the big sharks pattern
        if (this.getHowManyPatterns() == 1)
            return new TheSeaPattern_BigSharks(this.getTheSea(), initialDistance);
        else
            return new TheSeaPattern_SeaSnakesForever(this.getTheSea(), initialDistance);
    };
    TheSeaPatternLevel_Level2.prototype.isLevelDone = function () {
        return false;
    };
    return TheSeaPatternLevel_Level2;
})(TheSeaPatternLevel);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_LotOfMiniSharks = (function (_super) {
    __extends(TheSeaPattern_LotOfMiniSharks, _super);
    // Constructor
    function TheSeaPattern_LotOfMiniSharks(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Variables
        this.sharksAdded = false;
    }
    // Public methods
    TheSeaPattern_LotOfMiniSharks.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 60)
            return true;
        return false;
    };
    TheSeaPattern_LotOfMiniSharks.prototype.run = function (x1, x2) {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 30 && this.sharksAdded == false) {
            this.sharksAdded = true;
            this.getTheSea().addMiniShark(new Pos(x1 + Random.upTo(6), 2));
            this.getTheSea().addMiniShark(new Pos(x1 + Random.upTo(6), 8));
            this.getTheSea().addMiniShark(new Pos(x1 + Random.upTo(6), 14));
        }
    };
    return TheSeaPattern_LotOfMiniSharks;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_MaybeOneMediumFish = (function (_super) {
    __extends(TheSeaPattern_MaybeOneMediumFish, _super);
    // Constructor
    function TheSeaPattern_MaybeOneMediumFish(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_MaybeOneMediumFish.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };
    TheSeaPattern_MaybeOneMediumFish.prototype.run = function (x1, x2) {
        if (Random.oneChanceOutOf(5)) {
            this.getTheSea().addMediumFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 4)));
        }
    };
    return TheSeaPattern_MaybeOneMediumFish;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_MaybeOneSmallestFish = (function (_super) {
    __extends(TheSeaPattern_MaybeOneSmallestFish, _super);
    // Constructor
    function TheSeaPattern_MaybeOneSmallestFish(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_MaybeOneSmallestFish.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };
    TheSeaPattern_MaybeOneSmallestFish.prototype.run = function (x1, x2) {
        if (Random.flipACoin()) {
            this.getTheSea().addSmallestFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 2)));
        }
    };
    return TheSeaPattern_MaybeOneSmallestFish;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_OneSmallestFish = (function (_super) {
    __extends(TheSeaPattern_OneSmallestFish, _super);
    // Constructor
    function TheSeaPattern_OneSmallestFish(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_OneSmallestFish.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };
    TheSeaPattern_OneSmallestFish.prototype.run = function (x1, x2) {
        this.getTheSea().addSmallestFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 2)));
    };
    return TheSeaPattern_OneSmallestFish;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_SeaSnakesForever = (function (_super) {
    __extends(TheSeaPattern_SeaSnakesForever, _super);
    // Constructor
    function TheSeaPattern_SeaSnakesForever(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Variables
        this.addedRedSharkFin = false;
        this.addedGreenSharkFin = false;
        this.addedPurpleSharkFin = false;
        this.nextSnakeIn = 0;
        this.nextSharkIn = Random.between(0, 50);
    }
    // Public methods
    TheSeaPattern_SeaSnakesForever.prototype.isPatternDone = function () {
        return false;
    };
    TheSeaPattern_SeaSnakesForever.prototype.run = function (x1, x2) {
        // Possibly add a snake
        this.nextSnakeIn -= 1;
        if (this.nextSnakeIn <= 0) {
            this.getTheSea().addSeaSnake(new Pos(x2, Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 12)));
            this.nextSnakeIn = 85 - Math.ceil((1 - Math.exp(-(this.getTheSea().getDistance() - this.getInitialDistance()) / 1500)) * 83);
        }
        // Possibly add a shark
        this.nextSharkIn -= 1;
        if (this.nextSharkIn <= 0) {
            // Store the shark
            var shark = this.getTheSea().addBigShark(new Pos(x2, Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 10)));
            // If a shark was added
            if (shark != null) {
                if (Saving.loadBool("gridItemPossessedRedSharkFin") == false && this.addedRedSharkFin == false && this.getTheSea().getDistance() - this.getInitialDistance() > 150) {
                    shark.hasFin(BigSharkFinType.RED);
                    this.addedRedSharkFin = true;
                }
                else if (Saving.loadBool("gridItemPossessedGreenSharkFin") == false && this.addedGreenSharkFin == false && this.getTheSea().getDistance() - this.getInitialDistance() > 700) {
                    shark.hasFin(BigSharkFinType.GREEN);
                    this.addedGreenSharkFin = true;
                }
                else if (Saving.loadBool("gridItemPossessedPurpleSharkFin") == false && this.addedPurpleSharkFin == false && this.getTheSea().getDistance() - this.getInitialDistance() > 2500) {
                    shark.hasFin(BigSharkFinType.PURPLE);
                    this.addedPurpleSharkFin = true;
                }
            }
            // Set the next shark in
            this.nextSharkIn = 60 - Math.ceil((1 - Math.exp(-(this.getTheSea().getDistance() - this.getInitialDistance()) / 1500)) * 55);
        }
    };
    return TheSeaPattern_SeaSnakesForever;
})(TheSeaPattern);
///<reference path="Quest.ts"/>
var TheSea = (function (_super) {
    __extends(TheSea, _super);
    // Constructor
    function TheSea(game) {
        _super.call(this, game, "You can move with the down and up arrow keys!");
        // Floors
        this.floors = [];
        // Generation projection (how many characters the player doesn't already see should we generate)
        this.generationProjection = 10;
        // The distance we've swimed so far
        this.distance = 0;
        // Min and max floor height
        this.floorMinHeight = 3;
        this.floorMaxHeight = 8;
        // Patterns stuff
        this.currentPattern = null;
        this.currentPatternLevel = null;
        // Last player movement
        this.lastPlayerMovement = new Pos(0, 0);
        // Did we already generate a sponge? Shell powder?
        this.spongeGenerated = false;
        this.shellPowderGenerated = false;
        // Resize the quest
        this.resizeQuest(100, 30);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Gravity is disabled
        this.setGravityDisabled(true);
        this.setWormsLikeDisabled(true);
        // Add the player
        this.getGame().getPlayer().loadMediumCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 5));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Fill the floors array with null values
        for (var i = 0; i <= 99 + this.generationProjection; i++) {
            this.floors.push(null);
        }
        // Generate for the first time
        this.generate(0, 99 + this.generationProjection);
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You jump into the sea! You know you could find precious hidden treasures in the depths..."));
    }
    // willBeDisplayed()
    TheSea.prototype.willBeDisplayed = function () {
        // We call the mother willBeDisplayed()
        _super.prototype.willBeDisplayed.call(this);
        // Register hotkeys so that they can't be used by the player's browser
        this.getGame().addHotkey(new Hotkey("up", null));
        this.getGame().addHotkey(new Hotkey("down", null));
    };
    // Public methods
    TheSea.prototype.addBigShark = function (pos) {
        var bigShark = new BigShark(this, pos);
        bigShark.setHealthBar(new QuestEntityHealthBar(bigShark, new Pos(47, 1)));
        if (this.addEntity(bigShark))
            return bigShark; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.addJellyFish = function (pos) {
        var jellyFish = new JellyFish(this, pos);
        jellyFish.setHealthBar(new QuestEntityHealthBar(jellyFish, new Pos(6, 1), new Pos(0, 0)));
        if (this.addEntity(jellyFish))
            return jellyFish; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.addMediumFish = function (pos) {
        var mediumFish = new MediumFish(this, pos);
        mediumFish.setHealthBar(new QuestEntityHealthBar(mediumFish, new Pos(8, 1), new Pos(0, 0)));
        if (this.addEntity(mediumFish))
            return mediumFish; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.addMiniShark = function (pos) {
        var miniShark = new MiniShark(this, pos);
        miniShark.setHealthBar(new QuestEntityHealthBar(miniShark, new Pos(19, 1)));
        if (this.addEntity(miniShark))
            return miniShark; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.addSeahorse = function (pos, intendedXPosition) {
        var seahorse = new Seahorse(this, pos, intendedXPosition);
        seahorse.setHealthBar(new QuestEntityHealthBar(seahorse, new Pos(4, 1)));
        if (this.addEntity(seahorse))
            return seahorse; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.addSeaSnake = function (pos) {
        var seaSnake = new SeaSnake(this, pos);
        if (this.addEntity(seaSnake))
            return seaSnake; // We return it
        return null; // Else we return null
    };
    TheSea.prototype.addSmallestFish = function (pos) {
        var smallestFish = new SmallestFish(this, pos);
        smallestFish.setHealthBar(new QuestEntityHealthBar(smallestFish, new Pos(3, 1)));
        if (this.addEntity(smallestFish))
            return smallestFish; // We return it
        return null; // Else, we return null
    };
    TheSea.prototype.castJump = function () { }; // We can't jump in the sea !
    TheSea.prototype.castPlayerAcidRain = function () {
        // We cast from 0 to 100, not strictly around the player as usual
        _super.prototype.castPlayerAcidRain.call(this, null, null, 0, 100);
    };
    TheSea.prototype.castPlayerTeleport = function () {
        // We teleport, be we stay on the left side of the quest
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 0), new Pos(0, this.getRealQuestSize().y - 1));
    };
    TheSea.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(false);
        entity.getQuestEntityMovement().setWormsLike(false);
    };
    TheSea.prototype.endQuest = function (win) {
        // Variable used to generate the winning message
        var comment;
        // We add some messages
        if (win) {
            switch (Random.between(0, 8)) {
                case 0:
                    comment = "by jumping on a jellyfish";
                    break;
                case 1:
                    comment = "by hanging onto a sea turtle";
                    break;
                case 2:
                    comment = "by following a dolphin";
                    break;
                case 3:
                    comment = "(you don't know how)";
                    break;
                case 4:
                    comment = "by hanging onto a shark's fin";
                    break;
                case 5:
                    comment = "by following a whale";
                    break;
                case 6:
                    comment = "by following a squid";
                    break;
                case 7:
                    comment = "by asking your way to a shrimp";
                    break;
                case 8:
                    comment = "thanks to some updrafts";
                    break;
            }
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You almost died in the sea but managed to get to the surface in time " + comment + "."));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the sea."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    // getLeftLimit()
    TheSea.prototype.getLeftLimit = function () {
        return 100;
    };
    TheSea.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so, end the quest (he won!!) and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true); // true because we always win
                return;
            }
            // Add some enemies
            this.handlePatterns(100, 115);
            // Move the player vertically
            this.moveVertically();
            // Update entities
            this.updateEntities();
            // Force scrolling of everything
            this.globalScrolling();
        }
        // Draw
        this.preDraw();
        this.drawSea();
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Public getters
    TheSea.prototype.getDistance = function () {
        return this.distance;
    };
    TheSea.prototype.getFloorMaxHeight = function () {
        return this.floorMaxHeight;
    };
    TheSea.prototype.getFloorMinHeight = function () {
        return this.floorMinHeight;
    };
    TheSea.prototype.getLastPlayerMovement = function () {
        return this.lastPlayerMovement;
    };
    TheSea.prototype.getRightLimit = function () {
        return 70;
    };
    // Private methods    
    TheSea.prototype.addFloor = function (index, type, height, previousFloor) {
        if (previousFloor === void 0) { previousFloor = null; }
        // Add the floor
        this.floors[index] = new TheSeaFloor(type, height, previousFloor);
        // If the type is normal
        if (type == TheSeaFloorType.NORMAL)
            this.addFloorCollisionBox(new Pos(index, this.getRealQuestSize().y - (height - 1)), new Pos(1, height - 1)); // Add a floor collision box at height - 1
        else
            this.addFloorCollisionBox(new Pos(index, this.getRealQuestSize().y - height), new Pos(1, height)); // Add a floor collision box at height
    };
    TheSea.prototype.addFloorCollisionBox = function (pos, size) {
        var wall = new Wall(this, pos);
        wall.addBox(new Pos(0, 0), size);
        this.addEntity(wall);
    };
    TheSea.prototype.drawFloors = function () {
        for (var i = 0; i <= 99; i++) {
            if (this.floors[i] != null) {
                this.floors[i].draw(this.getRenderArea(), this.getRealQuestPosition().y + this.getRealQuestSize().y, i);
            }
        }
    };
    TheSea.prototype.drawSea = function () {
        this.drawFloors();
    };
    TheSea.prototype.generate = function (x1, x2) {
        this.generateFloors(x1, x2);
        this.generateShellPowder(x1, x2);
        this.generateSponge(x1, x2);
        this.generatePlants(x1, x2);
    };
    TheSea.prototype.generateFloors = function (x1, x2) {
        // Create variables which will be useful
        var type;
        for (var i = x1; i <= x2; i++) {
            // If we're placing the first floor
            if (i == 0) {
                // We place it at a random height and with the normal type
                this.addFloor(i, TheSeaFloorType.NORMAL, Random.between(this.floorMinHeight, this.floorMaxHeight));
            }
            else {
                // Init the variables
                type = null;
                // If we want to keep the same type and it's possible to do so
                if (Random.oneChanceOutOf(15 - this.floors[i - 1].getHowManyFloorsOfTheSameTypeBefore()) == false && ((this.floors[i - 1].getType() == TheSeaFloorType.NORMAL) ||
                    (this.floors[i - 1].getType() == TheSeaFloorType.GOING_DOWN && this.floors[i - 1].getHeight() > this.floorMinHeight) ||
                    (this.floors[i - 1].getType() == TheSeaFloorType.GOING_UP && this.floors[i - 1].getHeight() < this.floorMaxHeight) // We want to keep going up and we're not too high : no problem
                )) {
                    // We will keep the same type as the previous floor
                    type = this.floors[i - 1].getType();
                }
                else {
                    // If the previous floor has a normal type
                    if (this.floors[i - 1].getType() == TheSeaFloorType.NORMAL) {
                        if (this.floors[i - 1].getHeight() == this.floorMinHeight)
                            type = TheSeaFloorType.GOING_UP; // If the previous floor was too low, we must go up
                        else if (this.floors[i - 1].getHeight() >= this.floorMaxHeight - 1)
                            type = TheSeaFloorType.GOING_DOWN; // If the previous floor was too high, we must go down
                        else {
                            // Else, we pick randomly the new type
                            if (Random.flipACoin())
                                type = TheSeaFloorType.GOING_UP;
                            else
                                type = TheSeaFloorType.GOING_DOWN;
                        }
                    }
                    else {
                        type = TheSeaFloorType.NORMAL;
                    }
                }
                // Create the floor from the type decided before
                switch (type) {
                    case TheSeaFloorType.NORMAL:
                        if (this.floors[i - 1].getType() == TheSeaFloorType.GOING_UP)
                            this.addFloor(i, TheSeaFloorType.NORMAL, this.floors[i - 1].getHeight() + 1, this.floors[i - 1]);
                        else
                            this.addFloor(i, TheSeaFloorType.NORMAL, this.floors[i - 1].getHeight(), this.floors[i - 1]);
                        break;
                    case TheSeaFloorType.GOING_DOWN:
                        this.addFloor(i, TheSeaFloorType.GOING_DOWN, this.floors[i - 1].getHeight() - 1, this.floors[i - 1]);
                        break;
                    case TheSeaFloorType.GOING_UP:
                        if (this.floors[i - 1].getType() == TheSeaFloorType.NORMAL)
                            this.addFloor(i, TheSeaFloorType.GOING_UP, this.floors[i - 1].getHeight(), this.floors[i - 1]);
                        else
                            this.addFloor(i, TheSeaFloorType.GOING_UP, this.floors[i - 1].getHeight() + 1, this.floors[i - 1]);
                        break;
                }
            }
        }
    };
    TheSea.prototype.generatePlants = function (x1, x2) {
        // Set some parameters important for the generation
        var minPlantNumber = 0;
        var maxPlantNumber = 10;
        // Create some variables which will be useful
        var thereIsAlreadyAPlant;
        // Iterate over newly generated floors, searching for one which could receive a plant
        for (var i = x1; i <= x2; i++) {
            if (Random.oneChanceOutOf(3) &&
                i >= 4 &&
                this.floors[i].getType() == TheSeaFloorType.NORMAL &&
                this.floors[i].getHowManyFloorsOfTheSameTypeBefore() >= 4 // And there's at least 4 floors of the same type before
            ) {
                // Init the variable
                thereIsAlreadyAPlant = false;
                // Check if there is already a plant
                for (var j = i - 4; j <= i; j++) {
                    // If this floor already has a plant on it
                    if (this.floors[j].getHasAPlant() == true) {
                        thereIsAlreadyAPlant = true;
                        break;
                    }
                }
                // We add a plant here if there isn't already a plant on one of the floors
                if (thereIsAlreadyAPlant == false) {
                    // We add the plant
                    this.addEntity(new Plant(this, new Pos(i - 4, this.getRealQuestSize().y - this.floors[i].getHeight()), minPlantNumber, maxPlantNumber));
                    // We inform the floors that they now have a plant on them
                    for (var j = i - 4; j <= i; j++) {
                        this.floors[j].setHasAPlant(true);
                    }
                }
            }
        }
    };
    TheSea.prototype.generateShellPowder = function (x1, x2) {
        // If we don't already have shell powder and no shell powder have been generated in this quest so far and the distance is at least 500
        if (Saving.loadBool("gridItemPossessedShellPowder") == false && this.shellPowderGenerated == false && this.distance >= 500) {
            // Iterate over newly generated floors, searching for one which could receive the powder
            for (var i = x1; i <= x2; i++) {
                if (i >= 6 &&
                    this.floors[i].getType() == TheSeaFloorType.NORMAL &&
                    this.floors[i].getHowManyFloorsOfTheSameTypeBefore() >= 6 // And there's at least 6 floors of the same type before
                ) {
                    // Check if there is already a plant, if so return
                    for (var j = i - 6; j <= i; j++) {
                        // If this floor already has a plant on it, return
                        if (this.floors[j].getHasAPlant() == true)
                            return;
                    }
                    // Add the powder and change the shellPowderGenerated bool
                    this.shellPowderGenerated = true;
                    this.addEntity(new ShellPowder(this, new Pos(i - 6, this.getRealQuestSize().y - this.floors[i].getHeight())));
                    this.getLastEntity().setHealthBar(new QuestEntityHealthBar(this.getLastEntity(), new Pos(6, 1)));
                    // Inform the floors that they now have a plant on them
                    for (var j = i - 6; j <= i; j++) {
                        this.floors[j].setHasAPlant(true);
                    }
                }
            }
        }
    };
    TheSea.prototype.generateSponge = function (x1, x2) {
        // If we don't already have a sponge and no sponge have been generated in this quest so far and the distance is at least 793
        if (Saving.loadBool("gridItemPossessedSponge") == false && this.spongeGenerated == false && this.distance >= 793) {
            // Iterate over newly generated floors, searching for one which could receive a sponge
            for (var i = x1; i <= x2; i++) {
                if (i >= 6 &&
                    this.floors[i].getType() == TheSeaFloorType.NORMAL &&
                    this.floors[i].getHowManyFloorsOfTheSameTypeBefore() >= 6 // And there's at least 6 floors of the same type before
                ) {
                    // Check if there is already a plant, if so return
                    for (var j = i - 6; j <= i; j++) {
                        // If this floor already has a plant on it, return
                        if (this.floors[j].getHasAPlant() == true)
                            return;
                    }
                    // Add the sponge and change the spongeGenerated bool
                    this.spongeGenerated = true;
                    this.addEntity(new Sponge(this, new Pos(i - 6, this.getRealQuestSize().y - this.floors[i].getHeight())));
                    this.getLastEntity().setHealthBar(new QuestEntityHealthBar(this.getLastEntity(), new Pos(6, 1)));
                    // Inform the floors that they now have a plant on them (well, actually its a sponge, but these "animals" looks kind of like plants, so don't worry about that)
                    for (var j = i - 6; j <= i; j++) {
                        this.floors[j].setHasAPlant(true);
                    }
                }
            }
        }
    };
    TheSea.prototype.globalScrolling = function () {
        // How much do we have to scroll ?
        var scrollingXOffset = -(this.getGame().getPlayer().getCharacterType() == PlayerCharacterType.MEDIUM ? this.getGame().getPlayer().getGlobalPosition().x : this.getGame().getPlayer().getGlobalPosition().x - 2);
        // If we should scroll
        if (scrollingXOffset < 0) {
            // Set the x last player movement
            this.lastPlayerMovement.x = -scrollingXOffset;
            // Increase the distance
            this.distance += -scrollingXOffset;
            // Scroll entities
            this.forceMovingAllEntities(new Pos(scrollingXOffset, 0));
            // Scroll the floor
            this.scrollFloor(-scrollingXOffset);
            // Generate new things to fill the new area
            this.generate(100 + scrollingXOffset + this.generationProjection, 99 + this.generationProjection);
        }
        else {
            // Set the x last player movement
            this.lastPlayerMovement.x = 0;
        }
    };
    TheSea.prototype.handlePatterns = function (x1, x2) {
        // If the pattern is null or done, we need a new pattern
        if (this.currentPattern == null || this.currentPattern.isPatternDone()) {
            // If the level is null, we begin with level 0
            if (this.currentPatternLevel == null)
                this.currentPatternLevel = new TheSeaPatternLevel_Level0(this);
            else if (this.currentPatternLevel.isLevelDone())
                this.currentPatternLevel = this.currentPatternLevel.getNextLevel();
            // We get the new pattern from the current level
            this.currentPattern = this.currentPatternLevel.getPattern(this.distance);
        }
        // We run the pattern
        this.currentPattern.run(x1, x2);
    };
    TheSea.prototype.moveVertically = function () {
        var upPressed = Keyboard.isKeyPressed("up");
        var downPressed = Keyboard.isKeyPressed("down");
        if (upPressed && !downPressed) {
            this.getGame().getPlayer().move(new Pos(0, -1));
            this.lastPlayerMovement.y = -1;
        }
        else if (downPressed && !upPressed) {
            this.getGame().getPlayer().move(new Pos(0, 1));
            this.lastPlayerMovement.y = 1;
        }
    };
    TheSea.prototype.scrollFloor = function (howMany) {
        for (var i = howMany; i <= 99 + this.generationProjection; i++) {
            this.floors[i - howMany] = this.floors[i];
        }
    };
    return TheSea;
})(Quest);
///<reference path="House.ts"/>
var ThirdHouse = (function (_super) {
    __extends(ThirdHouse, _super);
    // Constructor
    function ThirdHouse(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The game running
        this.gameRunning = null;
        this.renderArea.resizeFromArray(Database.getAscii("places/village/thirdHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    ThirdHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // willBeDisplayed()
    ThirdHouse.prototype.willBeDisplayed = function () {
        this.getGame().getQuestCallbackCollection().addCallback(this.runGame.bind(this));
        // Add some hotkeys
        this.getGame().addHotkey(new Hotkey("up", new CallbackCollection(this.pressedUpButton.bind(this))));
        this.getGame().addHotkey(new Hotkey("down", new CallbackCollection(this.pressedDownButton.bind(this))));
        this.getGame().addHotkey(new Hotkey("space", new CallbackCollection(this.pressedSpaceButton.bind(this))));
    };
    // Private methods
    ThirdHouse.prototype.addControls = function (x, y) {
        // If there's a game running, we add the controls
        if (this.gameRunning != null) {
            // UP button
            this.renderArea.addAsciiButton(x, x + 4, y, "thirdHouseUpButton");
            this.renderArea.addLinkCall(".thirdHouseUpButton", new CallbackCollection(this.pressedUpButton.bind(this)));
            // Space button
            this.renderArea.addAsciiButton(x + 7, x + 25, y + 1, "thirdHouseSpaceButton");
            this.renderArea.addLinkCall(".thirdHouseSpaceButton", new CallbackCollection(this.pressedSpaceButton.bind(this)));
            // DOWN button
            this.renderArea.addAsciiButton(x + 28, x + 34, y, "thirdHouseDownButton");
            this.renderArea.addLinkCall(".thirdHouseDownButton", new CallbackCollection(this.pressedDownButton.bind(this)));
        }
    };
    ThirdHouse.prototype.addInsertCandiesButtons = function (x, y) {
        // First button (10 candies)
        this.renderArea.addAsciiButton(x, x + 4, y, "thirdHouseInsert10CandiesButton");
        this.renderArea.addLinkCall(".thirdHouseInsert10CandiesButton", new CallbackCollection(this.insert10Candies.bind(this)));
        // Second button (1000 candies)
        this.renderArea.addAsciiButton(x, x + 4, y + 2, "thirdHouseInsert1000CandiesButton");
        this.renderArea.addLinkCall(".thirdHouseInsert1000CandiesButton", new CallbackCollection(this.insert1000Candies.bind(this)));
    };
    ThirdHouse.prototype.insert10Candies = function () {
        // If we have enough candies
        if (this.getGame().getCandies().getCurrent() >= 10) {
            // We pay the price
            this.getGame().getCandies().add(-10);
            // We launch the game
            this.gameRunning = new SuperRPG(this);
        }
    };
    ThirdHouse.prototype.insert1000Candies = function () {
        // If we have enough candies
        if (this.getGame().getCandies().getCurrent() >= 1000) {
            // We pay the price
            this.getGame().getCandies().add(-1000);
            // We launch the game
            this.gameRunning = new GalacticWars(this);
        }
    };
    ThirdHouse.prototype.pressedDownButton = function () {
        if (this.gameRunning != null)
            this.gameRunning.pressedDownButton();
    };
    ThirdHouse.prototype.pressedSpaceButton = function () {
        if (this.gameRunning != null)
            this.gameRunning.pressedSpaceButton();
    };
    ThirdHouse.prototype.pressedUpButton = function () {
        if (this.gameRunning != null)
            this.gameRunning.pressedUpButton();
    };
    ThirdHouse.prototype.runGame = function () {
        // If there's a game running, we run it
        if (this.gameRunning != null) {
            // If it should stop running
            if (this.gameRunning.run() == true) {
                this.gameRunning = null; // We set it to null
                // We update
                this.update();
                this.getGame().updatePlace();
            }
            else {
                // We update
                this.update();
                // We draw the game on the screen
                this.renderArea.drawArea(this.gameRunning.getRenderArea(), 19, 10);
                // We update at the game level
                this.getGame().updatePlace();
            }
        }
    };
    ThirdHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the village button
        this.addBackToTheVillageButton(this.renderArea, "thirdHouseBackToTheVillageButton");
        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/thirdHouse"), 0, 3);
        // Add the buttons to insert candies
        this.addInsertCandiesButtons(25, 28);
        // Add the buttons to control the game
        this.addControls(29, 24);
    };
    return ThirdHouse;
})(House);
///<reference path="Place.ts"/>
var Treasure = (function (_super) {
    __extends(Treasure, _super);
    // Constructor
    function Treasure(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        this.renderArea.resizeFromArray(Database.getAscii("places/treasure"), 57, 3);
        this.update();
    }
    // getRenderArea()
    Treasure.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Treasure.prototype.dig = function () {
        // We found the treasure
        Saving.saveBool("TheCavePattern_TreasureMapFoundTreasure", true);
        // Get it
        this.getGame().getChocolateBars().add(3);
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    Treasure.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "treasureBackToTheMapButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/treasure"), 28, 3);
        // If we didn't find the treasure yet
        if (Saving.loadBool("TheCavePattern_TreasureMapFoundTreasure") == false) {
            // Add the button to get the treasure
            this.renderArea.addAsciiRealButton(Database.getText("treasureButtonDig"), 49, 14, "treasureButton", Database.getTranslatedText("treasureButtonDig"), true, -1, null, false);
            this.renderArea.addLinkCall(".treasureButton", new CallbackCollection(this.dig.bind(this)));
        }
        else {
            // Add the text
            this.renderArea.drawString(Database.getText("treasureButtonYouFound"), 49, 14);
            this.renderArea.drawString(Database.getTranslatedText("treasureButtonYouFound"), 49, 15, true);
        }
    };
    return Treasure;
})(Place);
///<reference path="QuestEntity.ts"/>
var TreeSpirit = (function (_super) {
    __extends(TreeSpirit, _super);
    // Constructor
    function TreeSpirit(quest, pos, groundYPosition) {
        _super.call(this, quest, pos, new Naming("A tree spirit", "a tree spirit"), new RenderArea(5, 5), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(5, 2)), new CollisionBox(this, new Pos(1, 3), new Pos(3, 2))), new QuestEntityMovement());
        // Set the ground y position from the value given in parameter
        this.groundYPosition = groundYPosition;
        // Set the default values for ammunition related variables
        this.maxAmmunition = 5;
        this.ammunition = 5;
        this.ammunitionTimer = 0;
        // Set the default values for magic spines related variables
        this.magicSpineTimer = 0;
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/treeSpirit"));
        this.setTransparency(new RenderTransparency(" "));
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(100);
        this.setHp(100);
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Spines", "spines"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(7, 6))), 2));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
    }
    // update()
    TreeSpirit.prototype.update = function () {
        // Calculate the distance from the player
        var distanceFromPlayer = this.getGlobalPosition().plus(new Pos(2, 0)).getDistance(this.getQuest().getGame().getPlayer().getGlobalPosition());
        // Handle ammunition timer
        if (this.ammunitionTimer <= 0) {
            if (this.ammunition < this.maxAmmunition)
                this.ammunition += 1;
            this.ammunitionTimer = 20;
        }
        else
            this.ammunitionTimer -= 1;
        // Handle magic spine timer
        if (this.magicSpineTimer > 0)
            this.magicSpineTimer -= 1;
        // Set the movement depending on the distance from the player
        this.getQuestEntityMovement().setOffset(new Pos((distanceFromPlayer.x > 0 ? -1 : 1), 0));
        // If the player is above the ground position
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().y < this.groundYPosition) {
            // If the timer is okay
            if (this.magicSpineTimer <= 0) {
                // We shoot a magic spine on the left or on the right
                if (this.shootMagicSpine((distanceFromPlayer.x > 0 ? true : false))) {
                    this.ammunition -= 1; // We lower the ammunition
                    this.magicSpineTimer = 12; // We set the countdown
                }
            }
        }
        // Call the mother class update
        _super.prototype.update.call(this);
    };
    // willDie()
    TreeSpirit.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(100 + 50 * Random.upTo(10)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    // Private methods
    TreeSpirit.prototype.shootMagicSpine = function (onTheLeft) {
        // Create the magic spine
        var magicSpine = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos((onTheLeft ? -3 : 5), 2)), new Naming("A magical spine", "a magical spine"), new Color(ColorType.TREE_SPIRIT_MAGIC_SPINE), new Pos(3, 1), 150, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical spine", "a magical spine")));
        // No target
        magicSpine.setTargetTypeNoTarget(new Pos((onTheLeft ? -2 : 2), 0));
        // Add the entity
        return this.getQuest().addEntity(magicSpine);
    };
    return TreeSpirit;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var TribalSpear = (function (_super) {
    __extends(TribalSpear, _super);
    // Constructor
    function TribalSpear() {
        _super.call(this, "eqItemWeaponTribalSpear", "eqItemWeaponTribalSpearName", "eqItemWeaponTribalSpearDescription", "eqItems/weapons/tribalSpear");
    }
    // Public getters
    TribalSpear.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A tribal spear", "a tribal spear"), player.getClassicCollisionBoxCollection(), 8);
        qew.getCloseCombatDelay().setFixedDelay(2);
        return qew;
    };
    return TribalSpear;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var TripodCamel = (function (_super) {
    __extends(TripodCamel, _super);
    // Constructor
    function TripodCamel(quest, pos) {
        _super.call(this, quest, pos, new Naming("A tripod camel", "a tripod camel"), new RenderArea(7, 2), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 1)), new CollisionBox(this, new Pos(2, 1), new Pos(5, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(7);
        this.setHp(7);
        // Set the ascii art and the transparent character
        if (Random.flipACoin())
            this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/tripodCamel1"));
        else
            this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/tripodCamel2"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its long neck", "its long neck"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(3, 3))), 5));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(6, 8);
    }
    // Public methods
    TripodCamel.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(20 + Random.upTo(12)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return TripodCamel;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var TrollBludgeon = (function (_super) {
    __extends(TrollBludgeon, _super);
    // Constructor
    function TrollBludgeon() {
        _super.call(this, "eqItemWeaponTrollBludgeon", "eqItemWeaponTrollBludgeonName", "eqItemWeaponTrollBludgeonDescription", "eqItems/weapons/trollBludgeon");
    }
    // Public getters
    TrollBludgeon.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new PlayerBludgeon(quest, player, new Naming("The troll's bludgeon", "the troll's bludgeon"), player.getClassicCollisionBoxCollection());
        qew.getCloseCombatDelay().setFixedDelay(6);
        return qew;
    };
    return TrollBludgeon;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var Troll = (function (_super) {
    __extends(Troll, _super);
    // Constructor
    function Troll(quest, pos) {
        _super.call(this, quest, pos, new Naming("A troll", "a troll"), new RenderArea(15, 10), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(11, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(4, 1), new Pos(3, 3)), new CollisionBox(this, new Pos(9, 1), new Pos(6, 2)), new CollisionBox(this, new Pos(0, 4), new Pos(8, 4)), new CollisionBox(this, new Pos(2, 8), new Pos(5, 2)), new CollisionBox(this, new Pos(8, 4), new Pos(4, 2)), new CollisionBox(this, new Pos(11, 3), new Pos(2, 4)) // The lowest part of the bludgeon
        ), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(80);
        this.setHp(80);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/bridge/troll"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new Bludgeon(this.getQuest(), this, new Naming("Its bludgeon", "its bludgeon"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(17, 11))), 15));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(6);
    }
    // Public methods
    Troll.prototype.draw = function (renderArea) {
        _super.prototype.draw.call(this, renderArea);
        // We add the missing "<" on the troll's bludgeon as a tag
        renderArea.addTag(new RenderTagLt(this.getQuest().getRealQuestPosition().x + this.getGlobalPosition().x + this.getRenderAreaPosition().x + 9), this.getQuest().getRealQuestPosition().y + this.getGlobalPosition().y + this.getRenderAreaPosition().y + 1);
    };
    Troll.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(500), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponTrollBludgeon", "You picked up the troll's bludgeon from the floor", "You gain the troll's bludgeon"));
    };
    return Troll;
})(QuestEntity);
///<reference path="GridItem.ts"/>
var UnicornHorn = (function (_super) {
    __extends(UnicornHorn, _super);
    function UnicornHorn() {
        _super.apply(this, arguments);
    }
    UnicornHorn.prototype.update = function (player, quest) {
        player.heal(3);
    };
    return UnicornHorn;
})(GridItem);
///<reference path="Place.ts"/>
var Village = (function (_super) {
    __extends(Village, _super);
    // Constructor
    function Village(game) {
        _super.call(this, game);
        // Render areas
        this.renderArea = new RenderArea();
        // Smoke
        this.smokes = [new Smoke(8, 26, 1, 3, 1, 3),
            new Smoke(64, 26, 2, 4, 0, 0),
            new Smoke(80, 26, 1, 3, 1, 3),
            new Smoke(59, 42, 1, 3, 1, 3)
        ];
        // Resize the area
        this.renderArea.resizeFromArray(Database.getAscii("places/village/village"), 0, 3);
        // Update
        this.update();
    }
    // Public methods    
    Village.prototype.willBeDisplayed = function () {
        this.getGame().getOneSecondCallbackCollection().addCallback(this.actionSmokes.bind(this));
        this.update(); // We update. This is needed because the village is the first thing to be loaded when we launch the game
    };
    // getRenderArea()
    Village.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    Village.prototype.actionSmokes = function () {
        // We make the smokes move
        for (var i = 0; i < this.smokes.length; i++) {
            this.smokes[i].move();
        }
        // We update on the page
        this.update();
        this.getGame().updatePlace();
    };
    Village.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button only if we possess the main map
        if (Saving.loadBool("gridItemPossessedMainMap"))
            this.addBackToMainMapButton(this.renderArea, "villageBackToTheMapButton");
        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/village/village"), 0, 3);
        // Draw smokes
        for (var i = 0; i < this.smokes.length; i++) {
            this.smokes[i].draw(this.renderArea);
        }
        // Load various things
        this.loadFirstHouse(2, 3 + 24);
        this.loadSecondHouse(18, 3 + 21);
        this.loadThirdHouse(32, 3 + 25);
        this.loadForge(61, 3 + 24);
        this.loadFourthHouse(77, 3 + 24);
        this.loadFifthHouse(91, 3 + 25);
    };
    // Private "go to" methods
    Village.prototype.goToFirstHouse = function () {
        alert("yay");
    };
    Village.prototype.goToSecondHouse = function () {
        this.getGame().setPlace(new SecondHouse(this.getGame()));
    };
    Village.prototype.goToThirdHouse = function () {
        this.getGame().setPlace(new ThirdHouse(this.getGame()));
    };
    Village.prototype.goToForge = function () {
        this.getGame().setPlace(new Forge(this.getGame()));
    };
    Village.prototype.goToFourthHouse = function () {
        this.getGame().setPlace(new FourthHouse(this.getGame()));
    };
    Village.prototype.goToFifthHouse = function () {
        this.getGame().setPlace(new FifthHouse(this.getGame()));
    };
    // Private "load" methods
    Village.prototype.loadFirstHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiNinjaButtons("mapVillageFirstHouseButton", x + 6, x + 8, y, x + 1, x + 10, y + 1, x, x + 11, y + 2, x - 1, x + 12, y + 3, x, x + 11, y + 4, x, x + 11, y + 5);
        // Comments
        this.renderArea.addFullComment(x + 6, y + 6, Database.getText("mapVillageLockedHouseComment"), Database.getTranslatedText("mapVillageLockedHouseComment"), "mapVillageFirstHouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageFirstHouseButton, .mapVillageFirstHouseComment", ".mapVillageFirstHouseComment");
    };
    Village.prototype.loadSecondHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageSecondHouseButton", x + 1, x + 9, y, x, x + 10, y + 1, x - 1, x + 11, y + 2, x, x + 10, y + 3, x, x + 10, y + 4, x, x + 10, y + 5, x, x + 10, y + 6, x, x + 10, y + 7, x, x + 10, y + 8);
        // Comments
        this.renderArea.addFullComment(x + 5, y + 9, Database.getText("mapVillageTheShopComment"), Database.getTranslatedText("mapVillageTheShopComment"), "mapVillageSecondHouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageSecondHouseButton, .mapVillageSecondHouseComment", ".mapVillageSecondHouseComment");
        this.renderArea.addLinkCall(".mapVillageSecondHouseButton, .mapVillageSecondHouseComment", new CallbackCollection(this.goToSecondHouse.bind(this)));
    };
    Village.prototype.loadThirdHouse = function (x, y) {
        // If we have the key to the third house
        if (Saving.loadBool("gridItemPossessedThirdHouseKey")) {
            // Buttons
            this.renderArea.addMultipleAsciiButtons("mapVillageThirdHouseButton", x + 1, x + 7, y, x, x + 8, y + 1, x - 1, x + 9, y + 2, x, x + 8, y + 3, x, x + 8, y + 4);
            // Comments
            this.renderArea.addFullComment(x + 4, y + 5, Database.getText("mapVillageAHouseComment"), Database.getTranslatedText("mapVillageAHouseComment"), "mapVillageThirdHouseComment");
            // Interactions
            this.renderArea.addLinkOver(".mapVillageThirdHouseButton, .mapVillageThirdHouseComment", ".mapVillageThirdHouseComment");
            this.renderArea.addLinkCall(".mapVillageThirdHouseButton, .mapVillageThirdHouseComment", new CallbackCollection(this.goToThirdHouse.bind(this)));
        }
        else {
            // Buttons
            this.renderArea.addMultipleAsciiNinjaButtons("mapVillageThirdHouseButton", x + 1, x + 7, y, x, x + 8, y + 1, x - 1, x + 9, y + 2, x, x + 8, y + 3, x, x + 8, y + 4);
            // Comments
            this.renderArea.addFullComment(x + 4, y + 5, Database.getText("mapVillageLockedHouseComment"), Database.getTranslatedText("mapVillageLockedHouseComment"), "mapVillageThirdHouseComment");
            // Interactions
            this.renderArea.addLinkOver(".mapVillageThirdHouseButton, .mapVillageThirdHouseComment", ".mapVillageThirdHouseComment");
        }
    };
    Village.prototype.loadForge = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageForgeButton", x + 3, x + 6, y, x + 1, x + 10, y + 1, x, x + 11, y + 2, x - 1, x + 12, y + 3, x, x + 11, y + 4, x, x + 11, y + 5);
        // Comments
        this.renderArea.addFullComment(x + 6, y + 6, Database.getText("mapVillageForgeComment"), Database.getTranslatedText("mapVillageForgeComment"), "mapVillageForgeComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageForgeButton, .mapVillageForgeComment", ".mapVillageForgeComment");
        this.renderArea.addLinkCall(".mapVillageForgeButton, .mapVillageForgeComment", new CallbackCollection(this.goToForge.bind(this)));
    };
    Village.prototype.loadFourthHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageFourthHouseButton", x + 3, x + 5, y, x + 1, x + 10, y + 1, x, x + 11, y + 2, x - 1, x + 12, y + 3, x, x + 11, y + 4, x, x + 11, y + 5);
        // Comments
        this.renderArea.addFullComment(x + 6, y + 6, Database.getText("mapVillageAHouseComment"), Database.getTranslatedText("mapVillageAHouseComment"), "mapVillageFourthHouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageFourthHouseButton, .mapVillageFourthHouseComment", ".mapVillageFourthHouseComment");
        this.renderArea.addLinkCall(".mapVillageFourthHouseButton, .mapVillageFourthHouseComment", new CallbackCollection(this.goToFourthHouse.bind(this)));
    };
    Village.prototype.loadFifthHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageFifthHouseButton", x + 1, x + 9, y, x, x + 10, y + 1, x - 1, x + 11, y + 2, x, x + 10, y + 3, x, x + 10, y + 4);
        // Comments
        this.renderArea.addFullComment(x + 5, y + 5, Database.getText("mapVillageAHouseComment"), Database.getTranslatedText("mapVillageAHouseComment"), "mapVillageFifthHouseComment");
        // Interactions
        this.renderArea.addLinkOver(".mapVillageFifthHouseButton, .mapVillageFifthHouseComment", ".mapVillageFifthHouseComment");
        this.renderArea.addLinkCall(".mapVillageFifthHouseButton, .mapVillageFifthHouseComment", new CallbackCollection(this.goToFifthHouse.bind(this)));
    };
    return Village;
})(Place);
///<reference path="QuestEntity.ts"/>
var Wall = (function (_super) {
    __extends(Wall, _super);
    // Constructor
    function Wall(quest, pos) {
        _super.call(this, quest, pos, new Naming("A wall", "a wall"), null, new Pos(0, 0), new CollisionBoxCollection());
    }
    // Public method
    Wall.prototype.addBox = function (pos, size) {
        this.getCbc().addCollisionBox(new CollisionBox(this, pos, size));
    };
    Wall.prototype.removeBoxes = function () {
        this.getCbc().removeBoxes();
    };
    return Wall;
})(QuestEntity);
///<reference path="Place.ts"/>
// Candies stuff
Saving.registerBool("wishingWellFirstCandyThrown", false);
Saving.registerNumber("wishingWellPreviousCandyWishPrice", 1);
Saving.registerNumber("wishingWellCurrentCandyWishPrice", 1);
// Lollipops stuff
Saving.registerBool("wishingWellFirstLollipopThrown", false);
Saving.registerNumber("wishingWellCurrentLollipopWishPrice", 1);
// How many chocolate bars did we threw?
Saving.registerBool("wishingWellWeAreEnchanting", false); // If true, it means a chocolate bar was thrown and we're waiting for the player to choose its enchantment
Saving.registerNumber("wishingWellHowManyChocolateBarsThrown", 0);
// How many pains au chocolat did we threw?
Saving.registerBool("wishingWellWeArePainAuChocolating", false); // If true, it means a pain au chocolat was thrown and we're waiting for the player to choose its reward
Saving.registerNumber("wishingWellHowManyPainsAuChocolatThrown", 0);
// Chocolate bars stuff
Saving.registerBool;
var WishingWell = (function (_super) {
    __extends(WishingWell, _super);
    // Constructor
    function WishingWell(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Current speech
        this.currentSpeech = null;
        this.selectedEnchantmentId = "wishingWellPossibleEnchantment0";
        // Gifts
        this.selectedGiftId = "wishingWellGiftPower";
        this.createPossibleEnchantments();
        this.renderArea.resizeFromArray(Database.getAscii("places/wishingWell"), 62, 3);
        this.update();
    }
    // getRenderArea()
    WishingWell.prototype.getRenderArea = function () {
        return this.renderArea;
    };
    // Private methods
    WishingWell.prototype.addEnchantmentIfPossible = function (enchantment) {
        if (enchantment.isPossible())
            this.possibleEnchantments.push(enchantment);
    };
    WishingWell.prototype.chooseGift = function () {
        switch (this.selectedGiftId) {
            case "wishingWellGiftPower":
                Saving.saveNumber("gameGiftPower", Saving.loadNumber("gameGiftPower") + 1);
                break;
            case "wishingWellGiftHealth":
                Saving.saveNumber("gameGiftHealth", Saving.loadNumber("gameGiftHealth") + 1);
                break;
            case "wishingWellGiftMagic":
                Saving.saveNumber("gameGiftMagic", Saving.loadNumber("gameGiftMagic") + 1);
                break;
        }
        // We're not pain au chocolating anymore
        Saving.saveBool("wishingWellWeArePainAuChocolating", false);
        // Set the speech
        this.currentSpeech = "wishingWellGiftDoneSpeech";
        // Re calc max hp
        this.getGame().getPlayer().reCalcMaxHp();
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    WishingWell.prototype.createPossibleEnchantments = function () {
        // We empty the array
        this.possibleEnchantments = [];
        // We add the echantments
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemGlovesLeatherGloves", EqItemType.GLOVES), new EnchantmentItem(this.getGame(), "eqItemGlovesRedEnchantedGloves", EqItemType.GLOVES)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemGlovesLeatherGloves", EqItemType.GLOVES), new EnchantmentItem(this.getGame(), "eqItemGlovesPinkEnchantedGloves", EqItemType.GLOVES)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemWeaponTribalSpear", EqItemType.WEAPON), new EnchantmentItem(this.getGame(), "eqItemWeaponSummoningTribalSpear", EqItemType.WEAPON)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemWeaponMonkeyWizardStaff", EqItemType.WEAPON), new EnchantmentItem(this.getGame(), "eqItemWeaponEnchantedMonkeyWizardStaff", EqItemType.WEAPON)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemBodyArmoursKnightBodyArmour", EqItemType.BODYARMOUR), new EnchantmentItem(this.getGame(), "eqItemBodyArmoursEnchantedKnightBodyArmour", EqItemType.BODYARMOUR)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrown", EqItemType.HAT), new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrownWithJaspers", EqItemType.HAT)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrown", EqItemType.HAT), new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrownWithObsidian", EqItemType.HAT)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemWeaponGiantSpoon", EqItemType.WEAPON), new EnchantmentItem(this.getGame(), "eqItemWeaponGiantSpoonOfDoom", EqItemType.WEAPON)));
        // We create the list array
        this.createPossibleEnchantmentsArrayForTheList();
    };
    WishingWell.prototype.createPossibleEnchantmentsArrayForTheList = function () {
        this.possibleEnchantmentsArrayForTheList = [];
        for (var i = 0; i < this.possibleEnchantments.length; i++) {
            this.possibleEnchantmentsArrayForTheList.push("wishingWellPossibleEnchantment" + i, this.possibleEnchantments[i].getBeforeItem().getText() + " -> " + this.possibleEnchantments[i].getAfterItem().getText());
        }
    };
    WishingWell.prototype.drawCandiesStuff = function (x, y) {
        // If we didn't throw our first candy yet
        if (Saving.loadBool("wishingWellFirstCandyThrown") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowFirstCandyButton"), x, y, "wishingWellThrowFirstCandyButton", Database.getTranslatedText("wishingWellThrowFirstCandyButton"), true);
            this.renderArea.addLinkCall(".wishingWellThrowFirstCandyButton", new CallbackCollection(this.throwFirstCandy.bind(this)));
        }
        else {
            // The button
            this.renderArea.addAsciiRealButton("Throw " + Algo.pluralFormatNicely(Saving.loadNumber("wishingWellCurrentCandyWishPrice"), " candy", " candies") + " in the well", x, y, "wishingWellThrowCandiesButton");
            this.renderArea.addLinkCall(".wishingWellThrowCandiesButton", new CallbackCollection(this.throwCandies.bind(this)));
        }
    };
    WishingWell.prototype.drawChocolateBarsStuff = function (x, y) {
        // If we're not enchanting
        if (Saving.loadBool("wishingWellWeAreEnchanting") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowChocolateBarButton"), x, y, "wishingWellThrowChocolateBarButton", Database.getTranslatedText("wishingWellThrowChocolateBarButton"), true);
            // The link
            this.renderArea.addLinkCall(".wishingWellThrowChocolateBarButton", new CallbackCollection(this.throwChocolateBar.bind(this)));
        }
        else {
            // If there's at least one possible enchantment
            if (this.possibleEnchantments.length >= 1) {
                // "Choose the enchantment"
                this.renderArea.drawString(Database.getText("wishingWellChooseEnchantment"), x, y);
                this.renderArea.drawString(Database.getTranslatedText("wishingWellChooseEnchantment"), x, y + 1, true);
                // The list
                this.renderArea.addList(x, x + 30, y + 3, "wishingWellEnchantmentList", new CallbackCollection(this.enchantmentSelected.bind(this)), this.possibleEnchantmentsArrayForTheList);
                // Enchant button
                this.renderArea.addAsciiRealButton(Database.getText("wishingWellEnchantButton"), x, y + 6, "wishingWellEnchantButton", Database.getTranslatedText("wishingWellEnchantButton"));
                this.renderArea.addLinkCall(".wishingWellEnchantButton", new CallbackCollection(this.enchant.bind(this)));
                // Add the link which will call the selectRightEnchantment method after the html dom is created
                this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightEnchantment.bind(this)));
            }
            else {
                // We tell the player that there's nothing to enchant
                this.renderArea.drawString(Database.getText("wishingWellNoPossibleEnchantment"), x, y);
                this.renderArea.drawString(Database.getTranslatedText("wishingWellNoPossibleEnchantment"), x, y + 1, true);
            }
        }
    };
    WishingWell.prototype.drawLollipopsStuff = function (x, y) {
        // If we didn't throw our first lollipop yet
        if (Saving.loadBool("wishingWellFirstLollipopThrown") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowFirstLollipopButton"), x, y, "wishingWellThrowFirstLollipopButton", Database.getTranslatedText("wishingWellThrowFirstLollipopButton"), true);
            this.renderArea.addLinkCall(".wishingWellThrowFirstLollipopButton", new CallbackCollection(this.throwFirstLollipop.bind(this)));
        }
        else {
            // The button
            this.renderArea.addAsciiRealButton("Throw " + Algo.pluralFormatNicely(Saving.loadNumber("wishingWellCurrentLollipopWishPrice"), " lollipop", " lollipops") + " in the well", x, y, "wishingWellThrowLollipopsButton");
            this.renderArea.addLinkCall(".wishingWellThrowLollipopsButton", new CallbackCollection(this.throwLollipops.bind(this)));
        }
    };
    WishingWell.prototype.drawPainsAuChocolatStuff = function (x, y) {
        // If we're not pain au chocolating
        if (Saving.loadBool("wishingWellWeArePainAuChocolating") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowPainAuChocolatButton"), x, y, "wishingWellThrowPainAuChocolatButton", Database.getTranslatedText("wishingWellThrowPainAuChocolatButton"), true);
            // The link
            this.renderArea.addLinkCall(".wishingWellThrowPainAuChocolatButton", new CallbackCollection(this.throwPainAuChocolat.bind(this)));
        }
        else {
            // "Choose your gift"
            this.renderArea.drawString(Database.getText("wishingWellChooseGift"), x, y);
            this.renderArea.drawString(Database.getTranslatedText("wishingWellChooseGift"), x, y + 1, true);
            // The list
            this.renderArea.addList(x, x + 30, y + 3, "wishingWellGiftList", new CallbackCollection(this.giftSelected.bind(this)), this.getGiftsArray());
            // Choose gift button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellChooseGiftButton"), x, y + 6, "wishingWellChooseGiftButton", Database.getTranslatedText("wishingWellChooseGiftButton"));
            this.renderArea.addLinkCall(".wishingWellChooseGiftButton", new CallbackCollection(this.chooseGift.bind(this)));
            // Add the link which will call the selectRightEnchantment method after the html dom is created
            this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.giftSelected.bind(this), this.selectRightGift.bind(this)));
        }
    };
    WishingWell.prototype.enchant = function () {
        // Get the index of the selected echantment
        var index = parseInt(this.selectedEnchantmentId.substr(30));
        // Enchant (lose the before item and gain the after item)
        this.possibleEnchantments[index].enchant();
        // We're not enchanting anymore
        Saving.saveBool("wishingWellWeAreEnchanting", false);
        // We re-create the lists
        this.createPossibleEnchantments();
        // Set the speech
        this.currentSpeech = "wishingWellEnchantmentDoneSpeech";
        // Update
        this.update();
        this.getGame().updatePlace();
    };
    WishingWell.prototype.enchantmentSelected = function () {
        // Get the selected language id
        this.selectedEnchantmentId = $("#wishingWellEnchantmentList").find(":selected").attr("id");
    };
    WishingWell.prototype.getGiftsArray = function () {
        // Crate the array
        var arr = [];
        // Add the power gift
        arr.push("wishingWellGiftPower");
        arr.push("More power");
        // Add the health gift
        arr.push("wishingWellGiftHealth");
        arr.push("More health");
        // Add the magic gift if we have less than 6 in magic gift
        if (Saving.loadNumber("gameGiftMagic") < 6) {
            arr.push("wishingWellGiftMagic");
            arr.push("More magic");
        }
        // Return the array
        return arr;
    };
    WishingWell.prototype.giftSelected = function () {
        // Get the selected language id
        this.selectedGiftId = $("#wishingWellGiftList").find(":selected").attr("id");
    };
    WishingWell.prototype.selectRightEnchantment = function () {
        // We select the right question
        $("#" + this.selectedEnchantmentId).prop('selected', true);
    };
    WishingWell.prototype.selectRightGift = function () {
        // We select the right question
        $("#" + this.selectedGiftId).prop('selected', true);
    };
    WishingWell.prototype.throwCandies = function () {
        // We save the old price
        var oldPrice = Saving.loadNumber("wishingWellCurrentCandyWishPrice");
        // If we have enough candies
        if (this.getGame().getCandies().getCurrent() >= Saving.loadNumber("wishingWellCurrentCandyWishPrice")) {
            // If we need to be healed
            if (this.getGame().getPlayer().getHp() < this.getGame().getPlayer().getMaxHp()) {
                // Pay the price
                this.getGame().getCandies().add(-Saving.loadNumber("wishingWellCurrentCandyWishPrice"));
                // Heal the player
                this.getGame().getPlayer().setHp(this.getGame().getPlayer().getMaxHp());
                // Set the speech
                this.currentSpeech = "wishingWellThrewCandiesSpeech";
                // Set the next price
                Saving.saveNumber("wishingWellCurrentCandyWishPrice", Saving.loadNumber("wishingWellPreviousCandyWishPrice") * 2 + Saving.loadNumber("wishingWellCurrentCandyWishPrice") * 2);
                Saving.saveNumber("wishingWellPreviousCandyWishPrice", oldPrice);
            }
            else {
                // Set the speech
                this.currentSpeech = "wishingWellNoWoundSpeech";
            }
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.throwChocolateBar = function () {
        if (this.getGame().getChocolateBars().getCurrent() >= 1) {
            // Pay the price
            this.getGame().getChocolateBars().add(-1);
            // Set the speech (depending on if it's the first bar we throw or not)
            if (Saving.loadNumber("wishingWellHowManyChocolateBarsThrown") == 0)
                this.currentSpeech = "wishingWellChocolateBarIntroductionSpeech";
            else
                this.currentSpeech = "wishingWellThrewChocolateBarSpeech";
            // Increase the number of chocolate bars thrown
            Saving.saveNumber("wishingWellHowManyChocolateBarsThrown", Saving.loadNumber("wishingWellHowManyChocolateBarsThrown") + 1);
            // We are now enchanting
            Saving.saveBool("wishingWellWeAreEnchanting", true);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.throwFirstCandy = function () {
        if (this.getGame().getCandies().getCurrent() >= 1) {
            this.getGame().getCandies().add(-1); // We use one candy
            this.currentSpeech = "wishingWellCandyIntroductionSpeech"; // Set the speech
            Saving.saveBool("wishingWellFirstCandyThrown", true); // Change the bool
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.throwFirstLollipop = function () {
        if (this.getGame().getLollipops().getCurrent() >= 1) {
            this.getGame().getLollipops().add(-1); // We use one lollipop
            this.currentSpeech = "wishingWellLollipopIntroductionSpeech"; // Set the speech
            Saving.saveBool("wishingWellFirstLollipopThrown", true); // Change the bool
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.throwLollipops = function () {
        // If we have enough lollipops
        if (this.getGame().getLollipops().getCurrent() >= Saving.loadNumber("wishingWellCurrentLollipopWishPrice")) {
            // Pay the price
            this.getGame().getLollipops().add(-Saving.loadNumber("wishingWellCurrentLollipopWishPrice"));
            // Add the same amount of candies
            this.getGame().getCandies().add(Math.ceil(Saving.loadNumber("wishingWellCurrentLollipopWishPrice") / 2));
            // Set the speech
            this.currentSpeech = "wishingWellThrewLollipopsSpeech";
            // Set the next price
            Saving.saveNumber("wishingWellCurrentLollipopWishPrice", Saving.loadNumber("wishingWellCurrentLollipopWishPrice") * 10);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.throwPainAuChocolat = function () {
        if (this.getGame().getPainsAuChocolat().getCurrent() >= 1) {
            // Pay the price
            this.getGame().getPainsAuChocolat().add(-1);
            // Set the speech (depending on if it's the first pain au chocolat we throw or not)
            if (Saving.loadNumber("wishingWellHowManyPainsAuChocolatThrown") == 0)
                this.currentSpeech = "wishingWellPainAuChocolatIntroductionSpeech";
            else
                this.currentSpeech = "wishingWellThrewPainAuChocolatSpeech";
            // Increase the number of pains au chocolat thrown
            Saving.saveNumber("wishingWellHowManyPainsAuChocolatThrown", Saving.loadNumber("wishingWellHowManyPainsAuChocolatThrown") + 1);
            // We are now pain au chocolating
            Saving.saveBool("wishingWellWeArePainAuChocolating", true);
            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };
    WishingWell.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();
        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "wishingWellBackToTheMapButton");
        // Draw the well
        this.renderArea.drawArray(Database.getAscii("places/wishingWell"), 38, 3);
        // Draw the speech if currentSpeech isn't null
        if (this.currentSpeech != null) {
            this.renderArea.drawSpeech(Database.getText(this.currentSpeech), 3, 75, 95, "wishingWellSpeech", Database.getTranslatedText(this.currentSpeech));
        }
        // Draw various stuff around it
        this.drawCandiesStuff(0, 4);
        if (this.getGame().getLollipops().getMax() >= 1)
            this.drawLollipopsStuff(0, 9);
        if (this.getGame().getChocolateBars().getMax() >= 1)
            this.drawChocolateBarsStuff(0, 14);
        if (this.getGame().getPainsAuChocolat().getMax() >= 1)
            this.drawPainsAuChocolatStuff(0, 24);
    };
    return WishingWell;
})(Place);
///<reference path="QuestEntity.ts"/>
var Wolf = (function (_super) {
    __extends(Wolf, _super);
    // Constructor
    function Wolf(quest, pos) {
        _super.call(this, quest, pos, new Naming("A wolf", "a wolf"), new RenderArea(7, 3), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(7, 2))), new QuestEntityMovement());
        // At first, we're not taking the decision to begin running
        this.takeTheDecisionToRunTimer = null;
        // Set the area transparency
        this.setTransparency(new RenderTransparency(" "));
        // At first we're looking left and standing
        this.setIsLookingLeft(true);
        this.setIsStanding(true);
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(45);
        this.setHp(45);
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fangs", "its fangs"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(9, 3))), 10));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(2);
    }
    // update()
    Wolf.prototype.update = function () {
        // Calculate the distance from the player
        var distanceFromPlayer = this.getGlobalPosition().plus(new Pos(3, 0)).getDistance(this.getQuest().getGame().getPlayer().getGlobalPosition());
        // If the player is on our left
        if (distanceFromPlayer.x > 0) {
            // We're looking left
            this.setIsLookingLeft(true);
        }
        else {
            // We're looking right
            this.setIsLookingLeft(false);
        }
        // If we're standing
        if (this.isStanding) {
            // If we're not already taking the decision to run BUT the running movement would be possible
            if (this.takeTheDecisionToRunTimer == null && this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(this.getRunningSpeed(), 0)))) {
                // We take the decision to run by setting the timer
                this.takeTheDecisionToRunTimer = Random.between(2, 6);
            }
            else if (this.takeTheDecisionToRunTimer != null) {
                // We decrease the timer
                this.takeTheDecisionToRunTimer -= 1;
                // If the timer is <= 0 and the running movement would be possible
                if (this.takeTheDecisionToRunTimer <= 0 && this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(this.getRunningSpeed(), 0)))) {
                    this.setIsStanding(false); // We run
                    this.takeTheDecisionToRunTimer = null; // Not taking any decision anymore
                }
            }
        }
        else {
            // If the running movement won't be possible next turn
            if (this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(this.getRunningSpeed(), 0))) == false) {
                // We stand
                this.setIsStanding(true);
            }
        }
        // Call the mother class update
        _super.prototype.update.call(this);
    };
    // willDie()
    Wolf.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(100 + 50 * Random.upTo(10)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    // Private methods
    Wolf.prototype.getRunningSpeed = function () {
        return (this.isLookingLeft ? -1 : 1);
    };
    Wolf.prototype.reDrawArea = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/wolf/" + (this.isLookingLeft ? "left" : "right") + (this.isStanding ? "Standing" : "Running")));
    };
    Wolf.prototype.setIsLookingLeft = function (isLookingLeft) {
        // If the value is different
        if (isLookingLeft != this.isLookingLeft) {
            this.isLookingLeft = isLookingLeft; // Set the value
            this.updateQuestEntityMovementOffset(); // Update the movement
            this.reDrawArea(); // Update the area
        }
    };
    Wolf.prototype.setIsStanding = function (isStanding) {
        // If the value is different
        if (isStanding != this.isStanding) {
            this.isStanding = isStanding; // Set the value
            this.updateQuestEntityMovementOffset(); // Update the movement
            this.reDrawArea(); // Update the area
        }
    };
    Wolf.prototype.updateQuestEntityMovementOffset = function () {
        // If we're standing
        if (this.isStanding) {
            // No movement
            this.getQuestEntityMovement().setOffset(new Pos(0, 0));
        }
        else {
            // Set the movement depending on our orientation
            this.getQuestEntityMovement().setOffset(new Pos(this.getRunningSpeed(), 0));
        }
    };
    return Wolf;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var WoodenSword = (function (_super) {
    __extends(WoodenSword, _super);
    // Constructor
    function WoodenSword() {
        _super.call(this, "eqItemWeaponWoodenSword", "eqItemWeaponWoodenSwordName", "eqItemWeaponWoodenSwordDescription", "eqItems/weapons/woodenSword");
    }
    // Public getters
    WoodenSword.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A wooden sword", "a wooden sword"), player.getClassicCollisionBoxCollection(), 1);
        qew.getCloseCombatDelay().setFixedDelay(4, 0);
        return qew;
    };
    return WoodenSword;
})(EqItem);
///<reference path="GridItem.ts"/>
var XinopherydonClaw = (function (_super) {
    __extends(XinopherydonClaw, _super);
    function XinopherydonClaw() {
        _super.apply(this, arguments);
    }
    XinopherydonClaw.prototype.hit = function (player, quest, questEntity, damage, reason) {
        return damage * 2;
    };
    return XinopherydonClaw;
})(GridItem);
///<reference path="QuestEntity.ts"/>
var Xinopherydon = (function (_super) {
    __extends(Xinopherydon, _super);
    // Constructor
    function Xinopherydon(quest, pos) {
        _super.call(this, quest, pos, new Naming("A xinopherydon", "a xinopherydon"), new RenderArea(17, 6), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(5, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(9, 1)), new CollisionBox(this, new Pos(12, 2), new Pos(5, 1)), new CollisionBox(this, new Pos(3, 3), new Pos(14, 1)), new CollisionBox(this, new Pos(4, 4), new Pos(5, 1)), new CollisionBox(this, new Pos(10, 4), new Pos(5, 1)), new CollisionBox(this, new Pos(5, 5), new Pos(3, 1)), new CollisionBox(this, new Pos(11, 5), new Pos(3, 1))), new QuestEntityMovement());
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(5000);
        this.setHp(5000);
        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/xinopherydon"));
        this.setTransparency(new RenderTransparency(" "));
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its huge body", "its huge body"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(19, 8))), 800));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(20);
    }
    // update()
    Xinopherydon.prototype.update = function () {
        _super.prototype.update.call(this);
        console.log(this.getHp());
        // We heal ourselves if the player is too far on the left
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.getGlobalPosition().x - 50)
            this.heal(50);
    };
    // willDie()
    Xinopherydon.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(30000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        // The claw
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedXinopherydonClaw", "You found a strange claw on the xinopherydon's corpse.", "You gain a strange claw."));
    };
    return Xinopherydon;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var YourselfEntity = (function (_super) {
    __extends(YourselfEntity, _super);
    // Constructor
    function YourselfEntity(quest, pos) {
        _super.call(this, quest, pos, new Naming("Yourself", "yourself"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement(new Pos(-1, 0)));
        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(this.getQuest().getGame().getPlayer().getMaxHp());
        this.setHp(this.getQuest().getGame().getPlayer().getHp());
        // Set the ascii art
        this.getRenderArea().drawString("\\o/");
        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("The same weapon as yours", "the same weapon as yours"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3))), 0));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay();
    }
    // setHp()
    YourselfEntity.prototype.setHp = function (hp) {
        // If we don't have the crown
        if (this.getQuest().getGame().isEquipped("hat", "eqItemHatOctopusKingCrown") == false) {
            // When anyone want to change our hp, we change the player's hp first :)
            this.getQuest().getGame().getPlayer().setHp(hp);
        }
        else {
            // When anyone want to change our hp, we change the player's hp first :) (but here we keep it over 0!)
            if (hp > 0)
                this.getQuest().getGame().getPlayer().setHp(hp);
            else
                this.getQuest().getGame().getPlayer().setHp(1);
        }
        _super.prototype.setHp.call(this, hp);
    };
    // willDie()
    YourselfEntity.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(Math.floor(this.getQuest().getGame().getCandies().getCurrent() / 10)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemBootsBootsOfIntrospection", "You found the boots of introspection", "You gain the boots of introspection"));
    };
    return YourselfEntity;
})(QuestEntity);
var YourselfSentence = (function () {
    // Constructor
    function YourselfSentence(quest, text, isGoingRight, y) {
        // Set from parameters
        this.quest = quest;
        this.text = text;
        this.isGoingRight = isGoingRight;
        // Set the position
        if (this.isGoingRight)
            this.position = new Pos(-this.text.length, y);
        else
            this.position = new Pos(100, y);
    }
    // Public methods
    YourselfSentence.prototype.draw = function (renderArea) {
        renderArea.drawString(this.text, this.quest.getRealQuestPosition().x + this.quest.getGlobalDrawingOffset().x + this.position.x, this.quest.getRealQuestPosition().y + this.quest.getGlobalDrawingOffset().y + this.position.y);
    };
    YourselfSentence.prototype.update = function () {
        if (this.isGoingRight) {
            this.position.x += 1;
            if (this.position.x > 100)
                return true; // Delete the sentence
        }
        else {
            this.position.x -= 1;
            if (this.position.x < -this.text.length)
                return true; // Delete the sentence
        }
        // We don't delete the sentence : we return false
        return false;
    };
    return YourselfSentence;
})();
///<reference path="Quest.ts"/>
var Yourself = (function (_super) {
    __extends(Yourself, _super);
    // Constructor
    function Yourself(game) {
        _super.call(this, game);
        // Sentences flying across the screen
        this.sentences = [];
        // Sentences timer (to avoid having sentences at the very beginning of the quest)
        this.sentencesTimer = 30;
        // Resize the quest
        this.resizeQuest(100, 20);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 19));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add yourself
        this.addYourself();
        // Add the walls
        this.addWalls();
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You are now fighting yourself."));
    }
    // Public methods
    Yourself.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
    };
    Yourself.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to beat yourself!"));
            Saving.saveBool("mainMapDoneDesert", true); // The desert is done
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died trying to beat yourself."));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    Yourself.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Handle sentences
            this.handleSentences();
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawSentences(); // Draw the sentences
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
        else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
        else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    Yourself.prototype.addYourself = function () {
        this.yourself = new YourselfEntity(this, new Pos(96, 19));
        this.yourself.setHealthBar(new QuestEntityHealthBar(this.yourself, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.yourself);
    };
    Yourself.prototype.addWalls = function () {
        // Create the wall entity
        this.addEntity(new Wall(this, new Pos(0, 0)));
        var wall = (this.getLastEntity());
        // Add the boxes
        wall.addBox(new Pos(-1, -1), new Pos(102, 1));
        wall.addBox(new Pos(-1, 0), new Pos(1, 21));
        wall.addBox(new Pos(0, 20), new Pos(101, 1));
        wall.addBox(new Pos(101, 0), new Pos(1, 20));
    };
    Yourself.prototype.drawSentences = function () {
        // Call the sentences update methods
        for (var i = 0; i < this.sentences.length; i++) {
            this.sentences[i].draw(this.getRenderArea());
        }
    };
    Yourself.prototype.handleSentences = function () {
        // If it's time to add sentences
        if (this.sentencesTimer <= 0) {
            // If we don't have the crown
            if (this.getGame().isEquipped("hat", "eqItemHatOctopusKingCrown") == false) {
                // We possibly add a randomly-chosen sentence
                if (this.sentences.length == 0 || Random.oneChanceOutOf(10))
                    this.sentences.push(new YourselfSentence(this, Random.fromArray(["You need to be more self-confident",
                        "You need more confidence!",
                        "My crown is called content, a crown that seldom kings enjoy",
                        "Self-confidence is having confidence in oneself",
                        "The Octopus King helps those who help themselves",
                        "It's hard to beat yourself",
                        "If my head looks like an \"o\", what does my belly look like?",
                        "What does the squirrel do all the day?",
                        "I wonder what is inside the first house",
                        "I guess it's time for me to become a King",
                        "With a crown on your head, you just feel they will never hurt you",
                        "Look at all these flying sentences",
                        "Am I talking to myself?",
                        "There are three shark fins",
                        "Did you look under the carpet?",
                        "Look at this bar above",
                        "Maybe you could change its corners",
                        "Nonsense",
                        "Confidence confidence confidence",
                        "If there be no enemy there's no fight. If no fight, no victory and if no victory there is no crown",
                        "A crown is merely a hat that lets the rain in",
                        "I spent a lot of time with a crown on my head",
                        "Sometime I wish the aliens would abduct me and crown me as their leader",
                        "The crown of life is neither happiness nor annihilation; it is understanding",
                        "Tentacles tentacles tentacles"]), Random.flipACoin(), Random.between(1, 12)));
            }
            else {
                // We possibly add the sentence
                if (this.sentences.length == 0 || Random.oneChanceOutOf(20))
                    this.sentences.push(new YourselfSentence(this, Random.fromArray(["You are very self-confident."]), Random.flipACoin(), Random.between(1, 12)));
            }
        }
        else {
            this.sentencesTimer -= 1;
        }
        // Call the sentences update methods
        for (var i = 0; i < this.sentences.length; i++) {
            // If it should be deleted, we remove it from the array
            if (this.sentences[i].update()) {
                this.sentences.splice(i, 1);
                i--;
            }
        }
    };
    Yourself.prototype.thePlayerWon = function () {
        // If yourself is dead, we return true
        if (this.yourself.shouldDie())
            return true;
        // Else we return false
        return false;
    };
    return Yourself;
})(Quest);
Database.addAscii("maps/map", 208, 88, [
    "                                                                                    ~                                                                                                           ~",
    "              ~                                                                                                                                       ~",
    "                                                                       ~",
    "                                                  ~",
    "                         ~                                                                                                                                            ~",
    "                                                                                                          ~",
    "",
    "                                         Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨                               ~       ~                                ~                                                                   ~",
    "                                         Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨     ~                                                 ~",
    "                                        |Â¨Â¨Â¨Â¨Â¨Â¨Â¨/                     ~                                                                      ~                              ~",
    "                             ~          |Â¨Â¨Â¨Â¨Â¨Â¨/                                                  ___                             ~                      ~",
    "      ~                                 |Â¨Â¨Â¨Â¨Â¨/         ~                       ~     ~          /^_ \\        ~",
    "                                        |Â¨Â¨Â¨Â¨/                 ~                                /^( \\/              ~                                ~              ~",
    "                                        |Â¨Â¨Â¨/                                           ______ / ^/______                                 ~",
    "                          ~             |Â¨Â¨/                                        ___/      | ^ |      \\_____                     ~",
    "                                       ___/      ~                    ~        ____/    ______| ^ |______    \\_\\________    ~                                   ~",
    "                                 ~     |8|                                    / _/  ___/     /  ^  \\     \\___  \\_       \\",
    "              ~                       /___\\                                  / /  _/     I>  |, ^ ,|    I>   \\_  \\       \\___                    ~                                 ~",
    "                                      |   |                          ~      / / _/      /\\   /|\\_/|\\   /\\      \\_ \\          \\                       ~",
    "                                      |III|               ~              __/ | /       /__\\ | (Q P) | /__\\       \\ |          \\____      ~                               ~",
    "                            ~         |   |    ~                        /    |/        |**| // \\_/ \\\\ |**|        \\|   Â¨           \\",
    "                                      |III|                        ____/     |         |[]|\"VV\"\"\"\"\"VV\"|[]|         |                \\          ~       ______________                              ~",
    "                                      |   |                       /          |\\        |[]|--{}-_-{}--|[]|        /|                 |                (         _    Â´'\\",
    "                                 ~    |III|                 _____/           | \\_      |__|----| |----|__|      _/ |           Â¨      Â´'\\ ~    _______| 888    / \\      Â´'\\",
    "                                     _|___|        ~       (                  \\  \\_    '  '    ___    '  '    _/  /            ____     |     /        88888   |-| 888    :    ~",
    "                         ~          ( /|||\\\\               |       Â¨           \\_  \\___       (:::)       ___/  _/            /   /     |    |    Â¨   8888888     88888   |",
    "                                    /       \\________      |                     \\_    \\______|:::|______/    _/      Â¨       \\__/      |    |   888    | |      8888888  |",
    "   ~                               /                 \\_    |               Â¨       \\___       |   |       ___/                          |  ~ |  88888   | |  888   | |    |               ~",
    "                                  /                    \\   |                           \\______|   |______/                   ___        :    : 8888888      88888  | | Â¨  |",
    "                                 (_       ____          |  |   Â¨              Â¨                                 Â¨         __/   \\_______)   /    | |   Â¨   8888888         Â´'\\     ~",
    "              ~               ~    \\_   __)  (__   _    |  |       88                                                   _/    ~             ) Â¨  | |       _ | |      888     :                                ~",
    "                                     \\_/        |#| \\__/   | 88   8888              Â¨                Â¨                _/                 ~ /              / \\| |     88888    |",
    "                                                           |8888   ||  88   88   88                           Â¨      /  ~            ~    /   888      Â¨  |+|       8888888   |",
    "                                             <|       ~    : || 88    8888 8888 8888         88    88               |        ~           /   88888        |_|         | |     |   ~",
    "                                         ~  __|_ _        /88  8888    || 88||   || 88   88 8888  8888          88  |              ,----'   8888888      /| |\\        | |     |",
    "                           ~                \\__/|#|      /8888  ||  88   8888  88  8888 8888 || 88 ||  88      8888 |             (           | |        ||0||    _    _      |",
    "                                         .______|#|_____/  ||88    8888   ||  8888  ||   ||    8888   8888  88  ||  :   ~          |          | |    Â¨        _  / \\  / \\  Â¨  |      ~               ~",
    "                      ~            ~    /                   8888    ||     88  ||  88   88   88 ||  88 ||  8888   ^/           ~   |   Â¨                   _ / \\ |-| _|-|_    |",
    "                                       /  Â¨                  ||   88   88 8888    8888 8888 8888   8888 88  ||   /_\\               )                   _  / \\|-| / \\/ \\ / \\   |",
    "                                      /                          8888 8888 ||   88 ||   ||   ||  88 || 8888  ^  /^  \\ ^^  ~    ^^ /        Â¨     Â¨    / \\ |-| / \\|-||-| |-|   :",
    "      ~                     ~        /            Â¨               ||   ||      8888     88   88 8888 88 ||  / \\^/ \\  ^^^^_____^^^^   Â¨                |-| / \\ |-|/ \\ / \\     /",
    "                                    /                     Â¨                88   ||  88 8888 8888 || 8888   ^  /_\\  \\ |  |_____|  |                        |-| / \\|-| |-|    /              ~",
    "                   ~               /        Â¨                             8888 88  8888 ||   ||    ^ ||^  /_\\/   \\  \\|  |_____|  |    //^\\\\    (\\     Â¨       |-|          /",
    "                                  :                                        || 8888  ||    88     ^/ \\ ^ \\/   \\    \\  |__|_|=|_|__|      #      | \\        Â¨          Â¨    /",
    "                                  |                 Â¨                Â¨         || 88     8888 ^ / \\ ^/ \\ \\    \\                         #      |  '----------------------'     ~",
    "                                  |                                              8888   ^ || / \\   /_\\  \\ \\       //^\\\\                 #      |",
    "                               ~  |      Â¨                    Â¨                   || ^ / \\^ / ^ \\ /   \\  \\          #                          |",
    "                  ~               |                                      Â¨          /_\\  /_\\ / \\ /     \\      Â¨     #   /\\/\\_P                 |   ~",
    "                                  |  Â¨        ^     ^  ^                        ^  /   ^/   \\   \\                   #  `||||          Q_/\\/\\   |",
    "                          ~       |          /_\\   /_\\/_\\ ^  ^  ^      ^    ^  /_\\/   /_\\    \\   \\                                      ||||`  :          ~        ~                           ~",
    "                                  |      Â¨  /   \\^/   ^  /_\\/_\\/_\\ ^  /_\\  /_\\/   \\  /   \\                 Â¨                    //^\\\\         /",
    "                                  :        / ^  / ^  /_\\/ ^/   ^  /_\\/   ^/   \\    \\/     \\         Â¨               Q_/\\/\\        #          /",
    "    ~                             \\         /_\\/ ^ \\/ ^ \\/ ^  /_\\/   \\  /_\\    \\                                      ||||`       #         /     ~",
    "                      ~            :______ / ^ \\/ ^ \\/_\\/ ^ \\/ ^ \\    \\/   \\              Â¨                                       #        /",
    "                                ~         ) /_\\/ /_\\/ ^ \\/_\\ \\/_\\ \\   /     \\                    Â¨            Â¨           ,---------------'    ~                ~                   ~",
    "                                          :/   \\/   \\/_\\/   \\/   \\               Â¨                                       (_______",
    "                                          \\    /    /   \\    \\    \\                                                      ________Â´'\\",
    "                           ~               \\       /|[O]|\\                               Â¨                       Â¨      /________\\  :   ~",
    "                                            \\                    Â¨                                                      |__[ ]___|   \\             ~",
    "             ~                      ~        \\                              Â¨        __________        Â¨                 .________.   Â´'\\                     ~",
    "                                              :                             ________/          Â´'\\__ ______              :'Â´'Â´'Â´'Â´:      :   ~",
    "                                ~             |                            /                       !-! ~  Â´'\\       \\ /  :'Â´'Â´'Â´'Â´:      |                                                 ~",
    "                          ~                   |     Â¨                    _/  ~                     !-!       \\     --O-- :'Â´'Â´'Â´'Â´:      |              ~",
    "   ~                                          |                  Â¨     _/                          !-!        Â´'\\   / \\  :'Â´'Â´'Â´'Â´:      |",
    "                                              :                     __/          ~         ~       !-!           |  |_|  :'Â´'Â´'Â´'Â´:      :      ~                      ~",
    "                                        ~     \\         _          (                               !-!      ~    |  |_|  :'Â´'Â´'Â´'Â´:   __/          ~",
    "                              ~                \\       (O)         |                        _______!-!           |  / \\  :'Â´'Â´'Â´'Â´:  /   ~",
    "                                                \\       Â¨          |    ~                  |    _    |   ~       |       :________: /                                        ~",
    "                                                 \\                /                ~      /    /&\\    \\           Â´'\\              /",
    "      ~                                 ~         '--------------'                       '--.  |Â¤|    .'             '------------'         ~",
    "                          ~                                               ~                  \\_______/",
    "                                                         ~                                                   ~                    ~                    ~",
    "                                               ~                                        ~                                 ~                                        ~",
    "                                   ~",
    "                                                                    ~                                                                 ~",
    "                                                                                                           ~                                                                             ~",
    "                                                                                     ~                                                             ~        ~",
    "        ~                   ~               ~             ~",
    "                                                                                                                             ~",
    "",
    "",
    "                                                                                    ~",
    "                                  ~",
    "                                                                                                                                                     ~",
    "                ~                                          ~                                                       ~",
    "",
    "                                          ~",
    ""
]);
Database.addAscii("gridItems/mainMap", 17, 10, [
    " _______________",
    "/  8            \\",
    "| 888     .-'   |",
    "|  |  _.-'      |",
    "|    (          |",
    "|     )       ^ |",
    "|    /    ^  | ||",
    "|   /    | |    |",
    "| -'            |",
    "\\_______________/"
]);
Database.addAscii("gridItems/feather", 5, 6, [
    " _",
    "| \\",
    "\\-|\\",
    " \\-|\\",
    "  \\-|",
    "    \\"
]);
Database.addAscii("gridItems/talkingCandy", 5, 2, [
    "\\.-./",
    "/'-'\\"
]);
Database.addAscii("gridItems/xinopherydonClaw", 12, 5, [
    "    _.---.",
    "  .'      '.",
    " '  .-'-.  |",
    "/ .'     '-'",
    "|/"
]);
Database.addAscii("gridItems/advancedGrimoire", 8, 11, [
    "   .  .",
    "  /////|",
    " ///// |",
    "|===|  |",
    "|   |  |",
    "|era|  |",
    "|tho|  |",
    "|shi|  |",
    "|   | /",
    "|===|/",
    "'---'"
]);
Database.addAscii("gridItems/l", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    L    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("gridItems/blackMagicGrimoire", 9, 11, [
    "   .   .",
    "  //////|",
    " ////// |",
    "|====|  |",
    "| BM |  |",
    "|_/\\_|  |",
    "|\\  /|  |",
    "| \\/ |  |",
    "| OD | /",
    "|====|/",
    "'----'"
]);
Database.addAscii("gridItems/p", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    P    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("gridItems/heartPendant", 12, 11, [
    "\\          /",
    " \\        /",
    "  \\      /",
    "   \\    /",
    "    \\  /",
    "     \\/",
    "     ::",
    "   _ :: _",
    "  ( `\\/' )",
    "  `\\    /'",
    "    `\\/'"
]);
Database.addAscii("gridItems/unicornHorn", 7, 4, [
    "\\.",
    " \\'.",
    "  \\ '.",
    "   \\,-'"
]);
Database.addAscii("gridItems/pogoStick", 13, 11, [
    " ___________",
    "(_____ _____)",
    "     | |",
    "     | |",
    "     | |",
    "     | |",
    "   __| |__",
    "  (_______)",
    "     | |",
    "     | |",
    "     |_|"
]);
Database.addAscii("gridItems/heartPlug", 17, 7, [
    "  /    /    /",
    " /____/____/",
    "/____/____/\\  /",
    "\\         \\ \\/",
    " \\   ***   \\/\\  /",
    "  \\   ***   \\ \\/",
    "   \\_________\\/"
]);
Database.addAscii("gridItems/a", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    A    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("gridItems/redSharkFin", 12, 5, [
    "   .Â´",
    "  /(",
    " /  \\  (red)",
    "/    `.",
    "Â¯Â¯Â¯Â¯Â¯Â¯Â¯"
]);
Database.addAscii("gridItems/beginnersGrimoire", 7, 11, [
    "   .  .",
    "  ////|",
    " //// |",
    "|==|  |",
    "|  |  |",
    "|ar|  |",
    "|fb|  |",
    "|tp|  |",
    "|  | /",
    "|==|/",
    "'--'"
]);
Database.addAscii("gridItems/shellPowder", 13, 5, [
    "   |z.-+);",
    "  -+|)='`%:",
    " })]`]}s)'.;",
    " -+{!%^;_\\'\".",
    "%;=)h;-+--(-]"
]);
Database.addAscii("gridItems/timeRing", 11, 9, [
    "    ___",
    "   / | \\",
    "  (  o- )",
    "   \\   /",
    "  .-'-'-.",
    " //     \\\\",
    "((       ))",
    " \\\\     //",
    "  '-._.-'"
]);
Database.addAscii("gridItems/fortressKey", 8, 10, [
    "   _",
    "  |:|_|\\",
    "  |: _ (",
    "  |:| |/",
    "  |:|",
    "  |:|",
    "  |:|",
    " /\\ /\\",
    "( -O- )",
    " \\/_\\/"
]);
Database.addAscii("gridItems/thirdHouseKey", 8, 10, [
    "   _",
    "  | |_|\\",
    "  |  _ (",
    "  | | |/",
    "  | |",
    "  | |",
    "  | |",
    " /\\ /\\",
    "( -3- )",
    " \\/_\\/"
]);
Database.addAscii("gridItems/y", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    Y    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("gridItems/pitchfork", 12, 8, [
    "      /    /",
    "     /    /",
    "    /    /",
    "   /    /",
    "  /    /",
    " /    /",
    " ////",
    "////"
]);
Database.addAscii("gridItems/sponge", 15, 7, [
    "      ___",
    "   .-'***'.",
    "  /~*****~ \\",
    " /*****~****'.",
    "(***~*********)",
    " '.*****~**__/",
    "  '-:::::-'"
]);
Database.addAscii("gridItems/greenSharkFin", 14, 5, [
    "   .Â´",
    "  /(",
    " /  \\  (green)",
    "/    `.",
    "Â¯Â¯Â¯Â¯Â¯Â¯Â¯"
]);
Database.addAscii("gridItems/purpleSharkFin", 15, 5, [
    "   .Â´",
    "  /(",
    " /  \\  (purple)",
    "/    `.",
    "Â¯Â¯Â¯Â¯Â¯Â¯Â¯"
]);
Database.addAscii("text/Saving", 34, 6, [
    "  ____              _",
    " / ___|  __ ___   _(_)_ __   __ _",
    " \\___ \\ / _` \\ \\ / / | '_ \\ / _` |",
    "  ___) | (_| |\\ V /| | | | | (_| |",
    " |____/ \\__,_| \\_/ |_|_| |_|\\__, |",
    "                            |___/"
]);
Database.addAscii("text/Configuration", 65, 6, [
    "   ____             __ _                       _   _",
    "  / ___|___  _ __  / _(_) __ _ _   _ _ __ __ _| |_(_) ___  _ __",
    " | |   / _ \\| '_ \\| |_| |/ _` | | | | '__/ _` | __| |/ _ \\| '_ \\",
    " | |__| (_) | | | |  _| | (_| | |_| | | | (_| | |_| | (_) | | | |",
    "  \\____\\___/|_| |_|_| |_|\\__, |\\__,_|_|  \\__,_|\\__|_|\\___/|_| |_|",
    "                         |___/"
]);
Database.addAscii("text/About", 32, 5, [
    "     _    _                 _",
    "    / \\  | |__   ___  _   _| |_",
    "   / _ \\ | '_ \\ / _ \\| | | | __|",
    "  / ___ \\| |_) | (_) | |_| | |_",
    " /_/   \\_\\_.__/ \\___/ \\__,_|\\__|"
]);
Database.addAscii("text/Loading", 39, 6, [
    "  _                    _ _",
    " | |    ___   __ _  __| (_)_ __   __ _",
    " | |   / _ \\ / _` |/ _` | | '_ \\ / _` |",
    " | |__| (_) | (_| | (_| | | | | | (_| |",
    " |_____\\___/ \\__,_|\\__,_|_|_| |_|\\__, |",
    "                                 |___/"
]);
Database.addAscii("eqItems/boots/bootsOfIntrospection", 29, 8, [
    "  ?                         ?",
    "        ____    ?",
    "    ?   \\   |   ____   ?",
    "       __)  |  |   /",
    "      (_____)  |  (__",
    "               (_____)  ?",
    "  ?",
    "           ?        ?"
]);
Database.addAscii("eqItems/boots/rocketBoots", 33, 8, [
    "                  _______",
    " _______         (____/ <|",
    "(____/ <|        (___/  <|",
    "(___/  <|        (__/   <\\______",
    "(__/   <\\______  /.-._.-.-'-._.-\\",
    "/.-._.-.-'-._.-\\ \\___ ______ ___/",
    "\\___ ______ ___/    /\"\\    /\"\\",
    "   /\"\\    /\"\\"
]);
Database.addAscii("eqItems/boots/leatherBoots", 16, 5, [
    "  ____",
    "  \\   |   ____",
    " __)  |  |   /",
    "(_____)  |  (__",
    "         (_____)"
]);
Database.addAscii("eqItems/weapons/woodenSword", 9, 18, [
    "    ^",
    "   / \\",
    "   | |",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "_  |||  _",
    "\\\\_|_|_//",
    " \\_____/",
    "   (x)",
    "   (x)",
    "   (x)"
]);
Database.addAscii("eqItems/weapons/summoningTribalSpear", 18, 29, [
    "        /\\",
    "       //\\\\",
    "      //â–²â–²\\\\",
    "     //â–²â–²â–²â–²\\\\",
    "    //â–²â–²â–²â–²â–²â–²\\\\",
    "    \\\\â–²â–²â–²â–²â–²â–²//",
    "     \\\\â–²â–²â–²â–²//",
    "      \\____/",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    " ____   ||   ____",
    "/\\\\\\\\\\__||__/////\\",
    "\\/////_/||\\_\\\\\\\\\\/",
    "     /-||||-\\",
    "    /-|/||\\|-\\",
    "   /-|/ || \\|-\\",
    "   |_/  ||  \\_|",
    "        ||",
    "        ||",
    "       ([])"
]);
Database.addAscii("eqItems/weapons/tribalSpear", 14, 27, [
    "    /\\",
    "   //\\\\",
    "  //Â¨Â¨\\\\",
    " //Â¨Â¨Â¨Â¨\\\\",
    "//Â¨Â¨Â¨Â¨Â¨Â¨\\\\",
    "\\\\Â¨Â¨Â¨Â¨Â¨Â¨//",
    " \\\\Â¨Â¨Â¨Â¨//",
    "  \\____/",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||   ____",
    "    ||__/////\\",
    "    ||\\_\\\\\\\\\\/",
    "    |||-\\",
    "    ||\\|-\\",
    "    || \\|-\\",
    "    ||  \\_|",
    "    ||",
    "    ||",
    "   ([])"
]);
Database.addAscii("eqItems/weapons/enchantedMonkeyWizardStaff", 11, 21, [
    " .   *   .",
    "{*}\\/o\\/{*}",
    " '.o O o.'",
    "  \\  o  /",
    "   {_O_}",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    (*)",
    "    (*)",
    "    (*)"
]);
Database.addAscii("eqItems/weapons/polishedSilverSword", 12, 21, [
    "     ^",
    "    / \\",
    "    ) (",
    "   <   >",
    "    ) (",
    "    | |",
    "    ) (",
    "   <   >",
    "    ) (",
    "    | |",
    "    ) (",
    "   <   >",
    " .  ) (  .",
    " |\\_| |_/|",
    "< Â¤_ Â¤ _Â¤ >",
    " |/ \\_/ \\|",
    " '  [-]  '",
    "    [-]",
    "    [-]",
    "    [-]",
    "   (___)"
]);
Database.addAscii("eqItems/weapons/scythe", 30, 32, [
    " /\\",
    " )(",
    " ||",
    "| (|______",
    "|) |      '---____",
    "| (|              '--__",
    "|) |______              '-.",
    "| (|______'----.___        \\",
    " ||      '----.___'---._    \\",
    " ||               '--- ._\\_  |",
    " ||                      \\_\\ |",
    " ||                        \\\\|",
    " ||                         \\|",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " /\\",
    " \\/"
]);
Database.addAscii("eqItems/weapons/giantSpoonOfDoom", 13, 31, [
    "     .-.",
    "   .: # :.",
    "  :     # :",
    " :  #      :",
    ":       #   :",
    ":  #        :",
    ":     #     :",
    " : #     # :",
    "  :.   # .:",
    "    :___:",
    "    |   |",
    "    |#  |",
    "    |  #|",
    "    |   |",
    "    |  #|",
    "    |   |",
    "    | # |",
    "    |   |",
    "    |   |",
    "    | # |",
    "    |   |",
    "    |#  |",
    "    |   |",
    "    | # |",
    "    |   |",
    "    |  #|",
    "    |  #|",
    "    |   |",
    "    |#  |",
    "    |   |",
    "    '-.-'"
]);
Database.addAscii("eqItems/weapons/ironAxe", 11, 12, [
    "   /\\  |\\",
    " __)(__) \\",
    "(__{}__   >",
    "   ||  ) /",
    "   ||  |/",
    "   ||",
    "   ||",
    "   ||",
    "   ||",
    "   ||",
    "   /\\",
    "  '--'"
]);
Database.addAscii("eqItems/weapons/giantSpoon", 13, 31, [
    "     .-.",
    "   .:   :.",
    "  :       :",
    " :         :",
    ":           :",
    ":           :",
    ":           :",
    " :         :",
    "  :.     .:",
    "    :___:",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    '-.-'"
]);
Database.addAscii("eqItems/weapons/monkeyWizardStaff", 9, 19, [
    " .  .  .",
    "/ \\/ \\/ \\",
    "\\_     _/",
    "  \\_ _/",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   |_|",
    "   ( )",
    "  _/ \\_",
    " /_____\\"
]);
Database.addAscii("eqItems/weapons/trollBludgeon", 12, 18, [
    "    _/\\_",
    "   /____\\",
    " <)    > (>",
    " /  <     \\",
    "<)        (>",
    " \\ <   >  /",
    " <) ____ (>",
    "   \\____/",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "   (____)"
]);
Database.addAscii("eqItems/gloves/pinkEnchantedGloves", 11, 8, [
    "  .~.~.~.",
    "  | | | |~.",
    "  | | | | |",
    "  | | | | |",
    "~ |       |",
    "\\`\\ (\\/)  |",
    " \\   \\/   |",
    "  \\______/"
]);
Database.addAscii("eqItems/gloves/redEnchantedGloves", 11, 8, [
    "  .~.~.~.",
    "  | | | |~.",
    "  | | | | |",
    "  | | | | |",
    "~ |       |",
    "\\`\\ # # # |",
    " \\  ##### |",
    "  \\______/"
]);
Database.addAscii("eqItems/gloves/leatherGloves", 11, 8, [
    "  .~.~.~.",
    "  | | | |~.",
    "  | | | | |",
    "  | | | | |",
    "~ |       |",
    "\\`\\       |",
    " \\        |",
    "  \\______/"
]);
Database.addAscii("eqItems/hats/octopusKingCrownWithObsidian", 9, 3, [
    "|\\/\\_/\\/|",
    "| w W w |",
    "Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯"
]);
Database.addAscii("eqItems/hats/octopusKingCrownWithJaspers", 9, 3, [
    "|\\/\\_/\\/|",
    "| o O o |",
    "Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯"
]);
Database.addAscii("eqItems/hats/merchantHat", 17, 3, [
    "      .---.",
    "     |     |",
    "'-.__|_____|__.-'"
]);
Database.addAscii("eqItems/hats/octopusKingCrown", 9, 3, [
    "|\\/\\_/\\/|",
    "| . : . |",
    "Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯"
]);
Database.addAscii("eqItems/hats/sorceressHat", 28, 7, [
    "                   _.-.",
    "                .-'  ~ '.",
    "             _.'  Â¨_.'-._\\",
    "           .'    ~|      '",
    "          ' Â¨     -",
    ".________/_________\\_______.",
    " Â¨Â¨Â°Â¨Â°Â¨Â¨            Â¨Â°Â¨Â¨Â¨Â°Â¨"
]);
Database.addAscii("eqItems/bodyArmours/knightBodyArmour", 13, 8, [
    " \\\\       //",
    " | '-._.-' |",
    " |         |",
    "/  :::::::  \\",
    "|  ::KNI::  |",
    "\\  :::::::  /",
    " '.       .'",
    "   '-._.-'"
]);
Database.addAscii("eqItems/bodyArmours/lightweightBodyArmour", 11, 7, [
    " \\       /",
    " |'-._.-'|",
    " |       |",
    "/         \\",
    "\\         /",
    " '.     .'",
    "   '-.-'"
]);
Database.addAscii("eqItems/bodyArmours/enchantedKnightBodyArmour", 13, 8, [
    " \\\\       //",
    " |*'-._.-' |",
    " |     *  *|",
    "/   *       \\",
    "|*     *  * |",
    "\\           /",
    " '. *  *  .'",
    "   '-._.-'"
]);
Database.addAscii("general/openBox", 29, 25, [
    "            _____",
    "       ____/|   |\\____",
    "      |\\_____________/|",
    "      ||             ||",
    "      ||             ||",
    "      ||             ||",
    "      ||             ||",
    "      ||_____________||",
    "      |/_____________\\|",
    "     /I               I\\",
    "    / I               I \\",
    "   /  I               I  \\",
    "  /   I               I   \\",
    " /    I               I    \\",
    "|:Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨\\_______/Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨:|",
    "|:                         :|",
    "|:                         :|",
    "|:  ___    .-\"\"\"-.    ___  :|",
    "|:  \\  \\  /\\ \\ \\ \\\\  /  /  :|",
    "|:   }  \\/\\ \\ \\ \\ \\\\/  {   :|",
    "|:   }  /\\ \\ \\ \\ \\ /\\  {   :|",
    "|:  /__/  \\ \\ \\ \\ /  \\__\\  :|",
    "|:         '-...-'         :|",
    "|:.........................:|",
    "|___________________________|"
]);
Database.addAscii("general/specialAbilityBackground", 98, 1, [
    " |   |                                                                                       |   |"
]);
Database.addAscii("general/box", 29, 25, [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    " ___________________________",
    "|:''''''''''''''''''''''''':|",
    "|:          _____          :|",
    "|:         /     \\         :|",
    "|_________(_[   ]_)_________|",
    "|:Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨\\_____/Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨:|",
    "|:                         :|",
    "|:                         :|",
    "|:  ___    .-\"\"\"-.    ___  :|",
    "|:  \\  \\  /\\ \\ \\ \\\\  /  /  :|",
    "|:   }  \\/\\ \\ \\ \\ \\\\/  {   :|",
    "|:   }  /\\ \\ \\ \\ \\ /\\  {   :|",
    "|:  /__/  \\ \\ \\ \\ /  \\__\\  :|",
    "|:         '-...-'         :|",
    "|:.........................:|",
    "|___________________________|"
]);
Database.addAscii("general/inventoryTop", 99, 55, [
    "               ______                                 __",
    "              /\\__  _\\                               /\\ \\__",
    "              \\/_/\\ \\/     ___   __  __     __    ___\\ \\ ,_\\   ___   _ __   __  __",
    "                 \\ \\ \\   /. _ `\\/\\ \\/\\ \\  /.__`\\/. _ `\\ \\ \\/  / __`\\/\\`.__\\/\\ \\/\\ \\",
    "                  \\_\\ \\__/\\ \\/\\ \\ \\ \\_/ |/\\  __//\\ \\/\\ \\ \\ \\_/\\ \\L\\ \\ \\ \\/ \\ \\ \\_\\ \\",
    "                  /\\_____\\ \\_\\ \\_\\ \\___/ \\ \\____\\ \\_\\ \\_\\ \\__\\ \\____/\\ \\_\\  \\/`____ \\",
    "                  \\/_____/\\/_/\\/_/\\/__/   \\/____/\\/_/\\/_/\\/__/\\/___/  \\/_/   `/___/> \\",
    "                                                                                /\\___/",
    "                                                                                \\/__/",
    "",
    " _________________________________________________________________________________________________",
    "(                                                                                                ()",
    " |                                                                                               |",
    " |  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}                                                       |",
    " |  {(              WEAPON              )}          \\                                            |",
    " |  { )                                ( }       / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ \\ \\ \\                                           |",
    " |  {(                                  )}      \\ \\ ) )                                          |",
    " |  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}                                                       |",
    " |                                                                                               |",
    " |   /=======================================================================================\\   |",
    " |   | Max HP :          - Weapon damage :            - Weapon speed :                       |   |",
    " |   |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|   |",
    " |   |                                                                                       |   |"
]);
Database.addAscii("general/inventoryBodyArmour", 21, 12, [
    ".....................",
    ".    BODY ARMOUR    .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    "....................."
]);
Database.addAscii("general/inventoryGloves", 13, 12, [
    ".............",
    ".  GLOVES   .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    "............."
]);
Database.addAscii("general/inventoryHat", 36, 12, [
    "....................................",
    ".                HAT               .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    "...................................."
]);
Database.addAscii("general/inventoryBoots", 36, 12, [
    "....................................",
    ".              BOOTS               .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    "...................................."
]);
Database.addAscii("general/candyRoom", 50, 7, [
    "                 ___                        ____",
    "               \\/   \\/                    \\/    \\/",
    "       _____   /\\___/\\ _   ____     _     /\\____/\\",
    "     \\/     \\/   (_)  (_)\\/    \\/  (_)       (_)",
    "     /\\_____/\\    |    | /\\____/\\   |   ___   |",
    "     \\/     \\/    |    | \\/    \\/   | \\/   \\/ |",
    "     /\\_____/\\    |    | /\\____/\\   | /\\___/\\ |"
]);
Database.addAscii("general/inventoryBottom", 99, 75, [
    " |   \\=======================================================================================/   |",
    " |   _________________________________________________________________________________________   |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [_____________________][_____________________][_____________________][____________________]  |",
    " |                                                                                               |",
    " (_______________________________________________________________________________________________()"
]);
Database.addAscii("general/translaCAT", 19, 16, [
    "   |\\___/|",
    "  /       \\",
    " / <*> <*> \\",
    "/___  V  ___\\",
    "    |   |",
    "    |    \\______",
    "    /           \\",
    "   |             |",
    " __/              \\",
    "|_______        __/",
    "        |      /",
    "         \\  __/",
    "        _/ /  __",
    "       / /    \\ \\",
    "      | |_____/ /",
    "       \\_______/"
]);
Database.addAscii("general/insideYourBox/4", 1, 3, [
    "o",
    "|",
    "|"
]);
Database.addAscii("general/insideYourBox/5", 8, 2, [
    "/\\.--./\\",
    "\\/'--'\\/"
]);
Database.addAscii("general/insideYourBox/9", 17, 3, [
    " _______________",
    "/__/__/__/__/__/|",
    "|__|__|__|__|__|/"
]);
Database.addAscii("general/insideYourBox/3", 5, 1, [
    "o----"
]);
Database.addAscii("general/insideYourBox/0", 5, 2, [
    "\\.-./",
    "/'-'\\"
]);
Database.addAscii("general/insideYourBox/10", 14, 3, [
    " ____________",
    "/__/__/__/__/|",
    "|__|__|__|__|/"
]);
Database.addAscii("general/insideYourBox/text", 90, 12, [
    "                                __   __                          _",
    "                                \\%\\ /%/__ _  _  __ __ _____ _ _ |%|",
    "                                 \\%V%/%_%\\%||%| \\%V%%V%/%_%\\%'%\\|_|",
    "                                  |_|\\___/\\_,_|  \\_/\\_/\\___/_||_(_)",
    "           __   __                            _                        _ _   _   _",
    "           \\%\\ /%/__ _  _   _ _  _____ __ __ |%|_  __ ___ _____   __ _|%|%| |%|_|%|_  ___",
    "            \\%V%/%_%\\%||%| |%'%\\/%_%\\%V%%V%/ |%'%\\/%_`%\\%V%/%-_) /%_`%|%|%| |%%_|%'%\\/%-_)",
    "             |_|\\___/\\_,_| |_||_\\___/\\_/\\_/  |_||_\\__,_|\\_/\\___| \\__,_|_|_|  \\__|_||_\\___|",
    "                                _        _        _   _                         _    _ _",
    "              ____ __ _____ ___|%|_ ___ (_)_ _   |%|_|%|_  ___  __ __ _____ _ _|%|__|%|%|",
    "             (_-<%V%%V%/%-_)%-_)%%_(_-< |%|%'%\\  |%%_|%'%\\/%-_) \\%V%%V%/%_%\\%'_|%/%_`%|_|",
    "             /__/\\_/\\_/\\___\\___|\\__/__/ |_|_||_|  \\__|_||_\\___|  \\_/\\_/\\___/_| |_\\__,_(_)"
]);
Database.addAscii("general/insideYourBox/6", 3, 5, [
    " _",
    "(_)",
    " |",
    " |",
    " |"
]);
Database.addAscii("general/insideYourBox/2", 5, 1, [
    "----o"
]);
Database.addAscii("general/insideYourBox/7", 3, 9, [
    " _",
    "| |",
    "|/|",
    "|/|",
    "| |",
    "| |",
    "|/|",
    "|/|",
    "|_|"
]);
Database.addAscii("general/insideYourBox/8", 3, 9, [
    " _",
    "| |",
    "|\\|",
    "|\\|",
    "| |",
    "| |",
    "|\\|",
    "|\\|",
    "|_|"
]);
Database.addAscii("general/insideYourBox/1", 1, 3, [
    "o",
    "|",
    "|"
]);
Database.addAscii("general/theComputer/computer", 62, 24, [
    "                                            _________________",
    "                                           |                 |",
    "                                           |   ___________   |",
    "                                           |  |   .....   |  |",
    " ______________________________________    |  |___________|  |",
    "|  __________________________________  |   |   ___________   |",
    "| |                                  | |   |  |   .....   |  |",
    "| |                                  | |   |  |___________|  |",
    "| |                                  | |   |   __   __   _   |",
    "| |                                  | |   |  |__| |__| |_|  |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |       .|.       |",
    "| |                                  | |   |      (   )      |",
    "| |                                  | |   |       '-'       |",
    "| |__________________________________| |   |                 |",
    "|______________________________________|   |                 |",
    "                 |    |      '.            |                 |",
    "                 |    |        '-.-'-.-'-.-|                 |",
    "                 )    (                    |                 |",
    "                /      \\                   |                 |",
    "               /________\\                  |_________________|"
]);
Database.addAscii("arena/peacefulForest/logo", 16, 4, [
    " ||| \\o/|||  |||",
    "",
    "   The peaceful",
    "      forest"
]);
Database.addAscii("arena/hardcorePlatformer/logo", 18, 4, [
    " HARDCORE",
    "     PLATFORMER",
    "",
    "_/\\/\\__\\o/____/\\/\\"
]);
Database.addAscii("arena/hardcorePlatformer/background", 240, 12, [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________",
    "",
    " Good luck!                                                                     That wasn't so hard, was it?                                      Wow. Good job. But now it's going to be serious.                                       Yay!!",
    "________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________"
]);
Database.addAscii("players/medium", 11, 4, [
    "\\         /",
    " \\  .-.  /",
    "  \\(%%%)/",
    "    '-'"
]);
Database.addAscii("players/mediumSqueezedBerserk", 6, 3, [
    "  ..",
    "\\(OO)/",
    "  \"\""
]);
Database.addAscii("players/mediumTurtleBerserk", 11, 4, [
    "",
    "  .---.  _",
    " /     \\/O)",
    "'uu---uu'Â¨"
]);
Database.addAscii("players/mediumSqueezedTurtle", 6, 3, [
    " ..",
    "/  \\/)",
    "uuuu'"
]);
Database.addAscii("players/mediumBerserk", 11, 4, [
    "\\         /",
    " \\  .-.  /",
    "  \\(O%O)/",
    "    '-'"
]);
Database.addAscii("players/mediumTurtle", 11, 4, [
    "",
    "  .---.  _",
    " /     \\/_)",
    "'uu---uu'"
]);
Database.addAscii("players/mediumSqueezedTurtleBerserk", 6, 3, [
    " ..",
    "/  \\/O",
    "uuuu'"
]);
Database.addAscii("players/mediumSqueezed", 6, 3, [
    "  ..",
    "\\(%%)/",
    "  \"\""
]);
Database.addAscii("places/mountains", 138, 19, [
    "                                    /\\                                              /\\",
    "                                   // \\     _      /\\                              /  \\     _      /\\",
    "                      /\\_        _//   \\   / \\/\\ _/  \\    /\\         /\\_        __/   \\\\   / \\/\\ _/  \\    /\\",
    "                    _/   \\/\\_  _/ /   \\ \\_/   \\_/     \\__/ _\\      _/   \\/\\_  _/ /      \\_/   \\_/     \\__/ _\\",
    "                   /        `\\/   \\_   \\ \\_    / //    /    \\\\    /        `\\/   \\_   \\  \\_    / //    /    \\\\",
    "                  //     \\    \\_  / \\      \\  / _     /  /    \\  //     \\    \\_  / \\      \\   / _     /  /    \\",
    "                 //       \\     |/                             \\//       \\     |/                              \\",
    "       /\\       /                          \\             _      \\                                    /\\         \\",
    "    __/ -\\     /                                        /Â¨\\      \\_             _                   // \\     _   \\  /\\",
    "___//    \\\\   /     /         /                    ____/   \\_____/Â¨\\__         /Â¨\\     /\\_        _//  \\\\   / \\/\\\\\\/  \\    /\\",
    "/     /    \\ /     /         /                    /Â¨Â¨Â¨Â¨     Â¨Â¨Â¨Â¨Â¨   Â¨Â¨\\       /   \\  _/   \\/\\_  _/ /     \\_/   \\_//    \\__/ _\\",
    "            /               /               _____/                     \\_____/     \\/        `\\/   \\_  \\  \\_    / //    /    \\\\",
    "           /                         ______/Â¨Â¨Â¨Â¨Â¨                       Â¨Â¨Â¨Â¨Â¨       \\                                          \\",
    "          /                         /Â¨Â¨Â¨Â¨Â¨Â¨                                          \\_____                                     \\",
    "         /                        _/                                                  Â¨Â¨Â¨Â¨Â¨\\                                     \\",
    "        /        _____           /Â¨                                                         \\                            ______   \\",
    "       /   _____/Â¨Â¨Â¨Â¨Â¨\\_________/                                                            \\_________              ___/Â¨Â¨Â¨Â¨Â¨Â¨\\___\\______",
    "______/___/Â¨Â¨Â¨Â¨Â¨       Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨                                                              Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨\\____    ____/Â¨Â¨Â¨        Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨                                                                                              Â¨Â¨Â¨Â¨\\__/Â¨Â¨Â¨Â¨"
]);
Database.addAscii("places/dragonFoot", 161, 25, [
    "                                                                                                                         .'                          '.",
    "                                                                                                                         '                            '",
    "                                                                                                                        .'                            '.",
    "                                                                                                                        '                              '",
    "                                                                                                                       .'                              '.",
    "                                                                                                                       '                                '",
    "                                                                                                                      .'                                '.",
    "                                                                                                                      /                                  \\",
    "                                                                                                                     /                                    \\",
    "                                                                                                                    .'                                    '.",
    "                                                                                                                   .'                                      '.",
    "                                                                                                                 _-'                                        '.",
    "                                                                                                ____....----''_''              __.-'                          '.",
    "                                                                                   ___...---''''    __..--''''          _..--''                                 '",
    "                                                                          __..--'''       ___...---'              _..--'                                        \\",
    "                                                                   _..--''         _..--''                    _.-'                                              |",
    "                                                                 .'              .'                         .'                                                  |",
    "___                                                             '               '                          '                                                    |",
    "  |___                                                         /               /                          /                                                  __/",
    "     |___                                                      '               '                          '                         _____.....------'''''''''",
    "         |___                                                 /               /                          /                 __...--''",
    "            |___                                              '               '                ___...---''          _..--''",
    "               |___                                           |          ___..|       __..--'''          |    _..--'",
    "__________________|___                                         \\_..---'''     \\_..--''                   \\_.-'",
    ""
]);
Database.addAscii("places/outsideTheHole", 100, 21, [
    "                                           Â¨                           Â¨",
    "                  Â¨               Â¨                            Â¨                     Â¨         Â¨",
    "        Â¨                 Â¨                          Â¨                      Â¨",
    "                                           ________        _______                          Â¨",
    "  Â¨                                       /|       \\______/      /                Â¨",
    "               Â¨                Â¨        / |       |      |    _/     Â¨",
    "                        Â¨               /  |       |      |   /                                  Â¨",
    "                                       /   |       |      |   \\   Â¨                       Â¨",
    "      Â¨                        Â¨      /    |       |      |   /          Â¨",
    "                                     /     |       |      |  /                      Â¨",
    "                           Â¨         \\     |       |      | /  Â¨                                   Â¨",
    "                  Â¨                   \\    |       |      |/",
    "         Â¨                             \\__ |       |      /            Â¨                  Â¨",
    "                             Â¨            \\|       |     /         Â¨",
    "                                   Â¨       \\       |    /                     Â¨",
    "    Â¨             Â¨                         \\______|___/    Â¨                                Â¨",
    "                             Â¨",
    "           Â¨                                         Â¨                                Â¨",
    "                                          Â¨                      Â¨",
    "                     Â¨                            Â¨                                            Â¨",
    "    Â¨                          Â¨                                            Â¨"
]);
Database.addAscii("places/wishingWell", 37, 30, [
    "       _______________________",
    "     /|                       |\\",
    "    //|_______________________|\\\\",
    "   ///                         \\\\\\",
    "  ///                           \\\\\\",
    " ///                             \\\\\\",
    "///                               \\\\\\",
    "|/_________________________________\\|",
    "    ||                         ||",
    "    ||                         ||",
    "    ||                         ||",
    "    ||                         ||",
    "    ||                         ||",
    "    ||    _________________    ||",
    "    || .-' _______________ '-. ||",
    "    ||' .-'  |    |    |  '-. '||",
    "    || /|    |    |    |    |\\ ||",
    "   (||( |    |    |    |    | )||)",
    "   |\\  \\|    |    |    |    |/  /|",
    "   | \\  '-.  |    |    |  .-'  / |",
    "   | |'.   '-------------'   .'| |",
    "   |\\| |'-._______________.-'| |/|",
    "   | \\ | | | | | | | | | | | | / |",
    "   | |'. | | | | | | | | | | .'| |",
    "   |\\| |'-._______________.-'| |/|",
    "   | \\ | | | | | | | | | | | | / |",
    "    \\|'. | | | | | | | | | | .'|/",
    "     \\ |'-._______________.-'| /",
    "      '. | | | | | | | | | | .'",
    "        '-._______________.-'"
]);
Database.addAscii("places/treasure", 43, 25, [
    "                    888888        |",
    "    Â¨               888888        |",
    "                  8888888888   Â¨  |",
    "                  8888888888      |",
    "                88888888888888    |",
    "         Â¨      88888888888888    |",
    "                    |    |        |",
    "        888888      |    |        |",
    "        888888      |    |    Â¨   |",
    "   Â¨  8888888888    |    |        |",
    "      8888888888    |    |        |_",
    "    88888888888888                  '-.__",
    "    88888888888888                       \\",
    "        |    |            888888          |",
    "        |    |    Â¨       888888          |",
    "     Â¨  |    |          8888888888        |",
    "        |    |          8888888888      Â¨ |",
    "        |    |        88888888888888      |",
    "                      88888888888888      |",
    "                          |    |          |",
    "                  Â¨       |    |          |",
    "                          |    |          |",
    "                          |    |          |",
    "                          |    |          |",
    ""
]);
Database.addAscii("places/pier", 75, 23, [
    "                   ___                             ~",
    "  ~               /   \\                                                   ~",
    "          ~       |   |   ~",
    "                 /|   |                   ~                          ~",
    "                / |   |                               ~",
    "               /  |   |         ~",
    "    ~         /   |   |                                      ~",
    "             /    |   |",
    "            /     |   |  ~                  ~       ________________",
    " ~       ~ /      |   |             ~              /---------------/|",
    "          /       |   |      ~                    /---------------/||  ~",
    "    ~    /        |   | ~              ~      ~  /---------------/|/",
    "~       /_________|   |          ~              /---------------/|/|~",
    "     ~    _.------|   |------._                /---------------/|/||",
    "  ~   _.-'_.------|   |------._'-._     ~     /---------------/|/|||    ~",
    "   .-'.-'         |   |         '-.'-.       /---------------/|/~|||",
    "~  '-.__          |   |          __.-'   ~  /---------------/|/  ||/",
    "    \\   '---.__   |   |   __.---'   /~     /---------------/|/       ~",
    " ~   \\         '---------'         /  ~   /---------------/|/  ~",
    "      \\                           /      /---------------/|/            ~",
    "    ~  '----._______________.----' ~    /---------------/|/        ~",
    "          ~     ~      ~    ~          /---------------/|/  ~",
    "______________________________________/---------------/_/__________________"
]);
Database.addAscii("places/lonelyHouse", 97, 35, [
    "  /        |                                                                         |        \\",
    " /         |                                                                         |         \\",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |_________________________________________________________________________|          |",
    "|         /                                                                           \\         |",
    "|        /                                                                             \\        |",
    "|       /                                                                               \\       |",
    "|      /                                                                                 \\      |",
    "|     /                                                                                   \\     |",
    "|    /                                                                                     \\    |",
    "|   /                                                                                       \\   |",
    "|  /                                                                                         \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/sorceressHut/grimoire2", 4, 5, [
    " ___",
    "|",
    "|era",
    "|tho",
    "|shi"
]);
Database.addAscii("places/sorceressHut/cauldron", 42, 18, [
    "            _________________",
    "           (_________________)",
    "          .-'%%%%%%%%%%%%%%%'-.",
    "        .'%%%%%%%%%%%%%%%%%%%%%'.",
    "       /%%%%%%%%%%%%%%%%%%%%%%%%%\\",
    "      '%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "     '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "     \\%%%%%%%%%%%%%%%%%%%%%%%%%%%%%/",
    "      '.%%%%%%%%%%%%%%%%%%%%%%%%%.'",
    "        '-.___________________.-'",
    "            /%/           \\%\\",
    "           /%/             \\%\\",
    "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW",
    "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
    "Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨"
]);
Database.addAscii("places/sorceressHut/grimoire", 2, 4, [
    "__",
    "ar",
    "fb",
    "tp"
]);
Database.addAscii("places/sorceressHut/lollipop", 5, 1, [
    "o----"
]);
Database.addAscii("places/sorceressHut/hat", 28, 7, [
    "                   _.-.",
    "                .-'%%~%'.",
    "             _.'%%Â¨_.'-._\\",
    "           .'%%%%~|      '",
    "          '%Â¨%%%%%-",
    ".________/_________\\_______.",
    " Â¨Â¨Â°Â¨Â°Â¨Â¨            Â¨Â°Â¨Â¨Â¨Â°Â¨"
]);
Database.addAscii("places/sorceressHut/background", 286, 45, [
    "             |                                                                                                                    |",
    "             |                                                                                                                    |",
    "             |                                                                                                                    |",
    "             |             ___                                                                                                    |",
    "             |          .-'   '-.                                                                                                 |",
    "             |         /         \\                                                                                                |",
    "             |         |  ~   ~  |                                                                                                |",
    "             |         \\ (.) (.) /                                                                                                |",
    "             |          |   /   |                                                                                                 |",
    "             |          \\   0.  /                                                                                                 |",
    "             |          (   _   )                                                                                                 |",
    "             |        __.\\     /._                                                                                                |",
    "             |    _.-'  (|'._.'|)  '-._                                                                                           |",
    "             |  .'       '-___-'       '.                                                                                         |",
    "             |.'    ~              Â¨     '.                                                                                       |",
    "             .'                           '.                                                                                      |",
    "            /                               \\                                                                                     |",
    "           .'                Â¨              '.                                                                                    |",
    "           /                                 \\.                                                                                   |",
    "          .'     Â¨                           '.                                                                                   |",
    "          '                       ~           '                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |              Â¨                    |                                                                                   |",
    "          |                               Â¨   |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |           ~                       |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |    Â¨                              |                                                                                   |",
    "          |                        Â¨          |                                                                                   |",
    "          |             Â¨                     |                                                                                   |",
    "          |                     ~             |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |        Â¨                          |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |                            Â¨      |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          \\            ~                      /                                                                                   |",
    "           '._~                 ~        ~_ .'____________________________________________________________________________________|",
    "            .''-.--._.-' -. _. -'-._ _ .-'                                                                                        '.",
    "          .'       |Â°-Â°|       |Â°-Â°|                                                                                                '.",
    "        .'        .'~  )       (  ~'.                                                                                                 '.",
    "      .'        .' - .'         '. - '.                                                                                                 '.",
    "    .'         / - .'             '. - \\                                                                                                  '.",
    "  .'          |_.-'                 '-._|                                                                                                   '.",
    ".'                                                                                                                                            '.                                                                                                                                            '."
]);
Database.addAscii("places/sorceressHut/broom", 9, 27, [
    "    v",
    "    v",
    "   (*)",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   |_|",
    " .'   '.",
    "/_______\\",
    "|||||||||",
    "|||||||||",
    "|||||||||",
    " \\|||||/",
    "  ^^^^^"
]);
Database.addAscii("places/sorceressHut/shelves", 56, 18, [
    "                      _____",
    "        __          _|=====|       ___ _",
    "  _    |==|      __|F|     |__    |TSN|P|   __ _",
    " |S|___|  |_ _ _|xx| |MAGIC|  |   |   | |__|CO|T|__ __",
    " | |   |17| | | |__| |CAKES|->|   |   | |JV|  |A|H2|G2|",
    " | |W:A|  |M|L|P|  | |     |->|   |   | |  |42|O|  |  |",
    "_|_|___|==|_|_|_|xx|_|=====|__|___|666|_|__|__|G|__|__|_",
    "Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨_Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨_Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "   __          |P|   _  __                _____\\ \\",
    "  |XX|_ _ _ _ _| |  |K|\\  \\     .---.    (_____|\\ \\",
    "  |  |1|2|3|4|5| |  | | \\  \\   ( X X )   (_____| \\ \\",
    "__|XX|_|_|_|_|_|_|__|_|__\\__\\___|_V_|____(_____|__\\_\\___",
    "Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "        ._.      __      |__|         {w} {v}      ..",
    "  O     | |      )(     //00\\\\        _|___|_      ||",
    " .o.  .'=B='.   /  \\    ||  ||        \\     /    .'IP'.",
    "_/_\\__'.___.'__(____)___\\\\__//_________\\___/_____'.__.'_",
    "Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨"
]);
Database.addAscii("places/cauldron/bookPage10", 40, 26, [
    "10",
    "              The X potion",
    "              Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "  The X potion is a legend. It is said",
    "that whoever manage to brew it and drink",
    "it would travel to a place where no one",
    "have been before.",
    "",
    "  I don't know if this potion is just a",
    "legend or not, but I will write in this",
    "book everything I know about it.",
    "",
    "  The X potion is mentioned in many old",
    "legends and alchemy books. Here's a",
    "summary of the informations which may",
    "help you to brew it. Good luck!",
    "",
    " - It is said that 5 steps are necessary",
    "to brew the X potion.",
    "",
    " - It is said that no lollipops are",
    "required, except for one of the steps.",
    "",
    " - It is said that, unlike for other",
    "potions, you can't brew multiple X",
    "potions at once."
]);
Database.addAscii("places/cauldron/bookPage1", 38, 18, [
    "                                     1",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "              ~ Summary ~",
    "                Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "",
    " Page 2 : Health potion",
    " Page 3 : Turtle potion",
    " Pages 4-5 : Anti-gravity potion",
    " Pages 6-7 : Berserk potion",
    " Pages 8-9 : The P potion",
    " Pages 10-11 : The X potion",
    ""
]);
Database.addAscii("places/cauldron/bookPage0", 39, 22, [
    "0",
    "",
    "",
    "______                   _",
    "| ___ \\                 (_)",
    "| |_/ /_ __ _____      ___ _ __   __ _",
    "| ___ \\ '__/ _ \\ \\ /\\ / / | '_ \\ / _` |",
    "| |_/ / | |  __/\\ V  V /| | | | | (_| |",
    "\\____/|_|  \\___| \\_/\\_/ |_|_| |_|\\__, |",
    "                                  __/ |",
    "                                 |___/",
    "                   _",
    "      ___         (_)         __",
    "    \\/   \\/   +    |   -->    )(",
    "    /\\___/\\        |         /  \\",
    "                   |        (____)",
    "                                    _",
    "                                   | |",
    "  _ __ ___   __ _ _ __  _   _  __ _| |",
    " | '_ ` _ \\ / _` | '_ \\| | | |/ _` | |",
    " | | | | | | (_| | | | | |_| | (_| | |",
    " |_| |_| |_|\\__,_|_| |_|\\__,_|\\__,_|_|"
]);
Database.addAscii("places/cauldron/bookPage7", 38, 20, [
    "                                     7",
    "",
    "",
    "",
    "",
    "",
    "",
    "           Important notice",
    "           Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "     concerning the berserk potion",
    "     Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "",
    "  Do NOT add any candy when brewing",
    "this potion.",
    "",
    "  I mean, not a single one.",
    "",
    "  Really.",
    "",
    "  Results would be unexpected."
]);
Database.addAscii("places/cauldron/cauldron", 42, 18, [
    "            _________________",
    "           (_________________)",
    "          .-'               '-.",
    "        .'                     '.",
    "       /                         \\",
    "      '                           '",
    "     '                             '",
    "    '                               '",
    "    '                               '",
    "    '                               '",
    "     \\                             /",
    "      '.                         .'",
    "        '-.___________________.-'",
    "            / /           \\ \\",
    "           / /             \\ \\",
    "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW",
    "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
    "Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨"
]);
Database.addAscii("places/cauldron/bookPage11", 39, 26, [
    "                                    11",
    "",
    " - Finally, the following poem is often",
    "quoted when it comes to the X potion :",
    "",
    "          On the first day,",
    "it gave birth to the very first Sweet.",
    "       But it was cold outside.",
    "",
    "          On the second day,",
    "      it gave the Sweet a father.",
    "       But it was cold outside.",
    "",
    "          On the third day,",
    "      it gave the Sweet a brother.",
    "       But it was cold outside.",
    "",
    "          On the fourth day,",
    "      it gave the Sweet a friend.",
    "       But it was cold outside.",
    "",
    "          On the fifth day,",
    "      it gave the Sweet a lover,",
    "   and it may sound simple or silly,",
    "     but now the Sweet was happy,",
    "       and it was hot outside."
]);
Database.addAscii("places/cauldron/bookPage4", 40, 25, [
    "4",
    "",
    "",
    "           Anti-gravity potion",
    "           Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "  This potion, which was invented by the",
    "well-known sorcerer Isaac, allows you to",
    "resist to the earth's gravitation force",
    "for a few seconds.",
    "",
    "  It is especially useful after jumping",
    "(if you can't jump, you should seriously",
    "consider obtaining a pogo stick).",
    "",
    "  It isn't very easy to brew, you will",
    "need to heat up your cauldron and watch",
    "the temperature carefully.",
    "",
    "  Instructions :",
    "   - Put 1000 candies in your cauldron",
    "   - Heat up until the water is lukewarm",
    "   - Stop heating up",
    "   - Add 1000 candies",
    "   - Heat up until the water is boiling",
    "   - Put into bottles"
]);
Database.addAscii("places/cauldron/book", 96, 30, [
    "      _________________________________________   ________________________________________",
    " _.-' |                                        \\ /                                       | '-._",
    "| | | |                                         v                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |_________________________________________|________________________________________| | | |",
    "| | |'__________________________________________^________________________________________'.| | |",
    "|_|'___________________________________________/ \\_________________________________________'.|_|"
]);
Database.addAscii("places/cauldron/bookPage3", 39, 26, [
    "                                     3",
    "",
    "             Turtle potion",
    "             Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "  The turtle potion is a bit harder to",
    "brew than the health potion. You will",
    "need both candies and lollipops.",
    "",
    "  If you drink this potion in a quest,",
    "it will turn you into a turtle. You",
    "will move slower, but you will also be",
    "more resistant to you enemies attacks.",
    "",
    "  Instructions :",
    "   - Put 50 candies in your cauldron",
    "   - Add 500 lollipops in your cauldron",
    "   - Mix during more or less 10 seconds",
    "   - Stop mixing",
    "   - Add 50 candies",
    "   - Mix again for a few seconds",
    "   - Put into bottles",
    "",
    "  And now the most important thing you",
    "should never forget : once you will be",
    "a turtle, do NOT turn over. You",
    "wouldn't be able to get up."
]);
Database.addAscii("places/cauldron/bookPage2", 39, 22, [
    "2",
    "",
    "",
    "",
    "              Health potion",
    "              Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "",
    "  The health potion is one of the",
    "easiest to brew, really. It only",
    "requires candies. Used in quests, it",
    "will heal you by giving you back 100",
    "health points.",
    "",
    "  Instructions :",
    "   - Put 100 candies in your cauldron",
    "   - Mix for a few seconds",
    "   - Put into bottles",
    "",
    "  Just like for any potion, you can of",
    "course multiply the quantities. For",
    "example, if you use 300 candies instead",
    "of 100, you will get 3 health potions."
]);
Database.addAscii("places/cauldron/bookPage5", 39, 23, [
    "                                     5",
    "",
    "",
    "     Anti-gravity potion : use case",
    "     Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "           \"Fly above a gap\"",
    "",
    "",
    "_____\\o/_______            ____________",
    "              /            \\",
    "",
    "",
    "   *drinks the potion*",
    "__________\\o/__            ____________",
    "              /            \\",
    "",
    "",
    "_______________     \\o/    ____________",
    "              /            \\",
    "",
    "",
    "_______________            __\\o/_______",
    "              /            \\"
]);
Database.addAscii("places/cauldron/bookPage6", 40, 23, [
    "6",
    "",
    "",
    "",
    "             Berserk potion",
    "             Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "  The berserk potion transforms you into",
    "a berserker.",
    "",
    "  The drawback is that it consumes half",
    "of your life.",
    "",
    "  The benefit is that it doubles your",
    "damage for a few seconds!",
    "",
    "  Brewing this potions is very simple,",
    "but you will need a lot of lollipops.",
    "Here are the instructions :",
    "   - Put 20 000 lollipops in your",
    "     cauldron",
    "   - Mix them until your arms are",
    "     hurting",
    "   - Put into bottles"
]);
Database.addAscii("places/cauldron/bookPage8", 40, 26, [
    "8",
    "              The P potion",
    "              Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "  The P potion is a strange one. You",
    "cannot predict what it is going to do.",
    "It could heal you or damage you, make",
    "you stronger or weaker, or even turn you",
    "into someone (something?) else.",
    "",
    "  And it's also hard to brew!",
    "",
    "  Instructions :",
    "   - Put 500 candies in your cauldron",
    "   - Mix for a few seconds",
    "   - Stop mixing",
    "   - Add 100 times more candies than the",
    "number of seconds you mixed. For example",
    "if you mixed during 4 seconds, you'll",
    "need to add 400 candies. Do not multiply",
    "this quantity, even if you want to make",
    "more than one potion.",
    "   - Heat up until the water is lukewarm",
    "   - Stop heating up",
    "   - Add some lollipops",
    "   - Mix",
    "   - Put into bottles!"
]);
Database.addAscii("places/cauldron/bookPage9", 40, 21, [
    "                                     9",
    "",
    "",
    "",
    "",
    "    Make a good use of the P potion",
    "    Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "  There are some rules which you can",
    "follow in order to get better results",
    "when drinking the P potion. Although",
    "these rules were defined empirically,",
    "they seem to work pretty well.",
    "",
    "  - The more you use P potions, the more",
    "they seem to have strange effects.",
    "",
    "  - If your health is very low, you",
    "should probably drink a P potion.",
    "",
    "  - Animals drinking P potions seem to",
    "react in a very bad way."
]);
Database.addAscii("places/fortress/inside", 100, 32, [
    "                              |                                      |",
    "                              |                                      |",
    "                              |                                      |",
    "                              |                                      |",
    "                              |           _______________            |",
    "                              |          |               |           |",
    "                              |          |               |           |",
    "                  _.-'|       |          |               |           |       |'-._",
    "              _.-'    |       |          |              /|           |       |    '-._",
    "          _.-'        |       |          |             / |           |       |        '-._",
    "       .-'            |       |          |            /  |           |       |            '-.",
    "       |              |       |          |           /   |           |       |              |",
    "       |              |       |          |          /    |           |       |              |",
    "       |              |       |          |         /     |           |       |              |",
    "       |              |       |          |        /      |           |       |              |",
    "       |              |       |          |       /       |           |       |              |",
    "       |              |       |          |      /        |           |       |              |",
    "       |              |       |          |     /         |           |       |              |",
    "       |              |       |          |    /          |           |       |              |",
    "       |              |       |          |   /           |           |       |              |",
    "       |              |       |          |  /            |           |       |              |",
    "       |-._           |       |          | /             |           |       |           _.-|",
    "       |   '-._       |       |__________|/              |___________|       |       _.-'   |",
    "       |       '-._   |    _.-'                                      '-._    |   _.-'       |",
    "       |           '-.|_.-'                                              '-._|.-'           |",
    "       |                                                                                    |",
    "       |                                                                                    |",
    "       |                                                                                    |",
    "       |                                                                                    |",
    "    _.-'                                                                                     '-._",
    "_.-'                                                                                             '-.",
    ""
]);
Database.addAscii("places/theCave/exit", 58, 31, [
    "",
    "",
    "",
    "",
    "",
    "",
    "       ____________________________________________",
    "     /|                                            |\\",
    "    / |                                            | \\",
    "   /  |                                            |  \\",
    "  /   |                     __/\\_                  |   \\",
    " /    |                 ___/     \\                 |    \\",
    "/     |                /      Â¨   \\                |     \\",
    "      |              _/            \\               |",
    "      |             /     Â¨        /               |",
    "      |            /            Â¨ /                |",
    "      |           /  Â¨            |                |",
    "      |          /                |                |",
    "      |          \\                |                |",
    "      |           \\        Â¨      \\                |",
    "      |           /   Â¨            \\               |",
    "      |       ___/                  \\__            |",
    "      |      /                         \\___        |",
    "      |   __/                              \\____   |",
    "      |__/                                      \\__|",
    "     /                                              \\",
    "    /                                                \\",
    "   /                                                  \\",
    "  /                                                    \\",
    " /                                                      \\",
    "/                                                        \\"
]);
Database.addAscii("places/theCave/octopusKing", 37, 19, [
    "                                /\\",
    "             |\\/\\_/\\/|         :%%:",
    " /\\          |%.%:%.%|         |%%|",
    "//\\\\      _.-'Â¯Â¯Â¯Â¯Â¯Â¯Â¯'-._      |%%|",
    "\\\\//    /Â¯%%%%%%%%%%%%%%%Â¯\\    |%%|",
    " XX    /%%%%%._%%%%%_.%%%%%\\   |%%|",
    " ||   |%%%%%/-_'%%%'_-\\%%%%%|  |%%|",
    " ||   |%%%%%\\_/%%%%%\\_/%%%%%|  |%%|",
    " ||   |%%%%%%%%%%%%%%%%%%%%%|  |/\\|",
    " ||    \\%%%%%%WWWWWWW%%%%%%/   ||||",
    " ||     \\%%%%%%%%%%%%%%%%%/  ()=TT=()",
    "(Â¯Â¯Â¯\\    |%%%%%%%_%%%%%%%|    /Â¯Â¯Â¯)",
    " TT\\%\\  /%/%/%/%/ \\%\\%\\%\\%\\  /%/TT",
    " || \\%\\/%/%/%/%/   \\%\\%\\%\\%\\/%/ ||",
    " ||  \\__/%/%/%(     )%\\%\\%\\__/ (oo)",
    " ||     (%(%(%(     )%)%)%)",
    " ||     (%(%(%(     )%)%)%)",
    " ||     (%(%(%(     )%)%)%)",
    " ||     (o(o(o(     )o)o)o)"
]);
Database.addAscii("places/theCave/heartPlug", 7, 2, [
    "|__|__|",
    "|_____|"
]);
Database.addAscii("places/theCave/ways", 58, 32, [
    "                        \\        /",
    "",
    "",
    "",
    "         _/|",
    "        /  |                                   /\\",
    "      _/____\\           /        \\            /__\\_",
    "     /______/          /          \\           |    \\",
    "    /      |          /            \\          |     |",
    "    \\      |         /              \\         \\     \\",
    "    /______/        /                \\         \\_____\\",
    "   /_______\\       /                  \\        /     /",
    "  |        /      /                    \\       |     \\",
    "   \\______/      /                      \\      \\______\\",
    "   /      \\     /                        \\     /      /",
    "   \\       \\   /                          \\   /______/",
    "   /       |  /                            \\  \\______\\",
    "   \\       | /                              \\ /      /",
    "   /_______|/                                \\|______|",
    "  /                                                  |",
    "  \\                                                  |",
    "   \\                                                 \\",
    "    \\                                                /",
    "    /                                               /",
    "   /                                                \\",
    "   \\                                                 |",
    "    |                                                /",
    "   /                                                  \\",
    "  /                                                    \\",
    " /                                                      \\",
    "/                                                        \\",
    ""
]);
Database.addAscii("places/theCave/monkeyWizard", 38, 20, [
    "                              .  .  .",
    "              v              /%\\/%\\/%\\",
    "          _ .~Â°~. _          \\_%%%%%_/",
    "         \\_(%u%u%)_/           \\_%_/",
    "        _.-%\\%v%/%-._           |%|",
    "    .'Â°Â°%%%_(%_%)_%%%Â°Â°'.       |%|",
    "   {_____%/._\\v/_.\\%_____}      |%|",
    "  .'%%%%%%%%%%Â°%%%%%%%%%%'   _-o|%|o",
    " .'%%%.~%%_o%)%(%o_%%~.%%%'~'%%.|%|O",
    ".'%%'   \\%%%%%%%%%%%/  '-%_.-' '|%|o",
    "(%%(    |%%%%%%%%%%%|           |%|",
    "\\%%\\    /%%%%%~%%%%%\\           |%|",
    " \\%'.  .%%%%%%_%%%%%%.          |%|",
    "  \\%.Â°'%%%%_-' '-_%%%%'         |%|",
    "  (_o/%%%/         \\%%%\\        |%|",
    "     (%%(           )%%)        |_|",
    "      \\%%\\         /%%/         (%)",
    "      _-'%|       |%'-_        _/%\\_",
    "     (oOo.)       (.oOo)      /_____\\",
    ""
]);
Database.addAscii("places/theCave/treasureMap", 20, 8, [
    "        ooo    o",
    "       ooooo   o",
    "      ooooooo  o",
    "  ooo   o o    o",
    " ooooo  o o    o",
    "ooooooo  X      ooo",
    "  o o              o",
    "  o o"
]);
Database.addAscii("places/theCave/chocolateBar", 17, 3, [
    " _______________",
    "/__/__/__/__/__/|",
    "|__|__|__|__|__|/"
]);
Database.addAscii("places/aTree/ticTacToeBoard", 22, 13, [
    " _____________________",
    "|      |      |      |",
    "|      |      |      |",
    "|      |      |      |",
    "|______|______|______|",
    "|      |      |      |",
    "|      |      |      |",
    "|      |      |      |",
    "|______|______|______|",
    "|      |      |      |",
    "|      |      |      |",
    "|      |      |      |",
    "|______|______|______|"
]);
Database.addAscii("places/aTree/ticTacToeO", 4, 3, [
    " __",
    "|  |",
    "|__|"
]);
Database.addAscii("places/aTree/background", 70, 52, [
    "            |   |",
    "            |   |",
    "  |             |",
    "  |             |",
    "  |             |",
    "                |",
    "                |        _.-'''-,",
    "                |      .'        `\\",
    "                |     /           /",
    "       |        |    /      .--^_^",
    "       |        |    |     /  C ,,\\",
    "                |    |    |   \\  _.)                           ___",
    "                |     \\   |   /  \\                   ____.----'.-'",
    "                |      '-, \\./ \\)\\)               .-' --  __.-'",
    "    |            \\        `-/   );/           ___/  - _.-'",
    "    |             \\_________''--'-'________.-' --    /",
    "    |              -   --        -  -     -     __.-'",
    "                     -    --    -     --   --  /",
    "                   _________________________.-'",
    "                  /",
    "                 /",
    "                |",
    "          |     |",
    "          |     |",
    "          |     |",
    "          |     |",
    "                |",
    "                |",
    "                |",
    "                |",
    "      |         |",
    "      |         |",
    "      |         |",
    "                |",
    "                |",
    "                |",
    "                |",
    "  |             |",
    "  |             |",
    "             |  |",
    "             |  |",
    "                |",
    "                |",
    "                |",
    "                |",
    "  |             |",
    "  |             |",
    "  |             |",
    "  |             |",
    "            |   |",
    "            |   |",
    "                |^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
]);
Database.addAscii("places/aTree/ticTacToeX", 2, 2, [
    "\\/",
    "/\\"
]);
Database.addAscii("places/lighthouse/lighthouse", 100, 48, [
    "",
    "",
    "                                                                ___",
    "                                                               {=0=}",
    "                                                               /---\\",
    "                                                           ___/_____\\___",
    "                                                           |[         ]|",
    "                                                           |[         ]|",
    "                                                        :  |+++++++++++|  :",
    "                                                        :__|+++++++++++|__:",
    "                                                             |#######|",
    "                                                             |#######|",
    "                                                             |#######|",
    "                                                            |         |",
    "                                                            |         |",
    "                                                            |         |",
    "                                                           |###########|",
    "                                                           |###########|",
    "                                                           |###########|",
    "                                                          |             |",
    "                                                          |             |",
    "                                                          |             |",
    "                                                         |###############|",
    "                                                         |###############|",
    "                                                         |###############|",
    "                                                        |                 |",
    "                                                        |                 |   __",
    "                                                        |                 |  ( o)",
    "                                                       |###################| /||",
    "                                                       |###################|( ||",
    "                                                  _____|###################|_\\_m\\",
    "                                                 /                             |\\\\_",
    "                                   _____________/                    --        | '-'",
    "                       ___________/                                            |",
    "                     _|                                                        |",
    "                   _|     ----                      -----                      |",
    "                 _|                                                             \\",
    "               _|                                                  ---           |",
    "             _|                                                                  |",
    "           _|                       ---                                          |",
    "__________|                                                                       \\",
    "                                                                                   |",
    " ---                                                          --                   |",
    "                                                                                   |",
    "                                       ----                                        |",
    "                   --                                                       ---    |",
    "                                                                                   | _      _      _",
    "                                                                                   \\)`'-.,_)`'-.,_)`"
]);
Database.addAscii("places/lighthouse/puzzle/stonePart", 7, 5, [
    "_______",
    "\\ ___ /",
    "// P \\\\",
    "\\\\___//",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/nothingHerePart", 7, 5, [
    "_______",
    "\\ no  /",
    "/thing\\",
    "\\here!/",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showLeftRight", 7, 5, [
    "_______",
    "\\     /",
    "/  >  \\",
    "\\  <  /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showAroundPart", 7, 5, [
    "_______",
    "\\     /",
    "/ T > \\",
    "\\ V < /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/whatPart", 7, 5, [
    "_______",
    "\\     /",
    "/ ? ? \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showRight", 7, 5, [
    "_______",
    "\\     /",
    "/  >  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/livesPart", 7, 5, [
    "_______",
    "\\     /",
    "/ <3  \\",
    "\\  <3 /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showAbove", 7, 5, [
    "_______",
    "\\     /",
    "/  T  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showBelow", 7, 5, [
    "_______",
    "\\     /",
    "/  V  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/moveBelowLineToTheRight", 7, 5, [
    "_______",
    "\\     /",
    "/  V  \\",
    "\\ --> /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/blankPart", 7, 5, [
    "_______",
    "\\     /",
    "/     \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/moveLeftLineAbove", 7, 5, [
    "_______",
    "\\     /",
    "/ < T \\",
    "\\   | /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showLeft", 7, 5, [
    "_______",
    "\\     /",
    "/  <  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/quests/desert/tripodCamel2", 7, 2, [
    "Q_/\\/\\",
    "  | ||`"
]);
Database.addAscii("places/quests/desert/birdRightDown", 9, 4, [
    "",
    "  _____<>",
    ">-\\//_/",
    "  //"
]);
Database.addAscii("places/quests/desert/camel", 7, 2, [
    "Q_/\\/\\",
    "  ||||`"
]);
Database.addAscii("places/quests/desert/birdLeftUp", 9, 3, [
    "     //",
    "<>__//_",
    "  \\___/-<"
]);
Database.addAscii("places/quests/desert/background", 149, 9, [
    "      //^\\\\                            //^\\\\                                                     //^\\\\",
    "       '#'                              '#'                                                       '#'                                //^\\\\",
    "       #                                 #                                                        #                                   '#'",
    "      #                                  #                                                       #                                      #",
    "      #                                  #                                                       #                                      #",
    " _.,--#---~--,._                        _#,--~---~--,._                         _.,--~---~---._   #                  _.,--~---~--,._     #",
    "'               '*-,._            _.,-*'               '*-,._            _.,-~*'      ~        '*-#.           ._,-*'         ~     '*-,.#",
    "   ~                  '*-,.__.,-*'      ~     ~              '-,.__.,--*'                  ~       '*-,.__.,-*'       ~                   '-,.__.,-*'",
    "         ~       ~             ~                     ~                      ~                           ~                        ~"
]);
Database.addAscii("places/quests/desert/tripodCamel1", 7, 2, [
    "Q_/\\/\\",
    "  || |`"
]);
Database.addAscii("places/quests/desert/birdRightUp", 9, 3, [
    "  \\\\",
    "  _\\\\__<>",
    ">-\\___/"
]);
Database.addAscii("places/quests/desert/birdLeftDown", 9, 4, [
    "",
    "<>_____",
    "  \\_\\\\/-<",
    "     \\\\"
]);
Database.addAscii("places/quests/theSea/bigShark", 47, 10, [
    "              .Â´",
    "             /(",
    "            /%%\\                       __..--._",
    "        ___/%%%%`._               _.-Â´Â¯%_.-Â´Â¯Â¯",
    " _..--Â´'Â¯%%%%%%%%%%%%Â¯`---..___.-Â´Â¯%%%%_-Â´",
    "(%%%%%O%%%)))%%%%%%%%%%%%%%%%%%%%%%%%%%(_",
    " `vvvvv%%%%%%\\%%%%%/%%%%%%_.------._%%%%%Â¯`-._",
    "   `----------\\%%%/----Â´Â¯Â¯          Â¯`------Â´Â¯",
    "               \\%/",
    "                V"
]);
Database.addAscii("places/quests/theSea/plant7", 4, 4, [
    "  )-",
    "-(",
    "  )",
    " ("
]);
Database.addAscii("places/quests/theSea/plant1", 3, 4, [
    " )-",
    "(",
    "-)-",
    "("
]);
Database.addAscii("places/quests/theSea/jellyFish", 6, 5, [
    " ____",
    "(o%%o)",
    " ))))",
    "((((",
    " ))))"
]);
Database.addAscii("places/quests/theSea/plant8", 4, 4, [
    "\\MM/",
    " )%)",
    "(%(",
    " )_)"
]);
Database.addAscii("places/quests/theSea/plant3", 4, 4, [
    "  )",
    " (",
    "  )-",
    "-("
]);
Database.addAscii("places/quests/theSea/seahorse", 4, 4, [
    ":=@",
    " {|<",
    "  |",
    "  J"
]);
Database.addAscii("places/quests/theSea/plant0", 4, 4, [
    "\\##/",
    " )%)",
    "(%(",
    " )_)"
]);
Database.addAscii("places/quests/theSea/miniShark", 19, 5, [
    "         ,        .",
    "        /(.._,,_./|",
    "   _.-\"\"%%%%%%%%%%|",
    " .Â´Â¤%}}}%%%%.-'-'\\|",
    "Â´v-----\\|--'      '"
]);
Database.addAscii("places/quests/theSea/plant6", 4, 9, [
    "  )-",
    " (",
    "  )",
    "-(",
    "  )-",
    " (",
    "  )",
    "-(",
    "  )"
]);
Database.addAscii("places/quests/theSea/plant2", 3, 6, [
    "  )",
    "-(-",
    "  )",
    "-(-",
    "  )",
    " ("
]);
Database.addAscii("places/quests/theSea/smallestFish", 3, 1, [
    "()("
]);
Database.addAscii("places/quests/theSea/shellPowder", 6, 3, [
    " z.-);",
    "})]`s",
    ";h;-+-"
]);
Database.addAscii("places/quests/theSea/plant5", 4, 4, [
    "  )",
    "-(",
    "  )-",
    " ("
]);
Database.addAscii("places/quests/theSea/plant10", 4, 4, [
    "\\@@/",
    "(%(",
    " )%)",
    "(_("
]);
Database.addAscii("places/quests/theSea/plant4", 4, 6, [
    "  )",
    "-(",
    "  )",
    "-(",
    "  )-",
    " ("
]);
Database.addAscii("places/quests/theSea/mediumFish", 8, 4, [
    "  __",
    " /.%\\ /|",
    "(%%%%X%|",
    " \\_V/ \\|"
]);
Database.addAscii("places/quests/theSea/sponge", 6, 3, [
    " *~**",
    "****-*",
    " *****"
]);
Database.addAscii("places/quests/theSea/plant9", 4, 4, [
    "\\##/",
    "(%(",
    " )%)",
    "(_("
]);
Database.addAscii("places/quests/theSea/seaSnake/4", 78, 11, [
    "",
    "",
    "              _. -'('('- ._",
    "           . '( ( ( ( ( ( (-( . _",
    "    ___//('( ( (.(-'''.(_( (.( ( (-_",
    " _.c    ) ( ( '            '(_( ( ( -._                                  ____",
    "/__  _ /. '                    '(.( ( ( ( -._                      _. - ( (.-'",
    "  /.'                              ' (_( ( ( '- ._             _.-'( ( (.'",
    "                                       '(.( ( ( ( '- . _ _ .-'( ( ( (.'",
    "                                           '-(_( ( ( ( ( ( ( ( (_(-'",
    "                                                '--(.(_( ( ( -'"
]);
Database.addAscii("places/quests/theSea/seaSnake/5", 78, 11, [
    "",
    "                          _ _",
    "                   _.-('( ( ( ('-.",
    "               _.-'( ( ( ( ( ( ( ( ' .",
    "           _-'( ( ( (.(- '  '-(_( (.( ( -",
    "    ___//('( ( (_(-'            ' -( ( ( ( '._",
    " _.c    ) (_(.-'                    ' ( ( ( ( ( -._                       _.-/",
    "/__  _ /.-'                               -( ( ( ( '- ._             _.-'( .'",
    "  /.'                                         ' (.( ( ( '- . _ _ .-'( ( (.'",
    "                                                   ' ( ( ( ( ( ( (_(_( '",
    "                                                       '- ( (_(.(-'"
]);
Database.addAscii("places/quests/theSea/seaSnake/9", 101, 10, [
    "",
    "",
    "                                           _  .  -  -  -  .",
    "                                       .-' ('( ( ( ( ( ( ( ( '-.",
    "                                  _. '( ( ( (_( . . ----- . ( ( ('.",
    "    ___//_                     _.( ( ( (_. '                   -( ( (",
    " _.c    ) (-._             _.-( ( ( (.-'                          '(_( '",
    "/__  _ /_( ( ( ( - .....- '( ( (_-'                                  '( ( -",
    "  /.'    '-.( ( ( ( ( ( ( ( ( -'                                         ( (\\",
    "              ' -(.(_(_( - '                                                '|"
]);
Database.addAscii("places/quests/theSea/seaSnake/3", 78, 11, [
    "",
    "",
    "             __..__",
    "    ___//_.-( ( ( ( ' -.",
    " _.c    )( ( (_(_( (.( (' -_",
    "/__  _ / _(.('     ' -(_( ( ( -._                                _ .  _",
    "  /.'                   '-.( ( ( ( -._                      _.-( ( ( ( (' -_",
    "                            ' (_( ( ( '- ._             _.-'( ( ( (-(- ' '- .\\",
    "                                '(.( ( ( ( '- . _ _ .-'( ( (_(.-'",
    "                                    '-(_( ( ( ( ( ( ( ( (_('",
    "                                         '--(.(_( ( ( -'"
]);
Database.addAscii("places/quests/theSea/seaSnake/10", 103, 10, [
    "",
    "",
    "                                                 _  .  -  -  -  .",
    "                                             .-' ('( ( ( ( ( ( ( ( (-.",
    "    ___//_                              _. '( ( ( (_( . . ----- . ( ( ('.",
    " _.c    )(' -. _                     _.( ( ( (_. '                '. ( ( (.",
    "/__  _ /( ( ( ( (-._             _.-( ( ( (.-'                        '-( (\\",
    "  /.'    ' -.(_( ( ( ( - .....- '( ( (_-'                                '.(\\",
    "               '-.( ( ( ( ( ( ( ( ( -'                                     \\('",
    "                    ' -(.(_(_( - '                                          \\|"
]);
Database.addAscii("places/quests/theSea/seaSnake/11", 111, 10, [
    "",
    "",
    "                                                         _ _ _",
    "    ___//_                                        _.- '( ( ( ( ('-._",
    " _.c    ) ( - _                               _-( ( ( ( (_(_(_( ( ( (-_",
    "/__  _ /_( ( ( (' -. _                     _.( ( ( (_.- '     '  -.( ( (.",
    "  /.'    ' -(_( ( ( ( (-._             _.-( ( ( (.-'                '-( ('.",
    "               ' -.(_( ( ( ( - .....- '( ( (_-'                        '-( (.",
    "                     '-.( ( ( ( ( ( ( ( ( -'                              '.(\\",
    "                          ' -(.(_(_( - '                                    '-"
]);
Database.addAscii("places/quests/theSea/seaSnake/6", 84, 11, [
    "",
    "                              _ _ . _",
    "                        _.- '( ( ( ( ( ('-.",
    "                    .-(.('( ( ( ( ( ( ( ( ('.",
    "               _. '( ( ( (.( -'''''''''-(_( (.(-",
    "            _.( ( ( (_. '                 '( ( ( (-_",
    "    ___//.-( ( ( (.-'                       ' ( ( ( (-                     /|",
    " _.c    ) ( (_(-'                               -( ( ( (- ._            _.( /",
    "/__  _ /_(.('                                     ' (.( ( ( '- . _ _ .-( (.'",
    "  /.'                                                 ' ( ( ( ( ( ( ( (_-'",
    "                                                           ' - ( ( ( '"
]);
Database.addAscii("places/quests/theSea/seaSnake/2", 79, 11, [
    "",
    "",
    "    ___//_.__",
    " _.c    )( ( (-( . _",
    "/__  _ /(_(_( (.( ( (-_",
    "  /.'        ' '(_( ( ( -._                                _ .- - . _",
    "                  '(.( ( ( ( -._                      _.-' ( ( ( ( ( (-_",
    "                      ' (_( ( ( '- _              _.-'( ( ( ( (-'-(.(_( '-.",
    "                          '(.( ( ( ( '- . _ _ .-'( ( ( (.-'           '-(_('.",
    "                              '-(_( ( ( ( ( ( ( ( (_(-'                   '(.\\",
    "                                  '--(.(_( ( ( -'"
]);
Database.addAscii("places/quests/theSea/seaSnake/7", 89, 11, [
    "",
    "                                    _ _ . _",
    "                              _.- '( ( ( ( ( ('-.",
    "                          .-(.('( ( ( ( ( ( ( ( ('.",
    "                     _. '( ( ( (.( -'''''''''-(_( (.(-",
    "                  _.( ( ( (_. '                 '( ( ( (_",
    "              _.-( ( ( (.-'                       ' ( ( ( '",
    "    ___//__.-'( ( (_(-'                               -( ( ( (._            _.",
    " _.c    )( ( ( (.('                                     ' (.( ( '- . _ _ .-( /",
    "/__  _ /__( (-'                                             ' ( ( ( ( ( ( (.'",
    "  /.'                                                            ' ( ( (-'"
]);
Database.addAscii("places/quests/theSea/seaSnake/8", 96, 10, [
    "",
    "",
    "                                     _ . - '( ( (' - . _",
    "                                 .-' ('( ( ( ( ( ( ( ( ( -",
    "                            _. '( ( ( (.(- - ''' - -  ( ( ( (",
    "                         _.( ( ( (_. '                  '( ( ( -",
    "    ___//            _.-( ( ( (.-'                         '( ( ( -",
    " _.c    )( - .._..-' ( ( (_-'                                 -( ( (._",
    "/__  _ /( ( ( ( ( ( ( ( -'                                      '(.( ('- . __",
    "  /.'     ' -(_(_( - '                                              '-( ( ( .'"
]);
Database.addAscii("places/quests/theSea/seaSnake/12", 101, 11, [
    "",
    "",
    "    ___//",
    " _.c    )_                                               _ _ _",
    "/__  _ /_ ( - _                                   _.- '( ( ( ( ('-._",
    "  /.'   _( ( ( (' -. _                     _. _-( ( ( ( (_(_(_( ( ( (-_",
    "         ' -(_( ( ( ( (-._             _.-( (( ( ( (_.- '     '  -.( ( (.",
    "               ' -.(_( ( ( ( - .....- '( ( (_ ( (.-'                '-( ('.",
    "                     '-.( ( ( ( ( ( ( ( ( -' -'                        '-( (.",
    "                          ' -(.(_(_( - '                                  '.(\\",
    "                                                                            '-"
]);
Database.addAscii("places/quests/theSea/seaSnake/1", 78, 11, [
    "",
    "    ___//",
    " _.c    )_",
    "/__  _ /( (-_",
    "  /.' '(.( ( (-_",
    "         '(_( ( ( -._                                _ .- ( -._",
    "            '(.( ( ( ( -._                      _.-( ( ( ( ( ( (-._",
    "                ' (_( ( ( '- ._             _.-'( ( ( ( (-(-(.(_( ('-._",
    "                    '(.( ( ( ( '- . _ _ .-'( ( ( (.-'          '-(_( ('-_",
    "                        '-(_( ( ( ( ( ( ( ( (_(-'                   '-(_('-_",
    "                            '--(.(_( ( ( -'                            ' - ('>"
]);
Database.addAscii("places/quests/giantNougatMonster/monsterAwake", 15, 4, [
    " .-'Â¨Â¨Â¨Â¨Â¨Â¨Â¨'.",
    "/o%%%%%%%%%%%'.",
    "\\%%%%%%%%%%%%.'",
    " '-._._._._-'"
]);
Database.addAscii("places/quests/giantNougatMonster/monsterAngry", 15, 4, [
    " .-'Â¨Â¨Â¨Â¨Â¨Â¨Â¨'.",
    "/O%%%%%%%%%%%'.",
    "\\%%%%%%%%%%%%.'",
    " '-._._._._-'"
]);
Database.addAscii("places/quests/giantNougatMonster/monster", 15, 4, [
    " .-'Â¨Â¨Â¨Â¨Â¨Â¨Â¨'.",
    "/-%%%%%%%%%%%'.",
    "\\%%%%%%%%%%%%.'",
    " '-._._._._-'"
]);
Database.addAscii("places/quests/bridge/bridge", 138, 15, [
    "__________________________________________________________________________________________________________________________________________",
    "Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "__________________________________________________________________________________________________________________________________________",
    "   \\__    __/                                                   \\__    __/                                                    \\__    __/",
    "      |  |                                                         |  |                                                          |  |",
    "      |  |                                                         |  |                                                          |  |",
    "      |  |                                                         |  |                                                          |  |",
    "      |  |                                          -._       \\    |  |,    /       _.-                                          |  |",
    "      |  |                                             '-._      .d|  | b.      _.-'                                             |  |",
    "      |  |                                                      d  |  |   b    '                                                 |  |",
    "      |  |                                                     d   |  |    b                                                     |  |",
    "Â°ÂºÂ¤Ã¸,Â¸|  |ÂºÂ°`Â°ÂºÂ¤Ã¸,Â¸,Ã¸Â¤Â°ÂºÂ¤Ã¸,Â¸Â¸,Ã¸Â¤ÂºÂ°`Â°ÂºÂ¤Ã¸,Â¸,Ã¸Â¤ÂºÂ°`Â°ÂºÂ¤Ã¸,Â¸,Ã¸Â¤Â°ÂºÂ¤Ã¸,Â¸Â¸,Ã¸Â¤Âº|  |Â¤Ã¸,Â¸,Ã¸Â¤ÂºÂ°`Â°ÂºÂ¤Ã¸,Â¸,Ã¸Â¤Â°ÂºÂ¤Ã¸,Â¸Â¸,Ã¸Â¤ÂºÂ°`Â°ÂºÂ¤Ã¸,Â¸,Ã¸Â¤ÂºÂ°`Â°ÂºÂ¤Ã¸,Â¸,Ã¸Â¤Â°ÂºÂ¤Ã¸,|  |Â¤ÂºÂ°`Â°",
    " ~ ~ ~|  | ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |  |~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |  |~ ~ ~",
    "~~~~~~|~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~|~~~~~",
    "~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~"
]);
Database.addAscii("places/quests/bridge/troll", 15, 10, [
    "           /\\",
    "    (_)   /< \\>",
    "    /âˆž\\  <\\ >/>",
    "  __\\Ã¶/_   ||",
    " /  O-O \\_/|3",
    "| /|:::|\\_/||",
    "| ||~~~|   ()",
    "mm |\\_/|",
    "   || ||",
    "  /_|/_|"
]);
Database.addAscii("places/quests/monkeyWizard/monkeyWizard", 4, 4, [
    "   W",
    " O_|",
    "/| |",
    "( )|"
]);
Database.addAscii("places/quests/monkeyWizard/roof", 100, 5, [
    "     .         .               .               .                    .         .               .",
    "       ___________ .               .                        .       ___              .",
    "  ____/           \\_____    .                ______________________/   \\___________              .",
    " /                      \\___________________/                                      \\_______________",
    "/                                                                                                  \\"
]);
Database.addAscii("places/quests/cellar/rat", 3, 1, [
    "rat"
]);
Database.addAscii("places/quests/castleEntrance/knight3", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'Â°%\\_//|__",
    " Â¨\\%%%%||%%\\'-.",
    "   `..---..'",
    "    |\\   |\\"
]);
Database.addAscii("places/quests/castleEntrance/front", 18, 30, [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|  /",
    "||___|___|___||  |",
    "|__|___|___|__|  |",
    "||___|___|___||  |",
    "|__|___|___|__|  |",
    "||___|___|___||  |",
    "|__|___|___|__|  |",
    "||___|___|___||  /",
    "|__|___|___|__| /",
    "||___|___|___||/"
]);
Database.addAscii("places/quests/castleEntrance/knight4", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'Â°%\\_//|__",
    " Â¨\\%%%%||%%\\'-.",
    "   `..---..'",
    "    \\\\   \\\\"
]);
Database.addAscii("places/quests/castleEntrance/knight2", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'Â°%\\_//|__",
    " Â¨\\%%%%||%%\\'-.",
    "   `..---..'",
    "    /|   ||"
]);
Database.addAscii("places/quests/castleEntrance/knight5", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'Â°%\\_//|__",
    " Â¨\\%%%%||%%\\'-.",
    "   `..---..'",
    "    |\\   \\\\"
]);
Database.addAscii("places/quests/castleEntrance/background", 149, 31, [
    "                                                                                                              |   |    |   |/                       /",
    "                                                                                                            _/__     ____  /                       /",
    "                                                                                                           /___/|   /___/|/                       /",
    "                                                                                                           |   |    |   |/                       /",
    "                                                                                                         _/__     ____  /                       /",
    "                                                                                                        /___/|   /___/|/                       /",
    "                                                                                                        |___|/___|___|/                       /",
    "                                                                                                                                             /",
    "                                                                                                                                            /",
    "                                                                                                                                           /",
    "                                                                                                                                          /",
    "                                                                                                                                         /",
    "                                                                                                                                        /",
    "                                                                                                                                       /",
    "                                                                                                                                      /",
    "                               Â¨                                                                                                     /",
    "                                                                                                                                    /",
    "                                                                                                                            /|     /",
    "                   Â¨                                                                                                       / |    /",
    "                                                                                                                          /  |   /",
    "                                                 Â¨                                                                           |  /",
    "                                                                                                                             | /",
    "    Â¨                                                          Â¨                                                          ___|/",
    "                                   Â¨                                         Â¨        Â¨",
    "                       Â¨                           Â¨                                             Â¨",
    "            Â¨                  Â¨",
    "      Â¨                                                         Â¨",
    "                       Â¨                                                   Â¨                       Â¨",
    "                                                                                        Â¨",
    "                                                        Â¨",
    ""
]);
Database.addAscii("places/quests/castleEntrance/knight1", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'Â°%\\_//|__",
    " Â¨\\%%%%||%%\\'-.",
    "   `..---..'",
    "    ||   ||"
]);
Database.addAscii("places/quests/fortress/room3", 100, 31, [
    "                         ~                                 ~                               ~",
    "     ~          __________________________________________________________________________",
    "               /                                                                          \\        ~",
    "               |                                                                           |",
    "           ~   |                                                                           |",
    "               |                                                                           |  ~",
    "   ~           |                                                                   _______/",
    "               |                                                                  /",
    "               |                                                                  |",
    "          ~    |                                                                  |   ~",
    "               |                                                                  |             ~",
    "  ~            |                                                                  |",
    "               |                                                                  |          ~",
    "               |                                                                  |",
    "               |                                                                  |",
    "    ~          |                                                                  |  ~",
    "               |                                                                  |",
    "               |                                                                  |             ~",
    "            ~  |                                                                  |",
    "               |                                                                  |    ~",
    "     ~         |                                                                  |          ~",
    "               |                                                                  |",
    "               |                                                                  |",
    "               |                                                                  |   ~",
    "_______________/                                                                  |                ~",
    "                                                                                  |",
    "                                                                                  |",
    "                                                                                  |       ~",
    "                                                                                  |",
    "                                                                                  |          ~",
    "__________________________________________________________________________________|  ~"
]);
Database.addAscii("places/quests/fortress/room2", 100, 17, [
    "                           ~                         ~                        ~",
    "                ~                              ~                                             ~",
    "    ~                                                       ~         ~",
    "________________________________________________________________________________________________ ~",
    "                                                                                                \\",
    "                                                                                                 |",
    "                                                                                                 | ~",
    "                                                                                                 |",
    "                                                                                                 |",
    "                                                                                                 |",
    "                                                                                                 |",
    "                                                                                                 | ~",
    "                                                                                                 |",
    "____________________                                                            ________________/",
    "        ~           \\________________                       ___________________/           ~      ~",
    "                ~              ~     \\_____________________/           ~",
    "    ~                                           ~                                  ~            ~"
]);
Database.addAscii("places/quests/fortress/xinopherydon", 17, 6, [
    " ___",
    "/o  \\___     ___",
    "\\__     \\___/  o\\",
    "   \\     _     _/",
    "    \\   / \\   /",
    "     \\_/   \\_/"
]);
Database.addAscii("places/quests/fortress/room1", 208, 31, [
    "        ~                ~                                 ~                               ~                                  ~                                                           ~                    ~",
    "________________________________________________________________________________________________________________________________________________________________________________________________________",
    "                                  |   |                                                                                                                                                                 \\",
    "                                  |   |                                                                                                                                                                  |",
    "                                  | ~ |                                                                                                                                                                  | ~",
    "                                  |   |                                                                                                                                                                  |",
    "                                  |   |                                                                                                                                                                  |",
    "______________                    |  ~|                                                                                                                       __________________________________________/",
    "              \\                   |   |                                                                                                                      /                                               ~",
    "          ~    |                  |   |                                                   ____________     ___________________________________               |                      ~",
    "               |                  |   |                   ____     __      _     ___     /            |   /          ~                   ~    \\              |       ~",
    "  ~            |                  |~  |                  /    \\   /  \\    / \\   /   \\    |    ~       |   \\___________________________________/              |                                         ~",
    "               |                  \\___/         ____     |   ~|   |  |    | |   |   |    |            |                                                      |                              ~",
    "               |                               /    \\    |    |   | ~|    | |   |~  |    |            |                                                      |          ~",
    "               |                   _______     |    |    |    |   |  |    | |   |   |    |            |_____     _____________________________               |                       ~                        ~",
    "    ~          |                  /       \\    |    |    |    |   |  |    |~|   |   |    |        ~         |   /         ~          ~        \\              |                                    ~",
    "               |                  |       |    | ~  |    | ~  |   |  |    | |   | ~ |    |                  |   \\_____________________________/              |",
    "               |                  |     ~ |    |    |    |    |   \\__/    \\_/   \\___/    |               ~  |                                                |                        _________________________",
    "            ~  |                  | ~     |    |    |    |    \\_____________________     | ~                |                                                |    ~                  /                         |",
    "               |                  |       |    |    |    |                          |    |                  |_____     _______________________               |               ~      /                          |",
    "     ~         |                  |       |    |    |    |                          |    |                        |   /  ~       ~          ~ \\              |                     /                           |",
    "               |                  |       |    |    |    |           ~              |    |       ~                |   \\_______________________/              \\____________________/                            |",
    "               |                  |    ~  |    |  ~ |    |                       ~  |    |                        |                                                                      _                     |",
    "               |                  |       |    |    |    |     ~                    |    |                  ~     |                                                                     | |                    |",
    "          ~    |                  |       |    |    |    |                          |    |                        |_____________________________________________              _____     | |___________________/",
    "               |                  | ~     |    |    |    |                          |    |  ~                                                                 ~ \\            /     \\    |",
    "  ~            |                  |       |    |    |    |                ~         |    |          ~                     ~               ~                     |            |  ~  |    |    ~          ~",
    "               |                  |       |    |~   |    |                          |    |                                                      ~               |            |     |    |",
    "               |                  |       |    |    |    |   ~                      |    |                                                                      |            |     |    |                     ~",
    "            ~  |                  |   ~   |    |    |    |          ~           ~   |    |      ~              ~               ~                      ~         |            | ~   |    |          ~",
    "   ~           |__________________|_______|____|    |____|__________________________|____|______________________________________________________________________|____________|_____|____|_______________________"
]);
Database.addAscii("places/quests/fortress/teapot", 19, 6, [
    "",
    ". -   .-'Â¨Â¨'-.",
    " \\%\\./`Â¨Â¨Â¨Â¨Â¨Â¨`\\/'\".",
    "  \\%;%%%%%%%%%%;%%\"",
    "   \\;%%%%%%%%%%;%.\"",
    "     \\________/ \""
]);
Database.addAscii("places/quests/theHole/lostTribeWarrior", 4, 4, [
    "â–²",
    "|_O/",
    "| |",
    "|/ \\"
]);
Database.addAscii("places/quests/theHole/background", 100, 136, [
    "                                        |                  |",
    "                                        |                  |",
    "                          -             |                  |                                       ^",
    "                                        |                  |",
    "        ^                               |                  |",
    "                                        |                  |               ^",
    "                                        |                  |      -                      -",
    "            -                           |                  |",
    "                        ^               |                  |",
    "                                        |                  |",
    "                                        |                  |                        -",
    "                                -       |                  |                                      ^",
    "    -                                   |                  |          ^",
    "                                        |                  |",
    "                                        |                  |",
    "             ^                          |                  |          -",
    "                                        |                  |                     ^             -",
    "                              ^         |                  |",
    "                                        |                  |",
    "                                        |                  |",
    "             -                          |                  |                                ^",
    "                                        |                  |      -",
    "                        ^               |                  |",
    "                                       /                   |              ^",
    "                                      /                    |                             -",
    "  ^                                  /                      \\",
    "                          -       __/                        \\",
    "                                 /                            \\",
    "                                /                              \\      -",
    "      -                        /                                |",
    "                              /                                 |                ^",
    "                ^            /                                  |",
    "                            /                                   |                           -",
    "                           /                                    |",
    "                          /                                     |",
    "                         /                                      |               -",
    "                 -      /                                       |",
    "        ^              /                                        |     ^",
    "                      /                                         |",
    "                      |                                         |                          ^",
    "    -                 |                                         |",
    "                      |                                         |",
    "                ^     |                     ____________________|             -",
    "                      |                     \\",
    "             -        |                      \\          ^",
    "                      |                       \\___",
    "                   ^  |                           \\______          -           ^",
    "                      |                                  \\___________                         -",
    "    ^                 |                                              \\",
    "                      |                                               \\____",
    "                      |                                                    \\________         ^",
    "                      |                                                             \\",
    "    -            -    |                                                              \\______",
    "                      |                                                                     \\",
    "          ^           |                                                             _____    \\   -",
    "                      |                                                            /     |    |",
    "                      |                                                           /     /     |",
    "                      |                                                       ___/     /      \\",
    "                      |                                                      /        /        \\",
    "    -                 |______________________                               /         |         \\",
    "                                            /                           ___/    ^     |          \\",
    "                            ______     ____/                           /              |           |",
    "                     ^     /      \\___/                               /         -     |   ________|",
    "                          /                                 ___      /                |   \\_______|",
    "                 -       |                                 /   \\____/             ^   |           |",
    "                         |                            ____/             ^             |           |",
    "                         |                           /                                |           |",
    "     ^                    \\_______                  /     ^      -                    |           |",
    "                                 /             ____/                              -   |           |",
    "                                /             /                          ^            |____   ____|",
    "                            ___/             /     -         _____________________        /   \\",
    "                  ^     -  /                 \\_____        _/                     \\______/     |",
    "     -                    /          __            \\     _/                                    |",
    "        ^                /          /  \\            \\ -  \\                                     |",
    "                 _______/          /    \\            \\    \\____________________________________/",
    "                /                 / -    \\_______     \\                                         ^",
    "     __________/                 /               |     |      ^                -",
    " -  /                           /     ^        - |     |       ____________",
    "   |                            \\                |     |    __/            \\___________    ^",
    "   |                             \\    -      ^   |     |___/                           \\       -",
    "   |                              \\              |                                      \\",
    "  /                                \\             |                                       \\     ^",
    " |                                  \\            |   ______________________               \\",
    " |                                   |        -  |   \\                     \\___________    \\",
    " |                                   |  ^        |    \\   -    ^                       |    \\",
    " |                                   |           |     \\___               ^        -   |     |",
    " |                                   \\           \\         \\     -             _______/      |",
    " |                                    \\     -     \\         |      ___________/              |",
    " |                                     \\_____      \\        |    _/                          |",
    " |                                           \\      \\_     /    /                            |   -",
    " |                                            \\  -    |   |    |                             |",
    " |                                             |      |   |    |                             |",
    " |                                             |    ^ |   |     \\________                    |",
    " |                                             |      |   |              \\____               |",
    " |                                             |      |   |      ^            \\____          | -",
    " \\_________                      _____________/       |   |   -                    \\_________/",
    "           \\            __   ___/                  -  |   |              -                         ^",
    "            \\__________/  | |                         |   |                            ^",
    "     ^                    | |         -               |    \\",
    "               -        ^ | |                   ^     |     \\__________     ^               -",
    "                          | |-                        |                \\__________",
    "     -                    | |                         |__                         \\_________",
    "              ^         __| |______                      \\_______                           \\    ^",
    "                     __/           \\          -                  \\___                       /",
    "                    /               \\____                            \\____                 |",
    "            -      /                     \\               ^                \\____________    |",
    "                  /                      /                                             |   |",
    "     ^           |            __________/                  -         ^          -      |   |   -",
    "                 |           /                  ^                                      |   |",
    "                 |          /         -                              __________________/   |",
    "                  \\________/                              __________/                      |",
    "    -         ^                         _________________/                      _______    |  ^",
    "                           -   ________/                                       /       |   |",
    "         _____________________/                                               /    -   |   |",
    "   ^    /                                                                    /         |   |",
    "       /                                                                    /          |   |",
    "      /                                                                    /    -   ^  |   |     -",
    "  -  |                                                                    /            |   |",
    "     |                                                                  _/             |   |",
    "     |                                                                 /             - |   |       ^",
    " ^  /                                                                 /                |   |",
    "   /                                                                 /   -             |   |",
    "  |                                                                _/                  |   |",
    "  |                                                              _/                    |   |",
    "  |                                                           __/      ^               |   |   ^",
    "- |                                                      ____/                     ^   |   |",
    "  |                                                _____/                -             |   |",
    "  |                                       ________/                                   /    |",
    "  |                         _____________/                                           /     |  -",
    "   \\_______________________/                                                    ____/      |",
    "                                     ^                -                  ______/          /",
    " -                            -                                         /                /",
    "       ^                                                      ^        /              __/",
    "                      ^                                               /        ______/",
    "                -                             -                       |_______/           -",
    ""
]);
Database.addAscii("places/quests/common/chestOpenedRight", 3, 2, [
    "(",
    "|_|"
]);
Database.addAscii("places/quests/common/chestClosed", 3, 2, [
    " _",
    "|_|"
]);
Database.addAscii("places/quests/common/chestOpenedLeft", 3, 2, [
    "  )",
    "|_|"
]);
Database.addAscii("places/quests/octopusKing/octopusKing", 6, 4, [
    "  WW",
    " /..\\",
    " \\  /",
    "///\\\\\\"
]);
Database.addAscii("places/quests/octopusKing/roof", 100, 5, [
    "       .               .            .            .                  .             .            .",
    "   .   ___________              .                        .          ___  .                  .",
    "  ____/           \\_____  .                . ______________________/   \\___________   .          .",
    " /                      \\___________________/                                      \\_______________",
    "/                                                                                                  \\"
]);
Database.addAscii("places/quests/hell/demonBubbles1", 5, 3, [
    " oOo",
    "OooOo",
    " oOoO"
]);
Database.addAscii("places/quests/hell/demonBubbles6", 5, 3, [
    "oOoO",
    "  oOo",
    "OooOo"
]);
Database.addAscii("places/quests/hell/demonCube", 5, 3, [
    ".-'-.",
    ";Â°%Â°;",
    "'-.-'"
]);
Database.addAscii("places/quests/hell/demonBubbles3", 5, 3, [
    " oO",
    "OooO",
    "ooOoO"
]);
Database.addAscii("places/quests/hell/demonBubbles4", 5, 3, [
    "  Oo",
    " OooO",
    "ooOoO"
]);
Database.addAscii("places/quests/hell/demonBubbles2", 5, 3, [
    "oOoo",
    " OooO",
    "Ooo"
]);
Database.addAscii("places/quests/hell/demonBubbles5", 5, 3, [
    "oOoo",
    " Ooo",
    "OoOOo"
]);
Database.addAscii("places/quests/hell/devil", 8, 6, [
    "/(    )\\",
    "\\%\\__/%/",
    "(%%%%%%)",
    " \\%%%%/",
    "  \\%%/",
    "   Â¨Â¨"
]);
Database.addAscii("places/quests/hell/demonBubbles0", 5, 3, [
    "OooO",
    " ooOo",
    "oOo"
]);
Database.addAscii("places/quests/hell/camazotz", 22, 8, [
    "         ____",
    "        /%%%%\\",
    "   _    \\`%ËŠ /    _",
    "  /%`'-._)%%(_.-'`%\\",
    " /%%%%%%/%%%%\\%%%%%%\\",
    "/.-.-.-.\\%%%%/.-.-.-.\\",
    "         '..'",
    "          WW"
]);
Database.addAscii("places/quests/hell/background", 150, 10, [
    "_______________________________________________________                _______________________            ____________________________________________",
    "                                                      /|              |\\                     /|          |\\",
    "                                                     / |              | \\                   / |          | \\",
    "                                                    /  |              |  \\                 /  |          |  \\",
    "___________________________________________________/   |              |   \\_______________/   |          |   \\________________________________________",
    "                                                   |   |              |   |               |   |          |   |",
    "                                                   |   /              \\   |               |   /          \\   |",
    "                                                   |  /                \\  |               |  /            \\  |",
    "                                                   | /                  \\ |               | /              \\ |",
    "___________________________________________________|/                    \\|_______________|/                \\|________________________________________"
]);
Database.addAscii("places/quests/hell/demonEyes", 5, 4, [
    "_____",
    "\\Ã¨%Ã©/",
    " )%(",
    "/___\\"
]);
Database.addAscii("places/quests/developer/hello", 38, 5, [
    "B    B   BBBBB   B       B       BBBBB",
    "B    B   B       B       B       B   B",
    "BBBBBB   BBBBB   B       B       B   B",
    "B    B   B       B       B       B   B",
    "B    B   BBBBB   BBBBB   BBBBB   BBBBB"
]);
Database.addAscii("places/quests/developer/imgladyoumadeitsofar", 94, 12, [
    "YYYYY  Y  YY YY      YYYYY   Y       YYYYY   YYY        O   O   OOOOO   O   O",
    "  Y       Y Y Y      Y       Y       Y   Y   Y  YY       O O    O   O   O   O",
    "  Y       Y   Y      Y  YY   Y       YYYYY   Y   Y        O     O   O   O   O",
    "  Y       Y   Y      Y   Y   Y       Y   Y   Y  YY        O     O   O   O   O",
    "YYYYY     Y   Y      YYYYY   YYYYY   Y   Y   YYY          O     OOOOO   OOOOO",
    "",
    "",
    "YY YY   YYYYY   YYY     YYYYY      YYYYY   YYYYY      YYYYY   YYYYY      YYYYY   YYYYY   YYYYY",
    "Y Y Y   Y   Y   Y  YY   Y            Y       Y        Y       Y   Y      Y       Y   Y   Y   Y",
    "Y   Y   YYYYY   Y   Y   YYYYY        Y       Y        YYYYY   Y   Y      YYYYY   YYYYY   YYYYY",
    "Y   Y   Y   Y   Y  YY   Y            Y       Y            Y   Y   Y      Y       Y   Y   Y  Y",
    "Y   Y   Y   Y   YYY     YYYYY      YYYYY     Y        YYYYY   YYYYY      Y       Y   Y   Y   Y"
]);
Database.addAscii("places/quests/developer/me", 43, 34, [
    "                    ######",
    "                ############",
    "               ##############",
    "            ##################",
    "           ####################",
    "          #######XxxxxxxX#######",
    "         ######x++===--=++x######",
    "         #####X+=--------=+x#####",
    "         #####x+==-------==xX#####",
    "         ####X++==--------=+x######",
    "         ####X++=---------==x######",
    "         ####x+=----;-----==xX######",
    "         ####x==----------==xX######",
    "         ####XXxxx==---=++xx+X######",
    "         ####XxxXxxx+++XXXXxXX#######",
    "        #####XX#XXx+-++xXXxxxX#######",
    "        #####X###xx+;=xxx#xXxx#######",
    "        ####Xxxxxx+=;==+xxxxxx#######",
    "       #####x++===+=;======++xX######",
    "       #####x+==-=+=-=+--====+X######",
    "       #####x+=--=+=-=+=--===x#######",
    "       #####x+=--=xx=++=--==++#######",
    "       #####X+==-=xxxxx=--==+x########",
    "       ######x+===x#+xx==-=+xX########",
    "      #######xx++x#XxX#x+=++xX########",
    "      #######xxXXXXx+xXxXxx+x#########",
    "      #######XxxxXxx+++xXxXxx#########",
    "      ########xx+xx++++x++xxX#########",
    "     #########XxxxxxXXxx++xx##########",
    "     ##########Xxxxxxxx++xxX###########",
    "    ###########Xxx++++++xxX############",
    "  ##############Xx++x++xxx##############",
    " ################XXxxxxxx################",
    "######################X####################"
]);
Database.addAscii("places/quests/developer/love", 16, 5, [
    "    Y      BBBBB",
    "  Y            B",
    "Y          BBBBB",
    "  Y            B",
    "    Y      BBBBB"
]);
Database.addAscii("places/quests/forest/treeSpirit", 5, 5, [
    "_____",
    "Â°|||Â°",
    "=|||=",
    " |||",
    " |||"
]);
Database.addAscii("places/quests/forest/background", 98, 17, [
    "  |   \\\\|.'    |  |    \\\\|.'   |  |     \\\\|.'  |  |   \\\\|.'    |  |    \\\\|.'   |  |     \\\\|.'  |",
    " ||   \\` /   _.| ||,!  \\` /   _| ||\\,!  \\` /   | ||   \\` /   _.| ||,!  \\` /   _| ||\\,!  \\` /   | |",
    "|||`. | |_.-'.'||||\\`. | |_.-'.|||| \\`. | |_.-'||||`\\ |||_.-'.'||||\\`. | |_.-'.|||| \\`. | |_.-'|||",
    " ||\\ \\|! ,-'   | || \\ \\|! ,-'  | ||  \\ \\|! ,-' | ||\\ \\|  ,-'   | || \\ \\|! ,-'  | ||  \\ \\|! ,-' | |",
    "| | \\  ||      || |  \\  ||     |  |   \\  ||    || | \\  ||      || |  \\  ||     || |   \\  ||    ||",
    "|||  \\  |      ||||   `. |     ||||    `. |    ||||  `. |      || |   `. |     ||||    `. |    | |",
    "| |   | |      || |    | |     || |     | |    || |   | |      || |    | |     || |     | |    ||",
    " ||   |||      | ||    |||     | ||     |||    | ||   |||      | ||    |||     | ||     |||    | |",
    "|||   | |      || |    | | Â¨   ||||     | |    |||| Â¨ | |      ||||    | | Â¨   || |     | |    |||",
    "| |   | |  Â¨   || | Â¨  | |     || | Â¨   | | Â¨  |  |   | |      || |Â¨   | |     || | Â¨   | |  Â¨ ||",
    "  | , !|| ,    | ||   ,! |  , \\| ||   / ! |    | || , !|| ,    | ||   ,! |  , \\| ||   / ! |    | |",
    "| |   '-`      || |    '-`     || |     '-`    || |   '-`      || |    '-`     || |     '-`    ||",
    "'| \\ Â¨        / '| \\  Â¨       / '| \\    Â¨     / '| \\      Â¨   / '| \\       Â¨  / '| \\      Â¨   / '|",
    "",
    "          Â¨      Â¨           Â¨          Â¨              Â¨      Â¨             Â¨           Â¨Â¨     Â¨",
    "  Â¨                  Â¨                       Â¨                  Â¨                   Â¨       Â¨",
    "      Â¨                 Â¨           Â¨                     Â¨              Â¨               Â¨      Â¨"
]);
Database.addAscii("places/quests/forest/wolf/rightStanding", 7, 3, [
    "     _",
    " ___)''",
    "`|| ||"
]);
Database.addAscii("places/quests/forest/wolf/leftStanding", 7, 3, [
    " _",
    "''(___",
    " || ||`"
]);
Database.addAscii("places/quests/forest/wolf/rightRunning", 7, 3, [
    "     _",
    " ___)''",
    "`// //"
]);
Database.addAscii("places/quests/forest/wolf/leftRunning", 7, 3, [
    " _",
    "''(___",
    " \\\\ \\\\`"
]);
Database.addAscii("places/quests/castle/room1/background", 100, 24, [
    "",
    "",
    "       ________________________________________________________________________________________",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |____",
    "      |",
    "      |",
    "      |                                                                                         ____",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |________________________________________________________________________________________|"
]);
Database.addAscii("places/quests/castle/room3/egg", 2, 1, [
    "()"
]);
Database.addAscii("places/quests/castle/room3/background", 100, 24, [
    "",
    "",
    "       ________________________________________________________________________________________",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |____",
    "      |",
    "      |",
    "      |_____________________________________________________________________________________________"
]);
Database.addAscii("places/quests/castle/room3/monster", 13, 4, [
    "\\  _______  /",
    " \\/%%%%%%%\\/",
    "  \\%Â°%.%Â°%/",
    "   \\_____/"
]);
Database.addAscii("places/village/forge", 97, 35, [
    "  /        |          |         | |       ||_|_________|____                         |        \\",
    " /         |          |         | |      /||_|_________|___ \\                        |         \\",
    "|          |          |         | |      \\||_|_________|____/                        |          |",
    "|          |          |         | |       || '         '                             |          |",
    "|          |          |         | |                                   ______         |          |",
    "|          |          |         | |                                .-' ____ '-.      |          |",
    "|          |          |         | |                                \\.-'    '-./      |          |",
    "|          |          |         | |                 __|_________|___\\        /       |          |",
    "|          |          |         | |                |__|_________|___/        \\       |          |",
    "|          |          |         | |                   '         '  /'-.____.-'\\      |          |",
    "|          |    ______|         | |_______                         '-.______.-'      |          |",
    "|          |   /      |_________|/       /\\                                          |          |",
    "|          |  /   o----                 / /                            ||            |          |",
    "|          | /_________________________/ /                            /  \\           |          |",
    "|          |/__________________________\\/                             \\  /     ____  |          |",
    "|          |                                                          .\\/.    |____| |          |",
    "|          |                                    _____                  /\\      :||:  |          |",
    "|          |              )                    / ~~~ \\                /  \\      ||   |          |",
    "|          |             (                     \\ `Â¿Â´ /               /    \\     ||   |          |",
    "|          |    _____)_________________      _.-\\ - /-._            /      \\         |          |",
    "|          |   /  __(__________)____  /|  /Â¯Â¯Â¯Â¯/Â¯|Â¯|Â¯\\Â¯Â¯Â¯Â¯\\     _________________    |          |",
    "|          |  /  :@@@@@@@@@@@@(@@@@: / | (  Â´)|Â´  Â¯  `|(Â´  )    \\________________\\   |          |",
    "|          |  :. '-.@@@@@@@@@@@@.-' .: | |   ||       ||   |     \\               /   |          |",
    "|          |  : '.  '-.______.-'  .' : |  \\   )|     |(   /       '-._________.-'    |          |",
    "|          |__:   '-.__________.-'   : |___\\==||_____||==/____|Â¯Â¯|_____||  |_________|          |",
    "|         /   :     |----------|     : |---/  |+-----++:0+----|  |    .'|  |_         \\         |",
    "|        /    :     |----------|     :/'---UUUU+--+--+0000----|  |   |\\.'__'.\\         \\        |",
    "|       /     '-.   |----------|   .-'         |  |  |        |__|   \\|______|          \\       |",
    "|      /         '-.|__________|.-'            |  |  |                                   \\      |",
    "|     /                                        |  |  |                                    \\     |",
    "|    /                                         |__|__|                                     \\    |",
    "|   /                                          (__|__)                                      \\   |",
    "|  /                                                                                         \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/fourthHouseLollipopUnderCarpet", 4, 1, [
    "---o"
]);
Database.addAscii("places/village/fourthHouseNoLollipopOnCupboard", 17, 3, [
    "  ______________",
    " /             /|",
    "/____________ / |"
]);
Database.addAscii("places/village/fourthHouse", 97, 35, [
    "  /        |       |--_--_||                                                         |        \\",
    " /         |       |_--_--||                              _______________________    |         \\",
    "|          |       |--_--_||                             (______________________ )   |          |",
    "|          |       |_--_--||                             ||            _^_      ||   |          |",
    "|          |       |--_--_||                             ||         .-'|_|'-.   ||   |          |",
    "|          |       |_--_--||                             ||        /   ___   \\  ||   |          |",
    "|          |       |--_--_||                             ||       /|  |=|=|  |\\ ||   |          |",
    "|          |       |_--_--||                             ||--|--|--|  |-|-|  |  ||   |          |",
    "|          |       |--_--_||         ______________      ||--|--|--|  |=|=|  |  ||   | |\\       |",
    "|          |       |_--_--||        /      ----o  /|     ||^^^^^^^^^^^^^^^^^^^^^||   | | \\      |",
    "|          |       |--_--_||       /____________ / |     ||_____________________||   | |  \\     |",
    "|          |       |_--_--||       |     |      |  |     (_______________________)   | |  |\\    |",
    "|          |       |--_--_|/       |     |      |  |                                 | |  ||\\   |",
    "|          |     ============      |     |      |  |                                 | |\\ || \\  |",
    "|          |      |        ||      |     |      |  |                                 | |\\\\|| |  |",
    "|          |      |        ||      |     |      |  |                                 | | \\ | |  |",
    "|          |      |        ||      |     |      |  |                                 | |  | \\|  |",
    "|          |      |________|/      |   ()|()    |  |                ()         ()    | |  ||\\|  |",
    "|          |   ================    |     |      |  |         @      ||         ||    | \\  || |  |",
    "|          |    | __________ ||    |     |      |  |         _\\/    ||_________||    |  \\ || |  |",
    "|          |    |/    (())  \\||    |     |      |  |       ___)(__  |   ______  |    |   \\|| |  |",
    "|          |    ||  __)))(__|||    |     |      |  |      |\\ (__) \\ |__(      )_|    |    \\| |  |",
    "|          |    || /#(( ))@@|||    |     |      | /       | \\______\\|\\  '----'   \\   |     \\ |  |",
    "|          |    ||/##@@@@@@#|||    |_____|______|/        | | ____ || \\           \\  |      \\|  |",
    "|          |____||##@@@@@@##||/_____||_________||_________| ||  o |||  \\           \\_|          |",
    "|         /    ================     ||         ||         \\ ||____|| \\  \\  ()       \\ ()        |",
    "|        /    _____________________________                \\|______|  \\  \\ ||        \\||        |",
    "|       /   ~/Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨/~                           \\  \\||_________||\\       |",
    "|      /   ~/Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨/~                             \\  |           | \\      |",
    "|     /   ~/Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨/~                               \\ |           |  \\     |",
    "|    /   ~/Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨/~                                 \\|___________|   \\    |",
    "|   /   ~/Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨/~                                                    \\   |",
    "|  /   ~/____________________________/~                                                      \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/thirdHouse", 91, 35, [
    "  /        |                                                                   |        \\",
    " /         |                                                                   |         \\",
    "|          |                                                                   |          |",
    "|          |                                                                   |          |",
    "|          |                                                                   |          |",
    "|          |       _____________________________________________________       |          |",
    "|          |      /_____________________________________________________\\      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |_____________________________________________________|      |          |",
    "|          |     /            __                          ____           \\     |          |",
    "|          |    /            |UP|   __________________   |DOWN|           \\    |          |",
    "|          |   /             Â¨Â¨Â¨Â¨  (__________________)  Â¨Â¨Â¨Â¨Â¨Â¨            \\   |          |",
    "|          |  /_____________________________________________________________\\  |          |",
    "|          |__|          ____       ____ _____ _____ ___  (_)___  ____ _    |__|          |",
    "|         /   |   10 -> (____)     / __ `/ __ `/ __ `__ \\/ / __ \\/ __ `/    |   \\         |",
    "|        /    |          ____     / /_/ / /_/ / / / / / / / / / / /_/ /     |    \\        |",
    "|       /     | 1000 -> (____)    \\__, /\\__,_/_/ /_/ /_/_/_/ /_/\\__, /      |     \\       |",
    "|      /      |                  /____/                        /____/       |      \\      |",
    "|     /       |_____________________________________________________________|       \\     |",
    "|    /                                                                               \\    |",
    "|   /                                                                                 \\   |",
    "|  /                                                                                   \\  |",
    "| /                                                                                     \\ |",
    "|/_______________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/fourthHouseCupboardOpenedWithoutLollipop", 19, 15, [
    " / | |  |      |  |",
    "/  | |__|      |  |",
    "|  | /  |      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |  |      |  |",
    "|  | |__|()    |  |",
    "|  | /  |      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |__|      |  |",
    "|  | /  |      | /",
    "|  |/___|______|/",
    "| /||_________||",
    "|/ ||         ||"
]);
Database.addAscii("places/village/secondHouse", 97, 35, [
    "  /        |                                                                         |        \\",
    " /         |                                                                         |         \\",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                ___                      |          |",
    "|          |                                               /   \\                     |          |",
    "|          |                                              |a  a |                    |          |",
    "|          |                                              |  L  |                    |          |",
    "|          |                                              _\\'-'/_                    |          |",
    "|          |                                          _.-'\\_____/'-._                |          |",
    "|          |                                         /  _         _  \\               |          |",
    "|          |_______________                          | | |       | | |               |          |",
    "|         /               /|                         | | |       | | |               |          |",
    "|        /               / |                         | \\ |       | | |               |          |",
    "|       /               /  |                          \\ \\|_______| | |               |          |",
    "|      /               /   |                           \\_|__[x]__| |_|               |          |",
    "|     /               /    |             ________________|_______|_|_|_______________|____      |",
    "|    /               /     |____________/                                                 \\     |",
    "|   /               /      /           /                                                   \\    |",
    "|  /               /      /           /                                                     \\   |",
    "| /               /      /           /                                                       \\  |",
    "|/_______________/      /           /_________________________________________________________\\ |",
    "||               |     /            |                                                          ||",
    "||               |    /             |                                                          ||",
    "||               |   /              |                                                          ||",
    "||               |  /               |                                                          ||",
    "||               | /                |                                                          ||",
    "||_______________|/_________________|__________________________________________________________||"
]);
Database.addAscii("places/village/village", 102, 47, [
    "                                                 /\\",
    "                                                /\"\"\\",
    "                                               /\"\"\"\"\\",
    "         888888                               /______\\                    8888",
    "      88888888888                            /|| /\\ ||\\                 88888888",
    "    888888888888888                           ||/__\\||                888888888888",
    " 888888888888888888888                        ||  ' ||                    | ||",
    "         |   |                                ||____||                    |  |",
    "         | | |                               /\"\"\"\"\"\"\"\"\\                   || |",
    "         |  ||                              /\"\"\"\"\"\"\"\"\"\"\\                  || |",
    "         ||  |                             /\"\"\"\"(__)\"\"\"\"\\                '    '",
    "         ||  |               Â¨            /\"\"\"\"\"\"||\"\"\"\"\"\"\\",
    "         |  ||                       Â¨    |      ||      |",
    "        /     \\                           |______________|    Â¨          Â¨               Â¨",
    "                      Â¨                  /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\\",
    "                                        /|                |\\                       Â¨",
    "     Â¨                        Â¨        / |  /\\        /\\  | \\    Â¨                      Â¨",
    "              Â¨                          | |::|      |::| |               Â¨",
    "                                         | |::| ____ |::| |   Â¨",
    "                       Â¨         Â¨       | |__||    ||__| |           Â¨           Â¨       Â¨",
    "                    ______               |     | .. |     |",
    "              Â¨    /------\\              |_____|____|_____|",
    "                  /________\\           Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨||Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "                 /|        |\\                    ||",
    "    ____||_       | []  [] |      ____          |  |           _| |___         _||____       ______",
    "   /-------\\      |        |     /----\\         |  |          /-| |---\\       /-------\\     /------\\",
    "  /_________\\     |  SHOP  |    /  []  \\       |    |        /_________\\     /_________\\   /________\\",
    " /| []  ___ |\\    |  ___   |   /|  ___ |\\   ___|    |___    /|-|-|-|-|-|\\   /|     ___ |\\ /|  ___   |\\",
    "  |     |,| |     |  |,|   |    |  |,| |   /            \\    |-|-|-[,]-|     | []  |,| |   |  |,|[] |",
    "__|_____|_|_|_____|__|_|___|____|__| |_|__/              \\___|_|_|_[_]_|_____|_____|_|_|___|__| |___|_",
    "                                                .--.",
    "                                               ( ~  )",
    "      _________       _||____      ____         '--'       _________       ___||__       _____",
    "_____/---------\\_____/-||----\\____/----\\____            __/---------\\_____/---||--\\_____/-----\\_______",
    "    /___________\\   /_________\\  /______\\   \\__      __/ /___________\\   /_________\\   /_______\\",
    "   /|           |\\ /|         |\\/|      |\\     |    |   /|           |\\ /|         |\\ /|       |\\",
    "    |           |   |         |  |      |      |    |    |           |   |         |   |       |",
    "    |___________|   |_________|  |______|      |    |    |___________|   |_________|   |_______|",
    "                                               |    |",
    "                                               |    |",
    "     _________        _______       ____       |    |     _||______       _______         _||__",
    "    /---------\\      /-------\\     /----\\      |    |    /-||------\\     /-------\\       /-||--\\",
    "   /___________\\    /_________\\   /______\\     |    |   /___________\\   /_________\\     /_______\\",
    "  /|           |\\  /|         |\\ /|      |\\    |    |  /|           |\\ /|         |\\   /|       |\\",
    "   |           |    |         |   |      |     |    |   |           |   |         |     |       |",
    "   |___________|    |_________|   |______|     |    |   |___________|   |_________|     |_______|",
    "                                               |    |"
]);
Database.addAscii("places/village/fifthHouse", 97, 35, [
    "  /        |      _______________________                                            |        \\",
    " /         |     (______________________ )                                           |         \\",
    "|          |     ||            _^_      ||                                           |          |",
    "|          |     ||         .-'|_|'-.   ||                                           |          |",
    "|          |     ||        /   ___   \\  ||                                           |          |",
    "|          |     ||       /|  |=|=|  |\\ ||                                           |          |",
    "|          |     ||--|--|--|  |-|-|  |  ||                                           |          |",
    "|          |     ||--|--|--|  |=|=|  |  ||                                           |          |",
    "|          |     ||^^^^^^^^^^^^^^^^^^^^^||                   __  _          _   _    | |\\       |",
    "|          |     ||_____________________||                  /   |_ |   |   |_| |_)   | | \\      |",
    "|          |     (_______________________)                  \\__ |_ |__ |__ | | | \\   | |  \\     |",
    "|          |                                      ####      _______________________  | |  |\\    |",
    "|          |                                    ########    |  _________________  |  | |  ||\\   |",
    "|          |                                    ##I  I##    | /                 \\ |  | |\\ || \\  |",
    "|          |                                    ##\\ S/##    | |                 | |  | |\\\\|| |  |",
    "|          |                                     #|  |#     | |                 | |  | | \\ | |  |",
    "|          |                                   .-'\\__/'-.   | |                /| |  | |  | \\|  |",
    "|          |    ()         ()                 |          |  | |               / | |  | |  ||\\|  |",
    "|          |    ||         ||                 | ||    || |  | |              /  | |  | \\  || |  |",
    "|          |    ||_________||                 | ||    || |  | |             /   | |  |  \\ || |  |",
    "|          |    |  ______   |   ____          | ||    || |  | |____________/    | |  |   \\|| |  |",
    "|          |    |_(      )__|  /    \\         |_||____||_|  | |            |    | |  |    \\| |  |",
    "|          |    /  '----'  /| /______\\        | ||_[]_|| |  | |            |    | |  |     \\ |  |",
    "|          |   /          / | | ____ |        MM |    | MM  | |            |    | |  |      \\|  |",
    "|          |__/          /  |_||  o ||___________| || |_____| |            |    | |__|          |",
    "|         () /      ()  /  /  ||____||           | || |      \\|            |    | |\\  \\         |",
    "|        /||/       || /  /   |______|           | || |       \\            |   /| | \\  \\        |",
    "|       / ||________||/  /                       |_||_|        \\           |  / | |  \\  \\       |",
    "|      /  |          |  /                       _| || |_        \\---------------------\\  \\      |",
    "|     /   |          | /                       (___||___)                                 \\     |",
    "|    /    |__________|/                                                                    \\    |",
    "|   /                                                                                       \\   |",
    "|  /                                                                                         \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/fourthHouseCupboardOpenedWithLollipop", 19, 15, [
    " / | |  |      |  |",
    "/  | |__|      |  |",
    "|  | /  |      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |  |      |  |",
    "|  | |__|()    |  |",
    "|  | /o-|      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |__|      |  |",
    "|  | /  |      | /",
    "|  |/___|______|/",
    "| /||_________||",
    "|/ ||         ||"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/blob", 19, 7, [
    "      .-'-'-.",
    "     '       '",
    "    '  ^   ^  '",
    "  .'           '.",
    " '    '-._.-'     '",
    "'                 '",
    " '-._.-'`'`'-._.-'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/corpse2", 16, 5, [
    "Another one here",
    "",
    "   0/",
    "   /\\_/",
    "     \\_"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/mainMenu", 24, 9, [
    " _____     _",
    "|     |___|_|___",
    "| | | | .'| |   |",
    "|_|_|_|__,|_|_|_|",
    "",
    "      _____ ___ ___ _ _",
    "     |     | -_|   | | |",
    "     |_|_|_|___|_|_|___|",
    ""
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/dna", 8, 9, [
    "  \\/ /",
    "  / /\\",
    " / /\\ \\",
    "( (  ) )",
    " \\ \\/ /",
    "  \\/ /",
    "  / /\\",
    " / /\\ \\",
    "( (  ) )"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/billGatesSkeleton", 11, 8, [
    "  _.---._",
    ".'       '.",
    ";         ;",
    "\\ ($) ($) /",
    " \\   A   /",
    "  )     (",
    "  \\\"\"\"\"\"/",
    "   '._.'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/ferociousSkeleton", 13, 8, [
    "  _.-----._",
    ".'         '.",
    ";           ;",
    "\\  (W) (W)  /",
    " \\    A    /",
    "  )       (",
    "  \\ \"\"\"\"\" /",
    "   '.___.'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/chest", 14, 8, [
    "  __________",
    " /\\____;;___\\",
    "| /         /",
    "\\.---------.",
    " |\\         \\",
    " | |---------|",
    " \\ |         |",
    "  \\|_________|"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/spiders", 21, 8, [
    " /\\.--./\\",
    "/\\( Â°Â° )/\\",
    "   '--'     /\\.--./\\",
    "           /\\( Â°Â° )/\\",
    "              '--'",
    "     /\\.--./\\",
    "    /\\( Â°Â° )/\\",
    "       '--'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/goblin", 16, 8, [
    " ,     ..     ,",
    "(`._.\"`  `\"._.')",
    " '.          .'",
    "  | ()    () |",
    "  |          |",
    "   \\ 'VvvV' /",
    "    '.    .'",
    "      '--'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/dragon", 20, 9, [
    "      __\\\\\\__",
    "    <' _     \\",
    "  <'_\\ __ 'o o",
    " <'/__(  \\_   \\",
    " <_/\\_\\    \\_  \\",
    "<_/ _\\_\\     (\\\\)",
    "<_\\_  \\_\\    (\\\\\\)",
    "               (\\\\\\)",
    "                (\\\\)"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/cross", 17, 8, [
    "        |",
    "   \\         /",
    "       .-.",
    "     __| |__",
    "-=  |__   __|  =-",
    "       | |",
    "       | |",
    "       |_|"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/shop", 23, 10, [
    "         __",
    "        /..\\   Please",
    "        \\__/   buy my",
    "       /|  |\\  stuff",
    "    __/_|__|_\\_______",
    "   /                 \\",
    "  /___________________\\",
    "  |                   |",
    "  |                   |",
    "  |___________________|"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/hive", 26, 9, [
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/youLose", 37, 5, [
    "__  __               __",
    "\\ \\/ /___  __  __   / /___  ________",
    " \\  / __ \\/ / / /  / / __ \\/ ___/ _ \\",
    " / / /_/ / /_/ /  / / /_/ (__  )  __/",
    "/_/\\____/\\__,_/  /_/\\____/____/\\___/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/ferociousBlob", 19, 7, [
    "      .-'-'-.",
    "     '       '",
    "    '  \\   /  '",
    "  .'           '.",
    " '     .---.     '",
    "'                 '",
    " '-._.-'`'`'-._.-'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/babyVampire", 24, 8, [
    "  /\\_____/\\",
    " /         \\   I want to",
    ";  o     o  ;    be a",
    ";           ;   vampire",
    " \\  \\/ \\/  /",
    " .'-.....-'.      ^.^",
    "'           '",
    "'           '"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/circle", 17, 9, [
    "      *   *",
    "  *           *",
    "",
    "*               *",
    "",
    "*               *",
    "",
    "  *           *",
    "      *   *"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/mobius", 15, 9, [
    "    _______",
    "   /    \\  \\",
    "  /  /\\  \\  \\",
    " /  /  \\  \\  \\",
    "/  /  / \\  \\  \\",
    "\\  \\  \\ /  /  /",
    " \\  \\  \\  /  /",
    "  \\  \\  \\/  /",
    "   \\__\\____/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/ferociousGoblin", 16, 8, [
    " ,     ..     ,",
    "(`._.\"`  `\"._.')",
    " '.          .'",
    "  | (W)  (W) |",
    "  |          |",
    "   \\ 'VvvV' /",
    "    '.    .'",
    "      '--'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/corpse1", 16, 6, [
    "A charred corpse",
    " is lying here",
    "",
    "     _0",
    "     /\\",
    "    /\\"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/star", 9, 4, [
    " __.'.__",
    "'-.   .-'",
    "  /.-.\\",
    "  '   '"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/randomShape", 12, 6, [
    "    _______",
    " __/  _____)",
    "(___  \\____",
    "    \\   ___)",
    "    /   \\",
    "    \\___/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/bomb", 14, 9, [
    "        ,--.!,",
    "       /   -*-",
    "      /    '|`",
    "   .-\"\"-.",
    " /`      `\\",
    ";          ;",
    ";          ;",
    " \\        /",
    "  `'-..-'`"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/skeleton", 11, 8, [
    "  _.---._",
    ".'       '.",
    ";         ;",
    "\\ (O) (O) /",
    " \\   A   /",
    "  )     (",
    "  \\\"\"\"\"\"/",
    "   '._.'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/splashScreen", 64, 6, [
    "________                               _________________________",
    "__  ___/___  ______________________    ___  __ \\__  __ \\_  ____/",
    "_____ \\_  / / /__  __ \\  _ \\_  ___/    __  /_/ /_  /_/ /  / __",
    "____/ // /_/ /__  /_/ /  __/  /        _  _, _/_  ____// /_/ /",
    "/____/ \\__,_/ _  .___/\\___//_/         /_/ |_| /_/     \\____/",
    "              /_/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/spider", 22, 6, [
    "  /\\              /\\",
    " /  \\   .-\"\"-.   /  \\",
    "/ /\\ \\/` .  . `\\/ /\\ \\",
    " /  \\;          ;/  \\",
    "/     \\        /     \\",
    "       `'-..-'`"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/thing", 20, 9, [
    "      _.-''-._",
    "     /        \\",
    "    (   o    o )",
    "    /          \\",
    "   /      __    \\",
    "  (   _      _   )",
    "  |_ ( '-..-' ) _|",
    " _)   \\      /   (_",
    "(,(,(,/      \\,),),)"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/triforce", 12, 6, [
    "     /\\",
    "    /  \\",
    "   /____\\",
    "  /\\    /\\",
    " /  \\  /  \\",
    "/____\\/____\\"
]);
Database.addAscii("places/village/thirdHouseGames/GalacticWars/youLose", 37, 5, [
    "__  __               __",
    "\\ \\/ /___  __  __   / /___  ________",
    " \\  / __ \\/ / / /  / / __ \\/ ___/ _ \\",
    " / / /_/ / /_/ /  / / /_/ (__  )  __/",
    "/_/\\____/\\__,_/  /_/\\____/____/\\___/"
]);
Database.addAscii("places/village/thirdHouseGames/GalacticWars/ship", 11, 2, [
    "/\\_.-'\"'-._",
    "\\_______.-'"
]);
Database.addAscii("places/village/thirdHouseGames/GalacticWars/splashScreen", 87, 5, [
    "_________      ______            __________           ___       __",
    "__  ____/_____ ___  /_____ ________  /___(_)______    __ |     / /_____ _______________",
    "_  / __ _  __ `/_  /_  __ `/  ___/  __/_  /_  ___/    __ | /| / /_  __ `/_  ___/_  ___/",
    "/ /_/ / / /_/ /_  / / /_/ // /__ / /_ _  / / /__      __ |/ |/ / / /_/ /_  /   _(__  )",
    "\\____/  \\__,_/ /_/  \\__,_/ \\___/ \\__/ /_/  \\___/      ____/|__/  \\__,_/ /_/    /____/"
]);
Database.addAscii("places/village/candyMerchantItems/boots", 14, 5, [
    "   ___",
    "  \\   | ____",
    " __)  ||   /",
    "(_____)|  (__",
    "       (_____)"
]);
Database.addAscii("places/village/candyMerchantItems/leatherGloves", 5, 4, [
    " ...",
    " ||||",
    "\\||||",
    " \\__/"
]);
Database.addAscii("places/village/candyMerchantItems/lollipopLeft", 5, 1, [
    "o----"
]);
Database.addAscii("places/village/candyMerchantItems/hat", 17, 3, [
    "      .---.",
    "     |%%%%%|",
    "'-.__|_____|__.-'"
]);
Database.addAscii("places/village/candyMerchantItems/timeRing", 1, 1, [
    "O"
]);
Database.addAscii("places/village/candyMerchantItems/chocolateBar", 17, 3, [
    " _______________",
    "/__/__/__/__/__/|",
    "|__|__|__|__|__|/"
]);
Database.addAscii("places/village/candyMerchantItems/lollipopRight", 5, 1, [
    "----o"
]);
Database.addAscii("places/castle/map", 106, 34, [
    "                               |____|",
    "                               |____|",
    "                               |____|",
    "                               |____|",
    " ______________________________|    |_____________________________",
    "|                                   Â¨                             |",
    "|  Â¨                Â¨                              Â¨     Â¨        |",
    "|                            Â¨           Â¨                      Â¨ |",
    "|        Â¨       Â¨                 Â¨             Â¨                |                          _____",
    "|______________          ________________________________ Â¨       |                      _.-'     '-._",
    "|              |        |                                |        |_____________       .'             '.",
    "|              |     Â¨  |                                | Â¨          Â¨         |     /                 \\",
    "|              #        |                                |      Â¨    .-'-'-. Â¨  |____;                   ;",
    "|              #  Â¨     |                                |          /o      '.      #                    |",
    "|              |        |                                |   Â¨      \\o      .'   ___#                    |",
    "|______________|        |                                |       Â¨   '-.-.-'   Â¨|    ;                   ;",
    "|              |      Â¨ |                                #         _____________|     \\                 /",
    "|              |        |                                #     Â¨  |                    '._           _.'",
    "|              #        |                                |        |                       '-._____.-'",
    "|              #        |                                | Â¨      |",
    "|              | Â¨      |                                |      Â¨ |",
    "|______________|    Â¨   |                                |        |",
    "|              |        |________________________________|        |",
    "|              |                          Â¨                 Â¨     |",
    "|              #    Â¨        Â¨                       Â¨            |",
    "|              #                   Â¨          Â¨                   |",
    "|              | Â¨         Â¨           Â¨           Â¨         Â¨    |",
    "|______________|_______________________          _________________|",
    "                                       |  Â¨     |",
    "                                       |        |",
    "                                       |      Â¨ |",
    "                                       | Â¨      |",
    "                                       |___  ___|",
    "                                           ##"
]);
Database.addAscii("places/castle/tower/talkingCandy", 5, 2, [
    "\\.-./",
    "/'-'\\"
]);
Database.addAscii("places/castle/tower/castleTower", 90, 95, [
    "       /                                                                          \\",
    "      /                Â¨                         Â¨           Â¨        Â¨            \\",
    "     /                             Â¨                Â¨                               \\",
    "    /        Â¨                             Â¨                                         \\",
    "   /                                                         Â¨                   Â¨    \\",
    "  /                       Â¨     Â¨                                                      \\",
    " /    Â¨   Â¨       Â¨                            Â¨                                        \\",
    "/                                                                     Â¨         Â¨        \\",
    "|'_                    Â¨            Â¨                                                  _'|",
    "|  ''--..___                                 Â¨       Â¨        Â¨               ___..--''  |",
    "|           '''---....____                                      ____....---'''           |",
    "|                         '''''-----.....________.....-----'''''                         |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                        ________                                        |",
    "|                     ____.....-----'''''        '''''-----.....____                     |",
    "|                    /                                              \\                    |",
    "|                   /                                                \\                   |",
    "|                  /__________________________________________________\\                  |",
    "|                  |   _____        _____        _____        _____   |                  |",
    "|                  |  /     \\      /     \\      /     \\      /     \\  |                  |",
    "|                  | /       \\    /       \\    /       \\    /       \\ |                  |",
    "|                  ||         |  |         |  |         |  |         ||                  |",
    "|        ___...---'| \\       /    \\       /    \\       /    \\       / |'---...___        |",
    "| _..--''  ____ _  |  \\_____/      \\_____/      \\_____/      \\_____/  |          ''--.._ |",
    "|'_      .'____.'  |__________________________________________________|                _'|",
    "|  ''--..___                                                                  ___..--''  |",
    "|       |   '''---....____                                      ____....---'''   |       |",
    "|__     |         |       '''''-----.....________.....-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "   ''--.|___      |           |              |             |           |      ___|.--''",
    "            '''---|...____    |              |             |    ____...|---'''",
    "                          '''''-----.....____|___.....-----'''''"
]);
Database.addAscii("places/castle/bigRoom/background", 160, 27, [
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                  _.- - - - -._                                                                                |",
    "        |                                              _.-'             '-._                                                                            |",
    "        |                                           .-'     _.- - - -._     '-.                                                                         |",
    "        |                                          /     .-'           '-.     \\                                                                        |",
    "        |                                         /     / |  o       o  | \\     \\                                                                       |",
    "        |                                         |    /  |      _      |  \\    |                                                                       |",
    "        |                                         |    |  |    .' '.    |  |    |                                                                       |",
    "        |                                         |    |  |_____________|  |    |                                                                       |",
    "        |                                         |    | /               \\ |    |                                                                       |",
    "        |                                         |____|/_________________\\|____|                                                                       |",
    "        |                                         |                             |                                                                       |",
    "        |                                         |         ___________         |                                                                       |",
    "        |                                         |        | |       | |        |                                                                       |",
    "        |_________________________________________|        | |_______| |        |_______________________________________________________________________|",
    "       /                                          |        | /       \\ |        |                                                                       \\",
    "      /                                           |________|/         \\|________|                                                                        \\",
    "     /                                                                                                                                                    \\",
    "    /                                                                                                                                                      \\",
    "   /                                                                                                                                                        \\",
    "  /                                                                                                                                                          \\",
    " /                                                                                                                                                            \\",
    "/                                                                                                                                                              \\"
]);
Database.addAscii("places/castle/room2/fire", 16, 6, [
    "     _ /\\ _",
    "  .-' // \\ '-.",
    " (_; /_/ \\\\ ;_)",
    "(_; // | \\ \\\\ .)",
    "( `.__ _  ___,')",
    " `'(_ )_)(_)_)'"
]);
Database.addAscii("places/castle/room2/pitchfork", 12, 8, [
    "      /    /",
    "     /    /",
    "    /    /",
    "   /    /",
    "  /    /",
    " /    /",
    " ////",
    "////"
]);
Database.addAscii("places/lollipopFarm/pond", 52, 15, [
    "                    _____",
    "            _____.-'     \\____         |",
    "       ____/        ~        (_______  !|",
    "      (       ~                      '-.!||",
    "       \\                 ~            (_ !!|||",
    "        :                       ~       '-.!!!|",
    "       /            ~                      '-.!",
    " ______)     ~                     ~          \\",
    "(_                                             \\",
    "  \\  ~             ~                    ~       '-.",
    "   \\                        ~                  ~   )",
    "    \\____                                    ___.-'",
    "         '-.     ~                ~         /",
    "            '-.________           _________/",
    "                       '-._____.-'"
]);
Database.addAscii("places/lollipopFarm/lolligatorLeftTop", 12, 1, [
    "_o^^^^.__.-."
]);
Database.addAscii("places/lollipopFarm/mill", 19, 15, [
    "        __",
    " /'.   /**\\   .'\\",
    "/   './    \\.'   \\",
    "'-._  '.__.'  _.-'",
    "   |'-.(==).-'|",
    "   |_.-;||;-._|",
    "_.-'  .'--'.  '-._",
    "\\   .'------'.    /",
    " \\.'|--------|'._/",
    "    |--------|",
    "    |---()---|",
    "    |________|",
    "     /      \\",
    "",
    ""
]);
Database.addAscii("places/lollipopFarm/lolligatorLeftFull", 12, 2, [
    "\\o^^^^.__.-.",
    "/ Â¨Â¨Â¨Â¨Â¨  '-'"
]);
Database.addAscii("places/lollipopFarm/lolligatorRightFull", 13, 2, [
    ".-.__.^^^^^o/",
    "'-'  Â¨Â¨Â¨Â¨Â¨Â¨ \\"
]);
Database.addAscii("places/lollipopFarm/lolligatorRightTop", 13, 1, [
    ".-.__.^^^^^o_"
]);
Database.addAscii("places/lollipopFarm/lollipopFarm", 102, 28, [
    "                                     _______________________________________________",
    "                                    /-----------------------------------------------\\",
    "                                   /-------------------------------------------------\\",
    "                                  /___________________________________________________\\",
    "                                 /|  __________           _____            _________  |\\",
    "                                  | [__________]         |  |  |          [_________] |",
    "                                  |                      | .|. |                      |",
    "                                  |                      |  |  |                      |",
    "Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨Â¨",
    "                  :---:---:---:---:---:---:---:---:---:",
    "                 /  ______________________________   /",
    "                :  /                             /  :",
    "               /  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  /",
    "              :  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  :",
    "             /  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  /",
    "            :  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  :",
    "           /  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  /",
    "          :  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  :",
    "         /  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  /",
    "        :  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  :",
    "       /  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  /",
    "      :  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  :",
    "     /  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  /",
    "    :  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  :",
    "   /  /  #.#/#!#/#&#   #*#/#Â£#/#Â§#  /  /",
    "  :  /_____________________________/  :",
    " /                                   /",
    ":---:---:---:---:---:---:---:---:---:"
]);
Database.addText("pl.mapVillageComment", "Wioska");
Database.addText("pl.mapFortressComment", "Pustynna forteca");
Database.addText("pl.mapATreeComment", "Drzewo");
Database.addText("pl.mapTheDesertComment", "Pustynia");
Database.addText("pl.mapWishingWellComment", "Studnia Å¼yczeÅ„");
Database.addText("pl.mapLonelyHouseComment", "Samotny dom");
Database.addText("pl.mapForestComment", "Las");
Database.addText("pl.mapCastleEntranceComment", "WejÅ›cie do zamku");
Database.addText("pl.mapCastleComment", "Zamek");
Database.addText("pl.mapDragonComment", "Smok");
Database.addText("pl.candyBoxEatCandiesButton", "Zjedz wszystkie cukierki");
Database.addText("pl.candyBoxThrowCandiesButton", "WyrzuÄ‡ 10 cukierkÃ³w na ziemiÄ™");
Database.addText("pl.mapVillageAHouseComment", "Dom");
Database.addText("pl.mapVillageForgeComment", "KuÅºnia");
Database.addText("pl.buttonBackToTheMap", "PowrÃ³t do mapy");
Database.addText("pl.mapSorceressHutComment", "Domek czarownicy");
Database.addText("pl.buttonBackToTheVillage", "PowrÃ³t do wioski");
Database.addText("pl.mapATreeIntroductionSpeech", "Witaj, jestem WiewiÃ³rka. MogÄ™ zapewniÄ‡ ci cukierki i duÅ¼o rzeczy. Wiem jak bardzo kochasz cukierki. Ale czuje siÄ™ samotnie w tym lesie.");
Database.addText("pl.mapATreeIntroductionButton", "Jak mogÄ™ ci pomÃ³c?");
Database.addText("pl.mapATreeFirstQuestion", "BÄ™dÄ™ zadawaÄ‡ ci pytania. JeÅ›li odpowiesz poprawnie, najsÅ‚odsze z cukierkÃ³w bÄ™dÄ… twoje! Pierwsze : czy naprawdÄ™ kochasz cukierki? (odpowiedz po Angielsku)");
Database.addText("pl.mapATreeSecondQuestion", "Zgadza siÄ™! 20 cukierkÃ³w dla ciebie. Teraz dokoÅ„cz tÄ… sekwencje liter i dostaniesz nastÄ™pnÄ… nagrodÄ™ : S, E, I, D, N, A, ?");
Database.addText("pl.mapATreeThirdQuestion", "\"Candies!\" 100 cukierkÃ³w dla ciebie. NastÄ™pne pytanie : ile cukierkÃ³w posiada najbardziej cukierkowa osoba na Å›wiecie?");
Database.addText("pl.mapATreeFourthQuestion", "500 cukierkÃ³w dla ciebie! NastÄ™pna nagroda powinna byÄ‡ jeszcze bardziej interesujÄ…ca...  Oto Å‚amigÅ‚Ã³wka : W starym lesie roÅ›nie bardzo stare drzewo, na ktÃ³rym Å¼ujÄ… najinteligentniejsze zwierzÄ™ta na tym Å›wiecie. MÃ³wi siÄ™ Å¼e to drzewo ma 60 korzeni, 360 gaÅ‚Ä™zi i 2160 liÅ›ci. Ile znakÃ³w moÅ¼esz znaleÅºÄ‡ na jego pniu?");
Database.addText("pl.mapATreeFifthQuestion", "Gratulacje! RzeczywiÅ›cie mÃ³wiÅ‚em o moim drzewie. Oto 3 lizaki dla ciebie. ZrÃ³b z nich dobry uÅ¼ytek! NastÄ™pna zagadka : Pod peÅ‚nym ksiÄ™Å¼ycem, wrzucam Å¼Ã³Å‚ty kapelusz do czerwonego morza. Co dzieje siÄ™ z Å¼Ã³Å‚tym kapeluszem?");
Database.addText("pl.mapATreeTicTacToeIntro", "Dobra odpowiedÅº! To nie byÅ‚o takie trudne. Trzy tabliczki czekolady dla ciebie! Przy zdobywaniu nastÄ™pnej nagrody zmieniÄ™ trochÄ™ zasady. BÄ™dziesz musiaÅ‚ ze mnÄ… zagraÄ‡ w grÄ™! JesteÅ› gotowy?");
Database.addText("pl.mapATreeTicTacToeIntroButton", "Jasne Å¼e jestem!");
Database.addText("pl.mapATreeTicTacToeLetsPlay", "Ta gra to kÃ³Å‚ko i krzyÅ¼yk. BÄ™dziemy grali na planszy o rozmiarach 3x3. Ty bÄ™dziesz korzystaÅ‚ z X a ja z O. BÄ™dziemy wykonywali nasze ruchy na przemian, celem gry jest ustawienie trzech swoich znakÃ³w w rzÄ™dzie. Ty zaczynasz!");
Database.addText("pl.mapATreeTicTacToeNobodyWins", "Plansza jest zapeÅ‚niona i Å¼adnemu z nas nie udaÅ‚o siÄ™ uÅ‚oÅ¼yÄ‡ trzech pod rzÄ…d : remis! Chcesz sprÃ³bowaÄ‡ jeszcze raz?");
Database.addText("pl.mapATreeTicTacToeYouLose", "UÅ‚oÅ¼yÅ‚em trzy pod rzÄ…d! WygraÅ‚em! Chcesz sprÃ³bowaÄ‡ jeszcze raz?");
Database.addText("pl.mapATreeTicTacToeTryAgainButton", "Tak, chcÄ™!");
Database.addText("pl.mapATreeTicTacToeYouWin", "Wow, to byÅ‚ nieoczekiwany ruch. Ale uÅ‚oÅ¼yÅ‚eÅ› trzy pod rzÄ…d, nie mogÄ™ siÄ™ kÅ‚Ã³ciÄ‡. WygraÅ‚eÅ›! WeÅº ten klucz! Otwiera jeden z domÃ³w w wiosce na poÅ‚udnie od lasu.");
Database.addText("pl.mapATreeTicTacToeAnymoreSweet", "DziÄ™ki WiewiÃ³rko! Jeszcze jakieÅ› wyzwania?");
Database.addText("pl.mapATreeNoMoreChallenge", "Niestety nie, nie mam wiÄ™cej wyzwaÅ„... Bawienie siÄ™ z tobÄ… byÅ‚o bardzo fajne, dziÄ™kuje za to!");
Database.addText("pl.buttonExitQuestKeeping", "WyjdÅº z zadania (zatrzymasz to co znajdziesz)");
Database.addText("pl.buttonExitQuestNoKeeping", "WyjdÅº z zadania (nie zatrzymasz tego co znajdziesz)");
Database.addText("pl.buttonExitQuestNoKeepingBecauseLose", "WyjdÅº z zadania (nie zatrzymasz tego co znajdziesz bo przegraÅ‚eÅ›)");
Database.addText("pl.mapVillageLockedHouseComment", "ZamkniÄ™ty dom");
Database.addText("pl.mapVillageForgeIntroductionSpeech", "CzeÅ›Ä‡! Jestem kowalem. MogÄ™ sprzedaÄ‡ ci rÃ³Å¼ne bronie i elementy wyposaÅ¼enia.");
Database.addText("pl.mapVillageForgeIntroductionSpeechNoMoreToSell", "CzeÅ›Ä‡! Jestem kowalem. Niestety, Nie mam nic wiÄ™cej do sprzedania. ByÄ‡ moÅ¼e pÃ³Åºniej bÄ™de miaÅ‚ coÅ› do sprzedania.");
Database.addText("pl.mapVillageFifthHouseNoWeaponSpeech", "CzeÅ›Ä‡. Moja piwnica jest peÅ‚na szczurÃ³w, MuszÄ™ siÄ™ ich pozbyÄ‡... jeÅ›li tylko ktoÅ› z broniÄ… mÃ³gÅ‚by mi pomÃ³c...");
Database.addText("pl.mapVillageFifthHouseWeaponSpeech", "Hej, ty! WidzÄ™ Å¼e masz broÅ„! JeÅ›li zabijesz szczury ktÃ³re osiedliÅ‚y siÄ™ w mojej piwnicy, nagrodzÄ™ ciÄ™.");
Database.addText("pl.mapVillageFifthHouseAgree", "JuÅ¼ siÄ™ biorÄ™ do roboty!");
Database.addText("pl.mapVillageFifthHouseCellarDone", "DziÄ™kuje za pomoc! Oto coÅ› bardzo cennego w nagrodÄ™ : mapa Å›wiata. MyÅ›lÄ™ Å¼e ty skorzystasz z niej bardziej niÅ¼ ja.");
Database.addText("pl.mapVillageTheShopComment", "Sklep");
Database.addText("pl.mapBridgeComment", "Most");
Database.addText("pl.mapFarmComment", "Farma lizakÃ³w");
Database.addText("pl.mapCaveEntranceComment", "WejÅ›cie do jaskini");
Database.addText("pl.mapLighthouseComment", "Latarnia morska");
Database.addText("pl.mapPierComment", "PrzystaÅ„");
Database.addText("pl.mapTheHoleComment", "Dziura");
Database.addText("pl.candyBoxRequestStatusBarUnlocked", "PoproÅ› o nowÄ… funkcje od dewelopera(30 cukierkÃ³w)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedCfg", "PoproÅ› o jeszcze jednÄ… (5 cukierkÃ³w)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedSave", "PoproÅ› o nastÄ™pnÄ… (5 cukierkÃ³w)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedHealthBar", "PoproÅ› o coÅ› bardziej ekscytujÄ…cego (5 cukierkÃ³w)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedMap", "Ostatnia proÅ›ba! Ta musi byÄ‡ warta tych cukierkÃ³w. (10 cukierkÃ³w)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedComment", "OdblokowaÅ‚eÅ› pasek stanu! (powyÅ¼ej)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedCfgComment1", "Masz teraz dostÄ™p do opcji!");
Database.addText("pl.candyBoxRequestStatusBarUnlockedCfgComment2", "MoÅ¼esz tam zmieniÄ‡ jÄ™zyk jeÅ›li chcesz.");
Database.addText("pl.candyBoxRequestStatusBarUnlockedSaveComment", "Pojawia siÄ™ dzika karta zapisu!");
Database.addText("pl.candyBoxRequestStatusBarUnlockedHealthBarComment", "100 punktÃ³w Å¼ycia dla ciebie. PrzydadzÄ… ci siÄ™!");
Database.addText("pl.cfgChooseLanguage", "Wybierz jÄ™zyk :");
Database.addText("pl.cfgInvertColors", "OdwrÃ³ciÄ‡ kolory?");
Database.addText("pl.gridItemMainMapName", "Mapa");
Database.addText("pl.gridItemMainMapDescription", "Mapa Å›wiata");
Database.addText("pl.gridItemPogoStickName", "SprÄ™Å¼ynowe urzÄ…dzenie do podskakiwania");
Database.addText("pl.gridItemPogoStickDescription", "Ten przedmiot pozwala ci skakaÄ‡ w trakcie zadaÅ„!");
Database.addText("pl.gridItemTimeRingName", "PierÅ›cieÅ„ czasu");
Database.addText("pl.gridItemTimeRingDescription", "Ten przedmiot daje ci nowÄ… umiejÄ™tnoÅ›Ä‡ w trakcie zadaÅ„: moÅ¼esz spowalniaÄ‡ czas. JeÅ›li rzeczy dziejÄ… siÄ™ za szybko, skorzystaj z niego!");
Database.addText("pl.gridItemThirdHouseKeyName", "Klucz do trzeciego domu");
Database.addText("pl.gridItemThirdHouseKeyDescription", "Ten klucz pozwala ci otworzyÄ‡ trzeci dom we wiosce");
Database.addText("pl.gridItemFeatherName", "PiÃ³ro pustynnego ptaka");
Database.addText("pl.gridItemFeatherDescription", "To magiczne piÃ³ro pozwala ci skakaÄ‡ wyÅ¼ej gdy uÅ¼ywasz swojego sprÄ™Å¼ynowego urzÄ…dzenia do podskakiwania!");
Database.addText("pl.gridItemFeatherDescriptionNoPogoStick", "Z jakiegoÅ› powodu, czujesz Å¼e to piÃ³ro byÅ‚oby przydatne gdybyÅ› miaÅ‚ sprÄ™Å¼ynowe urzÄ…dzenie do podskakiwania...");
Database.addText("pl.gridItemSpongeName", "Magiczna gÄ…bka");
Database.addText("pl.gridItemSpongeDescription", "Ta magiczna gÄ…bka pozwala ci siÄ™ Å›cisnÄ…Ä‡ tak jak gÄ…bka, zmniejsza to twÃ³j rozmiar.");
Database.addText("pl.gridItemFortressKeyName", "Klucz do pustynnej fortecy");
Database.addText("pl.gridItemFortressKeyDescription", "Ten klucz pozwoli ci otworzyÄ‡ staroÅ¼ytnÄ… fortecÄ™ zlokalizowanÄ… nad pustyniÄ…. Kto wie co moÅ¼e siÄ™ tam znajdowaÄ‡?");
Database.addText("pl.gridItemHeartPendantName", "Wisiorek serca");
Database.addText("pl.gridItemHeartPendantDescription", "Ten wisiorek bÄ™dzie zwiÄ™kszaÅ‚ twoje punkty zdrowia jeÅ›li bÄ™dziesz go nosiÅ‚ na szyji .");
Database.addText("pl.gridItemHeartPlugName", "Wtyczka serca");
Database.addText("pl.gridItemHeartPlugDescription", "Ta wtyczka serca, stworzona z Å¼elaza, pajÄ™czych odnÃ³Å¼y, i specjalnego \"alkoholu serca\" zapieczÄ™towanego w Å›rodku, zwiÄ™kszy twoje punkty Å¼ycia o 20 procent!");
Database.addText("pl.gridItemBeginnersGrimoireName", "Grimuar dla poczÄ…tkujÄ…cych");
Database.addText("pl.gridItemBeginnersGrimoireDescription", "Ten grimuar zapewnia ci trzy zaklÄ™cia, w miarÄ™ Å‚atwe do rzucenia. ZostaÅ‚ stworzony dla poczÄ…tkujÄ…cych. BÄ™dziesz w stanie rzucaÄ‡ zaklÄ™cie kwaÅ›nego deszczu (duÅ¼a iloÅ›Ä‡ kwasu spadnie na twoich przeciwnikÃ³w), zaklÄ™cie kuli ognia (ogromna magiczna kula stworzona z ognia poleci na twoich przeciwnikÃ³w), i zaklÄ™cie teleportacji (ktÃ³re przeteleportuje ciÄ™ do nieprzewidywalnej lokalizacji).");
Database.addText("pl.gridItemAdvancedGrimoireName", "Zaawansowany grimuar");
Database.addText("pl.gridItemAdvancedGrimoireDescription", "Ten zaawansowany grimuar daje ci dwa zaklÄ™cia: zaklÄ™cie wymazania magii i zaklÄ™ciÄ™ ciernistej tarczy. To pierwsze usunie caÅ‚Ä… magiÄ™ z bieÅ¼Ä…cego zadania wÅ‚Ä…cznie z twoimi zaklÄ™ciami. Drugie stworzy wokÃ³Å‚ ciebie ciernistÄ… tarczÄ™ ktÃ³ra bÄ™dzie zadawaÄ‡ obraÅ¼enia twoim wrogom ktÃ³rzy siÄ™ z niÄ… zetknÄ….");
Database.addText("pl.gridItemBlackMagicGrimoireName", "Grimuar czarnej magii");
Database.addText("pl.gridItemBlackMagicGrimoireDescription", "ZnalazÅ‚eÅ› ten grimuar w jaskini, byÅ‚ bardzo trudny do dosiÄ™gniÄ™cia i to miaÅ‚o swÃ³j powÃ³d. Zapewnia ci dwa potÄ™Å¼ne zaklÄ™cia czarnej magii. Pierwsze stworzy przed tobÄ… gigantycznÄ… Å›cianÄ™ z obsydianu, co moÅ¼e byÄ‡ przydatne przy spowalnianiu przeciwnikÃ³w. Drugie przyzwie chmarÄ™ demonÃ³w ktÃ³re zaatakujÄ… kaÅ¼dego w bieÅ¼Ä…cym zadaniu, Å‚Ä…cznie z tobÄ…. BÄ…dÅº z nim ostroÅ¼ny.");
Database.addText("pl.gridItemUnicornHornName", "RÃ³g jednoroÅ¼ca");
Database.addText("pl.gridItemUnicornHornDescription", "Ten magiczny rÃ³g naleÅ¼aÅ‚ do jednoroÅ¼ca. Jego potÄ™Å¼ne moce lecznicze bardzo ci pomogÄ…. SÅ‚yszaÅ‚eÅ› Å¼e ten jednoroÅ¼ec miaÅ‚ na imiÄ™ Charlie.");
Database.addText("pl.gridItemXinopherydonClawName", "Pazur xinopherydona");
Database.addText("pl.gridItemXinopherydonClawDescription", "Ten pazur naleÅ¼aÅ‚ do xinopherydona, dwugÅ‚owego staroÅ¼ytnego zwierzÄ™cia o ktÃ³rym wszyscy myÅ›leli Å¼e wymarÅ‚o. Podwoi obraÅ¼enia broni ktÃ³rej uÅ¼ywasz.");
Database.addText("pl.gridItemPitchforkName", "WidÅ‚y");
Database.addText("pl.gridItemPitchforkDescription", "Te specjalne widÅ‚y pozwalajÄ… ci spulchniaÄ‡ ziemiÄ™ bez obracania jej, chroniÄ…c podziemne ekosystemy. Potroi produkcje twojej farmy lizakÃ³w.");
Database.addText("pl.gridItemShellPowderName", "Proszek z muszelek");
Database.addText("pl.gridItemShellPowderDescription", "Proszek z muszelek jest czÄ™sto uÅ¼ywany przez farmerÃ³w aby zwiÄ™kszyÄ‡ szybkoÅ›Ä‡ wzrostu ich lizakÃ³w. Ten proszek zwiÄ™kszy produkcjÄ™ twojej farmy lizakÃ³w razy trzy!");
Database.addText("pl.gridItemPName", "KamieÅ„ P");
Database.addText("pl.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("pl.gridItemLName", "KamieÅ„ L");
Database.addText("pl.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("pl.gridItemAName", "KamieÅ„ A");
Database.addText("pl.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("pl.gridItemYName", "KamieÅ„ Y");
Database.addText("pl.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("pl.gridItemRedSharkFinName", "Magiczna czerwona pÅ‚etwa rekina");
Database.addText("pl.gridItemRedSharkFinDescription", "Ta magiczna pÅ‚etwa znacznie zwiÄ™kszy obraÅ¼enia od twojego zaklÄ™cia kuli ognia. Wreszcie ta kula ognia stanie siÄ™ przydatna.");
Database.addText("pl.gridItemGreenSharkFinName", "Magiczna zielona pÅ‚etwa rekina");
Database.addText("pl.gridItemGreenSharkFinDescription", "Ta magiczna pÅ‚etwa przyniesie moc natury do twojej farmy lizakÃ³w! Ich produkcja zostanie pomnoÅ¼ona przez 5.");
Database.addText("pl.gridItemPurpleSharkFinName", "Magiczna fioletowa pÅ‚etwa rekina");
Database.addText("pl.gridItemPurpleSharkFinDescription", "Ta magiczna pÅ‚etwa zapewni ci dodatkowe zaklÄ™cie czarnej magii. MoÅ¼esz go uÅ¼yÄ‡ tylko raz na jedno zadanie. BÄ…dÅº z nim bardzo ostroÅ¼ny!");
Database.addText("pl.gridItemTalkingCandyName", "MÃ³wiÄ…cy cukierek");
Database.addText("pl.gridItemTalkingCandyDescription", "Ten mÃ³wiÄ…cy cukierek pojawiÅ‚ siÄ™ po tym jak wÅ‚oÅ¼yÅ‚eÅ› cztery kamienie na szczycie wieÅ¼y zamkowej. MoÅ¼e pomoÅ¼e otworzyÄ‡ ci candy box...");
Database.addText("pl.inventorySpecialNothingEqItem", "Nic");
Database.addText("pl.eqItemWeaponWoodenSwordName", "Drewniany miecz");
Database.addText("pl.eqItemWeaponWoodenSwordDescription", "Prosty miecz stworzony z drewna");
Database.addText("pl.eqItemWeaponIronAxeName", "Å»elazna siekiera");
Database.addText("pl.eqItemWeaponIronAxeDescription", "Prosta Å¼elazna siekiera. Dobrze naostrzona. Silniejsza niÅ¼ drewniany miecz.");
Database.addText("pl.eqItemWeaponPolishedSilverSwordName", "Wypolerowany srebrny miecz");
Database.addText("pl.eqItemWeaponPolishedSilverSwordDescription", "PotÄ™Å¼ny miecz, jest pokryty kolcami.");
Database.addText("pl.eqItemWeaponTrollBludgeonName", "Maczuga trolla");
Database.addText("pl.eqItemWeaponTrollBludgeonDescription", "ZabraÅ‚eÅ› tÄ… maczugÄ™ trollowi pilnujÄ…cemu most. Jest wolna, ale wydajnie niszczy twoich przeciwnikÃ³w.");
Database.addText("pl.eqItemWeaponTribalSpearName", "Plemienna wÅ‚Ã³cznia");
Database.addText("pl.eqItemWeaponTribalSpearDescription", "ZnalazÅ‚eÅ› tÄ… plemiennÄ… wÅ‚Ã³czniÄ™ na zwÅ‚okach wojownika plemiennego zgubionego w duÅ¼ej dziurze w ziemi. Na poczÄ…tku trudno siÄ™ niÄ… posÅ‚ugiwaÄ‡, ale kiedy do niej przywykniesz, bÄ™dzie dobrÄ… broniÄ….");
Database.addText("pl.eqItemWeaponSummoningTribalSpearName", "PrzyzywajÄ…ca plemienna wÅ‚Ã³cznia");
Database.addText("pl.eqItemWeaponSummoningTribalSpearDescription", "Ta magiczna plemienna wÅ‚Ã³cznia, oprÃ³cz tego Å¼e jest trochÄ™ silniejsza od zwykÅ‚ej, bÄ™dzie czÄ™sto przyzywaÄ‡ wojownikÃ³w plemiennych ktÃ³rzy pomogÄ… ci w trakcie twoich zadaÅ„.");
Database.addText("pl.eqItemWeaponMonkeyWizardStaffName", "BerÅ‚o maÅ‚piego czarodzieja");
Database.addText("pl.eqItemWeaponMonkeyWizardStaffDescription", "To berÅ‚o naleÅ¼aÅ‚o do maÅ‚piego czarodzieja ktÃ³rego znalazÅ‚eÅ› w jaskini. BÄ™dzie czÄ™sto strzelaÄ‡ magicznymi kulami sama z siebie, celujÄ…c w twoich przeciwnikÃ³w.");
Database.addText("pl.eqItemWeaponEnchantedMonkeyWizardStaffName", "BerÅ‚o maÅ‚piego czarodzieja (zaczarowane)");
Database.addText("pl.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "To berÅ‚o jest szybsze niÅ¼ jego zwykÅ‚a wersja i bÄ™dzie strzelaÄ‡ wiÄ™kszÄ… iloÅ›ciÄ… magicznych kul.");
Database.addText("pl.eqItemWeaponGiantSpoonName", "Ogromna Å‚yÅ¼ka");
Database.addText("pl.eqItemWeaponGiantSpoonDescription", "Ta ogromna Å‚yÅ¼ka byÅ‚a w ogromnym czajniku w pustynnej fortecy. Nie wiesz czy ktoÅ› uÅ¼ywaÅ‚ jej kiedykolwiek jako Å‚yÅ¼ki, ale jeÅ›li tak, to musiaÅ‚ to byÄ‡ ktoÅ› naprawdÄ™ wielki. Raczej nie chcesz siÄ™ z nim spotkaÄ‡.");
Database.addText("pl.eqItemWeaponGiantSpoonOfDoomName", "Ogromna Å‚yÅ¼ka zagÅ‚ady");
Database.addText("pl.eqItemWeaponGiantSpoonOfDoomDescription", "Ta ogromna Å‚yÅ¼ka jest jeszcze potÄ™Å¼niejsza niÅ¼ zwykÅ‚a ogromna Å‚yÅ¼ka ktÃ³rÄ… moÅ¼esz znaleÅºÄ‡, na przykÅ‚ad, w czajniku. Jest bardzo wolna.");
Database.addText("pl.eqItemWeaponScytheName", "Kosa");
Database.addText("pl.eqItemWeaponScytheDescription", "MÃ³wi siÄ™ Å¼e ta kosa naleÅ¼aÅ‚a do samej Å›mierci. Jest niesamowicie szybka.");
Database.addText("pl.eqItemHatMerchantHatName", "Kapelusz handlarza");
Database.addText("pl.eqItemHatMerchantHatDescription", "Ten kapelusz zostaÅ‚ ci sprzedany przez cukierkowego handlarza. Kupiec cukierkÃ³w uwielbia cukierki. Ten kapelusz pomnoÅ¼y iloÅ›Ä‡ cukierkÃ³w ktÃ³rÄ… znajdziesz w zadaniach przez 7!");
Database.addText("pl.eqItemHatSorceressHatName", "Kapelusz czarownicy");
Database.addText("pl.eqItemHatSorceressHatDescription", "Ten kapelusz zostaÅ‚ tobie sprzedany przez czarownicÄ™. Wzmocni efekty twoich zaklÄ™Ä‡ i mikstur");
Database.addText("pl.eqItemHatOctopusKingCrownName", "Korona krÃ³la oÅ›miornic");
Database.addText("pl.eqItemHatOctopusKingCrownDescription", "Kiedy nosisz tÄ… koronÄ™, czujesz siÄ™ bardziej pewny siebie. Nie daje ci Å¼adnej przewagi w zadaniach, ale pewnoÅ›Ä‡ siebie jest waÅ¼na!");
Database.addText("pl.eqItemHatOctopusKingCrownWithJaspersName", "Korona krÃ³la oÅ›miornic z jaspisami");
Database.addText("pl.eqItemHatOctopusKingCrownWithJaspersDescription", "Ta zaczarowana korona jest zrobiona ze zÅ‚ota i czerwonych jaspisÃ³w. W zadaniach, bÄ™dzie czÄ™sto rzucaÄ‡ potÄ™Å¼nymi kulami ognia dookoÅ‚a ciebie. Jest bÅ‚yszczÄ…ca!");
Database.addText("pl.eqItemHatOctopusKingCrownWithObsidianName", "Korona krÃ³la oÅ›miornic z obsydianem");
Database.addText("pl.eqItemHatOctopusKingCrownWithObsidianDescription", "Ta zaczarowana korona jest zrobiona ze zÅ‚ota i obsydianu. Jest piÄ™kna. W zadaniach, bÄ™dzie co jakiÅ› czas przyzywaÄ‡ krÃ³la oÅ›miornic aby walczyÅ‚ po twojej stronie. Jaki mackowaty sprzymierzeniec!");
Database.addText("pl.eqItemGlovesLeatherGlovesName", "SkÃ³rzane rÄ™kawice");
Database.addText("pl.eqItemGlovesLeatherGlovesDescription", "Te rÄ™kawice nic nie robiÄ…. Ale sÄ… przynajmniej miÄ™kkie i wygodne!");
Database.addText("pl.eqItemGlovesRedEnchantedGlovesName", "Czerwone zaczarowane rÄ™kawiczki");
Database.addText("pl.eqItemGlovesRedEnchantedGlovesDescription", "Te zaczarowane rÄ™kawiczki emitujÄ… delikatne czerwone Å›wiatÅ‚o gdy znajdujesz siÄ™ w ciemnoÅ›ci. W zadaniach, bÄ™dÄ… losowo rzucaÅ‚y maÅ‚e ogniste kule w kierunku twoich przeciwnikÃ³w, co moÅ¼e okazaÄ‡ siÄ™ bardzo przydatne.");
Database.addText("pl.eqItemGlovesPinkEnchantedGlovesName", "RÃ³Å¼owe zaczarowane rÄ™kawiczki");
Database.addText("pl.eqItemGlovesPinkEnchantedGlovesDescription", "Te zaczarowane rÄ™kawiczki zostawiajÄ… rÃ³Å¼owe Å›lady na wszystkim czego dotkniesz. W zadaniach, bÄ™dÄ… ciÄ™ stale leczyÄ‡.");
Database.addText("pl.eqItemBootsRocketBootsName", "Rakietowe buty");
Database.addText("pl.eqItemBootsRocketBootsDescription", "Te odjazdowe pozwalajÄ… ci skakaÄ‡ w powietrzu w taki sposÃ³b, Å¼e po prostu latasz!");
Database.addText("pl.eqItemBootsLeatherBootsName", "SkÃ³rzane buty");
Database.addText("pl.eqItemBootsLeatherBootsDescription", "ZwykÅ‚e skÃ³rzane buty. Nic specjalnego.");
Database.addText("pl.eqItemBootsBootsOfIntrospectionName", "Buty introspekcji");
Database.addText("pl.eqItemBootsBootsOfIntrospectionDescription", "Nie Å›piesz siÄ™, zÅ‚ap oddech, odpocznij.NoszÄ…c te buty, nie bÄ™dziesz siÄ™ poruszaÅ‚ dopÃ³ki dotykasz podÅ‚oÅ¼a.");
Database.addText("pl.eqItemBodyArmoursLightweightBodyArmourName", "Lekka zbroja");
Database.addText("pl.eqItemBodyArmoursLightweightBodyArmourDescription", "Ta zbroja da ci lekkÄ… obronÄ™. BÄ™dziesz trochÄ™ bardziej odporny na na ataki twoich przeciwnikÃ³w.");
Database.addText("pl.eqItemBodyArmoursKnightBodyArmourName", "Rycerska zbroja");
Database.addText("pl.eqItemBodyArmoursKnightBodyArmourDescription", "Ta mocna zbroja bÄ™dzie ciÄ™ ochraniaÄ‡. BÄ™dziesz bardziej odporny na ataki nieprzyjaciÃ³Å‚.");
Database.addText("pl.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Zaczarowana rycerska zbroja");
Database.addText("pl.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Ta zbroja jest wyjÄ…tkowa. BÄ™dziesz BARDZO odporny na ataki nieprzyjaciÃ³Å‚, ale obraÅ¼enia zadawane przez ciebie zostanÄ… podzielone przez 2.");
Database.addText("pl.mapVillageForgeBuyWoodenSwordButton", "Kup drewniany miecz (150 cukierkÃ³w)");
Database.addText("pl.mapVillageForgeBuyWoodenSwordSpeech", "DziÄ™kujÄ™! Ten drewniany miecz jest sÅ‚aby, ale to zawsze coÅ›.");
Database.addText("pl.mapVillageForgeBuyIronAxeButton", "Kup Å¼elaznÄ… siekierÄ™ (400 cukierkÃ³w)");
Database.addText("pl.mapVillageForgeBuyIronAxeSpeech", "Mam nadzieje Å¼e spodoba ci siÄ™ ta siekiera. WÅ‚aÅ›nie jÄ… dla ciebie naostrzyÅ‚em!");
Database.addText("pl.mapVillageForgeBuyPolishedSilverSwordButton", "Kup wypolerowany srebrny miecz (2 000 cukierkÃ³w)");
Database.addText("pl.mapVillageForgeBuyPolishedSilverSwordSpeech", "Stworzenie tego miecza zajÄ™Å‚o mi bardzo dÅ‚ugo. Zapewniam ciÄ™, jest warty swojej ceny.");
Database.addText("pl.mapVillageForgeBuyLightweightBodyArmourButton", "Kup lekkÄ… zbrojÄ™ (15 000 cukierkÃ³w)");
Database.addText("pl.mapVillageForgeBuyLightweightBodyArmourSpeech", "Ta zbroja zapewni ci ochronÄ™ przed twoimi przeciwnikami.");
Database.addText("pl.mapVillageForgeBuyScytheButton", "Kup kosÄ™ (5 000 000 cukierkÃ³w)");
Database.addText("pl.mapVillageForgeBuyScytheSpeech", "Stworzenie tej kosy zajÄ™Å‚o mi parÄ™ miesiÄ™cy. To prawdziwe dzieÅ‚o sztuki. Jest najprawdopodobniej najszybszÄ… broniÄ… jakiej bÄ™dziesz w stanie uÅ¼yÄ‡. Powodzenia!");
Database.addText("pl.wishingWellThrowFirstCandyButton", "WrzuÄ‡ cukierek do studni");
Database.addText("pl.wishingWellCandyIntroductionSpeech", "Witaj podrÃ³Å¼niku! Jestem studniÄ… Å¼yczeÅ„. BÄ™dÄ™ speÅ‚niaÄ‡ twoje Å¼yczenia w zamian za sÅ‚odycze! Kiedy wrzucisz we mnie cukierki, uleczÄ™ ciÄ™.");
Database.addText("pl.wishingWellThrewCandiesSpeech", "ZostaÅ‚eÅ› uleczony!");
Database.addText("pl.wishingWellNoWoundSpeech", "Nie masz niczego do uleczenia!");
Database.addText("pl.wishingWellThrowFirstLollipopButton", "WrzuÄ‡ lizaka do studni");
Database.addText("pl.wishingWellLollipopIntroductionSpeech", "Witaj podrÃ³Å¼niku! Jestem studniÄ… Å¼yczeÅ„. BÄ™dÄ™ speÅ‚niaÄ‡ twoje Å¼yczenia w zamian za sÅ‚odycze! Gdy wrzucisz we mnie lizaki, zamieniÄ™ je na cukierki!");
Database.addText("pl.wishingWellThrewLollipopsSpeech", "Twoje lizaki zostaÅ‚y zamienione na cukierki! Dwa lizaki na jeden cukierek.");
Database.addText("pl.wishingWellThrowChocolateBarButton", "WrzuÄ‡ tabliczkÄ™ czekolady do studni.");
Database.addText("pl.wishingWellChocolateBarIntroductionSpeech", "Witaj podrÃ³Å¼niku! Jestem studniÄ… Å¼yczeÅ„. BÄ™dÄ™ speÅ‚niaÄ‡ twoje Å¼yczenia w zamian za sÅ‚odycze! Uwielbiam czekoladÄ™. NaprawdÄ™ jÄ… kocham. Za kaÅ¼dÄ… tabliczkÄ™ czekolady ktÃ³rÄ… we mnie wrzucisz, Å‚Ä…cznie z tÄ…, dostaniesz jednÄ… moÅ¼liwoÅ›Ä‡ zaczarowania wybranego przez ciebie przedmiotu.");
Database.addText("pl.wishingWellThrewChocolateBarSpeech", "KtÃ³ry przedmiot chcesz zaczarowaÄ‡?");
Database.addText("pl.wishingWellThrowPainAuChocolatButton", "WrzuÄ‡ pain au chocolat do studni");
Database.addText("pl.wishingWellPainAuChocolatIntroductionSpeech", "Witaj podrÃ³Å¼niku! Jestem studniÄ… Å¼yczeÅ„. BÄ™dÄ™ speÅ‚niaÄ‡ twoje Å¼yczenia w zamian za sÅ‚odycze! Gdy wrzucisz we mnie pain au chocolat, dostaniesz specjalny prezent. Wybieraj rozwaÅ¼nie.");
Database.addText("pl.wishingWellThrewPainAuChocolatSpeech", "DziÄ™ki za pain au chocolat! MoÅ¼esz teraz wybraÄ‡ swÃ³j prezent.");
Database.addText("pl.wishingWellChooseGift", "Wybierz swÃ³j prezent!");
Database.addText("pl.wishingWellChooseGiftButton", "Wybierz");
Database.addText("pl.wishingWellGiftDoneSpeech", "Gotowe! Masz nowy prezent. Pojawi siÄ™ w twoim panelu statystyk w ekwipunku.");
Database.addText("pl.wishingWellNoPossibleEnchantment", "Nie moÅ¼esz teraz nic zaczarowaÄ‡");
Database.addText("pl.wishingWellChooseEnchantment", "Wybierz czar");
Database.addText("pl.wishingWellEnchantButton", "Zaczaruj");
Database.addText("pl.wishingWellEnchantmentDoneSpeech", "ProszÄ™ bardzo! TwÃ³j przedmiot jest teraz zaczarowany.");
Database.addText("pl.pierLighthouseButton", "PopÅ‚yÅ„ do latarni morskiej Å‚Ã³dkÄ…");
Database.addText("pl.pierTheSeaButton", "Wskocz do morza");
Database.addText("pl.lonelyHouseOpenBox", "OtwÃ³rz pudeÅ‚ko");
Database.addText("pl.lonelyHouseShakeBox", "WstrzÄ…Å›nij pudeÅ‚kiem");
Database.addText("pl.lonelyHouseBreakLock", "WyÅ‚am zamek");
Database.addText("pl.lonelyHouseKickBox", "Kopnij pudeÅ‚ko");
Database.addText("pl.lonelyHouseAskTheBoxToOpenItself", "PoproÅ› pudeÅ‚ko Å¼eby siÄ™ otworzyÅ‚o");
Database.addText("pl.lonelyHouseLureTheBoxWithACandy", "Zaoferuj pudeÅ‚ku cukierka");
Database.addText("pl.lonelyHouseTakeTheBox", "WeÅº pudeÅ‚ko ze sobÄ…, prawdopodobnie potrzebujesz klucza Å¼eby je otworzyÄ‡.");
Database.addText("pl.lonelyHouseOpenBoxResult", "PudeÅ‚ko jest zakluczone");
Database.addText("pl.lonelyHouseShakeBoxResult", "Nic siÄ™ nie dzieje");
Database.addText("pl.lonelyHouseBreakLockResult", "Zamek wytrzymuje");
Database.addText("pl.lonelyHouseKickBoxResult", "Stopa ciÄ™ trochÄ™ rozbolaÅ‚a, ale nic siÄ™ nie dzieje.");
Database.addText("pl.lonelyHouseAskTheBoxToOpenItselfResult", "...wiesz Å¼e gadasz do pudeÅ‚ka, prawda?");
Database.addText("pl.lonelyHouseLureTheBoxWithACandyResult", "PudeÅ‚ko siÄ™ nie przejmuje");
Database.addText("pl.lonelyHouseTakeTheBoxResult", "W tym candy box musi byÄ‡ coÅ› ciekawego.");
Database.addText("pl.lollipopFarmConstructMill", "Zbuduj mÅ‚yn (10 000 lizakÃ³w)");
Database.addText("pl.lollipopFarmFeedMill", "Nakarm mÅ‚yn");
Database.addText("pl.lollipopFarmCurrentCandiesProduction", "BieÅ¼Ä…ca produkcja cukierkÃ³w");
Database.addText("pl.lollipopFarmDigPond", "Wykop staw (100 000 lizakÃ³w)");
Database.addText("pl.lollipopFarmBuyLolligator", "Kup lizakogotora (1200 cukierkÃ³w)");
Database.addText("pl.lollipopFarmLolligatorsConversionText", "Zamiana cukierki -> lizaki wÅ‚Ä…czona");
Database.addText("pl.lighthouseAskButton", "Spytaj");
Database.addText("pl.lighthouseQuestionWho", "Kim jesteÅ›?");
Database.addText("pl.lighthouseQuestionWhoSpeech", "Jestem bardzo starym cyklopem");
Database.addText("pl.lighthouseQuestionWhat", "Co ty tu robisz?");
Database.addText("pl.lighthouseQuestionWhatSpeech", "SiedzÄ™ tutaj caÅ‚y dzieÅ„, czekajÄ…c na Å‚Ã³dkÄ™. MinÄ™Å‚o juÅ¼ sporo czasu od kiedy ostatni raz widziaÅ‚em Å‚Ã³dkÄ™, ale muszÄ™ tu zostaÄ‡, patrzyÄ‡ siÄ™ na morze, poniewaÅ¼ moÅ¼e przypÅ‚ynÄ…Ä‡ Å‚Ã³dka.");
Database.addText("pl.lighthouseQuestionWhyEatCandies", "Dlaczego powinienem jeÅ›Ä‡ cukierki?");
Database.addText("pl.lighthouseQuestionWhyEatCandiesSpeech", "Bo sÄ… dobre dla twojego zdrowia!");
Database.addText("pl.lighthouseQuestionCandyBox", "Czym jest candy box?");
Database.addText("pl.lighthouseQuestionCandyBoxSpeech", "Jest to bardzo stare pudeÅ‚ko o ktÃ³rym mÃ³wi siÄ™ Å¼e zawiera wszystkie cukierki Å›wiata. Legendy mÃ³wiÄ… Å¼e komukolwiek uda siÄ™ je otworzyÄ‡, miaÅ‚by tak duÅ¼o cukierkÃ³w Å¼e wszystko byÅ‚oby moÅ¼liwe.");
Database.addText("pl.lighthouseQuestionDragon", "Smok powiedziaÅ‚ mi Å¼eby przyjÅ›Ä‡ tutaj, jeÅ›li chcÄ™ cukierkÃ³w.");
Database.addText("pl.lighthouseQuestionDragonSpeech", "Ach, rozumiem... CÃ³Å¼, nie jestem w stanie zapewniÄ‡ ci cukierkÃ³w bezpoÅ›rednio, ale jestem w stanie daÄ‡ ci coÅ› niezbÄ™dnego potrzebnego do uzyskania MNÃ“STWA cukierkÃ³w. Lecz najpierw muszÄ™ ciÄ™ sprawdziÄ‡. To co mam nie moÅ¼e byÄ‡ oddane do byle kogo. RozwiÄ…Å¼ tÄ™ zagadkÄ™ i bÄ™dzie twoje.");
Database.addText("pl.lighthouseFoundStone", "Gratulacje! ZdaÅ‚eÅ› test i znalazÅ‚eÅ› kamieÅ„. Jest bezcenny, ale przydatny tylko jeÅ›li masz trzy pozostaÅ‚e. Powodzenia!");
Database.addText("pl.lighthouseFoundStoneAgain", "Dobra robota, rozwiÄ…zaÅ‚eÅ› zagadkÄ™ po raz kolejny. Chyba lubisz to robiÄ‡.");
Database.addText("pl.saveLocalSaveTitle", "Zapisz w przeglÄ…darce");
Database.addText("pl.saveLocalSaveWhy", "Wybierz zapis w przeglÄ…darce jeÅ›li chcesz kontynuowaÄ‡ na tym urzÄ…dzeniu i przeglÄ…darce.");
Database.addText("pl.saveLocalSaveWarning0", "Twoja przeglÄ…darka chyba nie obsÅ‚uguje HTML5");
Database.addText("pl.saveLocalSaveWarning1", "PowinieneÅ› zaktualizowaÄ‡ swojÄ… przeglÄ…darkÄ™ aby skorzystaÄ‡ z funkcji zapisu w przeglÄ…darce.");
Database.addText("pl.saveLocalSaveChooseSlot", "Wybierz miejsce do zapisania :");
Database.addText("pl.saveLocalSaveAutosaveEnabled", "Autozapis wÅ‚Ä…czony");
Database.addText("pl.saveLocalSaveChooseWhatToDo", "Wybierz co zrobiÄ‡ :");
Database.addText("pl.saveLocalSaveSaveButton", "Zapisz");
Database.addText("pl.saveLocalSaveAutosaveButton", "Zapisuj automatycznie co 10 minut");
Database.addText("pl.saveLocalSaveDisableAutosaveButton", "WyÅ‚Ä…cz autozapis");
Database.addText("pl.saveFileSaveTitle", "Zapis tekstowy");
Database.addText("pl.saveFileSaveWhy0", "Wybierz zapis tekstowy jeÅ›li :");
Database.addText("pl.saveFileSaveWhy1", "Chcesz kontynuowaÄ‡ grÄ™ na innym urzÄ…dzeniu bÄ…dÅº przeglÄ…darce");
Database.addText("pl.saveFileSaveWhy2", "Chcesz siÄ™ podzieliÄ‡ swoim zapisem z kimÅ› innym");
Database.addText("pl.saveFileSaveWhy3", "Z jakiegoÅ› powodu chcesz oprÃ³Å¼niÄ‡ pamiÄ™Ä‡ podrÄ™cznÄ… swojej przeglÄ…darki");
Database.addText("pl.saveFileSaveWhy4", "(co usunie twoje zapisy przeglÄ…darkowe)");
Database.addText("pl.saveFileSaveButton", "DostaÅ„ swojÄ… obecnÄ… grÄ™ w formie tekstowej");
Database.addText("pl.saveFileSaveWarning", "Teraz skopiuj gdzieÅ› ten tekst! (na przykÅ‚ad, do pliku)");
Database.addText("pl.saveLocalLoadTitle", "Wczytaj z przeglÄ…darki");
Database.addText("pl.saveLocalLoadYouCan", "MoÅ¼esz wczytaÄ‡ zapis przeglÄ…darkowy korzystajÄ…c z tych linkÃ³w:");
Database.addText("pl.saveLocalLoadThanksTo", "DziÄ™ki magii HTML5, bÄ™dziesz w stanie korzystaÄ‡ z tych zapisÃ³w nawet offline.");
Database.addText("pl.saveFileLoadTitle", "Wczytaj tekst");
Database.addText("pl.saveFileLoadPaste", "Wklej swÃ³j zapis poniÅ¼ej, potem kliknij guzik \"Wczytaj\"");
Database.addText("pl.saveFileLoadButton", "Wczytaj");
Database.addText("pl.mountainsText0", "ZauwaÅ¼yÅ‚eÅ› coÅ› pomiÄ™dzy gÃ³rami!");
Database.addText("pl.mountainsText1", "WyglÄ…da interesujÄ…co. MoÅ¼e siÄ™ przyda.");
Database.addText("pl.mountainsTextButton", "Wespnij siÄ™ na gÃ³ry aby zdobyÄ‡ to coÅ›");
Database.addText("pl.mountainsTextAfter", "ZnalazÅ‚eÅ› sprÄ™Å¼ynowe urzÄ…dzenie do podskakiwania! Jest teraz w twoim ekwipunku.");
Database.addText("pl.secondHouseIntroSpeech", "Witaj, jestem handlarzem cukierkÃ³w. Dla cukierkÃ³w zrobiÄ™ wszystko. Czego potrzebujesz?");
Database.addText("pl.secondHouseLollipop1Speech", "To jest cytrynowy lizak. MÃ³j ulubiony! Kosztuje 60 cukierkÃ³w, ale jest tego warty.");
Database.addText("pl.secondHouseLollipop2Speech", "To jest truskawkowy lizak. Jest bardzo smaczny. LubiÄ™ jego czerwony kolor. Tylko 60 cukierkÃ³w!");
Database.addText("pl.secondHouseLollipop3Speech", "To jest dyniowy lizak. ZaÅ‚oÅ¼Ä™ siÄ™ Å¼e nigdy takiego nie jadÅ‚eÅ›! 60 cukierkÃ³w i jest twÃ³j.");
Database.addText("pl.secondHouseLollipopButtonText", "Kup tego lizaka (60 cukierkÃ³w)");
Database.addText("pl.secondHouseMerchantHatSpeech", "MogÄ™ ci sprzedaÄ‡ mÃ³j kapelusz, ale jest bardzo cenny... BÄ™dziesz musiaÅ‚ mi daÄ‡ za niego mnÃ³stwo cukierkÃ³w. Powiedzmy... milion cukierkÃ³w. To uczciwa cena, prawda?");
Database.addText("pl.secondHouseMerchantHatButtonText", "Kup kapelusz handlarza (1 000 000 cukierkÃ³w)");
Database.addText("pl.secondHouseTimeRingSpeech", "To jest pierÅ›cieÅ„ czasu. Jest magiczny. Pozwoli ci zwolniÄ‡ czas jeÅ›li wpadniesz w tarapaty.");
Database.addText("pl.secondHouseTimeRingButtonText", "Kup pierÅ›cieÅ„ czasu (500 cukierkÃ³w)");
Database.addText("pl.secondHouseLeatherGlovesSpeech", "Te skÃ³rzane rÄ™kawice zostaÅ‚y stworzone z najwyÅ¼szej jakoÅ›ci wielbÅ‚Ä…dziej skÃ³ry. Mam ich mnÃ³stwo, dlatego sÄ… takie tanie : tylko 300 cukierkÃ³w!");
Database.addText("pl.secondHouseLeatherBootsButtonText", "Kup parÄ™ skÃ³rzanych butÃ³w (300 cukierkÃ³w)");
Database.addText("pl.secondHouseLeatherBootsSpeech", "Te skÃ³rzane buty wysokiej jakoÅ›ci, stworzone z wielbÅ‚Ä…dziej skÃ³ry, ocieplÄ… twoje stopy.");
Database.addText("pl.secondHouseLeatherGlovesButtonText", "Kup parÄ™ skÃ³rzanych rÄ™kawic (300 cukierkÃ³w)");
Database.addText("pl.secondHouseChocolateBarSpeech", "To jest tabliczka czekolady. Nie wiem do czego sÅ‚uÅ¼y, ale wiem Å¼e jest bardzo rzadka, co wyjaÅ›nia jej cenÄ™. 800 cukierkÃ³w i jest twoja!");
Database.addText("pl.secondHouseChocolateBarButtonText", "Kup tabliczkÄ™ czekolady (800 cukierkÃ³w)");
Database.addText("pl.outsideTheHoleButton", "Wskocz do wielkiej dziury w ziemi");
Database.addText("pl.theCaveExitText0", "W koÅ„cu znalazÅ‚eÅ› wyjÅ›cie z jaskini.");
Database.addText("pl.theCaveExitText1", "Widzisz stÄ…d wielki las.");
Database.addText("pl.theCaveExitButtonText", "WyjdÅº z jaskini");
Database.addText("pl.theCaveFirstSentenceWentStraight", "PoszedÅ‚eÅ› prosto.");
Database.addText("pl.theCaveFirstSentenceWentLeft", "PoszedÅ‚eÅ› w lewo.");
Database.addText("pl.theCaveFirstSentenceWentRight", "PoszedÅ‚eÅ› w prawo");
Database.addText("pl.theCaveFirstSentenceYouAre", "JesteÅ› w jaskini. Masz przed sobÄ… trzy Å›cieÅ¼ki.");
Database.addText("pl.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "ZauwaÅ¼yÅ‚eÅ› dziwnÄ… rzecz na ziemi przed tobÄ….");
Database.addText("pl.theCavePattern_ChocolateBarNowSeeChocolateBar", "ZauwaÅ¼yÅ‚eÅ› tabliczkÄ™ czekolady.");
Database.addText("pl.theCavePattern_TreasureMapSentence", "Widzisz maÅ‚e kamyki uÅ‚oÅ¼one w dziwny sposÃ³b na ziemi.");
Database.addText("pl.theCavePattern_MonkeyWizardSentence", "NatknÄ…Å‚eÅ› siÄ™ na nagiego maÅ‚piego czarodzieja.");
Database.addText("pl.theCavePattern_MonkeyWizardButton", "Zmierz siÄ™ z nim");
Database.addText("pl.theCavePattern_OctopusKingSentence", "NatknÄ…Å‚eÅ› siÄ™ na krÃ³la oÅ›miornic. Jest paskudny.");
Database.addText("pl.theCavePattern_OctopusKingButton", "Zmierz siÄ™ z nim");
Database.addText("pl.fortressInsideText0", "JesteÅ› w pustynnej fortecy.");
Database.addText("pl.fortressInsideText1", "Masz wybÃ³r pomiÄ™dzy trzema drzwiami.");
Database.addText("pl.fortressInsideText2", "KaÅ¼de z nich prowadzi do duÅ¼ego pokoju ze skarbem");
Database.addText("pl.fortressInsideEnterRoom1", "WejdÅº do pierwszego pokoju");
Database.addText("pl.fortressInsideEnterRoom2", "WejdÅº do drugiego pokoju");
Database.addText("pl.fortressInsideEnterRoom3", "WejdÅº do trzeciego pokoju");
Database.addText("pl.treasureButtonDig", "Kop");
Database.addText("pl.treasureButtonYouFound", "ZnalazÅ‚eÅ› trzy tabliczki czekolady!");
Database.addText("pl.sorceressHutHello", "Witaj, jestem czarodziejkÄ…. MogÄ™ ciÄ™ nauczyÄ‡ co nieco o magii. MogÄ™ ci takÅ¼e daÄ‡ interesujÄ…ce rzeczy, albo rzucaÄ‡ za ciebie zaklÄ™cia. Ale wszystko ma swojÄ… cenÄ™! A tÄ… cenÄ… bÄ™dÄ… lizaki... MnÃ³stwo lizakÃ³w.");
Database.addText("pl.sorceressHutClickedGrimoire", "To jest grimuar stworzony dla poczÄ…tkujÄ…cych. NoszÄ…c go ze sobÄ… w zadaniach, bÄ™dziesz w stanie rzucaÄ‡ proste, ale przydatne zaklÄ™cia. NiezbÄ™dny! Tylko 5 000 lizakÃ³w.");
Database.addText("pl.sorceressHutBuyGrimoireButton", "Kup Ten grimuar (5 000 lizakÃ³w)");
Database.addText("pl.sorceressHutBuyGrimoireSpeech", "DziÄ™kujÄ™ za kupno! DziÄ™ki temu grimuarowi bÄ™dziesz w stanie rzucaÄ‡ trzy zaklÄ™cia. Powodzenia!");
Database.addText("pl.sorceressHutClickedGrimoire2", "To jest zaawansowany grimuar. NoszÄ…c go ze sobÄ… w zadaniach, bÄ™dziesz w stanie rzucaÄ‡ 2 zaawansowane zaklÄ™cia. Sama go napisaÅ‚am, a to nie byÅ‚o proste. 20 000 lizakÃ³w to uczciwa cena.");
Database.addText("pl.sorceressHutBuyGrimoire2Button", "Kup ten grimuar (20 000 lizakÃ³w)");
Database.addText("pl.sorceressHutBuyGrimoire2Speech", "DziÄ™kujÄ™ za kupno! DziÄ™ki temu grimuarowi bÄ™dziesz w stanie rzucaÄ‡ dwa zaawansowane zaklÄ™cia. UÅ¼ywaj ich rozwaÅ¼nie!");
Database.addText("pl.sorceressHutClickedCauldron", "To jest mÃ³j kocioÅ‚. Pozwala mi warzyÄ‡ magiczne mikstury. MogÄ™ ci go sprzedaÄ‡ ale jest bardzo cenny... bÄ™dzie ciÄ™ kosztowaÄ‡ 100 000 lizakÃ³w.");
Database.addText("pl.sorceressHutBuyCauldronButton", "Kup kocioÅ‚ (100 000 lizakÃ³w)");
Database.addText("pl.sorceressHutBuyCauldronSpeech", "Wielkie dziÄ™ki! 100 000 lizakÃ³w dla mnie! W zestawie doÅ‚Ä…czyÅ‚am instrukcje uÅ¼ytkowania. Przyda ci siÄ™.");
Database.addText("pl.sorceressHutClickedHat", "Mam Å‚adny kapelusz, wiem! Ale naprawdÄ™ nie mogÄ™ ci go sprzedaÄ‡. Jest dla mnie baaaardzo cenny. NaprawdÄ™, nie mogÄ™. Nie nalegaj. Nie. Nie nie nie nie. Nie powinnam tego robiÄ‡. Och, niech ci bÄ™dzie! Sprzedam ci go, ale za 1 000 000 000 lizakÃ³w. I tak pewnie nie bÄ™dziesz w stanie tyle zapÅ‚aciÄ‡.");
Database.addText("pl.sorceressHutBuyHatButton", "Kup kapelusz (1 000 000 000 lizakÃ³w)");
Database.addText("pl.sorceressHutBuyHatSpeech", "Miliard lizakÃ³w dla mnieeeeee! Niestety nie mam juÅ¼ kapelusza... ale miliard lizakÃ³w, wow! ... ByÅ‚o warto.");
Database.addText("pl.cauldronPreviousPageButton", "Poprzednia strona");
Database.addText("pl.cauldronNextPageButton", "NastÄ™pna strona");
Database.addText("pl.cauldronWhatYouWantToPut", "Co chcesz wsadziÄ‡ do kotÅ‚a?");
Database.addText("pl.cauldronWhatIsIn", "Co jest w kotle:");
Database.addText("pl.cauldronWhatYouCanDo", "Co moÅ¼esz z tym zrobiÄ‡:");
Database.addText("pl.castleBigRoomComment", "Wielki pokÃ³j");
Database.addText("pl.castleARoomComment", "PokÃ³j");
Database.addText("pl.castleADarkRoomComment", "NieoÅ›wietlony pokÃ³j");
Database.addText("pl.castleCastleEntranceComment", "WejÅ›cie do zamku");
Database.addText("pl.castleTowerEntranceComment", "WejÅ›cie do wieÅ¼y");
Database.addText("pl.castleNougatMonsterComment", "Zaatakuj wielkiego nugatowego potwora");
Database.addText("pl.castleGuardsComment", "Zaatakuj straÅ¼nikÃ³w");
Database.addText("pl.castleStairsComment", "Schody");
Database.addText("pl.buttonBackToTheCastle", "PowrÃ³t do zamku");
Database.addText("pl.castleBigRoomHovenSpeechSad", "CzeÅ›Ä‡! Jestem bardzo starym Piecem Chlebowym. KiedyÅ› wypiekaÅ‚em mnÃ³stwo wspaniaÅ‚ych wyrobÃ³w cukierniczych, ale nikt juÅ¼ ze mnie nie korzysta. MoÅ¼e... moÅ¼e mÃ³gÅ‚byÅ› mi pomÃ³c? PozwÃ³l mi tylko zabraÄ‡ od ciebie trochÄ™ sÅ‚odyczy! Nie martw siÄ™, nie poÅ¼aÅ‚ujesz tego! Zaufaj mi.");
Database.addText("pl.castleBigRoomHovenNotEnough", "Och... nie masz wystarczajÄ…cej iloÅ›ci sÅ‚odyczy, nie mogÄ™ nic zrobiÄ‡. Jestem bezuÅ¼yteczny. Jestem BezuÅ¼ytecznym Piecem Chlebowym, tak powinieneÅ› mnie nazywaÄ‡.");
Database.addText("pl.castleBigRoomHovenSpeechMadePainAuChocolat", "Hurra! Wielkie dziÄ™ki! WykorzystaÅ‚em  100 cukierkÃ³w oraz tabliczkÄ™ czekolady, i stworzyÅ‚em... pain au chocolat! Jest to mÃ³j ulubiony wypiek cukierniczy, mam nadzieje Å¼e teÅ¼ go polubisz!");
Database.addText("pl.castleBigRoomHovenSpeechHappy", "Hej! JeÅ¼eli chcesz Å¼ebym wypiekÅ‚ jeszcze coÅ›, po prostu mi powiedz! Z przyjemnoÅ›ciÄ… ci pomogÄ™.");
Database.addText("pl.castleBigRoomHovenSpeechHappyNotEnough", "Och, niestety nie masz wystarczajÄ…cej iloÅ›ci sÅ‚odyczy. Potrzebuje 100 cukierkÃ³w i tabliczkÄ™ czekolady. WrÃ³Ä‡ kiedy bÄ™dziesz miaÅ‚ skÅ‚adniki");
Database.addText("pl.castleBigRoomHovenLetHovenTakeButton", "PozwÃ³l Piecowi zabraÄ‡ wszystkie cukierki ktÃ³rych potrzebuje");
Database.addText("pl.castleBigRoomHovenThanks", "DziÄ™ki Piecu!");
Database.addText("pl.dragonStopTickling", "Hej, ty! ProszÄ™, przestaÅ„ mnie Å‚askotaÄ‡.");
Database.addText("pl.dragonStopTicklingButton", "Yyyy, przepraszam, myÅ›laÅ‚em Å¼e miaÅ‚em ciÄ™ zaatakowaÄ‡.");
Database.addText("pl.dragonTalking", "Jestem Smok, a to jest mÃ³j zamek. WidzÄ™ Å¼e udaÅ‚o ci siÄ™ wejÅ›Ä‡, musisz byÄ‡ bardzo odwaÅ¼ny... MogÄ™ ci pomÃ³c. Czego poszukujesz?");
Database.addText("pl.dragonTalkingChallengeButton", "Wyzwania");
Database.addText("pl.dragonTalkingFameButton", "SÅ‚awy");
Database.addText("pl.dragonTalkingCandiesButton", "CukierkÃ³w");
Database.addText("pl.dragonTalkingChallengeSpeech", "Ach, wiÄ™c chcesz wyzwania? MyÅ›lÄ™ Å¼e powinieneÅ› wybraÄ‡ siÄ™ na wycieczkÄ™ do piekÅ‚a, wszyscy wiedzÄ… Å¼e DiabeÅ‚ jest trudnym przeciwnikiem. Wskocz mi na plecy to ciÄ™ tam zabiorÄ™!");
Database.addText("pl.dragonTalkingFameSpeech", "Najlepszym sposobem na zostanie sÅ‚awnym jest zmierzenie siÄ™ z samym deweloperem. Wiem gdzie mieszka wiÄ™c mogÄ™ ciÄ™ tam zabraÄ‡. Ale bÄ…dÅº gotowy, to nie bÄ™dzie Å‚atwe.");
Database.addText("pl.dragonTalkingCandiesSpeech", "Ostatecznie, rzeczÄ… ktÃ³rej wszyscy chcemy to cukierki, prawda? MyÅ›lÄ™ Å¼e mÃ³j znajomy mÃ³gÅ‚by ci z tym pomÃ³c. Åatwo go rozpoznasz, ma tylko jedno oko. Po prostu powiedz mu Å¼e mnie znasz.");
Database.addText("pl.dragonTalkingChallengeAnswer", "ChodÅºmy!");
Database.addText("pl.dragonTalkingFameAnswer", "Jestem gotowy!");
Database.addText("pl.dragonTalkingCandiesAnswer", "Ok, dziÄ™ki!");
Database.addText("pl.buttonBackToCastle", "PowrÃ³t do zamku");
Database.addText("pl.talkingCandySpeechNoBox", "Hej! Jestem MÃ³wiÄ…cy Cukierek. Prawie przeszedÅ‚eÅ› grÄ™. Teraz tylko musisz znaleÅºÄ‡ candy box. Znajduje siÄ™ w domu na pÃ³Å‚noc od wioski. To juÅ¼ ostatni krok!");
Database.addText("pl.talkingCandySpeech1", "Hej! Jestem MÃ³wiÄ…cy Cukierek. Gratulacje, przeszedÅ‚eÅ› grÄ™! OtworzÄ™ dla ciebie candy box, bÄ™dzie to twojÄ… nagrodÄ…. Mam kontynuowaÄ‡?");
Database.addText("pl.talkingCandySpeech2", "Gotowe! MoÅ¼esz go otworzyÄ‡. Mam nadziejÄ™ Å¼e gra siÄ™ podobaÅ‚a :)");
Database.addText("pl.talkingCandyButton", "Tak!!");
Database.addText("pl.lighthousePuzzleResetButton", "Resetuj");
Database.addText("fr.mapVillageComment", "Le Village");
Database.addText("fr.mapFortressComment", "La forteresse du dÃ©sert");
Database.addText("fr.mapATreeComment", "Un arbre");
Database.addText("fr.mapTheDesertComment", "Le dÃ©sert");
Database.addText("fr.mapWishingWellComment", "Le puits aux souhaits");
Database.addText("fr.mapLonelyHouseComment", "Une maison solitaire");
Database.addText("fr.mapForestComment", "La forÃªt");
Database.addText("fr.mapCastleEntranceComment", "EntrÃ©e du chÃ¢teau");
Database.addText("fr.mapCastleComment", "Le chÃ¢teau");
Database.addText("fr.mapDragonComment", "Le dragon");
Database.addText("fr.candyBoxEatCandiesButton", "Manger tous les bonbons");
Database.addText("fr.candyBoxThrowCandiesButton", "Jeter 10 bonbons par terre");
Database.addText("fr.mapVillageLockedHouseComment", "Une maison verrouillÃ©e");
Database.addText("fr.mapVillageAHouseComment", "Une maison");
Database.addText("fr.mapVillageForgeComment", "La forge");
Database.addText("fr.buttonBackToTheMap", "Revenir Ã  la carte");
Database.addText("fr.mapSorceressHutComment", "Hutte de la sorciÃ¨re");
Database.addText("fr.buttonBackToTheVillage", "Revenir au village");
Database.addText("fr.mapATreeIntroductionSpeech", "Bonjour, je suis l'Ã‰cureuil. Je peux te fournir des bonbons, et un tas d'autres choses. Je sais Ã  quel point tu aimes les bonbons. Mais je me sens seul dans cette forÃªt.");
Database.addText("fr.mapATreeIntroductionButton", "Comment puis-je t'aider ?");
Database.addText("fr.mapATreeFirstQuestion", "Je vais te poser des questions. Si tu rÃ©ponds correctement, les plus douces sucreries seront Ã  toi ! PremiÃ¨re question : aimes-tu vraiment les bonbons ? (rÃ©pondre en anglais)");
Database.addText("fr.mapATreeSecondQuestion", "C'est bon ! Voici 20 bonbons pour toi. Maintenant complÃ¨te cette suite de lettres : S, E, I, D, N, A, ?");
Database.addText("fr.mapATreeThirdQuestion", "Candies! Voici 100 bonbons pour toi. Question suivante : combien de bonbons possÃ¨de la personne la plus bonbon du monde ?");
Database.addText("fr.mapATreeFourthQuestion", "Voici 500 bonbons pour toi ! La prochaine rÃ©compense devrait Ãªtre encore plus intÃ©ressante... Voici l'Ã©nigme : Dans une ancienne forÃªt pousse un trÃ¨s vieil arbre, sur lequel vivent les animaux les plus intelligents de ce monde. On dit que cet arbre possÃ¨de 60 racines, 360 branches et 2160 feuilles. Combien de marques peut-on trouver sur son tronc ?");
Database.addText("fr.mapATreeFifthQuestion", "Bravo ! Je parlais de mon arbre, effectivement. Voici 3 sucettes pour toi. Fais-en bon usage ! Prochaine Ã©nigme : Ã©coute attentivement : Sous la pleine lune, je jette un chapeau jaune dans la mer rouge. Qu'arrive-t-il au chapeau jaune ?");
Database.addText("fr.mapATreeTicTacToeIntro", "Bien rÃ©pondu ! Ce n'Ã©tait pas trop dur. Voici trois barres de chocolat pour toi ! Pour la prochaine rÃ©compense, on va changer un peu les rÃ¨gles. Tu vas devoir jouer Ã  un jeu avec moi ! Es-tu prÃªt ?");
Database.addText("fr.mapATreeTicTacToeIntroButton", "Bien sÃ»r que je le suis !");
Database.addText("fr.mapATreeTicTacToeLetsPlay", "Le jeu est Tic-Tac-Toe. On joue sur un plateau de 3 par 3. Tu utiliseras le signe X et moi le signe O. On place nos signes alternativement, et le but est d'en aligner trois. Je te laisse commencer !");
Database.addText("fr.mapATreeTicTacToeNobodyWins", "Le plateau est entiÃ¨rement remplit et on a tous les deux Ã©chouÃ© Ã  aligner trois signes : personne ne gagne ! Tu veux rejouer ?");
Database.addText("fr.mapATreeTicTacToeYouLose", "J'en ai alignÃ© trois ! J'ai gagnÃ©. Tu veux rejouer ?");
Database.addText("fr.mapATreeTicTacToeTryAgainButton", "Oui je veux !");
Database.addText("fr.mapATreeTicTacToeYouWin", "Wow, c'est un coup innatendu. Mais tu en as alignÃ© trois, je ne peux rien dire. Tu as gagnÃ© ! Prends cette clÃ© ! Elle ouvre l'une des maisons du village sous la forÃªt.");
Database.addText("fr.mapATreeTicTacToeAnymoreSweet", "Merci, Ã©cureuil ! Un autre dÃ©fi ?");
Database.addText("fr.mapATreeNoMoreChallenge", "Malheureusement non, je n'ai plus de dÃ©fi pour toi... Jouer avec toi Ã©tait vraiment amusant, je t'en remercie !");
Database.addText("fr.buttonExitQuestKeeping", "Quitter la quÃªte (et gardez ce que vous avez trouvÃ©)");
Database.addText("fr.buttonExitQuestNoKeeping", "Quitter la quÃªte (vous ne garderez pas ce que vous avez trouvÃ©)");
Database.addText("fr.buttonExitQuestNoKeepingBecauseLose", "Quitter la quÃªte (vous ne garderez pas ce que vous avez touvÃ© car vous avez Ã©couchÃ©)");
Database.addText("fr.mapVillageForgeIntroductionSpeech", "Bonjour ! Je suis un forgeron. Je peux vous vendre diverses armes et piÃ¨ces d'Ã©quipement.");
Database.addText("fr.mapVillageForgeIntroductionSpeechNoMoreToSell", "Bonjour ! Je suis un forgeron. Je n'ai plus rien Ã  vous vendre. Revenez plus tard, peut-Ãªtre ?");
Database.addText("fr.mapVillageFifthHouseNoWeaponSpeech", "Bonjour. Ma cave est pleine de rats, j'ai besoin de quelqu'un pour m'en dÃ©barrasser... si seulement quelqu'un avec une arme pouvait m'aider...");
Database.addText("fr.mapVillageFifthHouseWeaponSpeech", "Eh, vous ! Je vois que vous portez une arme ! Si vous tuez les rats qui infestent ma cave, je vous rÃ©compenserai !");
Database.addText("fr.mapVillageFifthHouseAgree", "C'est parti !");
Database.addText("fr.mapVillageFifthHouseCellarDone", "Merci de m'en avoir dÃ©barrassÃ© ! Voici quelque chose de trÃ¨s prÃ©cieux en rÃ©compense : une carte du monde. Je pense que vous en aurez plus l'usage que moi.");
Database.addText("fr.mapVillageTheShopComment", "Le magasin");
Database.addText("fr.mapBridgeComment", "Le pont");
Database.addText("fr.mapFarmComment", "La ferme Ã  sucettes");
Database.addText("fr.mapCaveEntranceComment", "L'entrÃ©e de la grotte");
Database.addText("fr.mapLighthouseComment", "Le phare");
Database.addText("fr.mapPierComment", "La jetÃ©e");
Database.addText("fr.mapTheHoleComment", "Le Trou");
Database.addText("fr.candyBoxRequestStatusBarUnlocked", "Demander une nouvelle fonctionnalitÃ© au dÃ©veloppeur (30 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedCfg", "En demander une autre (5 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedSave", "Demander encore (5 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedHealthBar", "Demander quelque chose de plus intÃ©ressant (5 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedMap", "DerniÃ¨re demande ! Celle-lÃ  a intÃ©rÃªt de valoir le coup. (10 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedComment", "Vous avez dÃ©bloquÃ© une barre d'Ã©tat ! (en haut)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedCfgComment1", "Vous avez maintenant accÃ¨s Ã  un onglet de configuration.");
Database.addText("fr.candyBoxRequestStatusBarUnlockedCfgComment2", "Vous pouvez changer la langue, si vous le voulez.");
Database.addText("fr.candyBoxRequestStatusBarUnlockedSaveComment", "Un onglet de sauvegarde sauvage apparait !");
Database.addText("fr.candyBoxRequestStatusBarUnlockedHealthBarComment", "Voici 100 points de vie pour vous. Ils vont vous Ãªtre utiles.");
Database.addText("fr.cfgChooseLanguage", "Choisissez la langue :");
Database.addText("fr.cfgInvertColors", "Inverser les couleurs ?");
Database.addText("fr.gridItemMainMapName", "La Carte");
Database.addText("fr.gridItemMainMapDescription", "Carte du monde");
Database.addText("fr.gridItemPogoStickName", "BÃ¢ton sauteur");
Database.addText("fr.gridItemPogoStickDescription", "Cet objet vous permet de sauter pendant les quÃªtes !");
Database.addText("fr.gridItemTimeRingName", "Un anneau temporel");
Database.addText("fr.gridItemTimeRingDescription", "Cet objet vous donne une nouvelle capacitÃ© pendant les quÃªtes : vous pouvez ralentir le temps. Si les choses vont trop vite pour vous, utilisez votre anneau temporel !");
Database.addText("fr.gridItemThirdHouseKeyName", "La clÃ© de la troisiÃ¨me maison");
Database.addText("fr.gridItemThirdHouseKeyDescription", "Cette clÃ© vous permet d'entrer dans la troisiÃ¨me maison du village");
Database.addText("fr.gridItemFeatherName", "Une plume d'oiseau du dÃ©sert");
Database.addText("fr.gridItemFeatherDescription", "Cette plume magique vous permet de sauter plus haut quand vous utilisez votre bÃ¢ton sauteur !");
Database.addText("fr.gridItemFeatherDescriptionNoPogoStick", "Pour une raison inconnue, vous sentez que cette plume pourrait Ãªtre utile si vous aviez un bÃ¢ton sauteur...");
Database.addText("fr.gridItemSpongeName", "Une Ã©ponge magique");
Database.addText("fr.gridItemSpongeDescription", "Cette Ã©ponge magique vous permet de vous presser vous-mÃªme comme une Ã©ponge, rÃ©duisant ainsi votre taille.");
Database.addText("fr.gridItemFortressKeyName", "La clÃ© de la forteresse du dÃ©sert");
Database.addText("fr.gridItemFortressKeyDescription", "Cette clÃ© vous permet d'entrer dans la trÃ¨s ancienne forteresse situÃ©e au-dessus du dÃ©sert. Qui sait ce que vous pourriez y trouver ?");
Database.addText("fr.gridItemHeartPendantName", "Un pendentif en forme de coeur");
Database.addText("fr.gridItemHeartPendantDescription", "Ce pendentif va augmenter vos points de vie tant que vous le garderez autour du cou.");
Database.addText("fr.gridItemHeartPlugName", "Module cardiaque");
Database.addText("fr.gridItemHeartPlugDescription", "Ce module cardiaque, fabriquÃ© Ã  l'aide de fer, de pattes d'araignÃ©e et d'une \"liqueur cardiaque\" spÃ©ciale scellÃ©e en son centre, va augmenter votre nombre de points de vie de 20 pourcents !");
Database.addText("fr.gridItemBeginnersGrimoireName", "Le grimoire des dÃ©butants");
Database.addText("fr.gridItemBeginnersGrimoireDescription", "Ce grimoire vous fournit trois sorts, assez faciles Ã  lancer. Il est vraiment fait pour les dÃ©butants. Vous serez capables d'utiliser le sort de pluie d'acide (une importante quantitÃ© de gouttes d'acide tombera sur vos ennemis), le sort de boule de feu (une boule magique gÃ©ante faite de feu volera en direction de vos ennemis) et le sort de tÃ©lÃ©portation (qui vous tÃ©lÃ©portera en un endroit imprÃ©visible).");
Database.addText("fr.gridItemAdvancedGrimoireName", "Le grimoire avancÃ©");
Database.addText("fr.gridItemAdvancedGrimoireDescription", "Ce grimoire avancÃ© vous fournit deux sorts : le sort d'effacement de la magie et le sort de bouclier d'Ã©pines. Le premier effacera toute la magie d'une quÃªte Ã  un moment donnÃ©, y compris les sorts que vous avez lancÃ© et la magie de vos ennemis. Le second crÃ©era autour de vous un bouclier d'Ã©pines flottantes qui infligeront des dommages Ã  vos ennemis au contact.");
Database.addText("fr.gridItemBlackMagicGrimoireName", "Le grimoire de magie noire");
Database.addText("fr.gridItemBlackMagicGrimoireDescription", "Vous avez trouvÃ© ce grimoire dans une cave, il Ã©tait trÃ¨s difficile d'accÃ¨s, et ce n'Ã©tait pas pour rien. Il vous fournit deux puissants sorts de magie noire. Le premier crÃ©era devant vous un mur gÃ©ant fait de briques d'obsidienne, ce qui peut Ãªtre utile pour ralentir vos ennemis. Le second invoquera une horde de dÃ©mons attaquant tout le monde dans la quÃªte, y compris vous. Faites attention avec celui-ci.");
Database.addText("fr.gridItemUnicornHornName", "Une corne de licorne");
Database.addText("fr.gridItemUnicornHornDescription", "Cette corne magique appartenait Ã  une licorne. Ses puissants pouvoirs de guÃ©rison vont beaucoup vous aider. On vous a dit que la licorne s'appelait Charlie.");
Database.addText("fr.gridItemXinopherydonClawName", "Une griffe de xinopherydon");
Database.addText("fr.gridItemXinopherydonClawDescription", "Cette griffe appartenait Ã  un xinopherydon, un ancien animal Ã  deux tÃªtes que tout le monde croit Ã©teint. Elle doublera les dommages de l'arme que vous utilisez.");
Database.addText("fr.gridItemPitchforkName", "Une fourche");
Database.addText("fr.gridItemPitchforkDescription", "Cette fourche spÃ©ciale vous permet d'ameublir la terre sans avoir Ã  le retourner, prÃ©servant ainsi les Ã©cosystÃ¨mes du sol. Cela triplera la production de votre ferme Ã  sucettes.");
Database.addText("fr.gridItemShellPowderName", "Poudre de coquillage");
Database.addText("fr.gridItemShellPowderDescription", "La poudre de coquillage est souvent utilisÃ©e par les paysans pour amÃ©liorer la vitesse de pousse de leurs sucettes. Cette poudre multipliera votre production de sucettes par trois !");
Database.addText("fr.gridItemPName", "La pierre P");
Database.addText("fr.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("fr.gridItemLName", "La pierre L");
Database.addText("fr.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("fr.gridItemAName", "La pierre A");
Database.addText("fr.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("fr.gridItemYName", "La pierre Y");
Database.addText("fr.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("fr.gridItemRedSharkFinName", "Un aileron de requin magique rouge");
Database.addText("fr.gridItemRedSharkFinDescription", "Cet aileron magique va grandement augmenter les dÃ©gÃ¢ts de votre sort de boule de feu. Cette boule de feu devient enfin utile.");
Database.addText("fr.gridItemGreenSharkFinName", "Un aileron de requin magique vert");
Database.addText("fr.gridItemGreenSharkFinDescription", "Cet aileron magique apportera le pouvoir de la nature Ã  votre ferme Ã  sucettes! Votre production sera multipliÃ©e par 5.");
Database.addText("fr.gridItemPurpleSharkFinName", "Un aileron de requin magique violet");
Database.addText("fr.gridItemPurpleSharkFinDescription", "Cet aileron magique vous apportera un nouveau sort de magie noire. Vous ne pouvez l'utiliser qu'une fois par quÃªte. Faites attention avec celui-lÃ  !");
Database.addText("fr.gridItemTalkingCandyName", "Un bonbon qui parle");
Database.addText("fr.gridItemTalkingCandyDescription", "Ce bonbon qui parle est apparu aprÃ¨s que vous ayez placÃ© les quatre pierres en haut de la tour du chÃ¢teau. Il pourrait vous Ãªtre utile pour ouvrir la candy box...");
Database.addText("fr.inventorySpecialNothingEqItem", "Rien");
Database.addText("fr.eqItemWeaponWoodenSwordName", "Ã‰pÃ©e en bois");
Database.addText("fr.eqItemWeaponWoodenSwordDescription", "Une simple Ã©pÃ©e en bois");
Database.addText("fr.eqItemWeaponIronAxeName", "Hache en fer");
Database.addText("fr.eqItemWeaponIronAxeDescription", "Une simple hache en fer. Bien aiguisÃ©e. Plus puissante que l'Ã©pÃ©e en bois.");
Database.addText("fr.eqItemWeaponPolishedSilverSwordName", "Ã‰pÃ©e en argent travaillÃ©e");
Database.addText("fr.eqItemWeaponPolishedSilverSwordDescription", "Une Ã©pÃ©e puissante, recouverte de piques.");
Database.addText("fr.eqItemWeaponTrollBludgeonName", "Le gourdin du troll");
Database.addText("fr.eqItemWeaponTrollBludgeonDescription", "Vous avez pris ce gourdin au troll gardant le pont. Il est lent, mais Ã©crase vos ennemis assez efficacement.");
Database.addText("fr.eqItemWeaponTribalSpearName", "Une lance tribale");
Database.addText("fr.eqItemWeaponTribalSpearDescription", "Vous avez trouvÃ© cette lance tribale sur le corps d'un guerrier tribal perdu dans un gros trou dans le sol. Elle est un peu difficile Ã  manipuler au dÃ©but, mais une fois qu'on s'est habituÃ©, c'est une bonne arme.");
Database.addText("fr.eqItemWeaponSummoningTribalSpearName", "Une lance tribale d'invocation");
Database.addText("fr.eqItemWeaponSummoningTribalSpearDescription", "Cette lance tribale magique, en plus d'Ãªtre un peu plus puissante que la lance tribale normale, va invoquer frÃ©quemment des guerriers tribals pour vous aider pendant pendant vos quÃªtes.");
Database.addText("fr.eqItemWeaponMonkeyWizardStaffName", "Le bÃ¢ton du singe-magicien");
Database.addText("fr.eqItemWeaponMonkeyWizardStaffDescription", "Ce bÃ¢ton appartenait au singe-magicien nu que vous avez trouvÃ© dans la grotte. Il va rÃ©guliÃ¨rement lancer des sorts de lui-mÃªme en direction de vos ennemis.");
Database.addText("fr.eqItemWeaponEnchantedMonkeyWizardStaffName", "Le bÃ¢ton du singe-magicien (enchantÃ©)");
Database.addText("fr.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Ce bÃ¢ton est plus rapide que la version non enchantÃ©e, et va Ã©galement lancer beaucoup plus de sorts.");
Database.addText("fr.eqItemWeaponGiantSpoonName", "Une cuillÃ¨re gÃ©ante");
Database.addText("fr.eqItemWeaponScytheName", "Une faux");
Database.addText("fr.eqItemWeaponScytheDescription", "On dit que cette faux appartenait Ã  la mort elle-mÃªme. Elle est extrÃªmement rapide.");
Database.addText("fr.eqItemWeaponGiantSpoonDescription", "Cette cuillÃ¨re gÃ©ante Ã©tait Ã  l'intÃ©rieure d'une thÃ©iÃ¨re gÃ©ante dans la forteresse du dÃ©sert. Vous ne savez pas si quiconque la dÃ©jÃ  utilisÃ©e en tant que cuillÃ¨re, mais si c'est le cas, Ã§a devait quelqu'un d'Ã©norme. Vous ne voulez probablement pas le rencontrer.");
Database.addText("fr.eqItemWeaponGiantSpoonOfDoomName", "La CuillÃ¨re gÃ©ante du Destin");
Database.addText("fr.eqItemWeaponGiantSpoonOfDoomDescription", "Cette cuillÃ¨re gÃ©ante est encore plus puissante que la cuillÃ¨re gÃ©ante normale que vous pourriez trouver, par exemple, dans une thÃ©iÃ¨re. Elle est assez lente, cependant.");
Database.addText("fr.eqItemHatMerchantHatName", "Le chapeau du marchand");
Database.addText("fr.eqItemHatMerchantHatDescription", "Ce chapeau vous a Ã©tÃ© vendu par le marchand de bonbons. Le marchand de bonbons adore les bonbons. Ce chapeau multipliera par 7 les bonbons que vous trouvez pendant les quÃªtes !");
Database.addText("fr.eqItemHatSorceressHatName", "Le chapeau de la sorciÃ¨re");
Database.addText("fr.eqItemHatSorceressHatDescription", "Ce chapeau vous a Ã©tÃ© vendu par la sorciÃ¨re. Il amÃ©liorera les effets de vos sorts et potions.");
Database.addText("fr.eqItemHatOctopusKingCrownName", "La couronne du Roi Poulpe");
Database.addText("fr.eqItemHatOctopusKingCrownDescription", "Quand vous portez cette couronne, vous vous sentez beaucoup plus confiant. Elle n'apporte aucun avantage en quÃªte, mais la confiance en soi c'est important !");
Database.addText("fr.eqItemHatOctopusKingCrownWithJaspersName", "La couronne du Roi Poulpe surmontÃ©e de jaspes");
Database.addText("fr.eqItemHatOctopusKingCrownWithJaspersDescription", "Cette couronne enchantÃ©e est faite d'or et de jaspes rouges. Pendant les quÃªtes, elle va lancer frÃ©quemment de puissantes boules de feu magiques autour de vous. Et en plus, elle brille !");
Database.addText("fr.eqItemHatOctopusKingCrownWithObsidianName", "La couronne du Roi Poulpe surmontÃ©e d'obsidienne");
Database.addText("fr.eqItemHatOctopusKingCrownWithObsidianDescription", "Cette couronne enchantÃ©e est faite d'or et d'obsidienne. Elle est superbe. Pendant les quÃªtes, elle invoquera de temps en temps un Roi Poulpe combattant Ã  vos cÃ´tÃ©s. Quel alliÃ© tentaculaire !");
Database.addText("fr.eqItemGlovesLeatherGlovesName", "Gants en cuir");
Database.addText("fr.eqItemGlovesLeatherGlovesDescription", "Ces gants ne font tout simplement rien. Mais ils sont doux et agrÃ©ables Ã  porter, au moins !");
Database.addText("fr.eqItemGlovesRedEnchantedGlovesName", "Gants enchantÃ©s rouges");
Database.addText("fr.eqItemGlovesRedEnchantedGlovesDescription", "Ces gants enchantÃ©s Ã©mettent une faible lueur rouge quand il fait sombre autour de vous. Pendant les quÃªtes, ils vont alÃ©atoirement lancer de petites boules de feu en direction de vos enemis, ce qui peut clairement Ãªtre utile.");
Database.addText("fr.eqItemGlovesPinkEnchantedGlovesName", "Gants enchantÃ©s roses");
Database.addText("fr.eqItemGlovesPinkEnchantedGlovesDescription", "Ces gants enchantÃ©s laissent une trace rose sur tout ce que vous touchez. Pendant les quÃªtes, ils vous soigneront continuellement.");
Database.addText("fr.eqItemBootsRocketBootsName", "Bottes roquettes");
Database.addText("fr.eqItemBootsRocketBootsDescription", "Ces bottes roquettes gÃ©niales vous permettent de sauter en plein air, comme si vous voliez !");
Database.addText("fr.eqItemBootsLeatherBootsName", "Bottes en cuir");
Database.addText("fr.eqItemBootsLeatherBootsDescription", "De simples bottes en cuir. Rien de spÃ©cial.");
Database.addText("fr.eqItemBootsBootsOfIntrospectionName", "Les bottes d'introspection");
Database.addText("fr.eqItemBootsBootsOfIntrospectionDescription", "Prenez le temps de respirer et de vous calmer. Si vous portez ces bottes, vous ne bougerez plus tant que vous toucherez le sol.");
Database.addText("fr.eqItemBodyArmoursLightweightBodyArmourName", "Une armure lÃ©gÃ¨re");
Database.addText("fr.eqItemBodyArmoursLightweightBodyArmourDescription", "Cette armure vous offrira une faible protection. Vous serez lÃ©gÃ¨rement plus rÃ©sistant face aux attaques de vos ennemis.");
Database.addText("fr.eqItemBodyArmoursKnightBodyArmourName", "Une armure de chevalier");
Database.addText("fr.eqItemBodyArmoursKnightBodyArmourDescription", "Cette solide armure vous protÃ©gera. Vous serez plus rÃ©sistant face aux attaques de vos ennemis.");
Database.addText("fr.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Une armure de chevalier enchantÃ©e");
Database.addText("fr.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Cette armure est trÃ¨s spÃ©ciale. Vous serez BEAUCOUP plus rÃ©sistant face aux attaques de vos ennemis, mais les dommages de l'arme que vous utilisez seront divisÃ©s par deux.");
Database.addText("fr.mapVillageForgeBuyWoodenSwordButton", "Acheter une Ã©pÃ©e en bois (150 bonbons)");
Database.addText("fr.mapVillageForgeBuyWoodenSwordSpeech", "Merci pour l'achat ! Cette Ã©pÃ©e en bois est peu puissante, mais c'est un dÃ©but.");
Database.addText("fr.mapVillageForgeBuyIronAxeButton", "Acheter une hache en fer (400 bonbons)");
Database.addText("fr.mapVillageForgeBuyIronAxeSpeech", "J'espÃ¨re que vous aimerez cette hache en argent, je viens juste de l'aiguiser pour vous !");
Database.addText("fr.mapVillageForgeBuyPolishedSilverSwordButton", "Acheter une Ã©pÃ©e en argent travaillÃ©e (2 000 bonbons)");
Database.addText("fr.mapVillageForgeBuyPolishedSilverSwordSpeech", "Ã‡a m'a pris beaucoup de temps pour crÃ©er cette Ã©pÃ©e. Je vous assure qu'elle vaut son prix.");
Database.addText("fr.mapVillageForgeBuyLightweightBodyArmourButton", "Acheter une armure lÃ©gÃ¨re (15 000 bonbons)");
Database.addText("fr.mapVillageForgeBuyLightweightBodyArmourSpeech", "Cette armure vous apportera une protection contre vos ennemis.");
Database.addText("fr.mapVillageForgeBuyScytheButton", "Acheter une faux (5 000 000 bonbons)");
Database.addText("fr.mapVillageForgeBuyScytheSpeech", "Cela m'a demandÃ© plusieurs mois pour rÃ©aliser cette faux. C'est une vraie oeuvre d'art. C'est probablement l'arme la plus rapide que vous serez jamais capable d'utiliser. Bonne chance !");
Database.addText("fr.wishingWellThrowFirstCandyButton", "Jeter un bonbon dans le puits");
Database.addText("fr.wishingWellCandyIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en Ã©change de sucreries ! Quand tu jetteras des bonbons dans moi, je soignerai tes blessures.");
Database.addText("fr.wishingWellThrewCandiesSpeech", "Tes blessures sont soignÃ©es !");
Database.addText("fr.wishingWellNoWoundSpeech", "Tu n'as pas de blessure Ã  soigner !");
Database.addText("fr.wishingWellThrowFirstLollipopButton", "Jeter une sucette dans le puits");
Database.addText("fr.wishingWellLollipopIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en Ã©change de sucreries ! Quand tu jetteras des sucettes dans moi, je les convertirai en bonbons.");
Database.addText("fr.wishingWellThrewLollipopsSpeech", "Tes sucettes sont converties en bonbons ! Deux sucettes pour un bonbon.");
Database.addText("fr.wishingWellThrowChocolateBarButton", "Jeter une barre de chocolat dans le puits");
Database.addText("fr.wishingWellChocolateBarIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en Ã©change de sucreries ! J'adore les barres de chocolat. Je les adore vraiment. Pour chaque barre de chocolat que tu jettera en moi, y compris celle-ci, un enchantement magique te sera accordÃ©.");
Database.addText("fr.wishingWellThrewChocolateBarSpeech", "Quel objet souhaites-tu enchanter ?");
Database.addText("fr.wishingWellThrowPainAuChocolatButton", "Jeter un pain au chocolat dans le puits");
Database.addText("fr.wishingWellPainAuChocolatIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en Ã©change de sucreries ! Quand tu jetteras un pain en chocolat dans moi, tu seras dotÃ© d'un don trÃ¨s spÃ©cial. Choisis sagement.");
Database.addText("fr.wishingWellThrewPainAuChocolatSpeech", "Merci pour la pain au chocolat ! Tu peux maintenant choisir ton don.");
Database.addText("fr.wishingWellChooseGift", "Choisis ton don !");
Database.addText("fr.wishingWellChooseGiftButton", "Choisir");
Database.addText("fr.wishingWellGiftDoneSpeech", "C'est fait ! Tu as maintenant un nouveau don. Il apparaitra dans le panneau de statistiques de ton inventaire.");
Database.addText("fr.wishingWellNoPossibleEnchantment", "Pas d'enchantement possible");
Database.addText("fr.wishingWellChooseEnchantment", "Choisissez l'enchantement");
Database.addText("fr.wishingWellEnchantButton", "Enchanter");
Database.addText("fr.wishingWellEnchantmentDoneSpeech", "Et voilÃ  ! Ton objet est enchantÃ©.");
Database.addText("fr.pierLighthouseButton", "Aller au phare par bateau");
Database.addText("fr.pierTheSeaButton", "Sauter dans la mer");
Database.addText("fr.lonelyHouseOpenBox", "Ouvrir la boÃ®te");
Database.addText("fr.lonelyHouseShakeBox", "Secouer la boÃ®te");
Database.addText("fr.lonelyHouseBreakLock", "Casser le verrou");
Database.addText("fr.lonelyHouseKickBox", "Donner un coup de pied dans la boÃ®te");
Database.addText("fr.lonelyHouseAskTheBoxToOpenItself", "Demander Ã  la boÃ®te de s'ouvrir d'elle-mÃªme");
Database.addText("fr.lonelyHouseLureTheBoxWithACandy", "AppÃ¢ter la boÃ®te avec un bonbon");
Database.addText("fr.lonelyHouseTakeTheBox", "Prendre la boÃ®te avec vous, il faut probablement une clÃ© pour l'ouvrir de toute faÃ§on");
Database.addText("fr.lonelyHouseOpenBoxResult", "La boÃ®te est verouillÃ©e");
Database.addText("fr.lonelyHouseShakeBoxResult", "Rien ne se passe");
Database.addText("fr.lonelyHouseBreakLockResult", "Le verrou rÃ©siste");
Database.addText("fr.lonelyHouseKickBoxResult", "Votre pied vous fait un peu mal, mais rien ne se passe");
Database.addText("fr.lonelyHouseAskTheBoxToOpenItselfResult", "...vous parlez Ã  une boÃ®te, vous savez ?");
Database.addText("fr.lonelyHouseLureTheBoxWithACandyResult", "La boÃ®te n'a pas l'air d'y prÃªter attention");
Database.addText("fr.lonelyHouseTakeTheBoxResult", "Il y a probablement quelque chose d'intÃ©ressant dans cette candy box.");
Database.addText("fr.lollipopFarmConstructMill", "Construire un moulin (10 000 sucettes)");
Database.addText("fr.lollipopFarmFeedMill", "Nourrir le moulin");
Database.addText("fr.lollipopFarmCurrentCandiesProduction", "Production actuelle de bonbons");
Database.addText("fr.lollipopFarmDigPond", "Creuser un bassin (100 000 sucettes)");
Database.addText("fr.lollipopFarmBuyLolligator", "Acheter un lolligator (1200 bonbons)");
Database.addText("fr.lollipopFarmLolligatorsConversionText", "Conversion bonbons -> sucettes activÃ©e");
Database.addText("fr.lighthouseAskButton", "Demander");
Database.addText("fr.lighthouseQuestionWho", "Qui Ãªtes-vous ?");
Database.addText("fr.lighthouseQuestionWhoSpeech", "Je suis un trÃ¨s vieux cyclope.");
Database.addText("fr.lighthouseQuestionWhat", "Que faites-vous ici ?");
Database.addText("fr.lighthouseQuestionWhatSpeech", "Je vis ici toute la journÃ©e, attendant l'arrivÃ©e d'un bateau. Cela fait trÃ¨s longtemps que je n'en ai pas vu, mais je dois rester ici, Ã  fixer la mer, car un bateau pourrait arriver.");
Database.addText("fr.lighthouseQuestionWhyEatCandies", "Pourquoi est-ce que je devrais manger des bonbons ?");
Database.addText("fr.lighthouseQuestionWhyEatCandiesSpeech", "Parce que c'est bon pour la santÃ© !");
Database.addText("fr.lighthouseQuestionCandyBox", "Qu'est-ce qu'une candy box ?");
Database.addText("fr.lighthouseQuestionCandyBoxSpeech", "C'est une trÃ¨s vieille boÃ®te qu'on dit contenir tous les bonbons du monde. D'aprÃ¨s les lÃ©gendes, quiconque arrivera Ã  l'ouvrir possÃ¨derait tellement de bonbons que tout serait possible.");
Database.addText("fr.lighthouseQuestionDragon", "Le dragon m'a dit de venir ici parce que je veux des bonbons.");
Database.addText("fr.lighthouseQuestionDragonSpeech", "Oh, je vois... Eh bien, je ne peux peux pas t'en donner directement, mais je peux te donner quelque chose d'indispensable pour qu'au final tu aies BEAUCOUP de bonbons. Je dois juste te tester auparavant. Parce que ce que j'ai ne peut Ãªtre donnÃ© Ã  n'importe qui. RÃ©sous ce puzzle et ce sera Ã  toi.");
Database.addText("fr.lighthouseFoundStone", "Bravo! Tu as passÃ© le test et trouvÃ© la pierre. Elle est trÃ¨s prÃ©cieuse, mais n'est utile que si tu as trois autres pierres du mÃªme genre. Bonne chance !");
Database.addText("fr.lighthouseFoundStoneAgain", "Bravo, tu as encore rÃ©ussi le puzzle. Tu as l'air d'aimer Ã§a.");
Database.addText("fr.saveLocalSaveTitle", "Sauvegarde par navigateur");
Database.addText("fr.saveLocalSaveWhy", "Choisissez la sauvegarde locale si vous voulez continuer de jouer sur cet appareil et ce navigateur.");
Database.addText("fr.saveLocalSaveWarning0", "Votre navigateur ne semble pas supporter le HTML5.");
Database.addText("fr.saveLocalSaveWarning1", "Vous devez mettre Ã  jour votre navigateur pour pouvoir sauvegarder localement.");
Database.addText("fr.saveLocalSaveChooseSlot", "Choisissez un emplacement de sauvegarde :");
Database.addText("fr.saveLocalSaveAutosaveEnabled", "Sauvegarde auto activÃ©e");
Database.addText("fr.saveLocalSaveChooseWhatToDo", "Choisissez que faire :");
Database.addText("fr.saveLocalSaveSaveButton", "Sauvegarder");
Database.addText("fr.saveLocalSaveAutosaveButton", "Sauvegarder toutes les 10 minutes");
Database.addText("fr.saveLocalSaveDisableAutosaveButton", "DÃ©sactiver la sauvegarde auto");
Database.addText("fr.saveFileSaveTitle", "Sauvegarde sous forme de texte");
Database.addText("fr.saveFileSaveWhy0", "Choisissez la sauvegarde sous forme de texte si :");
Database.addText("fr.saveFileSaveWhy1", "Vous voulez continuer de jouer sur un autre appareil ou navigateur");
Database.addText("fr.saveFileSaveWhy2", "Vous voulez partager votre sauvegarde avec quelqu'un d'autre");
Database.addText("fr.saveFileSaveWhy3", "Pour une raison quelconque vous voulez vider le cache de votre navigateur");
Database.addText("fr.saveFileSaveWhy4", "(ce qui effacerait vos sauvegardes locales)");
Database.addText("fr.saveFileSaveButton", "Obtenir la partie actuelle sous forme de texte");
Database.addText("fr.saveFileSaveWarning", "Maintenant copiez ce texte quelque part ! (dans un fichier, par exemple)");
Database.addText("fr.saveLocalLoadTitle", "Chargement par navigateur");
Database.addText("fr.saveLocalLoadYouCan", "Vous pouvez charger une sauvegarde locale en utilisant les liens suivants :");
Database.addText("fr.saveLocalLoadThanksTo", "GrÃ¢ce Ã  la magie du HTML5, vous devriez pouvoir utiliser ces liens mÃªme hors-ligne.");
Database.addText("fr.saveFileLoadTitle", "Chargement sous forme de texte");
Database.addText("fr.saveFileLoadPaste", "Collez votre sauvegarde ci-dessous, puis cliquez sur le bouton \"Load\"");
Database.addText("fr.saveFileLoadButton", "Charger");
Database.addText("fr.mountainsText0", "Vous avez repÃ©rÃ© un truc dans les montagnes !");
Database.addText("fr.mountainsText1", "Ã‡a a l'air intÃ©ressant. Peut-Ãªtre que Ã§a pourrait Ãªtre utile.");
Database.addText("fr.mountainsTextButton", "Escalader les montagnes pour rÃ©cupÃ©rer le truc");
Database.addText("fr.mountainsTextAfter", "Vous avez trouvÃ© un bÃ¢ton sauteur ! Il a Ã©tÃ© ajoutÃ© Ã  votre inventaire.");
Database.addText("fr.secondHouseIntroSpeech", "Bonjour, je suis le marchand de bonbons. Je ferais n'importe quoi contre des bonbons. De quoi avez-vous besoin ?");
Database.addText("fr.secondHouseLollipop1Speech", "C'est une sucette goÃ»t citron. Ma prÃ©fÃ©rÃ©e ! Elle coÃ»te 60 bonbons, mais Ã§a vaut le coup.");
Database.addText("fr.secondHouseLollipop2Speech", "Celle-ci est une sucette goÃ»t fraise. Ã‡a a bon goÃ»t. J'aime bien sa couleur rouge. Seulement 60 bonbons !");
Database.addText("fr.secondHouseLollipop3Speech", "C'est une sucette goÃ»t citrouille. Je parie que vous n'en avez jamais goÃ»tÃ© ! 60 bonbons et elle est Ã  vous.");
Database.addText("fr.secondHouseLollipopButtonText", "Acheter cette sucette (60 bonbons)");
Database.addText("fr.secondHouseMerchantHatSpeech", "Je pourrais vous vendre mon chapeau, mais il est trÃ¨s prÃ©cieux, vous savez... Vous allez devoir me donner beaucoup de bonbons en Ã©change. Disons un million de bonbons. Ã‡a parait honÃªte, non ?");
Database.addText("fr.secondHouseMerchantHatButtonText", "Acheter le chapeau du marchand (1 000 000 de bonbons)");
Database.addText("fr.secondHouseTimeRingSpeech", "C'est un anneau temporel. Il est un peu magique. Il vous permet de ralentir le temps en cas de problÃ¨me.");
Database.addText("fr.secondHouseTimeRingButtonText", "Acheter l'anneau temporel (500 bonbons)");
Database.addText("fr.secondHouseLeatherGlovesSpeech", "Ces gants en cuir sont fait avec du cuir de chameau, c'est de la bonne qualitÃ©. J'en ai beaucoup en stock, c'est pour Ã§a qu'ils sont si peu chers : seulement 300 bonbons !");
Database.addText("fr.secondHouseLeatherGlovesButtonText", "Acheter une paire de gants en cuir (300 bonbons)");
Database.addText("fr.secondHouseLeatherBootsButtonText", "Acheter une paire de bottes en cuir (300 bonbons)");
Database.addText("fr.secondHouseLeatherBootsSpeech", "Ces bottes en cuir de haute qualitÃ©, faites en cuir de chameau, garderont vos pieds au chaud.");
Database.addText("fr.secondHouseChocolateBarSpeech", "C'est une barre de chocolat. Je ne sais pas Ã  quoi Ã§a sert, mais il se trouve que c'est assez rare, ce qui explique le prix. 800 bonbons et elle est Ã  vous !");
Database.addText("fr.secondHouseChocolateBarButtonText", "Acheter la barre de chocolat (800 bonbons)");
Database.addText("fr.outsideTheHoleButton", "Sauter dans ce gros trou dans le sol");
Database.addText("fr.theCaveExitText0", "Vous avez enfin atteint la sortie de la grotte");
Database.addText("fr.theCaveExitText1", "Vous pouvez voir une grande forÃªt au dehors");
Database.addText("fr.theCaveExitButtonText", "Sortir de la grotte");
Database.addText("fr.theCaveFirstSentenceWentStraight", "Vous Ãªtes allÃ© tout droit.");
Database.addText("fr.theCaveFirstSentenceWentLeft", "You avez choisi le chemin de gauche.");
Database.addText("fr.theCaveFirstSentenceWentRight", "Vous avez choisi le chemin de droite.");
Database.addText("fr.theCaveFirstSentenceYouAre", "Vous Ãªtes dans une grotte. Trois chemins s'offrent Ã  vous.");
Database.addText("fr.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Vous repÃ©rez une chose Ã©trange sur le sol en face de vous.");
Database.addText("fr.theCavePattern_ChocolateBarNowSeeChocolateBar", "Vous repÃ©rez une barre de chocolat en face de vous.");
Database.addText("fr.theCavePattern_TreasureMapSentence", "Vous voyez des petits cailloux Ã©trangement disposÃ©s sur le sol.");
Database.addText("fr.theCavePattern_MonkeyWizardSentence", "Vous tombez sur un singe-magicien nu.");
Database.addText("fr.theCavePattern_MonkeyWizardButton", "Le dÃ©fier");
Database.addText("fr.theCavePattern_OctopusKingSentence", "Vous tombez sur le Roi Poulpe. Il a l'air mÃ©chant.");
Database.addText("fr.theCavePattern_OctopusKingButton", "Le dÃ©fier");
Database.addText("fr.fortressInsideText0", "Vous Ãªtes Ã  l'intÃ©rieur de la forteresse du dÃ©sert.");
Database.addText("fr.fortressInsideText1", "Vous pouvez choisir entre trois portes, chacune menant Ã  une grande piÃ¨ce avec un trÃ©sor Ã  la clÃ©.");
Database.addText("fr.fortressInsideText2", "Chacune d'elles mÃ¨ne Ã  une grande piÃ¨ce avec un trÃ©sor Ã  la clÃ©.");
Database.addText("fr.fortressInsideEnterRoom1", "Entrer dans la premiÃ¨re piÃ¨ce");
Database.addText("fr.fortressInsideEnterRoom2", "Entrer dans la deuxiÃ¨me piÃ¨ce");
Database.addText("fr.fortressInsideEnterRoom3", "Entrer dans la troisiÃ¨me piÃ¨ce");
Database.addText("fr.treasureButtonDig", "Creuser");
Database.addText("fr.treasureButtonYouFound", "Vous avez trouvÃ© trois barres de chocolat !");
Database.addText("fr.sorceressHutHello", "Bonjour, je suis la sorciÃ¨re. Je pourrais vous apprendre une chose ou deux Ã  propos de la magie. Je pourrais vous donner des choses intÃ©ressantes, ou lancer des sorts pour vous. Mais tout a un prix ! Et ce prix sera des sucettes. Beaucoup de sucettes.");
Database.addText("fr.sorceressHutClickedGrimoire", "C'est un grimoire fait pour les dÃ©butants. En l'emportant avec vous pendant les quÃªtes, vous pourrez lancer des sorts simples mais utiles. Vous en avez besoin ! Seulement 5 000 sucettes.");
Database.addText("fr.sorceressHutBuyGrimoireButton", "Acheter ce grimoire (5 000 sucettes)");
Database.addText("fr.sorceressHutBuyGrimoireSpeech", "Merci pour l'achat ! Vous pourrez lancer trois sorts avec ce grimoire. Bonne chance !");
Database.addText("fr.sorceressHutClickedGrimoire2", "C'est un grimoire avancÃ©. En l'emportant avec vous pendant les quÃªtes, vous pourrez lancer deux sorts avancÃ©s. Je l'ai rÃ©digÃ© moi-mÃªme, ce qui n'Ã©tait pas simple. 20 000 sucettes est un prix honnÃªte.");
Database.addText("fr.sorceressHutBuyGrimoire2Button", "Acheter ce grimoire (20 000 sucettes)");
Database.addText("fr.sorceressHutBuyGrimoire2Speech", "Merci de l'achat ! Vous pourrez lancer deux sorts avec ce grimoire. Utilisez-les sagement !");
Database.addText("fr.sorceressHutClickedCauldron", "C'est mon chaudron. Il me permet de prÃ©parer des potions magiques. Je pourrais vous le vendre, mais il est trÃ¨s prÃ©cieux... il vous en coÃ»tera 100 000 sucettes.");
Database.addText("fr.sorceressHutBuyCauldronButton", "Acheter le chaudron (100 000 sucettes)");
Database.addText("fr.sorceressHutBuyCauldronSpeech", "Merci beaucoup ! 100 000 sucettes pour moi ! Je vous ai aussi donnÃ© un manuel de prÃ©paration de potions. Il va vous Ãªtre utile.");
Database.addText("fr.sorceressHutClickedHat", "J'ai un beau chapeau, en effet ! Mais je ne peux vraiment pas vous le vendre. Il est bieeeen trop prÃ©cieux. Vraiment, je ne peux pas. N'insistez pas. Non. Non non non je ne devrais pas faire Ã§a. Oh, bon, je l'Ã©changerai, mais contre 1 000 000 000 de sucettes. Vous ne serez probablement pas capable de payer Ã§a de toute faÃ§on.");
Database.addText("fr.sorceressHutBuyHatButton", "Acheter le chapeau (1 000 000 000 de sucettes)");
Database.addText("fr.sorceressHutBuyHatSpeech", "Une milliard de sucettes pour moiiii ! Mais je n'ai plu de chapeau... mais un milliard de sucettes, woah ! .. Ã‡a valait le coup.");
Database.addText("fr.cauldronPreviousPageButton", "Page prÃ©cÃ©dente");
Database.addText("fr.cauldronNextPageButton", "Page suivante");
Database.addText("fr.cauldronWhatYouWantToPut", "Ce que vous voulez mettre dans le chaudron");
Database.addText("fr.cauldronWhatIsIn", "Ce qui est dans le chaudron");
Database.addText("fr.cauldronWhatYouCanDo", "Ce que vous pouvez faire avec");
Database.addText("fr.castleBigRoomComment", "Une grande piÃ¨ce");
Database.addText("fr.castleARoomComment", "Une piÃ¨ce");
Database.addText("fr.castleADarkRoomComment", "Une piÃ¨ce sombre");
Database.addText("fr.castleCastleEntranceComment", "L'entrÃ©e du chÃ¢teau");
Database.addText("fr.castleTowerEntranceComment", "L'entrÃ©e de la tour");
Database.addText("fr.castleNougatMonsterComment", "Attaquer le monstre en nougat gÃ©ant");
Database.addText("fr.castleGuardsComment", "Attaquer les gardes");
Database.addText("fr.castleStairsComment", "Escaliers");
Database.addText("fr.buttonBackToTheCastle", "Revenir au chÃ¢teau");
Database.addText("fr.castleBigRoomHovenSpeechSad", "Salut ! Je suis un trÃ¨s vieux four Ã  pain. J'avais l'habitude de cuire des tas de bonnes pÃ¢tisseries, mais plus personne ne m'utilise. Peut-Ãªtre... peut-Ãªtre que tu pourrais m'aider ? Laisse-moi juste te prendre quelques sucreries ! Ne t'en fais pas, tu ne vas pas lre regretter. Tu peux me faire confiance.");
Database.addText("fr.castleBigRoomHovenNotEnough", "Oh... tu n'as pas assez de sucreries, je ne peux rien faire. Je suis juste inutile. Je suis le four Ã  pain inutile, c'est comme Ã§a que tu devrais m'appeler.");
Database.addText("fr.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay ! Merci baucoup ! J'ai utilisÃ© 100 bonbons et une barre de chocolat, et je t'ai fait... un pain au chocolat ! C'est ma pÃ¢tisserie prÃ©fÃ©rÃ©e, j'espÃ¨re que tu aimes Ã§a aussi !");
Database.addText("fr.castleBigRoomHovenSpeechHappy", "Hey ! Si tu veux que je cuise une autre pÃ¢tisserie, dis-le moi ! J'adorerais t'aider.");
Database.addText("fr.castleBigRoomHovenSpeechHappyNotEnough", "Oh, tu n'as pas assez de sucreries, malheureusement. J'ai besoin de 100 bonbons et d'une barre de chocolat. Reviens quand tu auras Ã§a !");
Database.addText("fr.castleBigRoomHovenLetHovenTakeButton", "Laisser le four prendre toutes les sucreries qu'il veut prendre");
Database.addText("fr.castleBigRoomHovenThanks", "Merci, four !");
Database.addText("fr.dragonStopTickling", "Eh, toi ! ArrÃªte de me chatouiller, s'il te plaÃ®t.");
Database.addText("fr.dragonStopTicklingButton", "Uh, oh, dÃ©solÃ©, j'ai cru que je devais vous attaquer");
Database.addText("fr.dragonTalking", "Je suis le dragon et ceci est mon chÃ¢teau. Je vois que vous avez rÃ©ussi Ã  entrer, vous devez Ãªtre trÃ¨s courageux... J'adorerais aider quelqu'un comme vous. Que recherchez-vous ?");
Database.addText("fr.dragonTalkingChallengeButton", "Du dÃ©fi");
Database.addText("fr.dragonTalkingFameButton", "La gloire");
Database.addText("fr.dragonTalkingCandiesButton", "Des bonbons");
Database.addText("fr.dragonTalkingChallengeSpeech", "Oh, comme Ã§a vous voulez du dÃ©fi ? Je pense que vous devriez faire un tour en enfer, il est de notoriÃ©tÃ© publique que le diable est un adversaire coriace. Sautez sur mon dos et je vous y emmÃ¨nerai !");
Database.addText("fr.dragonTalkingFameSpeech", "Le meilleur moyen de devenir cÃ©lÃ¨bre est d'affronter le dÃ©veloppeur lui-mÃªme. Je sais oÃ¹ il vit que je pourrais vous y emmener. Mais soyez prÃªt, ce ne sera pas facile.");
Database.addText("fr.dragonTalkingCandiesSpeech", "Au final, la chose que nous voulons tous ce sont des bonbons, n'est-ce pas ? Je pense qu'un des mes amis pourrait vous aider. Vous le reconnaitrez aisÃ©ment, il n'a qu'un seul oeil. Dites-lui juste que vous me connaissez.");
Database.addText("fr.dragonTalkingChallengeAnswer", "C'est parti !");
Database.addText("fr.dragonTalkingFameAnswer", "Je suis prÃªt.");
Database.addText("fr.dragonTalkingCandiesAnswer", "D'accord, merci !");
Database.addText("fr.buttonBackToCastle", "Revenir au chÃ¢teau");
Database.addText("fr.talkingCandySpeechNoBox", "Hey ! Je suis le bonbon qui parle. Tu as presque terminÃ© le jeu. Tu dois juste trouver la candy box. Elle est dans une maison en dehors du village. C'est la derniÃ¨re Ã©tape !");
Database.addText("fr.talkingCandySpeech1", "Hey ! Je suis le bonbon qui parle. Bravo, tu as terminÃ© le jeu ! Je vais ouvrir ta candy box pour toi, c'est ta rÃ©compense. Je peux y aller ?");
Database.addText("fr.talkingCandySpeech2", "C'est fait ! Tu peux y entrer maintenant. J'espÃ¨re que tu as aimÃ© le jeu :)");
Database.addText("fr.talkingCandyButton", "Oui !!");
Database.addText("fr.lighthousePuzzleResetButton", "Recommencer");
Database.addText("ru.mapVillageComment", "Ð”ÐµÑ€ÐµÐ²Ð½Ñ");
Database.addText("ru.mapFortressComment", "ÐŸÑƒÑÑ‚Ñ‹Ð½Ð½Ð°Ñ ÐºÑ€ÐµÐ¿Ð¾ÑÑ‚ÑŒ");
Database.addText("ru.mapATreeComment", "Ð”ÐµÑ€ÐµÐ²Ð¾");
Database.addText("ru.mapTheDesertComment", "ÐŸÑƒÑÑ‚Ñ‹Ð½Ñ");
Database.addText("ru.mapWishingWellComment", "ÐšÐ¾Ð»Ð¾Ð´ÐµÑ† Ð¶ÐµÐ»Ð°Ð½Ð¸Ð¹");
Database.addText("ru.mapLonelyHouseComment", "ÐžÐ´Ð¸Ð½Ð¾ÐºÐ¸Ð¹ Ð´Ð¾Ð¼Ð¸Ðº");
Database.addText("ru.mapForestComment", "Ð›ÐµÑ");
Database.addText("ru.mapCastleEntranceComment", "Ð’Ñ…Ð¾Ð´ Ð² Ð·Ð°Ð¼Ð¾Ðº");
Database.addText("ru.mapCastleComment", "Ð—Ð°Ð¼Ð¾Ðº");
Database.addText("ru.mapDragonComment", "Ð”Ñ€Ð°ÐºÐ¾Ð½");
Database.addText("ru.candyBoxEatCandiesButton", "Ð¡ÑŠÐµÑÑ‚ÑŒ Ð²ÑÐµ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹");
Database.addText("ru.candyBoxThrowCandiesButton", "Ð‘Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ 10 ÐºÐ¾Ð½Ñ„ÐµÑ‚ Ð½Ð° Ð·ÐµÐ¼Ð»ÑŽ");
Database.addText("ru.mapVillageAHouseComment", "Ð”Ð¾Ð¼");
Database.addText("ru.mapVillageForgeComment", "ÐšÑƒÐ·Ð½Ð¸Ñ†Ð°");
Database.addText("ru.buttonBackToTheMap", "ÐÐ°Ð·Ð°Ð´ Ðº ÐºÐ°Ñ€Ñ‚Ðµ");
Database.addText("ru.mapSorceressHutComment", "Ð¥Ð¸Ð¶Ð¸Ð½Ð° ÐºÐ¾Ð»Ð´ÑƒÐ½ÑŒÐ¸");
Database.addText("ru.buttonBackToTheVillage", "ÐÐ°Ð·Ð°Ð´ Ð² Ð´ÐµÑ€ÐµÐ²Ð½ÑŽ");
Database.addText("ru.mapATreeIntroductionSpeech", "ÐŸÑ€Ð¸Ð²ÐµÑ‚, Ñ - Ð±ÐµÐ»Ð¾Ñ‡ÐºÐ°. Ð¯ Ð¼Ð¾Ð³Ñƒ Ð´Ð°Ñ‚ÑŒ Ñ‚ÐµÐ±Ðµ ÐºÐ¾Ð½Ñ„ÐµÑ‚ Ð¸ Ð´Ñ€ÑƒÐ³Ð¸Ñ… Ð²ÐµÑ‰ÐµÐ¹. Ð¯ Ð·Ð½Ð°ÑŽ, ÐºÐ°Ðº ÑÐ¸Ð»ÑŒÐ½Ð¾ Ñ‚Ñ‹ Ð»ÑŽÐ±Ð¸ÑˆÑŒ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹. ÐÐ¾ Ð¼Ð½Ðµ Ñ‚Ð°Ðº Ð¾Ð´Ð¸Ð½Ð¾ÐºÐ¾ Ð² Ð»ÐµÑÑƒ.");
Database.addText("ru.mapATreeIntroductionButton", "Ð§ÐµÐ¼ Ñ Ð¼Ð¾Ð³Ñƒ Ñ‚ÐµÐ±Ðµ Ð¿Ð¾Ð¼Ð¾Ñ‡ÑŒ?");
Database.addText("ru.mapATreeFirstQuestion", "Ð¯ Ð·Ð°Ð´Ð°Ð¼ Ñ‚ÐµÐ±Ðµ Ð½ÐµÑÐºÐ¾Ð»ÑŒÐºÐ¾ Ð²Ð¾Ð¿Ñ€Ð¾ÑÐ¾Ð². Ð•ÑÐ»Ð¸ Ð¾Ñ‚Ð²ÐµÑ‚Ð¸ÑˆÑŒ Ð²ÐµÑ€Ð½Ð¾, ÑÐ°Ð¼Ñ‹Ðµ ÑÐ»Ð°Ð´ÐºÐ¸Ðµ ÑÐ»Ð°Ð´Ð¾ÑÑ‚Ð¸ ÑÑ‚Ð°Ð½ÑƒÑ‚ Ñ‚Ð²Ð¾Ð¸Ð¼Ð¸! ÐŸÐµÑ€Ð²Ñ‹Ð¹ Ð²Ð¾Ð¿Ñ€Ð¾Ñ: Ñ‚Ñ‹ Ð½Ð° ÑÐ°Ð¼Ð¾Ð¼ Ð´ÐµÐ»Ðµ Ð»ÑŽÐ±Ð¸ÑˆÑŒ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹? (Ð¾Ñ‚Ð²ÐµÑ‡Ð°Ð¹ Ð½Ð° Ð°Ð½Ð³Ð»Ð¸Ð¹ÑÐºÐ¾Ð¼)");
Database.addText("ru.mapATreeSecondQuestion", "ÐŸÑ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ð¾! Ð’Ð¾Ñ‚ 20 ÐºÐ¾Ð½Ñ„ÐµÑ‚. Ð Ñ‚ÐµÐ¿ÐµÑ€ÑŒ Ð¿Ñ€Ð¾Ð´Ð¾Ð»Ð¶Ð¸ ÑÑ‚Ð¾Ñ‚ Ð±ÑƒÐºÐ²ÐµÐ½Ð½Ñ‹Ð¹ Ñ€ÑÐ´, Ð¸ Ð¿Ð¾Ð»ÑƒÑ‡Ð¸ÑˆÑŒ Ð½Ð¾Ð²ÑƒÑŽ Ð½Ð°Ð³Ñ€Ð°Ð´Ñƒ: S, E, I, D, N, A, ?");
Database.addText("ru.mapATreeThirdQuestion", "ÐšÐ¾Ð½Ñ„ÐµÑ‚Ñ‹! Ð”ÐµÑ€Ð¶Ð¸ ÐµÑ‰Ñ‘ 100 ÐºÐ¾Ð½Ñ„ÐµÑ‚. Ð¡Ð»ÐµÐ´ÑƒÑŽÑ‰Ð¸Ð¹ Ð²Ð¾Ð¿Ñ€Ð¾Ñ: ÑÐºÐ¾Ð»ÑŒÐºÐ¾ ÐºÐ¾Ð½Ñ„ÐµÑ‚ Ñƒ ÑÐ°Ð¼Ð¾Ð³Ð¾ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ð½Ð¾Ð³Ð¾ Ñ‡ÐµÐ»Ð¾Ð²ÐµÐºÐ° Ð² Ð¼Ð¸Ñ€Ðµ?");
Database.addText("ru.mapATreeFourthQuestion", "Ð’Ð¾Ñ‚ Ñ‚ÐµÐ±Ðµ ÐµÑ‰Ñ‘ 500 ÐºÐ¾Ð½Ñ„ÐµÑ‚! Ð¡Ð»ÐµÐ´ÑƒÑŽÑ‰Ð°Ñ Ð½Ð°Ð³Ñ€Ð°Ð´Ð° Ð´Ð¾Ð»Ð¶Ð½Ð° Ð±Ñ‹Ñ‚ÑŒ ÐºÑƒÐ´Ð° Ð±Ð¾Ð»ÐµÐµ Ð¸Ð½Ñ‚ÐµÑ€ÐµÑÐ½Ð¾Ð¹... Ð’Ð¾Ñ‚ Ð·Ð°Ð³Ð°Ð´ÐºÐ°: Ð’ Ð´Ñ€ÐµÐ²Ð½ÐµÐ¼ Ð»ÐµÑÑƒ Ñ€Ð°ÑÑ‚Ñ‘Ñ‚ Ð¾Ñ‡ÐµÐ½ÑŒ ÑÑ‚Ð°Ñ€Ð¾Ðµ Ð´ÐµÑ€ÐµÐ²Ð¾, Ð² ÐºÐ¾Ñ‚Ð¾Ñ€Ð¾Ð¼ Ð¶Ð¸Ð²ÑƒÑ‚ ÑÐ°Ð¼Ñ‹Ðµ ÑƒÐ¼Ð½Ñ‹Ðµ Ð¶Ð¸Ð²Ð¾Ñ‚Ð½Ñ‹Ðµ Ð² ÑÑ‚Ð¾Ð¼ Ð¼Ð¸Ñ€Ðµ. Ð“Ð¾Ð²Ð¾Ñ€ÑÑ‚, Ñ‡Ñ‚Ð¾ Ñƒ ÑÑ‚Ð¾Ð³Ð¾ Ð´ÐµÑ€ÐµÐ²Ð° 60 ÐºÐ¾Ñ€Ð½ÐµÐ¹, 360 Ð²ÐµÑ‚Ð¾Ðº Ð¸ 2160 Ð»Ð¸ÑÑ‚Ð¾Ð². Ð¡ÐºÐ¾Ð»ÑŒÐºÐ¾ Ð¾Ñ‚Ð¼ÐµÑ‚Ð¸Ð½ Ð¼Ð¾Ð¶Ð½Ð¾ Ð½Ð°Ð¹Ñ‚Ð¸ Ð½Ð° ÑÑ‚Ð²Ð¾Ð»Ðµ ÑÑ‚Ð¾Ð³Ð¾ Ð´ÐµÑ€ÐµÐ²Ð°?");
Database.addText("ru.mapATreeFifthQuestion", "ÐŸÐ¾Ð·Ð´Ñ€Ð°Ð²Ð»ÑÑŽ! Ð•ÑÑ‚ÐµÑÑ‚Ð²ÐµÐ½Ð½Ð¾, Ñ Ð³Ð¾Ð²Ð¾Ñ€Ð¸Ð»Ð° Ð¾ ÑÐ²Ð¾Ñ‘Ð¼ Ð´ÐµÑ€ÐµÐ²Ðµ. Ð’Ð¾Ñ‚ Ñ‚ÐµÐ±Ðµ 3 Ð»ÐµÐ´ÐµÐ½Ñ†Ð°. Ð˜ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐ¹ Ð¸Ñ… Ð¼ÑƒÐ´Ñ€Ð¾! Ð¡Ð»ÐµÐ´ÑƒÑŽÑ‰Ð°Ñ Ð·Ð°Ð³Ð°Ð´ÐºÐ°, ÑÐ»ÑƒÑˆÐ°Ð¹ Ð²Ð½Ð¸Ð¼Ð°Ñ‚ÐµÐ»ÑŒÐ½ÐµÐ¹: Ð’ Ð¿Ð¾Ð»Ð½Ð¾Ð»ÑƒÐ½Ð¸Ðµ Ñ Ð±Ñ€Ð¾ÑˆÑƒ Ð¶Ñ‘Ð»Ñ‚ÑƒÑŽ ÑˆÐ»ÑÐ¿Ñƒ Ð² ÐºÑ€Ð°ÑÐ½Ð¾Ðµ Ð¼Ð¾Ñ€Ðµ. ÐšÐ°ÐºÐ¾Ð¹ ÑÑ‚Ð°Ð½ÐµÑ‚ ÑˆÐ»ÑÐ¿Ð°?");
Database.addText("ru.mapATreeTicTacToeIntro", "ÐžÑ‚Ð»Ð¸Ñ‡Ð½Ð¾ ÑÐºÐ°Ð·Ð°Ð½Ð¾! Ð­Ñ‚Ð¾ Ð½Ðµ Ð±Ñ‹Ð»Ð¾ Ñ‚Ð°Ðº ÑƒÐ¶ ÑÐ»Ð¾Ð¶Ð½Ð¾. Ð’Ð¾Ñ‚ Ñ‚Ñ€Ð¸ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ñ‹Ñ… Ð¿Ð»Ð¸Ñ‚ÐºÐ¸. Ð§Ñ‚Ð¾Ð±Ñ‹ Ð¿Ð¾Ð»ÑƒÑ‡Ð¸Ñ‚ÑŒ ÑÐ»ÐµÐ´ÑƒÑŽÑ‰ÑƒÑŽ Ð½Ð°Ð³Ñ€Ð°Ð´Ñƒ, Ð¼Ñ‹ ÑÐ»ÐµÐ³ÐºÐ° Ð¿Ð¾Ð¼ÐµÐ½ÑÐµÐ¼ Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð° Ð¸Ð³Ñ€Ñ‹. Ð¢ÐµÐ±Ðµ Ð½ÑƒÐ¶Ð½Ð¾ Ð±ÑƒÐ´ÐµÑ‚ ÑÑ‹Ð³Ñ€Ð°Ñ‚ÑŒ ÑÐ¾ Ð¼Ð½Ð¾ÑŽ Ð² Ð¸Ð³Ñ€Ñƒ! Ð¢Ñ‹ Ð³Ð¾Ñ‚Ð¾Ð²?");
Database.addText("ru.mapATreeTicTacToeIntroButton", "Ð•ÑÑ‚ÐµÑÑ‚Ð²ÐµÐ½Ð½Ð¾, Ð³Ð¾Ñ‚Ð¾Ð²!");
Database.addText("ru.mapATreeTicTacToeLetsPlay", "Ð˜Ð³Ñ€Ð° Ð½Ð°Ð·Ñ‹Ð²Ð°ÐµÑ‚ÑÑ \"ÐºÑ€ÐµÑÑ‚Ð¸ÐºÐ¸-Ð½Ð¾Ð»Ð¸ÐºÐ¸\". ÐœÑ‹ Ð¸Ð³Ñ€Ð°ÐµÐ¼ Ð½Ð° Ð¸Ð³Ñ€Ð¾Ð²Ð¾Ð¼ Ð¿Ð¾Ð»Ðµ Ñ€Ð°Ð·Ð¼ÐµÑ€Ð¾Ð¼ 3 Ð½Ð° 3. Ð¢Ñ‹ Ð±ÑƒÐ´ÐµÑˆÑŒ Ð¸Ð³Ñ€Ð°Ñ‚ÑŒ ÐºÑ€ÐµÑÑ‚Ð¸ÐºÐ°Ð¼Ð¸, Ð° Ñ - Ð½Ð¾Ð»Ð¸ÐºÐ°Ð¼Ð¸. Ð‘ÑƒÐ´ÐµÐ¼ ÑÑ‚Ð°Ð²Ð¸Ñ‚ÑŒ Ð·Ð½Ð°ÐºÐ¸ Ð¿Ð¾ Ð¾Ñ‡ÐµÑ€ÐµÐ´Ð¸, Ð¸ Ñ†ÐµÐ»ÑŒ - Ð¿Ð¾Ð»ÑƒÑ‡Ð¸Ñ‚ÑŒ Ñ‚Ñ€Ð¸ Ð·Ð½Ð°ÐºÐ° Ð² Ñ€ÑÐ´. Ð¥Ð¾Ð´Ð¸ Ð¿ÐµÑ€Ð²Ñ‹Ð¼!");
Database.addText("ru.mapATreeTicTacToeNobodyWins", "Ð˜Ð³Ñ€Ð¾Ð²Ð¾Ðµ Ð¿Ð¾Ð»Ðµ Ð·Ð°Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¾, Ð½Ð¾ Ñƒ Ð½Ð°Ñ Ð¾Ð±Ð¾Ð¸Ñ… Ð½Ðµ Ð¿Ð¾Ð»ÑƒÑ‡Ð¸Ð»Ð¾ÑÑŒ Ñ€Ð°Ð·Ð¼ÐµÑÑ‚Ð¸Ñ‚ÑŒ Ñ‚Ñ€Ð¸ Ð·Ð½Ð°ÐºÐ° Ð² Ñ€ÑÐ´: Ð½Ð¸ÐºÑ‚Ð¾ Ð½Ðµ Ð¿Ð¾Ð±ÐµÐ´Ð¸Ð»! Ð¥Ð¾Ñ‡ÐµÑˆÑŒ Ð¿Ð¾Ð¿Ñ€Ð¾Ð±Ð¾Ð²Ð°Ñ‚ÑŒ ÑÐ½Ð¾Ð²Ð°?");
Database.addText("ru.mapATreeTicTacToeYouLose", "Ð¯ Ð¿Ð¾ÑÑ‚Ð°Ð²Ð¸Ð»Ð° Ñ‚Ñ€Ð¸ Ð·Ð½Ð°ÐºÐ° Ð² Ñ€ÑÐ´! Ð¯ Ð²Ñ‹Ð¸Ð³Ñ€Ð°Ð»Ð°. Ð¥Ð¾Ñ‡ÐµÑˆÑŒ Ð¿Ð¾Ð¿Ñ€Ð¾Ð±Ð¾Ð²Ð°Ñ‚ÑŒ ÑÐ½Ð¾Ð²Ð°?");
Database.addText("ru.mapATreeTicTacToeTryAgainButton", "Ð”Ð°, Ñ…Ð¾Ñ‡Ñƒ");
Database.addText("ru.mapATreeTicTacToeYouWin", "Ð£Ñ…, Ð½ÐµÐ¾Ð¶Ð¸Ð´Ð°Ð½Ð½Ñ‹Ð¹ Ñ…Ð¾Ð´. ÐÐ¾ Ñƒ Ñ‚ÐµÐ±Ñ Ñ‚Ñ€Ð¸ Ð² Ñ€ÑÐ´, Ñ Ð½Ðµ Ð¼Ð¾Ð³Ñƒ ÑÑ‚Ð¾ Ð¾ÑÐ¿Ð¾Ñ€Ð¸Ñ‚ÑŒ. Ð¢Ñ‹ Ð²Ñ‹Ð¸Ð³Ñ€Ð°Ð»! Ð”ÐµÑ€Ð¶Ð¸ ÐºÐ»ÑŽÑ‡, Ð¾Ð½ Ð¾Ñ‚ÐºÑ€Ñ‹Ð²Ð°ÐµÑ‚ Ð¾Ð´Ð¸Ð½ Ð¸Ð· Ð·Ð°ÐºÑ€Ñ‹Ñ‚Ñ‹Ñ… Ð´Ð¾Ð¼Ð¾Ð² Ð² Ð´ÐµÑ€ÐµÐ²Ð½Ðµ Ð²Ð¾Ð·Ð»Ðµ Ð»ÐµÑÐ°.");
Database.addText("ru.mapATreeTicTacToeAnymoreSweet", "Ð¡Ð¿Ð°ÑÐ¸Ð±Ð¾, Ð±ÐµÐ»Ð¾Ñ‡ÐºÐ°. Ð•Ñ‰Ñ‘ Ð¸Ð³Ñ€Ñ‹ ÐµÑÑ‚ÑŒ?");
Database.addText("ru.mapATreeNoMoreChallenge", "Ðš ÑÐ¾Ð¶Ð°Ð»ÐµÐ½Ð¸ÑŽ, Ð±Ð¾Ð»ÑŒÑˆÐµ Ð¸Ð³Ñ€ Ð´Ð»Ñ Ñ‚ÐµÐ±Ñ Ð½Ðµ Ð¾ÑÑ‚Ð°Ð»Ð¾ÑÑŒ. Ð‘Ñ‹Ð»Ð¾ Ð¾Ñ‡ÐµÐ½ÑŒ Ð²ÐµÑÐµÐ»Ð¾ Ð¸Ð³Ñ€Ð°Ñ‚ÑŒ Ñ Ñ‚Ð¾Ð±Ð¾Ð¹, ÑÐ¿Ð°ÑÐ¸Ð±Ð¾!");
Database.addText("ru.buttonExitQuestKeeping", "ÐŸÐ¾ÐºÐ¸Ð½ÑƒÑ‚ÑŒ ÐºÐ²ÐµÑÑ‚ (Ð¸ Ð¿Ð¾Ð»ÑƒÑ‡Ð¸Ñ‚ÑŒ Ñ‚Ð¾, Ñ‡Ñ‚Ð¾ Ð’Ñ‹ Ð½Ð°ÑˆÐ»Ð¸)");
Database.addText("ru.buttonExitQuestNoKeeping", "ÐŸÐ¾ÐºÐ¸Ð½ÑƒÑ‚ÑŒ ÐºÐ²ÐµÑÑ‚ (Ð’Ñ‹ Ð½Ðµ Ð¿Ð¾Ð»ÑƒÑ‡Ð¸Ñ‚Ðµ Ñ‚Ð¾, Ñ‡Ñ‚Ð¾ Ð½Ð°ÑˆÐ»Ð¸)");
Database.addText("ru.buttonExitQuestNoKeepingBecauseLose", "ÐŸÐ¾ÐºÐ¸Ð½ÑƒÑ‚ÑŒ ÐºÐ²ÐµÑÑ‚ (Ð’Ñ‹ Ð½Ðµ Ð¿Ð¾Ð»ÑƒÑ‡Ð¸Ñ‚Ðµ Ñ‚Ð¾, Ñ‡Ñ‚Ð¾ Ð½Ð°ÑˆÐ»Ð¸, Ð¿Ð¾Ñ‚Ð¾Ð¼Ñƒ Ñ‡Ñ‚Ð¾ Ð²Ñ‹ Ð¿Ñ€Ð¾Ð¸Ð³Ñ€Ð°Ð»Ð¸)");
Database.addText("ru.mapVillageLockedHouseComment", "Ð—Ð°ÐºÑ€Ñ‹Ñ‚Ñ‹Ð¹ Ð´Ð¾Ð¼");
Database.addText("ru.mapVillageForgeIntroductionSpeech", "ÐŸÑ€Ð¸Ð²ÐµÑ‚! Ð¯ ÐºÑƒÐ·Ð½ÐµÑ†. Ð¯ Ð¼Ð¾Ð³Ñƒ Ð¿Ñ€Ð¾Ð´Ð°Ñ‚ÑŒ Ð’Ð°Ð¼ Ñ€Ð°Ð·Ð½Ð¾Ð¾Ð±Ñ€Ð°Ð·Ð½Ð¾Ðµ Ð¾Ñ€ÑƒÐ¶Ð¸Ðµ Ð¸ Ð¿Ñ€ÐµÐ´Ð¼ÐµÑ‚Ñ‹ ÑÐºÐ¸Ð¿Ð¸Ñ€Ð¾Ð²ÐºÐ¸.");
Database.addText("ru.mapVillageForgeIntroductionSpeechNoMoreToSell", "ÐŸÑ€Ð¸Ð²ÐµÑ‚! Ð¯ ÐºÑƒÐ·Ð½ÐµÑ†. Ðš ÑÐ¾Ð¶Ð°Ð»ÐµÐ½Ð¸ÑŽ, Ñƒ Ð¼ÐµÐ½Ñ Ð¿Ð¾ÐºÐ° Ð½ÐµÑ‡ÐµÐ³Ð¾ Ð’Ð°Ð¼ Ð¿Ñ€Ð¾Ð´Ð°Ñ‚ÑŒ. ÐœÐ¾Ð¶ÐµÑ‚, Ð²ÐµÑ€Ð½Ñ‘Ñ‚ÐµÑÑŒ Ð¿Ð¾Ð·Ð¶Ðµ?");
Database.addText("ru.mapVillageFifthHouseNoWeaponSpeech", "ÐŸÑ€Ð¸Ð²ÐµÑ‚. ÐœÐ¾Ð¹ Ð¿Ð¾Ð´Ð²Ð°Ð» Ð¿Ð¾Ð»Ð¾Ð½ ÐºÑ€Ñ‹Ñ, Ð¼Ð½Ðµ Ð½ÑƒÐ¶Ð½Ð¾ Ð¾Ñ‚ Ð½Ð¸Ñ… Ð¸Ð·Ð±Ð°Ð²Ð¸Ñ‚ÑŒÑÑ... ÐµÑÐ»Ð¸ Ð±Ñ‹ ÐºÑ‚Ð¾-Ð½Ð¸Ð±ÑƒÐ´ÑŒ Ñ Ð¾Ñ€ÑƒÐ¶Ð¸ÐµÐ¼ Ð¼Ð¾Ð³ Ð¼Ð½Ðµ Ð¿Ð¾Ð¼Ð¾Ñ‡ÑŒ...");
Database.addText("ru.mapVillageFifthHouseWeaponSpeech", "Ð­Ð¹, Ð’Ñ‹! Ð¯ Ð²Ð¸Ð¶Ñƒ, Ñƒ Ð’Ð°Ñ ÐµÑÑ‚ÑŒ Ð¾Ñ€ÑƒÐ¶Ð¸Ðµ! Ð•ÑÐ»Ð¸ Ð’Ñ‹ ÑƒÐ±ÑŒÑ‘Ñ‚Ðµ ÐºÑ€Ñ‹Ñ, Ð½Ð°Ð²Ð¾Ð´Ð½ÑÑŽÑ‰Ð¸Ñ… Ð¼Ð¾Ð¹ Ð¿Ð¾Ð´Ð²Ð°Ð», Ñ Ð’Ð°Ñ Ð½Ð°Ð³Ñ€Ð°Ð¶Ñƒ!");
Database.addText("ru.mapVillageFifthHouseAgree", "ÐŸÐ¾ÐµÑ…Ð°Ð»Ð¸!");
Database.addText("ru.mapVillageFifthHouseCellarDone", "Ð¡Ð¿Ð°ÑÐ¸Ð±Ð¾ Ð·Ð° Ñ‚Ð¾, Ñ‡Ñ‚Ð¾ Ð¸Ð·Ð±Ð°Ð²Ð¸Ð»Ð¸ Ð¼ÐµÐ½Ñ Ð¾Ñ‚ Ð½Ð¸Ñ…! Ð’Ð¾Ñ‚ Ñ‡Ñ‚Ð¾-Ñ‚Ð¾ Ð¾Ñ‡ÐµÐ½ÑŒ Ñ†ÐµÐ½Ð½Ð¾Ðµ Ð’Ð°Ð¼ Ð² Ð½Ð°Ð³Ñ€Ð°Ð´Ñƒ: ÐºÐ°Ñ€Ñ‚Ð° Ð¼Ð¸Ñ€Ð°. Ð¯ Ð´ÑƒÐ¼Ð°ÑŽ, Ð’Ñ‹ Ð±ÑƒÐ´ÐµÑ‚Ðµ ÐµÐ¹ Ð¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒÑÑ Ñ‡Ð°Ñ‰Ðµ, Ñ‡ÐµÐ¼ ÑÑ‚Ð¾ Ð´ÐµÐ»Ð°Ð» Ñ.");
Database.addText("ru.mapVillageTheShopComment", "ÐœÐ°Ð³Ð°Ð·Ð¸Ð½");
Database.addText("ru.mapBridgeComment", "ÐœÐ¾ÑÑ‚");
Database.addText("ru.mapFarmComment", "Ð¤ÐµÑ€Ð¼Ð° Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð²");
Database.addText("ru.mapCaveEntranceComment", "Ð’Ñ…Ð¾Ð´ Ð² Ð¿ÐµÑ‰ÐµÑ€Ñƒ");
Database.addText("ru.mapLighthouseComment", "ÐœÐ°ÑÐº");
Database.addText("ru.mapPierComment", "ÐŸÐ¸Ñ€Ñ");
Database.addText("ru.mapTheHoleComment", "Ð”Ñ‹Ñ€Ð°");
Database.addText("ru.candyBoxRequestStatusBarUnlocked", "ÐŸÐ¾Ð¿Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ Ð´ÐµÑ‚Ð°Ð»ÑŒ Ð¸Ð½Ñ‚ÐµÑ€Ñ„ÐµÐ¹ÑÐ° Ñƒ Ñ€Ð°Ð·Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸ÐºÐ° (30 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedCfg", "ÐŸÐ¾Ð¿Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ ÐµÑ‰Ñ‘ Ð¾Ð´Ð½Ñƒ (5 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedSave", "Ð˜ Ð¿Ð¾Ð¿Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ ÐµÑ‰Ñ‘ Ñ€Ð°Ð· (5 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedHealthBar", "ÐŸÐ¾Ð¿Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ Ñ‡Ñ‚Ð¾-Ð½Ð¸Ð±ÑƒÐ´ÑŒ Ð±Ð¾Ð»ÐµÐµ Ð¾Ñ„Ð¸Ð³ÐµÐ½Ð½Ð¾Ðµ (5 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedMap", "ÐŸÐ¾ÑÐ»ÐµÐ´Ð½ÑÑ Ð¿Ñ€Ð¾ÑÑŒÐ±Ð°! ÐžÐ½Ð° Ð±ÑƒÐ´ÐµÑ‚ ÑÑ‚Ð¾Ð¸Ñ‚ÑŒ Ð²ÑÐµÑ… Ð¿Ð¾Ñ‚Ñ€Ð°Ñ‡ÐµÐ½Ð½Ñ‹Ñ… ÐºÐ¾Ð½Ñ„ÐµÑ‚. (10 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedComment", "Ð’Ñ‹ Ñ€Ð°Ð·Ð±Ñ€Ð¾ÐºÐ¸Ñ€Ð¾Ð²Ð°Ð»Ð¸ ÑÑ‚Ð°Ñ‚ÑƒÑ-Ð¿Ð°Ð½ÐµÐ»ÑŒ (Ð²Ð²ÐµÑ€Ñ…Ñƒ)");
Database.addText("ru.candyBoxRequestStatusBarUnlockedCfgComment1", "Ð¡ÐµÐ¹Ñ‡Ð°Ñ Ñƒ Ð²Ð°Ñ ÐµÑÑ‚ÑŒ Ð´Ð¾ÑÑ‚ÑƒÐ¿ Ðº Ð¿Ð°Ð½ÐµÐ»Ð¸ Ð½Ð°ÑÑ‚Ñ€Ð¾ÐµÐº.");
Database.addText("ru.candyBoxRequestStatusBarUnlockedCfgComment2", "Ð’Ñ‹ Ð¼Ð¾Ð¶ÐµÑ‚Ðµ ÑÐ¼ÐµÐ½Ð¸Ñ‚ÑŒ ÑÐ·Ñ‹Ðº Ð¸Ð³Ñ€Ñ‹, ÐµÑÐ»Ð¸ Ñ…Ð¾Ñ‚Ð¸Ñ‚Ðµ.");
Database.addText("ru.candyBoxRequestStatusBarUnlockedSaveComment", "ÐŸÐ¾ÑÐ²Ð¸Ð»Ð°ÑÑŒ Ð´Ð¸ÐºÐ°Ñ Ð¿Ð°Ð½ÐµÐ»ÑŒ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ñ!");
Database.addText("ru.candyBoxRequestStatusBarUnlockedHealthBarComment", "Ð’Ð¾Ñ‚ 100 Ð¾Ñ‡ÐºÐ¾Ð² Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÑ. ÐžÐ½Ð¸ Ð±ÑƒÐ´ÑƒÑ‚ Ð²Ð°Ð¼ Ð¿Ð¾Ð»ÐµÐ·Ð½Ñ‹.");
Database.addText("ru.cfgChooseLanguage", "Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ ÑÐ·Ñ‹Ðº:");
Database.addText("ru.cfgInvertColors", "Ð˜Ð½Ð²ÐµÑ€Ñ‚Ð¸Ñ€Ð¾Ð²Ð°Ñ‚ÑŒ Ñ†Ð²ÐµÑ‚Ð°?");
Database.addText("ru.gridItemMainMapName", "ÐšÐ°Ñ€Ñ‚Ð°");
Database.addText("ru.gridItemMainMapDescription", "ÐšÐ°Ñ€Ñ‚Ð° Ð¼Ð¸Ñ€Ð°");
Database.addText("ru.gridItemPogoStickName", "ÐŸÐ¾Ð³Ð¾-ÑÑ‚Ð¸Ðº");
Database.addText("ru.gridItemPogoStickDescription", "Ð­Ñ‚Ð¾Ñ‚ Ð¿Ñ€ÐµÐ´Ð¼ÐµÑ‚ Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑÐµÑ‚ Ð’Ð°Ð¼ Ð¿Ñ€Ñ‹Ð³Ð°Ñ‚ÑŒ Ð²Ð¾ Ð²Ñ€ÐµÐ¼Ñ ÐºÐ²ÐµÑÑ‚Ð¾Ð²!");
Database.addText("ru.gridItemTimeRingName", "ÐšÐ¾Ð»ÑŒÑ†Ð¾ Ð²Ñ€ÐµÐ¼ÐµÐ½Ð¸");
Database.addText("ru.gridItemTimeRingDescription", "Ð­Ñ‚Ð¾Ñ‚ Ð¿Ñ€ÐµÐ´Ð¼ÐµÑ‚ Ð´Ð°Ñ€Ð¸Ñ‚ Ð²Ð°Ð¼ Ð½Ð¾Ð²ÑƒÑŽ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾ÑÑ‚ÑŒ Ð²Ð¾ Ð²Ñ€ÐµÐ¼Ñ ÐºÐ²ÐµÑÑ‚Ð¾Ð²: Ð²Ñ‹ Ð¼Ð¾Ð¶ÐµÑ‚Ðµ Ð·Ð°Ð¼ÐµÐ´Ð»ÑÑ‚ÑŒ Ð²Ñ€ÐµÐ¼Ñ. Ð•ÑÐ»Ð¸ Ð²ÑÑ‘ Ð¿Ñ€Ð¾Ð¸ÑÑ…Ð¾Ð´Ð¸Ñ‚ Ð´Ð»Ñ Ð²Ð°Ñ ÑÐ»Ð¸ÑˆÐºÐ¾Ð¼ Ð±Ñ‹ÑÑ‚Ñ€Ð¾, Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐ¹Ñ‚Ðµ ÐºÐ¾Ð»ÑŒÑ†Ð¾ Ð²Ñ€ÐµÐ¼ÐµÐ½Ð¸!");
Database.addText("ru.gridItemThirdHouseKeyName", "ÐšÐ»ÑŽÑ‡ Ð¾Ñ‚ Ñ‚Ñ€ÐµÑ‚ÑŒÐµÐ³Ð¾ Ð´Ð¾Ð¼Ð°");
Database.addText("ru.gridItemThirdHouseKeyDescription", "Ð­Ñ‚Ð¾Ñ‚ ÐºÐ»ÑŽÑ‡ Ð¿Ð¾Ð·Ð²Ð¾Ð»Ð¸Ñ‚ Ð²Ð°Ð¼ Ð²Ð¾Ð¹Ñ‚Ð¸ Ð² Ñ‚Ñ€ÐµÑ‚Ð¸Ð¹ Ð´Ð¾Ð¼ Ð² Ð´ÐµÑ€ÐµÐ²Ð½Ðµ.");
Database.addText("ru.gridItemFeatherName", "ÐŸÐµÑ€Ð¾ Ð¿ÑƒÑÑ‚Ñ‹Ð½Ð½Ð¾Ð¹ Ð¿Ñ‚Ð¸Ñ†Ñ‹");
Database.addText("ru.gridItemFeatherDescription", "ÐœÐ°Ð³Ð¸Ñ‡ÐµÑÐºÐ¾Ðµ Ð¿ÐµÑ€Ð¾ Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑÐµÑ‚ Ð²Ð°Ð¼ Ð¿Ñ€Ñ‹Ð³Ð°Ñ‚ÑŒ Ð²Ñ‹ÑˆÐµ, ÐºÐ¾Ð³Ð´Ð° Ð²Ñ‹ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐµÑ‚Ðµ Ð¿Ð¾Ð³Ð¾-ÑÑ‚Ð¸Ðº!");
Database.addText("ru.gridItemFeatherDescriptionNoPogoStick", "ÐŸÐ¾ ÐºÐ°ÐºÐ¾Ð¹-Ñ‚Ð¾ Ð½ÐµÐ¸Ð·Ð²ÐµÑÑ‚Ð½Ð¾Ð¹ Ð¿Ñ€Ð¸Ñ‡Ð¸Ð½Ðµ Ð²Ñ‹ Ñ‡ÑƒÐ²ÑÑ‚Ð²ÑƒÐµÑ‚Ðµ, Ñ‡Ñ‚Ð¾ ÑÑ‚Ð¾ Ð¿ÐµÑ€Ð¾ Ð¼Ð¾Ð³Ð»Ð¾ Ð±Ñ‹ Ð±Ñ‹Ñ‚ÑŒ Ð²Ð°Ð¼ Ð¿Ð¾Ð»ÐµÐ·Ð½Ð¾, ÐµÑÐ»Ð¸ Ð±Ñ‹ Ñƒ Ð²Ð°Ñ Ð±Ñ‹Ð» Ð¿Ð¾Ð³Ð¾-ÑÑ‚Ð¸Ðº...");
Database.addText("ru.gridItemSpongeName", "Ð’Ð¾Ð»ÑˆÐµÐ±Ð½Ð°Ñ Ð³ÑƒÐ±ÐºÐ°");
Database.addText("ru.gridItemSpongeDescription", "ÐœÐ°Ð³Ð¸Ñ‡ÐµÑÐºÐ°Ñ Ð³ÑƒÐ±ÐºÐ° Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑÐµÑ‚ Ð²Ð°Ð¼ ÑÐ¶Ð¸Ð¼Ð°Ñ‚ÑŒÑÑ, ÑÐ»Ð¾Ð²Ð½Ð¾ Ð³ÑƒÐ±ÐºÐ°, Ñ‡Ñ‚Ð¾ Ð´ÐµÐ»Ð°ÐµÑ‚ Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ñ‹Ð¼ Ð¸Ð·Ð¼ÐµÐ½ÑÑ‚ÑŒ Ð²Ð°Ñˆ ÑÐ¾Ð±ÑÑ‚Ð²ÐµÐ½Ð½Ñ‹Ð¹ Ñ€Ð¾ÑÑ‚.");
Database.addText("ru.gridItemFortressKeyName", "ÐšÐ»ÑŽÑ‡ Ð¾Ñ‚ Ð¿ÑƒÑÑ‚Ñ‹Ð½Ð½Ð¾Ð¹ ÐºÑ€ÐµÐ¿Ð¾ÑÑ‚Ð¸");
Database.addText("ru.gridItemFortressKeyDescription", "Ð­Ñ‚Ð¾Ñ‚ ÐºÐ»ÑŽÑ‡ Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑÐµÑ‚ Ð²Ð°Ð¼ Ð²Ð¾Ð¹Ñ‚Ð¸ Ð² Ð¾Ñ‡ÐµÐ½ÑŒ Ð´Ñ€ÐµÐ²Ð½ÑŽÑŽ ÐºÑ€ÐµÐ¿Ð¾ÑÑ‚ÑŒ, Ñ€Ð°ÑÐ¿Ð¾Ð»Ð¾Ð¶ÐµÐ½Ð½ÑƒÑŽ Ð½Ð°Ð´ Ð¿ÑƒÑÑ‚Ñ‹Ð½ÐµÐ¹. ÐšÑ‚Ð¾ Ð·Ð½Ð°ÐµÑ‚, Ñ‡Ñ‚Ð¾ Ð²Ñ‹ Ð¼Ð¾Ð¶ÐµÑ‚Ðµ Ñ‚Ð°Ð¼ Ð½Ð°Ð¹Ñ‚Ð¸?");
Database.addText("ru.gridItemHeartPendantName", "ÐšÑƒÐ»Ð¾Ð½ Ð² Ð²Ð¸Ð´Ðµ ÑÐµÑ€Ð´Ñ†Ð°");
Database.addText("ru.gridItemHeartPendantDescription", "Ð­Ñ‚Ð¾Ñ‚ ÐºÑƒÐ»Ð¾Ð½ Ð² Ð²Ð¸Ð´Ðµ ÑÐµÑ€Ð´Ñ†Ð° ÑƒÐ²ÐµÐ»Ð¸Ñ‡Ð¸Ñ‚ Ð²Ð°ÑˆÐµ Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÐµ, Ð¿Ð¾ÐºÐ° Ð²Ñ‹ Ð½Ð¾ÑÐ¸Ñ‚Ðµ ÐµÐ³Ð¾ Ð½Ð° ÑˆÐµÐµ.");
Database.addText("ru.gridItemHeartPlugName", "Ð¡ÐµÑ€Ð´ÐµÑ‡Ð½Ñ‹Ð¹ Ð·Ð°Ñ‚Ð²Ð¾Ñ€");
Database.addText("ru.gridItemHeartPlugDescription", "Ð­Ñ‚Ð¾Ñ‚ ÑÐµÑ€Ð´ÐµÑ‡Ð½Ñ‹Ð¹ Ð·Ð°Ñ‚Ð²Ð¾Ñ€, ÑÐ´ÐµÐ»Ð°Ð½Ð½Ñ‹Ð¹ Ð¸Ð· Ð¶ÐµÐ»ÐµÐ·Ð°, Ð¿Ð°ÑƒÑ‡ÑŒÐ¸Ñ… Ð½Ð¾Ð¶ÐµÐº Ð¸ ÑÐ¿ÐµÑ†Ð¸Ð°Ð»ÑŒÐ½Ð¾Ð³Ð¾ \"ÑÐµÑ€Ð´ÐµÑ‡Ð½Ð¾Ð³Ð¾ Ð»Ð¸ÐºÑ‘Ñ€Ð°\" Ð·Ð°Ð¿ÐµÑ‡Ð°Ñ‚Ð°Ð½Ð½Ð¾Ð³Ð¾ Ð² ÑÐµÑ€ÐµÐ´Ð¸Ð½Ðµ, ÑƒÐ²ÐµÐ»Ð¸Ñ‡Ð¸Ñ‚ Ð²Ð°ÑˆÐµ Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÐµ Ð½Ð° 20 Ð¿Ñ€Ð¾Ñ†ÐµÐ½Ñ‚Ð¾Ð².");
Database.addText("ru.gridItemBeginnersGrimoireName", "Ð“Ñ€Ð¸Ð¼ÑƒÐ°Ñ€ Ð½Ð¾Ð²Ð¸Ñ‡ÐºÐ°");
Database.addText("ru.gridItemBeginnersGrimoireDescription", "Ð“Ñ€Ð¸Ð¼ÑƒÐ°Ñ€ Ð¿Ñ€ÐµÐ´Ð¾ÑÑ‚Ð°Ð²Ð»ÑÐµÑ‚ Ð²Ð°Ð¼ Ñ‚Ñ€Ð¸ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ñ, Ð´Ð¾Ð²Ð¾Ð»ÑŒÐ½Ð¾ Ð»Ñ‘Ð³ÐºÐ¸Ñ… Ð´Ð»Ñ Ð²Ñ‹Ð¿Ð¾Ð»Ð½ÐµÐ½Ð¸Ñ. ÐžÐ½ Ð½Ð° ÑÐ°Ð¼Ð¾Ð¼ Ð´ÐµÐ»Ðµ ÑÐ´ÐµÐ»Ð°Ð½ Ð´Ð»Ñ Ð½Ð¾Ð²Ð¸Ñ‡ÐºÐ¾Ð². Ð’Ñ‹ ÑÐ¼Ð¾Ð¶ÐµÑ‚Ðµ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒ ÐºÐ¸ÑÐ»Ð¾Ñ‚Ð½Ñ‹Ð¹ Ð´Ð¾Ð¶Ð´ÑŒ (Ð±Ð¾Ð»ÑŒÑˆÐ¾Ðµ ÐºÐ¾Ð»Ð¸Ñ‡ÐµÑÑ‚Ð²Ð¾ ÐºÐ°Ð¿ÐµÐ»ÑŒ ÐºÐ¸ÑÐ»Ð¾Ñ‚Ñ‹ Ð¾Ð±Ñ€ÑƒÑˆÐ¸Ñ‚ÑÑ Ð½Ð° Ð²Ð°ÑˆÐ¸Ñ… Ð²Ñ€Ð°Ð³Ð¾Ð²), Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ðµ Ð¾Ð³Ð½ÐµÐ½Ð½Ñ‹Ñ… ÑˆÐ°Ñ€Ð¾Ð² (Ð³Ð¸Ð³Ð°Ð½Ñ‚ÑÐºÐ¸Ð¹ Ð²Ð¾Ð»ÑˆÐµÐ±Ð½Ñ‹Ð¹ ÑˆÐ°Ñ€ Ð¸Ð· Ð¾Ð³Ð½Ñ Ð¿Ð¾Ð»ÐµÑ‚Ð¸Ñ‚ Ð² Ð²Ð°ÑˆÐ¸Ñ… Ð²Ñ€Ð°Ð³Ð¾Ð²), Ð¸ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ðµ Ñ‚ÐµÐ»ÐµÐ¿Ð¾Ñ€Ñ‚Ð° (ÐºÐ¾Ñ‚Ð¾Ñ€Ð¾Ðµ Ð¿ÐµÑ€ÐµÐ½ÐµÑÑ‘Ñ‚ Ð²Ð°Ñ Ð² ÑÐ»ÑƒÑ‡Ð°Ð¹Ð½Ð¾Ðµ Ð¼ÐµÑÑ‚Ð¾).");
Database.addText("ru.gridItemAdvancedGrimoireName", "ÐŸÑ€Ð¾Ð´Ð²Ð¸Ð½ÑƒÑ‚Ñ‹Ð¹ Ð³Ñ€Ð¸Ð¼ÑƒÐ°Ñ€");
Database.addText("ru.gridItemAdvancedGrimoireDescription", "Ð­Ñ‚Ð¾Ñ‚ Ð¿Ñ€Ð¾Ð´Ð²Ð¸Ð½ÑƒÑ‚Ñ‹Ð¹ Ð³Ñ€Ð¸Ð¼ÑƒÐ°Ñ€ Ð¿Ñ€ÐµÐ´Ð¾ÑÑ‚Ð°Ð²Ð»ÑÐµÑ‚ Ð²Ð°Ð¼ Ð´Ð²Ð° Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ñ: Ð¼Ð°Ð³Ð¸Ñ‡ÐµÑÐºÐ¾Ðµ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ñ ÑƒÐ´Ð°Ð»ÐµÐ½Ð¸Ñ Ð¸ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ðµ ÑˆÐ¸Ð¿Ð°ÑÑ‚Ð¾Ð³Ð¾ Ñ‰Ð¸Ñ‚Ð°. ÐŸÐµÑ€Ð²Ð¾Ðµ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ðµ ÑƒÐ´Ð°Ð»Ð¸Ñ‚ Ð²ÑÑŽ Ð¼Ð°Ð³Ð¸ÑŽ Ð² Ð¿Ñ€Ð¾Ñ†ÐµÑÑÐµ Ð¿Ñ€Ð¾Ñ…Ð¾Ð¶Ð´ÐµÐ½Ð¸Ñ ÐºÐ²ÐµÑÑ‚Ð°, Ñ‚.Ðµ. Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ñ, ÑÐºÐ°Ð·Ð°Ð½Ð½Ñ‹Ðµ Ð²Ð°Ð¼Ð¸ Ð¸ Ð²Ð°ÑˆÐ¸Ð¼ Ð²Ñ€Ð°Ð³Ð¾Ð¼. Ð’Ñ‚Ð¾Ñ€Ð¾Ðµ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ðµ ÑÐ¾Ð·Ð´Ð°ÑÑ‚ Ð²Ð¾ÐºÑ€ÑƒÐ³ Ð²Ð°Ñ Ñ‰Ð¸Ñ‚ Ð¸Ð· Ð»ÐµÑ‚Ð°ÑŽÑ‰Ð¸Ñ… ÑˆÐ¸Ð¿Ð¾Ð², ÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ð¹ Ð±ÑƒÐ´ÐµÑ‚ Ð½Ð°Ð½Ð¾ÑÐ¸Ñ‚ÑŒ Ð²Ñ€Ð¾Ð½ Ð²Ð°ÑˆÐ¸Ð¼ Ð²Ñ€Ð°Ð³Ð°Ð¼ Ð²Ð¾ Ð²Ñ€ÐµÐ¼Ñ ÐºÐ¾Ð½Ñ‚Ð°ÐºÑ‚Ð°.");
Database.addText("ru.gridItemBlackMagicGrimoireName", "Ð§ÐµÑ€Ð½Ð¾Ð¼Ð°Ð³Ð¸Ñ‡ÐµÑÐºÐ¸Ð¹ Ð³Ñ€Ð¸Ð¼ÑƒÐ°Ñ€");
Database.addText("ru.gridItemBlackMagicGrimoireDescription", "Ð’Ñ‹ Ð½Ð°ÑˆÐ»Ð¸ ÑÑ‚Ð¾Ñ‚ Ð³Ñ€Ð¸Ð¼ÑƒÐ°Ñ€ Ð² Ð¿ÐµÑ‰ÐµÑ€Ðµ, Ð´Ð¾ Ð½ÐµÐ³Ð¾ Ð±Ñ‹Ð»Ð¾ Ð¾Ñ‡ÐµÐ½ÑŒ ÑÐ»Ð¾Ð¶Ð½Ð¾ Ð´Ð¾Ð±Ñ€Ð°Ñ‚ÑŒÑÑ, Ð¸ Ð½Ð° ÑÑ‚Ð¾ ÐµÑÑ‚ÑŒ Ð¿Ñ€Ð¸Ñ‡Ð¸Ð½Ñ‹. ÐžÐ½ Ð¿Ñ€ÐµÐ´Ð¾ÑÑ‚Ð°Ð²Ð»ÑÐµÑ‚ Ð²Ð°Ð¼ Ð´Ð²Ð° Ð¼Ð¾Ð³ÑƒÑ‰ÐµÑÑ‚Ð²ÐµÐ½Ð½Ñ‹Ñ… Ñ‡ÐµÑ€Ð½Ð¾Ð¼Ð°Ð³Ð¸Ñ‡ÐµÑÐºÐ¸Ñ… Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ñ. ÐŸÐµÑ€Ð²Ð¾Ðµ ÑÐ¾Ð·Ð´Ð°ÑÑ‚ Ð¿ÐµÑ€ÐµÐ´ Ð²Ð°Ð¼Ð¸ Ð³Ð¸Ð³Ð°Ð½Ñ‚ÑÐºÑƒÑŽ Ð¾Ð±ÑÐ¸Ð´Ð¸Ð°Ð½Ð¾Ð²ÑƒÑŽ ÑÑ‚ÐµÐ½Ñƒ, ÐºÐ¾Ñ‚Ð¾Ñ€Ð°Ñ Ð¼Ð¾Ð¶ÐµÑ‚ Ð±Ñ‹Ñ‚ÑŒ Ð¿Ð¾Ð»ÐµÐ·Ð½Ð° Ð´Ð»Ñ Ð·Ð°Ð¼ÐµÐ´Ð»ÐµÐ½Ð¸Ñ Ð²Ð°ÑˆÐ¸Ñ… Ð²Ñ€Ð°Ð³Ð¾Ð². Ð’Ñ‚Ð¾Ñ€Ð¾Ðµ Ð¿Ñ€Ð¸Ð·Ð¾Ð²Ñ‘Ñ‚ Ñ€Ð¾Ð¹ Ð´ÐµÐ¼Ð¾Ð½Ð¾Ð², ÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ðµ Ð±ÑƒÐ´ÑƒÑ‚ Ð°Ñ‚Ð°ÐºÐ¾Ð²Ð°Ñ‚ÑŒ Ð²ÑÑ‘ Ð²Ð¾ÐºÑ€ÑƒÐ³, Ð´Ð°Ð¶Ðµ Ð²Ð°Ñ. ÐžÑÑ‚Ð¾Ñ€Ð¾Ð¶Ð½ÐµÐ¹ Ñ ÑÑ‚Ð¸Ð¼ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸ÐµÐ¼.");
Database.addText("ru.gridItemUnicornHornName", "Ð Ð¾Ð³ ÐµÐ´Ð¸Ð½Ð¾Ñ€Ð¾Ð³Ð°");
Database.addText("ru.gridItemUnicornHornDescription", "Ð­Ñ‚Ð¾Ñ‚ Ð²Ð¾Ð»ÑˆÐµÐ±Ð½Ñ‹Ð¹ Ñ€Ð¾Ð³ Ð¿Ñ€Ð¸Ð½Ð°Ð´Ð»ÐµÐ¶Ð°Ð» ÐµÐ´Ð¸Ð½Ð¾Ñ€Ð¾Ð³Ñƒ. Ð•Ð³Ð¾ Ð¼Ð¾Ð³ÑƒÑ‰ÐµÑÑ‚Ð²Ð¾ Ð² Ð¸ÑÑ†ÐµÐ»ÐµÐ½Ð¸Ð¸ Ð¾Ñ‡ÐµÐ½ÑŒ Ð²Ð°Ð¼ Ð¿Ð¾Ð¼Ð¾Ð¶ÐµÑ‚. Ð’Ñ‹ ÑÐ»Ñ‹ÑˆÐ°Ð»Ð¸, Ñ‡Ñ‚Ð¾ ÑÑ‚Ð¾Ð³Ð¾ ÐµÐ´Ð¸Ð½Ð¾Ñ€Ð¾Ð³Ð° Ð·Ð²Ð°Ð»Ð¸ Ð§Ð°Ñ€Ð»Ð¸.");
Database.addText("ru.gridItemXinopherydonClawName", "ÐšÐ¾Ð³Ð¾Ñ‚ÑŒ ÐºÑÐ¸Ð½Ð¾Ñ„ÐµÑ€Ð¸Ð´Ð¾Ð½Ð°");
Database.addText("ru.gridItemXinopherydonClawDescription", "Ð­Ñ‚Ð¾Ñ‚ ÐºÐ¾Ð³Ð¾Ñ‚ÑŒ Ð¿Ñ€Ð¸Ð½Ð°Ð´Ð»ÐµÐ¶Ð°Ð» ÐºÑÐ¸Ð½Ð¾Ñ„ÐµÑ€Ð¸Ð´Ð¾Ð½Ñƒ, Ð´Ð²ÑƒÐ³Ð»Ð°Ð²Ð¾Ð¼Ñƒ Ð´Ñ€ÐµÐ²Ð½ÐµÐ¼Ñƒ Ð¶Ð¸Ð²Ð¾Ñ‚Ð½Ð¾Ð¼Ñƒ, ÐºÐ¾Ñ‚Ð¾Ñ€Ð¾Ðµ, ÐºÐ°Ðº Ð²ÑÐµ Ð¿Ð¾Ð»Ð°Ð³Ð°Ð»Ð¸, Ð²Ñ‹Ð¼ÐµÑ€Ð»Ð¾. ÐžÐ½ ÑƒÐ´Ð²Ð¾Ð¸Ñ‚ ÑƒÑ€Ð¾Ð½ Ð¾Ñ‚ Ð¾Ñ€ÑƒÐ¶Ð¸Ñ, ÐºÐ¾Ñ‚Ð¾Ñ€Ð¾Ðµ Ð²Ñ‹ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐµÑ‚Ðµ.");
Database.addText("ru.gridItemPitchforkName", "Ð’Ð¸Ð»Ñ‹");
Database.addText("ru.gridItemPitchforkDescription", "Ð­Ñ‚Ð¸ Ð¾ÑÐ¾Ð±ÐµÐ½Ð½Ñ‹Ðµ Ð²Ð¸Ð»Ñ‹ Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑÑ‚ Ð²Ð°Ð¼ Ñ€Ð°Ð·Ñ€Ñ‹Ñ…Ð»ÑÑ‚ÑŒ Ð·ÐµÐ¼Ð»ÑŽ Ð±ÐµÐ· Ð²ÑÐ¿Ð°Ñ…Ð¸Ð²Ð°Ð½Ð¸Ñ, Ñ‚ÐµÐ¼ ÑÐ°Ð¼Ñ‹Ð¼ ÑÐ¾Ñ…Ñ€Ð°Ð½ÑÑ Ð¿Ð¾Ð´Ð·ÐµÐ¼Ð½ÑƒÑŽ ÑÐºÐ¾ÑÐ¸ÑÑ‚ÐµÐ¼Ñƒ. ÐžÐ½Ð¸ ÑƒÑ‚Ñ€Ð¾ÑÑ‚ Ð¿Ñ€Ð¾Ð¸Ð·Ð²Ð¾Ð´ÑÑ‚Ð²Ð¾ Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð² Ð½Ð° Ð²Ð°ÑˆÐµÐ¹ Ñ„ÐµÑ€Ð¼Ðµ.");
Database.addText("ru.gridItemShellPowderName", "Ð¡ÐºÐ¾Ñ€Ð»ÑƒÐ¿Ð½Ð°Ñ Ð¿ÑƒÐ´Ñ€Ð°");
Database.addText("ru.gridItemShellPowderDescription", "Ð¡ÐºÐ¾Ñ€Ð»ÑƒÐ¿Ð½Ð°Ñ Ð¿ÑƒÐ´Ñ€Ð° Ñ‡Ð°ÑÑ‚Ð¾ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐµÑ‚ÑÑ Ñ„ÐµÑ€Ð¼ÐµÑ€Ð°Ð¼Ð¸, Ñ‡Ñ‚Ð¾Ð±Ñ‹ ÑƒÐ»ÑƒÑ‡ÑˆÐ¸Ñ‚ÑŒ ÑÐºÐ¾Ñ€Ð¾ÑÑ‚ÑŒ Ñ€Ð¾ÑÑ‚Ð° Ð¸Ñ… Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð². Ð­Ñ‚Ð° Ð¿ÑƒÐ´Ñ€Ð° ÑƒÐ²ÐµÐ»Ð¸Ñ‡Ð¸Ñ‚ Ð¿Ñ€Ð¾Ð¸Ð·Ð²Ð¾Ð´ÑÑ‚Ð²Ð¾ Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð² Ð²Ñ‚Ñ€Ð¾Ðµ!");
Database.addText("ru.gridItemPName", "ÐšÐ°Ð¼ÐµÐ½ÑŒ P");
Database.addText("ru.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("ru.gridItemLName", "ÐšÐ°Ð¼ÐµÐ½ÑŒ L");
Database.addText("ru.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("ru.gridItemAName", "ÐšÐ°Ð¼ÐµÐ½ÑŒ Ð");
Database.addText("ru.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("ru.gridItemYName", "ÐšÐ°Ð¼ÐµÐ½ÑŒ Y");
Database.addText("ru.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("ru.gridItemRedSharkFinName", "Ð’Ð¾Ð»ÑˆÐµÐ±Ð½Ñ‹Ð¹ Ð¿Ð»Ð°Ð²Ð½Ð¸Ðº ÐºÑ€Ð°ÑÐ½Ð¾Ð¹ Ñ€Ñ‹Ð±Ñ‹");
Database.addText("ru.gridItemRedSharkFinDescription", "Ð­Ñ‚Ð¾Ñ‚ Ð²Ð¾Ð»ÑˆÐµÐ±Ð½Ñ‹Ð¹ Ð¿Ð»Ð°Ð²Ð½Ð¸Ðº Ð¾Ñ‡ÐµÐ½ÑŒ ÑÐ¸Ð»ÑŒÐ½Ð¾ ÑƒÐ²ÐµÐ»Ð¸Ñ‡Ð¸Ñ‚ ÑƒÑ€Ð¾Ð½, Ð½Ð°Ð½Ð¾ÑÐ¸Ð¼Ñ‹Ð¹ Ð²Ð°ÑˆÐ¸Ð¼ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸ÐµÐ¼ Ð¾Ð³Ð½ÐµÐ½Ð½Ñ‹Ñ… ÑˆÐ°Ñ€Ð¾Ð². ÐÐ°ÐºÐ¾Ð½ÐµÑ†-Ñ‚Ð¾ ÑÑ‚Ð¸ Ñ„Ð°Ð¹ÐµÑ€Ð±Ð¾Ð»Ð»Ñ‹ ÑÑ‚Ð°Ð½ÑƒÑ‚ Ð¿Ð¾Ð»ÐµÐ·Ð½Ñ‹.");
Database.addText("ru.gridItemGreenSharkFinName", "Ð’Ð¾Ð»ÑˆÐµÐ±Ð½Ñ‹Ð¹ Ð¿Ð»Ð°Ð²Ð½Ð¸Ðº Ð·ÐµÐ»Ñ‘Ð½Ð¾Ð¹ Ñ€Ñ‹Ð±Ñ‹");
Database.addText("ru.gridItemGreenSharkFinDescription", "Ð­Ñ‚Ð¾Ñ‚ Ð²Ð¾Ð»ÑˆÐµÐ±Ð½Ñ‹Ð¹ Ð¿Ð»Ð°Ð²Ð½Ð¸Ðº Ð¿Ñ€Ð¸Ð·Ð¾Ð²Ñ‘Ñ‚ ÑÐ¸Ð»Ñƒ Ð¿Ñ€Ð¸Ñ€Ð¾Ð´Ñ‹ Ð½Ð° Ð²Ð°ÑˆÑƒ Ñ„ÐµÑ€Ð¼Ñƒ Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð²! ÐŸÑ€Ð¾Ð¸Ð·Ð²Ð¾Ð´ÑÑ‚Ð²Ð¾ Ð±ÑƒÐ´ÐµÑ‚ ÑƒÐ²ÐµÐ»Ð¸Ñ‡ÐµÐ½Ð¾ Ð²Ð¿ÑÑ‚ÐµÑ€Ð¾.");
Database.addText("ru.gridItemPurpleSharkFinName", "A magical purple shark fin");
Database.addText("Ð’Ð¾Ð»ÑˆÐµÐ±Ð½Ñ‹Ð¹", "ru.gridItemPurpleSharkFinDescription");
Database.addText("Ð­Ñ‚Ð¾Ñ‚", "ru.gridItemTalkingCandyName");
Database.addText("Ð“Ð¾Ð²Ð¾Ñ€ÑÑ‰Ð°Ñ", "ru.gridItemTalkingCandyDescription # Don't translate \"candy box\", keep it like that");
Database.addText("Ð­Ñ‚Ð°", "ru.inventorySpecialNothingEqItem");
Database.addText("ÐÐ¸Ñ‡ÐµÐ³Ð¾", "ru.eqItemWeaponWoodenSwordName");
Database.addText("Ð”ÐµÑ€ÐµÐ²ÑÐ½Ð½Ñ‹Ð¹", "ru.eqItemWeaponWoodenSwordDescription");
Database.addText("ÐŸÑ€Ð¾ÑÑ‚Ð¾Ð¹", "ru.eqItemWeaponIronAxeName");
Database.addText("Ð–ÐµÐ»ÐµÐ·Ð½Ð°Ñ", "ru.eqItemWeaponIronAxeDescription");
Database.addText("ÐŸÑ€Ð¾ÑÑ‚Ð¾Ð¹", "ru.eqItemWeaponPolishedSilverSwordName");
Database.addText("ÐžÑ‚Ð¿Ð¾Ð»Ð¸Ñ€Ð¾Ð²Ð°Ð½Ð½Ñ‹Ð¹", "ru.eqItemWeaponPolishedSilverSwordDescription");
Database.addText("ÐœÐ¾Ð³ÑƒÑ‡Ð¸Ð¹", "ru.eqItemWeaponTrollBludgeonName");
Database.addText("Ð”ÑƒÐ±Ð¸Ð½ÐºÐ°", "ru.eqItemWeaponTrollBludgeonDescription");
Database.addText("Ð’Ñ‹", "ru.eqItemWeaponTribalSpearName");
Database.addText("ÐŸÐ»ÐµÐ¼ÐµÐ½Ð½Ð¾Ðµ", "ru.eqItemWeaponTribalSpearDescription");
Database.addText("Ð’Ñ‹", "ru.eqItemWeaponSummoningTribalSpearName");
Database.addText("ÐŸÑ€Ð¸Ð·Ñ‹Ð²Ð°ÑŽÑ‰ÐµÐµ", "ru.eqItemWeaponSummoningTribalSpearDescription");
Database.addText("Ð­Ñ‚Ð¾", "ru.eqItemWeaponMonkeyWizardStaffName");
Database.addText("ÐŸÐ¾ÑÐ¾Ñ…", "ru.eqItemWeaponMonkeyWizardStaffDescription");
Database.addText("Ð­Ñ‚Ð¾Ñ‚", "ru.eqItemWeaponEnchantedMonkeyWizardStaffName");
Database.addText("ÐŸÐ¾ÑÐ¾Ñ…", "ru.eqItemWeaponEnchantedMonkeyWizardStaffDescription");
Database.addText("Ð­Ñ‚Ð¾Ñ‚", "ru.eqItemWeaponGiantSpoonName");
Database.addText("Ð“Ð¸Ð³Ð°Ð½Ñ‚ÑÐºÐ°Ñ", "ru.eqItemWeaponGiantSpoonDescription");
Database.addText("Ð­Ñ‚Ð°", "ru.eqItemWeaponGiantSpoonOfDoomName");
Database.addText("The", "Ð“Ð¸Ð³Ð°Ð½Ñ‚ÑÐºÐ°Ñ Ð›Ð¾Ð¶ÐºÐ° ÐŸÐ¾Ð³Ð¸Ð±ÐµÐ»Ð¸");
Database.addText("ru.eqItemWeaponGiantSpoonOfDoomDescription", "Ð­Ñ‚Ð° Ð³Ð¸Ð³Ð°Ð½Ñ‚ÑÐºÐ°Ñ Ð»Ð¾Ð¶ÐºÐ° ÐºÑƒÐ´Ð° Ð±Ð¾Ð»ÐµÐµ Ð¼Ð¾Ð³ÑƒÑ‰ÐµÑÑ‚Ð²ÐµÐ½Ð½Ð°, Ñ‡ÐµÐ¼ Ð¾Ð±Ñ‹ÐºÐ½Ð¾Ð²ÐµÐ½Ð½Ð°Ñ Ð³Ð¸Ð³Ð°Ð½Ñ‚ÑÐºÐ°Ñ Ð»Ð¾Ð¶ÐºÐ°, ÐºÐ¾Ñ‚Ð¾Ñ€ÑƒÑŽ Ð²Ñ‹ Ð¼Ð¾Ð³Ð»Ð¸ Ð½Ð°Ð¹Ñ‚Ð¸, Ð½Ð°Ð¿Ñ€Ð¸Ð¼ÐµÑ€, Ð² Ð³Ð¸Ð³Ð°Ð½Ñ‚ÑÐºÐ¾Ð¼ Ñ‡Ð°Ð¹Ð½Ð¸ÐºÐµ. Ð¥Ð¾Ñ‚Ñ Ð¾Ð½Ð° Ð´Ð¾Ð²Ð¾Ð»ÑŒÐ½Ð¾ Ð¼ÐµÐ´Ð»ÐµÐ½Ð½Ð°Ñ.");
Database.addText("ru.eqItemWeaponScytheName", "ÐšÐ¾ÑÐ°");
Database.addText("ru.eqItemWeaponScytheDescription", "Ð“Ð¾Ð²Ð¾Ñ€ÑÑ‚, Ñ‡Ñ‚Ð¾ ÑÑ‚Ð° ÐºÐ¾ÑÐ° Ð¿Ñ€Ð¸Ð½Ð°Ð´Ð»ÐµÐ¶Ð°Ð»Ð° ÑÐ°Ð¼Ð¾Ð¹ Ð¡Ð¼ÐµÑ€Ñ‚Ð¸. ÐžÐ½Ð° Ð¾Ñ‡ÐµÐ½ÑŒ Ð±Ñ‹ÑÑ‚Ñ€Ð°Ñ.");
Database.addText("ru.eqItemHatMerchantHatName", "Ð¨Ð»ÑÐ¿Ð° ÐºÑƒÐ¿Ñ†Ð°");
Database.addText("ru.eqItemHatMerchantHatDescription", "Ð­Ñ‚Ñƒ ÑˆÐ»ÑÐ¿Ñƒ Ð¿Ñ€Ð¾Ð´Ð°Ð» Ð²Ð°Ð¼ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ð½Ñ‹Ð¹ ÐºÑƒÐ¿ÐµÑ†. ÐšÐ¾Ð½Ñ„ÐµÑ‚Ð½Ñ‹Ð¹ ÐºÑƒÐ¿ÐµÑ† Ð»ÑŽÐ±Ð¸Ñ‚ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹. Ð­Ñ‚Ð° ÑˆÐ»ÑÐ¿Ð° ÑƒÐ²ÐµÐ»Ð¸Ñ‡Ð¸Ñ‚ ÐºÐ¾Ð»Ð¸Ñ‡ÐµÑÑ‚Ð²Ð¾ Ð½Ð°Ð¹Ð´ÐµÐ½Ð½Ñ‹Ñ… Ð²Ð°Ð¼Ð¸ Ð²Ð¾ Ð²Ñ€ÐµÐ¼Ñ ÐºÐ²ÐµÑÑ‚Ð¾Ð² ÐºÐ¾Ð½Ñ„ÐµÑ‚ Ð½Ð° 7!");
Database.addText("ru.eqItemHatSorceressHatName", "Ð¨Ð»ÑÐ¿Ð° Ð²Ð¾Ð»ÑˆÐµÐ±Ð½Ð¸Ñ†Ñ‹");
Database.addText("ru.eqItemHatSorceressHatDescription", "Ð­Ñ‚Ñƒ ÑˆÐ»ÑÐ¿Ñƒ Ð²Ð°Ð¼ Ð¿Ñ€Ð¾Ð´Ð°Ð»Ð° Ð²Ð¾Ð»ÑˆÐµÐ±Ð½Ð¸Ñ†Ð°. ÐžÐ½Ð° Ð¿Ð¾Ð²Ñ‹ÑÐ¸Ñ‚ ÑÑ„Ñ„ÐµÐºÑ‚Ñ‹ Ð¾Ñ‚ Ð²Ð°ÑˆÐ¸Ñ… Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ð¹ Ð¸ Ð·ÐµÐ»Ð¸Ð¹.");
Database.addText("ru.eqItemHatOctopusKingCrownName", "ÐšÐ¾Ñ€Ð¾Ð½Ð° ÐšÐ¾Ñ€Ð¾Ð»Ñ ÐžÑÑŒÐ¼Ð¸Ð½Ð¾Ð³Ð¾Ð²");
Database.addText("ru.eqItemHatOctopusKingCrownDescription", "Ð’Ñ‹ Ñ‡ÑƒÐ²ÑÑ‚Ð²ÑƒÐµÑ‚Ðµ ÑÐµÐ±Ñ Ð±Ð¾Ð»ÐµÐµ ÑƒÐ²ÐµÑ€ÐµÐ½Ð½Ñ‹Ð¼, ÐºÐ¾Ð³Ð´Ð° Ð½Ð¾ÑÐ¸Ñ‚Ðµ ÑÑ‚Ñƒ ÐºÐ¾Ñ€Ð¾Ð½Ñƒ. ÐžÐ½Ð° Ð½Ðµ Ð¿Ñ€ÐµÐ´Ð¾ÑÑ‚Ð°Ð²Ð»ÑÐµÑ‚ Ð½Ð¸ÐºÐ°ÐºÐ¸Ñ… Ð±Ð¾Ð½ÑƒÑÐ¾Ð² Ð² ÐºÐ²ÐµÑÑ‚Ð°Ñ…, Ð½Ð¾ ÑÐ°Ð¼Ð¾Ð¾Ñ†ÐµÐ½ÐºÐ° Ð¶Ðµ Ð²Ð°Ð¶Ð½Ð°!");
Database.addText("ru.eqItemHatOctopusKingCrownWithJaspersName", "ÐšÐ¾Ñ€Ð¾Ð½Ð° ÐšÐ¾Ñ€Ð¾Ð»Ñ ÐžÑÑŒÐ¼Ð¸Ð½Ð¾Ð³Ð¾Ð², Ð¿Ð¾ÐºÑ€Ñ‹Ñ‚Ð°Ñ ÑÑˆÐ¼Ð¾Ð¹");
Database.addText("ru.eqItemHatOctopusKingCrownWithJaspersDescription", "Ð­Ñ‚Ð° Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð½Ð°Ñ ÐºÐ¾Ñ€Ð¾Ð½Ð° ÑÐ´ÐµÐ»Ð°Ð½Ð° Ð¸Ð· Ð·Ð¾Ð»Ð¾Ñ‚Ð° Ð¸ ÐºÑ€Ð°ÑÐ½Ð¾Ð¹ ÑÑˆÐ¼Ñ‹. Ð’Ð¾ Ð²Ñ€ÐµÐ¼Ñ ÐºÐ²ÐµÑÑ‚Ð¾Ð² Ð¾Ð½Ð° Ð±ÑƒÐ´ÐµÑ‚ Ñ‡Ð°ÑÑ‚Ð¾ ÐºÐ°ÑÑ‚Ð¾Ð²Ð°Ñ‚ÑŒ Ð¾Ð³Ð½ÐµÐ½Ð½Ñ‹Ðµ ÑˆÐ°Ñ€Ñ‹ Ð²Ð¾ÐºÑ€ÑƒÐ³ Ð²Ð°Ñ. Ð ÐµÑ‰Ñ‘ Ð¾Ð½Ð° ÑÐ¸ÑÐµÑ‚!");
Database.addText("ru.eqItemHatOctopusKingCrownWithObsidianName", "ÐšÐ¾Ñ€Ð¾Ð½Ð° ÐšÐ¾Ñ€Ð¾Ð»Ñ ÐžÑÑŒÐ¼Ð¸Ð½Ð¾Ð³Ð¾Ð², Ð¿Ð¾ÐºÑ€Ñ‹Ñ‚Ð°Ñ Ð¾Ð±ÑÐ¸Ð´Ð¸Ð°Ð½Ð¾Ð¼");
Database.addText("ru.eqItemHatOctopusKingCrownWithObsidianDescription", "Ð­Ñ‚Ð° Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð½Ð°Ñ ÐºÐ¾Ñ€Ð¾Ð½Ð° ÑÐ´ÐµÐ»Ð°Ð½Ð° Ð¸Ð· Ð·Ð¾Ð»Ð¾Ñ‚Ð° Ð¸ Ð¾Ð±ÑÐ¸Ð´Ð¸Ð°Ð½Ð°. ÐžÐ½Ð° Ð¿Ñ€ÐµÐºÑ€Ð°ÑÐ½Ð°. Ð’Ð¾ Ð²Ñ€ÐµÐ¼Ñ ÐºÐ²ÐµÑÑ‚Ð¾Ð² Ð¾Ð½Ð° Ð¿Ñ€Ð¸Ð·Ð¾Ð²Ñ‘Ñ‚ ÐšÐ¾Ñ€Ð¾Ð»Ñ ÐžÑÑŒÐ¼Ð¸Ð½Ð¾Ð³Ð¾Ð², ÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ð¹ Ð±ÑƒÐ´ÐµÑ‚ ÑÑ€Ð°Ð¶Ð°Ñ‚ÑŒÑÑ Ð½Ð° Ð²Ð°ÑˆÐµÐ¹ ÑÑ‚Ð¾Ñ€Ð¾Ð½Ðµ. Ð¢ÐµÐ½Ñ‚Ð°ÐºÐ»Ð¸ÑÑ‚Ñ‹Ð¹ ÑÐ¾ÑŽÐ·Ð½Ð¸Ðº!");
Database.addText("ru.eqItemGlovesLeatherGlovesName", "ÐšÐ¾Ð¶Ð°Ð½Ñ‹Ðµ Ð¿ÐµÑ€Ñ‡Ð°Ñ‚ÐºÐ¸");
Database.addText("ru.eqItemGlovesLeatherGlovesDescription", "Ð­Ñ‚Ð¸ Ð¿ÐµÑ€Ñ‡Ð°Ñ‚ÐºÐ¸ Ð½Ð¸Ñ‡ÐµÐ³Ð¾ Ð½Ðµ Ð´ÐµÐ»Ð°ÑŽÑ‚. ÐÐ¾ Ð¾Ð½Ð¸ Ð¼ÑÐ³ÐºÐ¸Ðµ Ð¸ ÑƒÐ´Ð¾Ð±Ð½Ñ‹Ðµ, ÐºÐ°Ðº Ð¼Ð¸Ð½Ð¸Ð¼ÑƒÐ¼!");
Database.addText("ru.eqItemGlovesRedEnchantedGlovesName", "ÐšÑ€Ð°ÑÐ½Ñ‹Ðµ Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð½Ñ‹Ðµ Ð¿ÐµÑ€Ñ‡Ð°Ñ‚ÐºÐ¸");
Database.addText("ru.eqItemGlovesRedEnchantedGlovesDescription", "Ð­Ñ‚Ð¸ Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð½Ñ‹Ðµ Ð¿ÐµÑ€Ñ‡Ð°Ñ‚ÐºÐ¸ Ð¸ÑÐ¿ÑƒÑÐºÐ°ÑŽÑ‚ Ð¼ÑÐ³ÐºÐ¸Ð¹ ÐºÑ€Ð°ÑÐ½Ñ‹Ð¹ ÑÐ²ÐµÑ‚, ÐºÐ¾Ð³Ð´Ð° Ð²Ð¾ÐºÑ€ÑƒÐ³ Ð²Ð°Ñ Ñ‚ÐµÐ¼Ð½Ð¾. Ð’Ð¾ Ð²Ñ€ÐµÐ¼Ñ ÐºÐ²ÐµÑÑ‚Ð¾Ð² Ð¾Ð½Ð¸ Ð±ÑƒÐ´ÑƒÑ‚ ÐºÐ°ÑÑ‚Ð¾Ð²Ð°Ñ‚ÑŒ Ð¼Ð°Ð»ÐµÐ½ÑŒÐºÐ¸Ðµ Ð¾Ð³Ð½ÐµÐ½Ð½Ñ‹Ðµ ÑˆÐ°Ñ€Ñ‹ Ð² ÑÑ‚Ð¾Ñ€Ð¾Ð½Ñƒ Ð²Ð°ÑˆÐ¸Ñ… Ð²Ñ€Ð°Ð³Ð¾Ð². Ð¨Ð°Ñ€Ñ‹ Ð¾Ð¿Ñ€ÐµÐ´ÐµÐ»Ñ‘Ð½Ð½Ð¾ Ð¼Ð¾Ð³ÑƒÑ‚ Ð±Ñ‹Ñ‚ÑŒ Ð¿Ð¾Ð»ÐµÐ·Ð½Ñ‹.");
Database.addText("ru.eqItemGlovesPinkEnchantedGlovesName", "Ð Ð¾Ð·Ð¾Ð²Ñ‹Ðµ Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð½Ñ‹Ðµ Ð¿ÐµÑ€Ñ‡Ð°Ñ‚ÐºÐ¸");
Database.addText("ru.eqItemGlovesPinkEnchantedGlovesDescription", "Ð­Ñ‚Ð¸ Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð½Ñ‹Ðµ Ð¿ÐµÑ€Ñ‡Ð°Ñ‚ÐºÐ¸ Ð¾ÑÑ‚Ð°Ð²Ð»ÑÑŽÑ‚ Ñ€Ð¾Ð·Ð¾Ð²Ñ‹Ð¹ ÑÐ»ÐµÐ´ Ð½Ð° Ð²ÑÑ‘Ð¼, Ñ‡ÐµÐ³Ð¾ Ð²Ñ‹ ÐºÐ¾ÑÐ½Ñ‘Ñ‚ÐµÑÑŒ. Ð’Ð¾ Ð²Ñ€ÐµÐ¼Ñ ÐºÐ²ÐµÑÑ‚Ð¾Ð² Ð¾Ð½Ð¸ Ð±ÑƒÐ´ÑƒÑ‚ Ð¿Ð¾ÑÑ‚Ð¾ÑÐ½Ð½Ð¾ Ð²Ð°Ñ Ð»ÐµÑ‡Ð¸Ñ‚ÑŒ.");
Database.addText("ru.eqItemBootsRocketBootsName", "Ð Ð°ÐºÐµÑ‚Ð½Ñ‹Ðµ Ð±Ð¾Ñ‚Ð¸Ð½ÐºÐ¸");
Database.addText("ru.eqItemBootsRocketBootsDescription", "Ð­Ñ‚Ð¸ ÐºÑ€ÑƒÑ‚Ñ‹Ðµ Ñ€Ð°ÐºÐµÑ‚Ð½Ñ‹Ðµ Ð±Ð¾Ñ‚Ð¸Ð½ÐºÐ¸ Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑÑ‚ Ð²Ð°Ð¼ Ð¿Ñ€Ñ‹Ð³Ð°Ñ‚ÑŒ Ð² Ð²Ð¾Ð·Ð´ÑƒÑ…Ðµ, Ñ‚Ð°Ðº Ñ‡Ñ‚Ð¾ Ð²Ñ‹ Ð¿Ñ€Ð°ÐºÑ‚Ð¸Ñ‡ÐµÑÐºÐ¸ Ð±ÑƒÐ´ÐµÑ‚Ðµ Ð»ÐµÑ‚Ð°Ñ‚ÑŒ!");
Database.addText("ru.eqItemBootsLeatherBootsName", "ÐšÐ¾Ð¶Ð°Ð½Ñ‹Ðµ Ð±Ð¾Ñ‚Ð¸Ð½ÐºÐ¸");
Database.addText("ru.eqItemBootsLeatherBootsDescription", "ÐŸÑ€Ð¾ÑÑ‚Ñ‹Ðµ ÐºÐ¾Ð¶Ð°Ð½Ñ‹Ðµ Ð±Ð¾Ñ‚Ð¸Ð½ÐºÐ¸. ÐÐ¸Ñ‡ÐµÐ³Ð¾ Ð¾ÑÐ¾Ð±ÐµÐ½Ð½Ð¾Ð³Ð¾.");
Database.addText("ru.eqItemBootsBootsOfIntrospectionName", "Ð‘Ð¾Ñ‚Ð¸Ð½ÐºÐ¸ ÑÐ°Ð¼Ð¾Ð°Ð½Ð°Ð»Ð¸Ð·Ð°");
Database.addText("ru.eqItemBootsBootsOfIntrospectionDescription", "Ð¡Ð¿Ð¾ÐºÐ¾Ð¹Ð½Ð¾ Ð²Ð´Ð¾Ñ…Ð½Ð¸Ñ‚Ðµ Ð¸ ÑƒÑÐ¿Ð¾ÐºÐ¾Ð¹Ñ‚ÐµÑÑŒ. Ð•ÑÐ»Ð¸ Ð²Ñ‹ Ð½Ð°Ð´ÐµÐ½ÐµÑ‚Ðµ ÑÑ‚Ð¸ Ð±Ð¾Ñ‚Ð¸Ð½ÐºÐ¸, Ñ‚Ð¾ Ð½Ð¸ÐºÐ¾Ð³Ð´Ð° Ð½Ðµ Ñ‚Ñ€Ð¾Ð½ÐµÑ‚ÐµÑÑŒ Ñ Ð¼ÐµÑÑ‚Ð°, ÐµÑÐ»Ð¸ ÐºÐ°ÑÐ°ÐµÑ‚ÐµÑÑŒ Ð·ÐµÐ¼Ð»Ð¸.");
Database.addText("ru.eqItemBodyArmoursLightweightBodyArmourName", "Ð›Ñ‘Ð³ÐºÐ°Ñ Ð±Ñ€Ð¾Ð½Ñ");
Database.addText("ru.eqItemBodyArmoursLightweightBodyArmourDescription", "Ð­Ñ‚Ð° Ð±Ñ€Ð¾Ð½Ñ ÑƒÐ²ÐµÐ»Ð¸Ñ‡Ð¸Ñ‚ Ð·Ð°Ñ‰Ð¸Ñ‚Ñƒ, Ð½Ð¾ Ð½ÐµÑÐ¸Ð»ÑŒÐ½Ð¾. Ð’Ñ‹ Ð±ÑƒÐ´ÐµÑ‚Ðµ Ð½ÐµÐ¼Ð½Ð¾Ð³Ð¾ ÑƒÑÑ‚Ð¾Ð¹Ñ‡Ð¸Ð²ÐµÐµ Ðº Ð°Ñ‚Ð°ÐºÐ°Ð¼ Ð²Ñ€Ð°Ð³Ð°.");
Database.addText("ru.eqItemBodyArmoursKnightBodyArmourName", "Ð Ñ‹Ñ†Ð°Ñ€ÑÐºÐ°Ñ Ð±Ñ€Ð¾Ð½Ñ");
Database.addText("ru.eqItemBodyArmoursKnightBodyArmourDescription", "Ð¡Ð¸Ð»ÑŒÐ½Ð°Ñ Ð±Ñ€Ð¾Ð½Ñ, ÐºÐ¾Ñ‚Ð¾Ñ€Ð°Ñ Ð·Ð°Ñ‰Ð¸Ñ‚Ð¸Ñ‚ Ð²Ð°Ñ. Ð’Ñ‹ Ð±ÑƒÐ´ÐµÑ‚Ðµ Ð±Ð¾Ð»ÐµÐµ ÑƒÑÑ‚Ð¾Ð¹Ñ‡Ð¸Ð²Ñ‹Ð¼Ð¸ Ðº Ð°Ñ‚Ð°ÐºÐ°Ð¼ Ð²Ñ€Ð°Ð³Ð°.");
Database.addText("ru.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Ð—Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð½Ð°Ñ Ñ€Ñ‹Ñ†Ð°Ñ€ÑÐºÐ°Ñ Ð±Ñ€Ð¾Ð½Ñ");
Database.addText("ru.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Ð­Ñ‚Ð¾ Ð¾Ñ‡ÐµÐ½ÑŒ Ð¾ÑÐ¾Ð±ÐµÐ½Ð½Ð°Ñ Ð±Ñ€Ð¾Ð½Ñ. Ð’Ñ‹ Ð±ÑƒÐ´ÐµÑ‚Ðµ ÐšÐ£Ð”Ð Ð‘ÐžÐ›Ð•Ð• ÑƒÑÑ‚Ð¾Ð¹Ñ‡Ð¸Ð²Ñ‹Ð¼Ð¸ Ðº Ð°Ñ‚Ð°ÐºÐ°Ð¼ Ð²Ñ€Ð°Ð³Ð°, Ð½Ð¾ ÑƒÑ€Ð¾Ð½, Ð½Ð°Ð½Ð¾ÑÐ¸Ð¼Ñ‹Ð¹ Ð²Ð°ÑˆÐ¸Ð¼ Ð¾Ñ€ÑƒÐ¶Ð¸ÐµÐ¼, ÑƒÐ¼ÐµÐ½ÑŒÑˆÐ¸Ñ‚ÑÑ Ð²Ð´Ð²Ð¾Ðµ.");
Database.addText("ru.mapVillageForgeBuyWoodenSwordButton", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ Ð´ÐµÑ€ÐµÐ²ÑÐ½Ð½Ñ‹Ð¹ Ð¼ÐµÑ‡ (150 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.mapVillageForgeBuyWoodenSwordSpeech", "Ð¡Ð¿Ð°ÑÐ¸Ð±Ð¾ Ð·Ð° Ð¿Ð¾ÐºÑƒÐ¿ÐºÑƒ! Ð­Ñ‚Ð¾Ñ‚ Ð´ÐµÑ€ÐµÐ²ÑÐ½Ð½Ñ‹Ð¹ Ð¼ÐµÑ‡ Ð´Ð¾Ð²Ð¾Ð»ÑŒÐ½Ð¾ ÑÐ»Ð°Ð±, Ð½Ð¾ Ð´Ð»Ñ Ð½Ð°Ñ‡Ð°Ð»Ð° ÑÐ¾Ð¹Ð´Ñ‘Ñ‚.");
Database.addText("ru.mapVillageForgeBuyIronAxeButton", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ Ð¶ÐµÐ»ÐµÐ·Ð½Ñ‹Ð¹ Ñ‚Ð¾Ð¿Ð¾Ñ€ (400 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.mapVillageForgeBuyIronAxeSpeech", "ÐÐ°Ð´ÐµÑŽÑÑŒ, Ð²Ð°Ð¼ Ð¿Ð¾Ð½Ñ€Ð°Ð²Ð¸Ñ‚ÑÑ ÑÑ‚Ð¾Ñ‚ Ð¶ÐµÐ»ÐµÐ·Ð½Ñ‹Ð¹ Ñ‚Ð¾Ð¿Ð¾Ñ€. Ð¯ ÐµÐ³Ð¾ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ñ‡Ñ‚Ð¾ Ð·Ð°Ñ‚Ð¾Ñ‡Ð¸Ð» Ð´Ð»Ñ Ð²Ð°Ñ!");
Database.addText("ru.mapVillageForgeBuyPolishedSilverSwordButton", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ Ð¿Ð¾Ð»Ð¸Ñ€Ð¾Ð²Ð°Ð½Ð½Ñ‹Ð¹ ÑÐµÑ€ÐµÐ±Ñ€ÑÐ½Ñ‹Ð¹ Ð¼ÐµÑ‡ (2 000 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.mapVillageForgeBuyPolishedSilverSwordSpeech", "Ð¯ Ð¿Ð¾Ñ‚Ñ€Ð°Ñ‚Ð¸Ð» Ð¼Ð½Ð¾Ð³Ð¾ Ð²Ñ€ÐµÐ¼ÐµÐ½Ð¸, Ñ‡Ñ‚Ð¾Ð±Ñ‹ ÑÐ´ÐµÐ»Ð°Ñ‚ÑŒ ÑÑ‚Ð¾Ñ‚ Ð¼ÐµÑ‡. Ð¯ ÑƒÐ²ÐµÑ€ÑÑŽ Ð²Ð°Ñ, Ñ‡Ñ‚Ð¾ Ð¾Ð½ ÑÑ‚Ð¾Ð¸Ñ‚ ÑÐ²Ð¾ÐµÐ¹ Ñ†ÐµÐ½Ñ‹.");
Database.addText("ru.mapVillageForgeBuyLightweightBodyArmourButton", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ Ð»Ñ‘Ð³ÐºÑƒÑŽ Ð±Ñ€Ð¾Ð½ÑŽ (15 000 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.mapVillageForgeBuyLightweightBodyArmourSpeech", "Ð­Ñ‚Ð° Ð±Ñ€Ð¾Ð½Ñ Ð¿Ñ€ÐµÐ´Ð¾ÑÑ‚Ð°Ð²Ð¸Ñ‚ Ð²Ð°Ð¼ Ð·Ð°Ñ‰Ð¸Ñ‚Ñƒ Ð¾Ñ‚ Ð²Ð°ÑˆÐ¸Ñ… Ð²Ñ€Ð°Ð³Ð¾Ð².");
Database.addText("ru.mapVillageForgeBuyScytheButton", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ ÐºÐ¾ÑÑƒ (5 000 000 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.mapVillageForgeBuyScytheSpeech", "Ð£ Ð¼ÐµÐ½Ñ ÑƒÑˆÐ»Ð¾ Ð½ÐµÑÐºÐ¾Ð»ÑŒÐºÐ¾ Ð¼ÐµÑÑÑ†ÐµÐ², Ñ‡Ñ‚Ð¾Ð±Ñ‹ ÑÐ´ÐµÐ»Ð°Ñ‚ÑŒ ÑÑ‚Ñƒ ÐºÐ¾ÑÑƒ. ÐÐ°ÑÑ‚Ð¾ÑÑ‰ÐµÐµ Ð¿Ñ€Ð¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ðµ Ð¸ÑÐºÑƒÑÑÑ‚Ð²Ð°. Ð­Ñ‚Ð¾, Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð½Ð°Ð¸Ð±Ñ‹ÑÑ‚Ñ€ÐµÐ¹ÑˆÐµÐµ Ð¾Ñ€ÑƒÐ¶Ð¸Ðµ, ÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ð¼ Ð²Ñ‹ ÐºÐ¾Ð³Ð´Ð°-Ð»Ð¸Ð±Ð¾ Ð²Ð¾ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐµÑ‚ÐµÑÑŒ. Ð£Ð´Ð°Ñ‡Ð¸!");
Database.addText("ru.wishingWellThrowFirstCandyButton", "Ð‘Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñƒ Ð² ÐºÐ¾Ð»Ð¾Ð´ÐµÑ†");
Database.addText("ru.wishingWellCandyIntroductionSpeech", "ÐŸÑ€Ð¸Ð²ÐµÑ‚, Ð¿ÑƒÑ‚ÐµÑˆÐµÑÑ‚Ð²ÐµÐ½Ð½Ð¸Ðº! Ð¯ - ÐºÐ¾Ð»Ð¾Ð´ÐµÑ† Ð¶ÐµÐ»Ð°Ð½Ð¸Ð¹. Ð¯ Ð¸ÑÐ¿Ð¾Ð»Ð½ÑŽ Ñ‚Ð²Ð¾Ð¸ Ð¶ÐµÐ»Ð°Ð½Ð¸Ñ Ð² Ð¾Ð±Ð¼ÐµÐ½ Ð½Ð° ÑÐ»Ð°Ð´Ð¾ÑÑ‚Ð¸! Ð•ÑÐ»Ð¸ Ñ‚Ñ‹ Ð±Ñ€Ð¾ÑÐ¸ÑˆÑŒ Ð² Ð¼ÐµÐ½Ñ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñƒ, Ñ Ð¸ÑÑ†ÐµÐ»ÑŽ Ñ‚Ð²Ð¾Ð¸ Ñ€Ð°Ð½Ñ‹.");
Database.addText("ru.wishingWellThrewCandiesSpeech", "Ð¢Ð²Ð¾Ð¸ Ñ€Ð°Ð½Ñ‹ Ð¸ÑÑ†ÐµÐ»ÐµÐ½Ñ‹!");
Database.addText("ru.wishingWellNoWoundSpeech", "Ð£ Ñ‚ÐµÐ±Ñ Ð½ÐµÑ‚ Ñ€Ð°Ð½, Ñ‡Ñ‚Ð¾Ð±Ñ‹ Ð¸Ñ… Ð¸Ð·Ð»ÐµÑ‡Ð¸Ñ‚ÑŒ!");
Database.addText("ru.wishingWellThrowFirstLollipopButton", "Ð‘Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ Ð»ÐµÐ´ÐµÐ½ÐµÑ† Ð² ÐºÐ¾Ð»Ð¾Ð´ÐµÑ†");
Database.addText("ru.wishingWellLollipopIntroductionSpeech", "ÐŸÑ€Ð¸Ð²ÐµÑ‚, Ð¿ÑƒÑ‚ÐµÑˆÐµÑÑ‚Ð²ÐµÐ½Ð½Ð¸Ðº. Ð¯ - ÐºÐ¾Ð»Ð¾Ð´ÐµÑ† Ð¶ÐµÐ»Ð°Ð½Ð¸Ð¹. Ð¯ Ð¸ÑÐ¿Ð¾Ð»Ð½ÑŽ Ñ‚Ð²Ð¾Ð¸ Ð¶ÐµÐ»Ð°Ð½Ð¸Ñ Ð² Ð¾Ð±Ð¼ÐµÐ½ Ð½Ð° ÑÐ»Ð°Ð´Ð¾ÑÑ‚Ð¸! Ð•ÑÐ»Ð¸ Ñ‚Ñ‹ Ð±Ñ€Ð¾ÑÐ¸ÑˆÑŒ Ð² Ð¼ÐµÐ½Ñ Ð»ÐµÐ´ÐµÐ½ÐµÑ†, Ñ Ð¿Ñ€ÐµÐ²Ñ€Ð°Ñ‰Ñƒ ÐµÐ³Ð¾ Ð² ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹.");
Database.addText("ru.wishingWellThrewLollipopsSpeech", "Ð¢Ð²Ð¾Ð¸ Ð»ÐµÐ´ÐµÐ½Ñ†Ñ‹ Ð¿Ñ€ÐµÐ²Ñ€Ð°Ñ‰ÐµÐ½Ñ‹ Ð² ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹! Ð”Ð²Ð° Ð»ÐµÐ´ÐµÐ½Ñ†Ð° - Ð¾Ð´Ð½Ð° ÐºÐ¾Ð½Ñ„ÐµÑ‚Ð°.");
Database.addText("ru.wishingWellThrowChocolateBarButton", "Ð‘Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½ÑƒÑŽ Ð¿Ð»Ð¸Ñ‚ÐºÑƒ Ð² ÐºÐ¾Ð»Ð¾Ð´ÐµÑ†");
Database.addText("ru.wishingWellChocolateBarIntroductionSpeech", "ÐŸÑ€Ð¸Ð²ÐµÑ‚, Ð¿ÑƒÑ‚ÐµÑˆÐµÑÑ‚Ð²ÐµÐ½Ð½Ð¸Ðº. Ð¯ - ÐºÐ¾Ð»Ð¾Ð´ÐµÑ† Ð¶ÐµÐ»Ð°Ð½Ð¸Ð¹. Ð¯ Ð¸ÑÐ¿Ð¾Ð»Ð½ÑŽ Ñ‚Ð²Ð¾Ð¸ Ð¶ÐµÐ»Ð°Ð½Ð¸Ñ Ð² Ð¾Ð±Ð¼ÐµÐ½ Ð½Ð° ÑÐ»Ð°Ð´Ð¾ÑÑ‚Ð¸! Ð¯ Ð»ÑŽÐ±Ð»ÑŽ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ñ‹Ðµ Ð¿Ð»Ð¸Ñ‚ÐºÐ¸. ÐžÑ‡ÐµÐ½ÑŒ Ð»ÑŽÐ±Ð»ÑŽ. Ð—Ð° ÐºÐ°Ð¶Ð´ÑƒÑŽ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½ÑƒÑŽ Ð¿Ð»Ð¸Ñ‚ÐºÑƒ, ÐºÐ¾Ñ‚Ð¾Ñ€ÑƒÑŽ Ñ‚Ñ‹ Ð² Ð¼ÐµÐ½Ñ Ð±Ñ€Ð¾ÑÐ¸ÑˆÑŒ, Ð²ÐºÐ»ÑŽÑ‡Ð°Ñ ÑÑ‚Ñƒ, Ñ‚Ñ‹ Ð¿Ð¾Ð»ÑƒÑ‡Ð¸ÑˆÑŒ Ð¾Ð´Ð½Ð¾ Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð¸Ðµ.");
Database.addText("ru.wishingWellThrewChocolateBarSpeech", "ÐšÐ°ÐºÐ¾Ð¹ Ð¿Ñ€ÐµÐ´Ð¼ÐµÑ‚ Ñ‚Ñ‹ Ð±Ñ‹ Ñ…Ð¾Ñ‚ÐµÐ» Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ñ‚ÑŒ?");
Database.addText("ru.wishingWellThrowPainAuChocolatButton", "Ð‘Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ñ‹Ð¹ Ñ…Ð»ÐµÐ± Ð² ÐºÐ¾Ð»Ð¾Ð´ÐµÑ†");
Database.addText("ru.wishingWellPainAuChocolatIntroductionSpeech", "ÐŸÑ€Ð¸Ð²ÐµÑ‚, Ð¿ÑƒÑ‚ÐµÑˆÐµÑÑ‚Ð²ÐµÐ½Ð½Ð¸Ðº. Ð¯ - ÐºÐ¾Ð»Ð¾Ð´ÐµÑ† Ð¶ÐµÐ»Ð°Ð½Ð¸Ð¹. Ð¯ Ð¸ÑÐ¿Ð¾Ð»Ð½ÑŽ Ñ‚Ð²Ð¾Ð¸ Ð¶ÐµÐ»Ð°Ð½Ð¸Ñ Ð² Ð¾Ð±Ð¼ÐµÐ½ Ð½Ð° ÑÐ»Ð°Ð´Ð¾ÑÑ‚Ð¸! ÐšÐ¾Ð³Ð´Ð° Ñ‚Ñ‹ Ð±Ñ€Ð¾ÑÐ¸ÑˆÑŒ Ð² Ð¼ÐµÐ½Ñ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ñ‹Ð¹ Ñ…Ð»ÐµÐ±, Ñ Ð´Ð°Ð¼ Ñ‚ÐµÐ±Ðµ Ð¾ÑÐ¾Ð±ÐµÐ½Ð½Ñ‹Ð¹ Ð¿Ð¾Ð´Ð°Ñ€Ð¾Ðº. Ð’Ñ‹Ð±Ð¸Ñ€Ð°Ð¹ Ñ ÑƒÐ¼Ð¾Ð¼.");
Database.addText("ru.wishingWellThrewPainAuChocolatSpeech", "Ð¡Ð¿Ð°ÑÐ¸Ð±Ð¾ Ð·Ð° ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ñ‹Ð¹ Ñ…Ð»ÐµÐ±! Ð¢ÐµÐ¿ÐµÑ€ÑŒ Ñ‚Ñ‹ Ð¼Ð¾Ð¶ÐµÑˆÑŒ Ð²Ñ‹Ð±Ñ€Ð°Ñ‚ÑŒ ÑÐµÐ±Ðµ Ð¿Ð¾Ð´Ð°Ñ€Ð¾Ðº.");
Database.addText("ru.wishingWellChooseGift", "Ð’Ñ‹Ð±Ð¸Ñ€Ð°Ð¹ ÑÐµÐ±Ðµ Ð¿Ð¾Ð´Ð°Ñ€Ð¾Ðº!");
Database.addText("ru.wishingWellChooseGiftButton", "Ð’Ñ‹Ð±Ñ€Ð°Ñ‚ÑŒ");
Database.addText("ru.wishingWellGiftDoneSpeech", "Ð“Ð¾Ñ‚Ð¾Ð²Ð¾! Ð¢ÐµÐ¿ÐµÑ€ÑŒ Ñƒ Ñ‚ÐµÐ±Ñ ÐµÑÑ‚ÑŒ Ð½Ð¾Ð²Ñ‹Ð¹ Ð¿Ð¾Ð´Ð°Ñ€Ð¾Ðº. ÐžÐ½ Ð¿Ð¾ÑÐ²Ð¸Ñ‚ÑÑ Ð² Ñ‚Ð²Ð¾Ñ‘Ð¼ Ð¸Ð½Ð²ÐµÐ½Ñ‚Ð°Ñ€Ðµ.");
Database.addText("ru.wishingWellNoPossibleEnchantment", "ÐÐµÑ‚ Ð´Ð¾ÑÑ‚ÑƒÐ¿Ð½Ñ‹Ñ… Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð¸Ð¹");
Database.addText("ru.wishingWellChooseEnchantment", "Ð’Ñ‹Ð±ÐµÑ€Ð¸ Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð¸Ðµ");
Database.addText("ru.wishingWellEnchantButton", "Ð—Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ñ‚ÑŒ");
Database.addText("ru.wishingWellEnchantmentDoneSpeech", "Ð’Ð¾Ð¾Ð¾Ð¾Ñ‚! Ð¢Ð²Ð¾Ð¹ Ð¿Ñ€ÐµÐ´Ð¼ÐµÑ‚ Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½.");
Database.addText("ru.pierLighthouseButton", "ÐžÑ‚Ð¿Ñ€Ð°Ð²Ð¸Ñ‚ÑŒÑÑ Ð½Ð° Ð»Ð¾Ð´ÐºÐµ Ð½Ð° Ð¼Ð°ÑÐº");
Database.addText("ru.pierTheSeaButton", "ÐŸÑ€Ñ‹Ð³Ð½ÑƒÑ‚ÑŒ Ð² Ð¼Ð¾Ñ€Ðµ");
Database.addText("ru.lonelyHouseOpenBox", "ÐžÑ‚ÐºÑ€Ñ‹Ñ‚ÑŒ ÐºÐ¾Ñ€Ð¾Ð±ÐºÑƒ");
Database.addText("ru.lonelyHouseShakeBox", "ÐŸÐ¾Ñ‚Ñ€ÑÑÑ‚Ð¸ ÐºÐ¾Ñ€Ð¾Ð±ÐºÑƒ");
Database.addText("ru.lonelyHouseBreakLock", "Ð¡Ð»Ð¾Ð¼Ð°Ñ‚ÑŒ ÐºÐ¾Ñ€Ð¾Ð±ÐºÑƒ");
Database.addText("ru.lonelyHouseKickBox", "ÐŸÐ½ÑƒÑ‚ÑŒ ÐºÐ¾Ñ€Ð¾Ð±ÐºÑƒ");
Database.addText("ru.lonelyHouseAskTheBoxToOpenItself", "ÐŸÐ¾Ð¿Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ ÐºÐ¾Ñ€Ð¾Ð±ÐºÑƒ Ð¾Ñ‚ÐºÑ€Ñ‹Ñ‚ÑŒÑÑ");
Database.addText("ru.lonelyHouseLureTheBoxWithACandy", "ÐŸÑ€Ð¸Ð¼Ð°Ð½Ð¸Ñ‚ÑŒ ÐºÐ¾Ñ€Ð¾Ð±ÐºÑƒ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ð¾Ð¹");
Database.addText("ru.lonelyHouseTakeTheBox", "Ð’Ð·ÑÑ‚ÑŒ ÐºÐ¾Ñ€Ð¾Ð±ÐºÑƒ Ñ ÑÐ¾Ð±Ð¾Ð¹, Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð²Ð°Ð¼ Ð¿Ð¾Ð½Ð°Ð´Ð¾Ð±Ð¸Ñ‚ÑÑ ÐºÐ»ÑŽÑ‡ Ñ‡Ñ‚Ð¾Ð±Ñ‹ ÐµÑ‘ Ð¾Ñ‚ÐºÑ€Ñ‹Ñ‚ÑŒ");
Database.addText("ru.lonelyHouseOpenBoxResult", "ÐšÐ¾Ñ€Ð¾Ð±ÐºÐ° Ð·Ð°ÐºÑ€Ñ‹Ñ‚Ð°");
Database.addText("ru.lonelyHouseShakeBoxResult", "ÐÐ¸Ñ‡ÐµÐ³Ð¾ Ð½Ðµ Ð¿Ñ€Ð¾Ð¸Ð·Ð¾ÑˆÐ»Ð¾");
Database.addText("ru.lonelyHouseBreakLockResult", "Ð—Ð°Ð¼Ð¾Ðº ÑƒÑÑ‚Ð¾ÑÐ»");
Database.addText("ru.lonelyHouseKickBoxResult", "Ð’Ð°ÑˆÐ° Ð½Ð¾Ð³Ð° Ð½ÐµÐ¼Ð½Ð¾Ð³Ð¾ Ð¿Ð¾Ð±Ð°Ð»Ð¸Ð²Ð°ÐµÑ‚, Ð½Ð¾ Ð½Ð¸Ñ‡ÐµÐ³Ð¾ Ð½Ðµ Ð¿Ñ€Ð¾Ð¸Ð·Ð¾ÑˆÐ»Ð¾");
Database.addText("ru.lonelyHouseAskTheBoxToOpenItselfResult", "...Ð²Ñ‹ Ñ€Ð°Ð·Ð³Ð¾Ð²Ð°Ñ€Ð¸Ð²Ð°ÐµÑ‚Ðµ Ñ ÐºÐ¾Ñ€Ð¾Ð±ÐºÐ¾Ð¹, Ð²Ñ‹ Ð² ÐºÑƒÑ€ÑÐµ, Ð´Ð°?");
Database.addText("ru.lonelyHouseLureTheBoxWithACandyResult", "ÐšÐ¾Ñ€Ð¾Ð±ÐºÐµ, Ð¿Ð¾-Ð²Ð¸Ð´Ð¸Ð¼Ð¾Ð¼Ñƒ, Ð¿Ð¾Ñ„Ð¸Ð³");
Database.addText("ru.lonelyHouseTakeTheBoxResult", "Ð’Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð² ÑÑ‚Ð¾Ð¼ candy box ÐµÑÑ‚ÑŒ Ñ‡Ñ‚Ð¾-Ñ‚Ð¾ Ð¸Ð½Ñ‚ÐµÑ€ÐµÑÐ½Ð¾Ðµ.");
Database.addText("ru.lollipopFarmConstructMill", "ÐŸÐ¾ÑÑ‚Ñ€Ð¾Ð¸Ñ‚ÑŒ Ð¼ÐµÐ»ÑŒÐ½Ð¸Ñ†Ñƒ (10 000 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð²)");
Database.addText("ru.lollipopFarmFeedMill", "ÐÐ°ÐºÐ¾Ñ€Ð¼Ð¸Ñ‚ÑŒ Ð¼ÐµÐ»ÑŒÐ½Ð¸Ñ†Ñƒ");
Database.addText("ru.lollipopFarmCurrentCandiesProduction", "Ð¢ÐµÐºÑƒÑ‰ÐµÐµ Ð¿Ñ€Ð¾Ð¸Ð·Ð²Ð¾Ð´ÑÑ‚Ð²Ð¾ ÐºÐ¾Ð½Ñ„ÐµÑ‚");
Database.addText("ru.lollipopFarmDigPond", "Ð’Ñ‹ÐºÐ¾Ð¿Ð°Ñ‚ÑŒ Ð¿Ñ€ÑƒÐ´ (100 000 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð²)");
Database.addText("ru.lollipopFarmBuyLolligator", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ð¾Ð´Ð¸Ð»Ð° (1200 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.lollipopFarmLolligatorsConversionText", "ÐŸÑ€ÐµÐ²Ñ€Ð°Ñ‰ÐµÐ½Ð¸Ðµ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹ -> Ð»ÐµÐ´ÐµÐ½Ñ†Ñ‹ Ð°ÐºÑ‚Ð¸Ð²Ð¸Ñ€Ð¾Ð²Ð°Ð½Ð¾");
Database.addText("ru.lighthouseAskButton", "Ð¡Ð¿Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ");
Database.addText("ru.lighthouseQuestionWho", "Ð’Ñ‹ ÐºÑ‚Ð¾?");
Database.addText("ru.lighthouseQuestionWhoSpeech", "Ð¯ Ð¾Ñ‡ÐµÐ½ÑŒ ÑÑ‚Ð°Ñ€Ñ‹Ð¹ Ñ†Ð¸ÐºÐ»Ð¾Ð¿.");
Database.addText("ru.lighthouseQuestionWhat", "Ð§Ñ‚Ð¾ Ð²Ñ‹ Ñ‚ÑƒÑ‚ Ð´ÐµÐ»Ð°ÐµÑ‚Ðµ?");
Database.addText("ru.lighthouseQuestionWhatSpeech", "Ð¯ ÑÐ¸Ð¶Ñƒ Ñ‚ÑƒÑ‚ Ñ†ÐµÐ»Ñ‹Ð¼Ð¸ Ð´Ð½ÑÐ¼Ð¸, Ð¶Ð´Ñƒ, Ð¿Ð¾ÐºÐ° Ð¿Ñ€Ð¸Ð¿Ð»Ñ‹Ð²Ñ‘Ñ‚ Ð»Ð¾Ð´ÐºÐ°. Ð”Ð¾Ð²Ð¾Ð»ÑŒÐ½Ð¾ Ð¼Ð½Ð¾Ð³Ð¾ Ð²Ñ€ÐµÐ¼ÐµÐ½Ð¸ Ð¿Ñ€Ð¾ÑˆÐ»Ð¾ Ñ Ñ‚Ð¾Ð³Ð¾ Ð¼Ð¾Ð¼ÐµÐ½Ñ‚Ð°, ÐºÐ¾Ð³Ð´Ð° Ñ Ð²Ð¸Ð´ÐµÐ» Ð»Ð¾Ð´ÐºÑƒ Ð² Ð¿Ð¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¹ Ñ€Ð°Ð·, Ð½Ð¾ Ñ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð¾ÑÑ‚Ð°Ð²Ð°Ñ‚ÑŒÑÑ Ñ‚ÑƒÑ‚, Ð³Ð»ÑÐ´Ñ Ð½Ð° Ð¼Ð¾Ñ€Ðµ, Ð¸Ð±Ð¾ Ð»Ð¾Ð´ÐºÐ° Ð¼Ð¾Ð¶ÐµÑ‚ Ð¿Ñ€Ð¸Ð¿Ð»Ñ‹Ñ‚ÑŒ.");
Database.addText("ru.lighthouseQuestionWhyEatCandies", "Ð¡ Ñ‡ÐµÐ³Ð¾ Ð±Ñ‹ Ñ ÑÑ‚Ð°Ð» ÐµÑÑ‚ÑŒ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹?");
Database.addText("ru.lighthouseQuestionWhyEatCandiesSpeech", "ÐŸÐ¾Ñ‚Ð¾Ð¼Ñƒ Ñ‡Ñ‚Ð¾ Ð¾Ð½Ð¸ Ð¿Ð¾Ð»ÐµÐ·Ð½Ñ‹ Ð´Ð»Ñ Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÑ!");
Database.addText("ru.lighthouseQuestionCandyBox", "Ð§Ñ‚Ð¾ Ñ‚Ð°ÐºÐ¾Ðµ candy box?");
Database.addText("ru.lighthouseQuestionCandyBoxSpeech", "Ð­Ñ‚Ð¾ Ð¾Ñ‡ÐµÐ½ÑŒ ÑÑ‚Ð°Ñ€Ð°Ñ ÐºÐ¾Ñ€Ð¾Ð±ÐºÐ°, ÐºÐ¾Ñ‚Ð¾Ñ€Ð°Ñ, ÐºÐ°Ðº Ð³Ð¾Ð²Ð¾Ñ€ÑÑ‚, ÑÐ¾Ð´ÐµÑ€Ð¶Ð¸Ñ‚ Ð²ÑÐµ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹ Ð² Ð¼Ð¸Ñ€Ðµ. Ð›ÐµÐ³ÐµÐ½Ð´Ñ‹ Ð³Ð»Ð°ÑÑÑ‚, Ñ‡Ñ‚Ð¾ Ñ‚Ð¾Ñ‚, ÐºÑ‚Ð¾ ÑÑƒÐ¼ÐµÐµÑ‚ Ð¾Ñ‚ÐºÑ€Ñ‹Ñ‚ÑŒ ÐºÐ¾Ñ€Ð¾Ð±ÐºÑƒ, Ð¾Ð±Ñ€ÐµÑ‚Ñ‘Ñ‚ Ñ‚Ð°Ðº Ð¼Ð½Ð¾Ð³Ð¾ ÐºÐ¾Ð½Ñ„ÐµÑ‚, Ñ‡Ñ‚Ð¾ Ð²ÑÑÐºÐ¾Ðµ Ð¼Ð¾Ð¶ÐµÑ‚ ÑÐ»ÑƒÑ‡Ð¸Ñ‚ÑŒÑÑ.");
Database.addText("ru.lighthouseQuestionDragon", "Ð”Ñ€Ð°ÐºÐ¾Ð½ ÑÐºÐ°Ð·Ð°Ð» Ð¼Ð½Ðµ Ð¿Ñ€Ð¸Ð¹Ñ‚Ð¸ ÑÑŽÐ´Ð°, Ð¸Ð±Ð¾ Ñ Ð»ÑŽÐ±Ð»ÑŽ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹.");
Database.addText("ru.lighthouseQuestionDragonSpeech", "ÐÐ³Ð°, ÑÑÐ½Ð¾... Ð¥Ð¾Ñ€Ð¾ÑˆÐ¾, Ñ Ð½Ðµ Ð¼Ð¾Ð³Ñƒ Ð´Ð°Ñ‚ÑŒ Ñ‚ÐµÐ±Ðµ ÐºÐ¾Ð½Ñ„ÐµÑ‚ Ð¿Ñ€ÑÐ¼Ð¾ Ñ‚Ð°Ðº, Ð½Ð¾ Ñ Ð¼Ð¾Ð³Ñƒ Ð´Ð°Ñ‚ÑŒ Ñ‚ÐµÐ±Ðµ Ñ‡Ñ‚Ð¾-Ñ‚Ð¾ Ñ†ÐµÐ½Ð½Ð¾Ðµ, Ð¾Ð½Ð¾ Ð¿Ð¾Ð¼Ð¾Ð¶ÐµÑ‚ Ñ‚ÐµÐ±Ðµ Ð´Ð¾Ð±Ñ‹Ñ‚ÑŒ ÐœÐÐžÐ“Ðž ÐºÐ¾Ð½Ñ„ÐµÑ‚. ÐÐ¾ Ð¿ÐµÑ€ÐµÐ´ ÑÑ‚Ð¸Ð¼ Ñ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ñ‚ÐµÐ±Ñ Ð¸ÑÐ¿Ñ‹Ñ‚Ð°Ñ‚ÑŒ. Ð˜Ð±Ð¾ Ñ‚Ð¾, Ñ‡ÐµÐ¼ Ñ Ð¾Ð±Ð»Ð°Ð´Ð°ÑŽ, Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ‚ Ð±Ñ‹Ñ‚ÑŒ Ð¾Ñ‚Ð´Ð°Ð½Ð¾ ÐºÐ¾Ð¼Ñƒ Ð¿Ð¾Ð¿Ð°Ð»Ð¾. Ð ÐµÑˆÐ¸ ÑÑ‚Ñƒ Ð·Ð°Ð³Ð°Ð´ÐºÑƒ Ð¸ Ð²ÐµÑ‰ÑŒ Ð±ÑƒÐ´ÐµÑ‚ Ñ‚Ð²Ð¾Ñ.");
Database.addText("ru.lighthouseFoundStone", "ÐŸÐ¾Ð·Ð´Ñ€Ð°Ð²Ð»ÑÑŽ! Ð¢Ñ‹ Ð¿Ñ€Ð¾ÑˆÑ‘Ð» Ñ‚ÐµÑÑ‚ Ð¸ Ð½Ð°ÑˆÑ‘Ð» ÐºÐ°Ð¼ÐµÐ½ÑŒ. ÐžÐ½ Ð¾Ñ‡ÐµÐ½ÑŒ Ñ†ÐµÐ½Ð½Ñ‹Ð¹, Ð½Ð¾ Ð¼Ð¾Ð¶ÐµÑ‚ Ð±Ñ‹Ñ‚ÑŒ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ð½ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ ÐµÑÐ»Ð¸ Ñƒ Ñ‚ÐµÐ±Ñ ÐµÑÑ‚ÑŒ Ð¾ÑÑ‚Ð°Ð»ÑŒÐ½Ñ‹Ðµ Ñ‚Ñ€Ð¸ Ñ‚Ð°ÐºÐ¸Ñ… Ð¶Ðµ ÐºÐ°Ð¼Ð½Ñ. Ð£Ð´Ð°Ñ‡Ð¸!");
Database.addText("ru.lighthouseFoundStoneAgain", "ÐžÑ‚Ð»Ð¸Ñ‡Ð½Ð¾, Ñ‚Ñ‹ ÑÐ½Ð¾Ð²Ð° Ñ€ÐµÑˆÐ¸Ð» Ð·Ð°Ð³Ð°Ð´ÐºÑƒ. ÐšÐ°Ð¶ÐµÑ‚ÑÑ, Ñ‚ÐµÐ±Ðµ Ð½Ñ€Ð°Ð²Ð¸Ñ‚ÑÑ ÐµÑ‘ Ñ€ÐµÑˆÐ°Ñ‚ÑŒ.");
Database.addText("ru.saveLocalSaveTitle", "Ð¡Ð¾Ñ…Ñ€Ð°Ð½Ð¸Ñ‚ÑŒ Ð² Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€Ðµ");
Database.addText("ru.saveLocalSaveWhy", "Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð»Ð¾ÐºÐ°Ð»ÑŒÐ½Ð¾Ðµ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ, ÐµÑÐ»Ð¸ Ð²Ñ‹ Ð±ÑƒÐ´ÐµÑ‚Ðµ Ð¸ Ð´Ð°Ð»ÑŒÑˆÐµ Ð¸Ð³Ñ€Ð°Ñ‚ÑŒ Ð² Ñ‚ÐµÐºÑƒÑ‰ÐµÐ¼ Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€Ðµ.");
Database.addText("ru.saveLocalSaveWarning0", "ÐšÐ°Ð¶ÐµÑ‚ÑÑ, Ð²Ð°Ñˆ Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€ Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑ€Ð¶Ð¸Ð²Ð°ÐµÑ‚ HTML5.");
Database.addText("ru.saveLocalSaveWarning1", "Ð’Ð°Ð¼ Ð½ÑƒÐ¶Ð½Ð¾ Ð¾Ð±Ð½Ð¾Ð²Ð¸Ñ‚ÑŒ Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€, Ñ‡Ñ‚Ð¾Ð±Ñ‹ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒ Ð»Ð¾ÐºÐ°Ð»ÑŒÐ½Ñ‹Ðµ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ñ.");
Database.addText("ru.saveLocalSaveChooseSlot", "Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ ÑÐ»Ð¾Ñ‚ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ñ :");
Database.addText("ru.saveLocalSaveAutosaveEnabled", "ÐÐ²Ñ‚Ð¾ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ Ð°ÐºÑ‚Ð¸Ð²Ð½Ð¾");
Database.addText("ru.saveLocalSaveChooseWhatToDo", "Ð’Ñ‹Ð±ÐµÑ€Ð¸Ñ‚Ðµ Ð´ÐµÐ¹ÑÑ‚Ð²Ð¸Ðµ :");
Database.addText("ru.saveLocalSaveSaveButton", "Ð¡Ð¾Ñ…Ñ€Ð°Ð½Ð¸Ñ‚ÑŒ");
Database.addText("ru.saveLocalSaveAutosaveButton", "Ð¡Ð¾Ñ…Ñ€Ð°Ð½ÑÑ‚ÑŒ ÐºÐ°Ð¶Ð´Ñ‹Ðµ 10 Ð¼Ð¸Ð½ÑƒÑ‚");
Database.addText("ru.saveLocalSaveDisableAutosaveButton", "Ð’Ñ‹ÐºÐ»ÑŽÑ‡Ð¸Ñ‚ÑŒ Ð°Ð²Ñ‚Ð¾ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ");
Database.addText("ru.saveFileSaveTitle", "Ð¢ÐµÐºÑÑ‚Ð¾Ð²Ð¾Ðµ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ");
Database.addText("ru.saveFileSaveWhy0", "Ð’Ñ‹Ð±Ñ€Ð°Ñ‚ÑŒ Ñ‚ÐµÐºÑÑ‚Ð¾Ð²Ð¾Ðµ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ, ÐµÑÐ»Ð¸ :");
Database.addText("ru.saveFileSaveWhy1", "Ð’Ñ‹ Ñ…Ð¾Ñ‚Ð¸Ñ‚Ðµ Ð¿Ñ€Ð¾Ð´Ð¾Ð»Ð¶Ð¸Ñ‚ÑŒ Ð¸Ð³Ñ€Ð°Ñ‚ÑŒ Ð½Ð° Ð´Ñ€ÑƒÐ³Ð¾Ð¼ ÑƒÑÑ‚Ñ€Ð¾Ð¹ÑÑ‚Ð²Ðµ Ð¸Ð»Ð¸ Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€Ðµ");
Database.addText("ru.saveFileSaveWhy2", "Ð’Ñ‹ Ñ…Ð¾Ñ‚Ð¸Ñ‚Ðµ Ð¿Ð¾Ð´ÐµÐ»Ð¸Ñ‚ÑŒÑÑ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸ÐµÐ¼ Ñ ÐºÐµÐ¼-Ñ‚Ð¾ ÐµÑ‰Ñ‘");
Database.addText("ru.saveFileSaveWhy3", "ÐŸÐ¾ ÐºÐ°ÐºÐ¸Ð¼-Ñ‚Ð¾ Ð¿Ñ€Ð¸Ñ‡Ð¸Ð½Ð°Ð¼ Ð²Ñ‹ Ñ…Ð¾Ñ‚Ð¸Ñ‚Ðµ Ð¾Ñ‡Ð¸ÑÑ‚Ð¸Ñ‚ÑŒ ÐºÑÑˆ Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€Ð°");
Database.addText("ru.saveFileSaveWhy4", "(ÑÑ‚Ð¾ Ð´ÐµÐ¹ÑÑ‚Ð²Ð¸Ðµ ÑÐ¾Ñ‚Ñ€Ñ‘Ñ‚ Ð²Ð°ÑˆÐ¸ Ð»Ð¾ÐºÐ°Ð»ÑŒÐ½Ñ‹Ðµ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ñ)");
Database.addText("ru.saveFileSaveButton", "ÐŸÐ¾Ð»ÑƒÑ‡Ð¸Ñ‚ÑŒ Ñ‚ÐµÐºÑƒÑ‰ÑƒÑŽ Ð¸Ð³Ñ€Ñƒ Ð² Ð²Ð¸Ð´Ðµ Ñ‚ÐµÐºÑÑ‚Ð°");
Database.addText("ru.saveFileSaveWarning", "Ð Ñ‚ÐµÐ¿ÐµÑ€ÑŒ ÑÐºÐ¾Ð¿Ð¸Ñ€ÑƒÐ¹Ñ‚Ðµ ÑÑ‚Ð¾Ñ‚ Ñ‚ÐµÐºÑÑ‚ ÐºÑƒÐ´Ð°-Ð½Ð¸Ð±ÑƒÐ´ÑŒ! (Ð½Ð°Ð¿Ñ€Ð¸Ð¼ÐµÑ€, Ð² Ñ„Ð°Ð¹Ð»)");
Database.addText("ru.saveLocalLoadTitle", "Ð—Ð°Ð³Ñ€ÑƒÐ·ÐºÐ° Ð¸Ð· Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€Ð°");
Database.addText("ru.saveLocalLoadYouCan", "Ð’Ñ‹ Ð¼Ð¾Ð¶ÐµÑ‚Ðµ Ð·Ð°Ð³Ñ€ÑƒÐ·Ð¸Ñ‚ÑŒ Ð»Ð¾ÐºÐ°Ð»ÑŒÐ½Ð¾Ðµ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ, Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÑ ÑÐ»ÐµÐ´ÑƒÑŽÑ‰Ð¸Ðµ ÑÑÑ‹Ð»ÐºÐ¸ :");
Database.addText("ru.saveLocalLoadThanksTo", "Ð‘Ð»Ð°Ð³Ð¾Ð´Ð°Ñ€Ñ Ð¼Ð°Ð³Ð¸Ð¸ HTML5, Ð²Ñ‹ ÑÐ¼Ð¾Ð¶ÐµÑ‚Ðµ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒ Ð¸Ñ… Ð´Ð°Ð¶Ðµ Ð²Ð½Ðµ ÑÐµÑ‚Ð¸.");
Database.addText("ru.saveFileLoadTitle", "Ð¢ÐµÐºÑÑ‚Ð¾Ð²Ð°Ñ Ð·Ð°Ð³Ñ€ÑƒÐ·ÐºÐ°");
Database.addText("ru.saveFileLoadPaste", "Ð’ÑÑ‚Ð°Ð²ÑŒÑ‚Ðµ Ð²Ð°ÑˆÐµ ÑÐ¾Ñ…Ñ€Ð°Ð½ÐµÐ½Ð¸Ðµ Ð½Ð¸Ð¶Ðµ, Ð·Ð°Ñ‚ÐµÐ¼ ÐºÐ»Ð¸ÐºÐ½Ð¸Ñ‚Ðµ ÐºÐ½Ð¾Ð¿ÐºÑƒ \"Ð—Ð°Ð³Ñ€ÑƒÐ·Ð¸Ñ‚ÑŒ\"");
Database.addText("ru.saveFileLoadButton", "Ð—Ð°Ð³Ñ€ÑƒÐ·Ð¸Ñ‚ÑŒ");
Database.addText("ru.mountainsText0", "Ð’Ñ‹ Ð·Ð°Ð¼ÐµÑ‚Ð¸Ð»Ð¸ Ñ‡Ñ‚Ð¾-Ñ‚Ð¾ Ð² Ð³Ð¾Ñ€Ð°Ñ…!");
Database.addText("ru.mountainsText1", "Ð’Ñ‹Ð³Ð»ÑÐ´Ð¸Ñ‚ Ð¸Ð½Ñ‚ÐµÑ€ÐµÑÐ½Ð¾. ÐœÐ¾Ð¶ÐµÑ‚ Ð±Ñ‹Ñ‚ÑŒ Ð¿Ð¾Ð»ÐµÐ·Ð½Ñ‹Ð¼.");
Database.addText("ru.mountainsTextButton", "Ð’Ð·Ð¾Ð±Ñ€Ð°Ñ‚ÑŒÑÑ Ð½Ð° Ð³Ð¾Ñ€Ñ‹, Ñ‡Ñ‚Ð¾Ð±Ñ‹ Ð´Ð¾ÑÑ‚Ð°Ñ‚ÑŒ Ð²ÐµÑ‰ÑŒ");
Database.addText("ru.mountainsTextAfter", "Ð’Ñ‹ Ð½Ð°ÑˆÐ»Ð¸ Ð¿Ð¾Ð³Ð¾-ÑÑ‚Ð¸Ðº! ÐžÐ½ Ð¿Ð¾ÑÐ²Ð¸Ð»ÑÑ Ð² Ð²Ð°ÑˆÐµÐ¼ Ð¸Ð½Ð²ÐµÐ½Ñ‚Ð°Ñ€Ðµ.");
Database.addText("ru.secondHouseIntroSpeech", "ÐŸÑ€Ð¸Ð²ÐµÑ‚, Ñ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ð½Ñ‹Ð¹ ÐºÑƒÐ¿ÐµÑ†. Ð§Ñ‚Ð¾ ÑƒÐ³Ð¾Ð´Ð½Ð¾ ÑÐ´ÐµÐ»Ð°ÑŽ Ð·Ð° ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹. Ð§Ñ‚Ð¾ Ð²Ð°Ð¼ Ð½ÑƒÐ¶Ð½Ð¾?");
Database.addText("ru.secondHouseLollipop1Speech", "Ð­Ñ‚Ð¾ Ð»Ð¸Ð¼Ð¾Ð½Ð½Ñ‹Ð¹ Ð»ÐµÐ´ÐµÐ½ÐµÑ†. ÐœÐ¾Ð¹ Ð»ÑŽÐ±Ð¸Ð¼Ñ‹Ð¹! Ð¡Ñ‚Ð¾Ð¸Ñ‚ Ð¾Ð½ 60 ÐºÐ¾Ð½Ñ„ÐµÑ‚, Ð½Ð¾ Ð¾Ð½ Ñ‚Ð¾Ð³Ð¾ ÑÑ‚Ð¾Ð¸Ñ‚.");
Database.addText("ru.secondHouseLollipop2Speech", "Ð­Ñ‚Ð¾ ÐºÐ»ÑƒÐ±Ð½Ð¸Ñ‡Ð½Ñ‹Ð¹ Ð»ÐµÐ´ÐµÐ½ÐµÑ†. ÐžÐ½ Ð²ÐºÑƒÑÐ½Ñ‹Ð¹. ÐœÐ½Ðµ Ð½Ñ€Ð°Ð²Ð¸Ñ‚ÑÑ ÐµÐ³Ð¾ ÐºÑ€Ð°ÑÐ½Ñ‹Ð¹ Ñ†Ð²ÐµÑ‚. Ð¢Ð¾Ð»ÑŒÐºÐ¾ 60 ÐºÐ¾Ð½Ñ„ÐµÑ‚!");
Database.addText("ru.secondHouseLollipop3Speech", "Ð­Ñ‚Ð¾ Ñ‚Ñ‹ÐºÐ²ÐµÐ½Ð½Ñ‹Ð¹ Ð»ÐµÐ´ÐµÐ½ÐµÑ†. Ð¡Ð¿Ð¾Ñ€ÑŽ, Ñ‡Ñ‚Ð¾ Ð²Ñ‹ Ñ‚Ð°ÐºÐ¾Ð¹ Ð½Ð¸ÐºÐ¾Ð³Ð´Ð° Ð½Ðµ Ð¿Ñ€Ð¾Ð±Ð¾Ð²Ð°Ð»Ð¸! 60 ÐºÐ¾Ð½Ñ„ÐµÑ‚Ð¾Ðº Ð¸ Ð¾Ð½ Ð²Ð°Ñˆ.");
Database.addText("ru.secondHouseLollipopButtonText", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ ÑÑ‚Ð¾Ñ‚ Ð»ÐµÐ´ÐµÐ½ÐµÑ† (60 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.secondHouseMerchantHatSpeech", "Ð¯ Ð¼Ð¾Ð³ Ð±Ñ‹ Ð¿Ñ€Ð¾Ð´Ð°Ñ‚ÑŒ Ð²Ð°Ð¼ Ð¼Ð¾ÑŽ ÑˆÐ»ÑÐ¿Ñƒ, Ð½Ð¾ Ð¾Ð½Ð° Ð¾Ñ‡ÐµÐ½ÑŒ Ñ†ÐµÐ½Ð½Ð°Ñ, Ð·Ð½Ð°ÐµÑ‚Ðµ Ð»Ð¸... Ð’Ñ‹ Ð±ÑƒÐ´ÐµÑ‚Ðµ Ð¼Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ñ‹ Ð¾Ñ‡ÐµÐ½ÑŒ Ð¼Ð½Ð¾Ð³Ð¾ ÐºÐ¾Ð½Ñ„ÐµÑ‚ Ð·Ð° Ð½ÐµÑ‘. Ð¡ÐºÐ°Ð¶ÐµÐ¼, 1 Ð¼Ð¸Ð»Ð»Ð¸Ð¾Ð½ ÐºÐ¾Ð½Ñ„ÐµÑ‚. Ð’Ñ‹Ð³Ð»ÑÐ´Ð¸Ñ‚ Ñ‡ÐµÑÑ‚Ð½Ð¾, Ð½Ðµ Ñ‚Ð°Ðº Ð»Ð¸?");
Database.addText("ru.secondHouseMerchantHatButtonText", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ ÑˆÐ»ÑÐ¿Ñƒ ÐºÑƒÐ¿Ñ†Ð° (1 000 000 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.secondHouseTimeRingSpeech", "Ð­Ñ‚Ð¾ ÐºÐ¾Ð»ÑŒÑ†Ð¾ Ð²Ñ€ÐµÐ¼ÐµÐ½Ð¸. ÐžÐ½Ð¾ ÑÐ»ÐµÐ³ÐºÐ° Ð²Ð¾Ð»ÑˆÐµÐ±Ð½Ð¾Ðµ. ÐžÐ½Ð¾ Ð¿Ð¾Ð·Ð²Ð¾Ð»Ð¸Ñ‚ Ð²Ð°Ð¼ Ð·Ð°Ð¼ÐµÐ´Ð»ÑÑ‚ÑŒ Ð²Ñ€ÐµÐ¼Ñ, ÐºÐ¾Ð³Ð´Ð° Ð²Ñ‹ Ð² Ð±ÐµÐ´Ðµ.");
Database.addText("ru.secondHouseTimeRingButtonText", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ ÐºÐ¾Ð»ÑŒÑ†Ð¾ Ð²Ñ€ÐµÐ¼ÐµÐ½Ð¸ (500 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.secondHouseLeatherGlovesSpeech", "Ð­Ñ‚Ð¸ ÐºÐ¾Ð¶Ð°Ð½Ñ‹Ðµ Ð¿ÐµÑ€Ñ‡Ð°Ñ‚ÐºÐ¸ ÑÐ´ÐµÐ»Ð°Ð½Ñ‹ Ð¸Ð· Ð²Ñ‹ÑÐ¾ÐºÐ¾ÐºÐ°Ñ‡ÐµÑÑ‚Ð²ÐµÐ½Ð½Ð¾Ð¹ ÐºÐ¾Ð¶Ð¸ Ð²ÐµÑ€Ð±Ð»ÑŽÐ´Ð°. Ð£ Ð¼ÐµÐ½Ñ Ð¸Ñ… Ð¾Ñ‡ÐµÐ½ÑŒ Ð¼Ð½Ð¾Ð³Ð¾ Ð½Ð° ÑÐºÐ»Ð°Ð´Ðµ, Ð¿Ð¾ÑÑ‚Ð¾Ð¼Ñƒ Ð¾Ð½Ð¸ Ñ‚Ð°ÐºÐ¸Ðµ Ð´ÐµÑˆÑ‘Ð²Ñ‹Ðµ: 300 ÐºÐ¾Ð½Ñ„ÐµÑ‚!");
Database.addText("ru.secondHouseLeatherBootsButtonText", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ Ð¿Ð°Ñ€Ñƒ ÐºÐ¾Ð¶Ð°Ð½Ñ‹Ñ… Ð±Ð¾Ñ‚Ð¸Ð½Ð¾Ðº (300 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.secondHouseLeatherBootsSpeech", "Ð­Ñ‚Ð¸ Ð²Ñ‹ÑÐ¾ÐºÐ¾ÐºÐ°Ñ‡ÐµÑÑ‚Ð²ÐµÐ½Ð½Ñ‹Ðµ ÐºÐ¾Ð¶Ð°Ð½Ñ‹Ðµ Ð±Ð¾Ñ‚Ð¸Ð½ÐºÐ¸, ÑÐ´ÐµÐ»Ð°Ð½Ð½Ñ‹Ðµ Ð¸Ð· Ð²ÐµÑ€Ð±Ð»ÑŽÐ¶ÑŒÐµÐ¹ ÐºÐ¾Ð¶Ð¸. ÐžÐ½Ð¸ ÑÐ¾Ñ…Ñ€Ð°Ð½ÑÑ‚ Ð²Ð°ÑˆÐ¸ Ð½Ð¾Ð³Ð¸ Ð² Ñ‚ÐµÐ¿Ð»Ðµ!");
Database.addText("ru.secondHouseLeatherGlovesButtonText", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ Ð¿Ð°Ñ€Ñƒ ÐºÐ¾Ð¶Ð°Ð½Ñ‹Ñ… Ð¿ÐµÑ€Ñ‡Ð°Ñ‚Ð¾Ðº (300 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.secondHouseChocolateBarSpeech", "Ð­Ñ‚Ð¾ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ð°Ñ Ð¿Ð»Ð¸Ñ‚ÐºÐ°. Ð¯ Ð½Ðµ Ð·Ð½Ð°ÑŽ, Ð´Ð»Ñ Ñ‡ÐµÐ³Ð¾ Ð¾Ð½Ð° Ð½ÑƒÐ¶Ð½Ð°, Ð½Ð¾ Ð¾Ð½Ð° Ð´Ð¾Ð²Ð¾Ð»ÑŒÐ½Ð¾ Ñ‚Ð°ÐºÐ¸ Ñ€ÐµÐ´ÐºÐ°Ñ, Ñ‡Ñ‚Ð¾ Ð¾Ð±ÑŠÑÑÐ½ÑÐµÑ‚ ÐµÑ‘ Ñ†ÐµÐ½Ñƒ. 800 ÐºÐ¾Ð½Ñ„ÐµÑ‚, Ð¸ Ð¾Ð½Ð° Ð²Ð°ÑˆÐ°!");
Database.addText("ru.secondHouseChocolateBarButtonText", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½ÑƒÑŽ Ð¿Ð»Ð¸Ñ‚ÐºÑƒ (800 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.outsideTheHoleButton", "ÐŸÑ€Ñ‹Ð³Ð½ÑƒÑ‚ÑŒ Ð² Ð±Ð¾Ð»ÑŒÑˆÑƒÑŽ Ð´Ñ‹Ñ€Ñƒ Ð² Ð·ÐµÐ¼Ð»Ðµ");
Database.addText("ru.theCaveExitText0", "Ð’Ñ‹ Ð½Ð°ÐºÐ¾Ð½ÐµÑ† Ð´Ð¾ÑÑ‚Ð¸Ð³Ð»Ð¸ Ð²Ñ‹Ñ…Ð¾Ð´Ð° Ð¸Ð· Ð¿ÐµÑ‰ÐµÑ€Ñ‹.");
Database.addText("ru.theCaveExitText1", "Ð¡Ð½Ð°Ñ€ÑƒÐ¶Ð¸ Ð²Ñ‹ Ð²Ð¸Ð´Ð¸Ñ‚Ðµ Ð±Ð¾Ð»ÑŒÑˆÐ¾Ð¹ Ð»ÐµÑ.");
Database.addText("ru.theCaveExitButtonText", "Ð’Ñ‹Ð¹Ñ‚Ð¸ Ð¸Ð· Ð¿ÐµÑ‰ÐµÑ€Ñ‹");
Database.addText("ru.theCaveFirstSentenceWentStraight", "Ð’Ñ‹ Ð¿Ð¾ÑˆÐ»Ð¸ Ð¿Ñ€ÑÐ¼Ð¾.");
Database.addText("ru.theCaveFirstSentenceWentLeft", "Ð’Ñ‹ Ð²Ñ‹Ð±Ñ€Ð°Ð»Ð¸ Ð¿Ð¾Ð²Ð¾Ñ€Ð¾Ñ‚ Ð½Ð°Ð»ÐµÐ²Ð¾.");
Database.addText("ru.theCaveFirstSentenceWentRight", "Ð’Ñ‹ Ð²Ñ‹Ð±Ñ€Ð°Ð»Ð¸ Ð¿Ð¾Ð²Ð¾Ñ€Ð¾Ñ‚ Ð½Ð°Ð¿Ñ€Ð°Ð²Ð¾.");
Database.addText("ru.theCaveFirstSentenceYouAre", "Ð’Ñ‹ Ð² Ð¿ÐµÑ‰ÐµÑ€Ðµ. ÐŸÐµÑ€ÐµÐ´ Ð²Ð°Ð¼Ð¸ Ñ‚Ñ€Ð¸ Ð¿ÑƒÑ‚Ð¸.");
Database.addText("ru.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "ÐŸÐµÑ€ÐµÐ´ Ð²Ð°Ð¼Ð¸ Ð²Ñ‹ Ð·Ð°Ð¼ÐµÑ‚Ð¸Ð»Ð¸ ÑÑ‚Ñ€Ð°Ð½Ð½ÑƒÑŽ Ð²ÐµÑ‰ÑŒ Ð½Ð° Ð·ÐµÐ¼Ð»Ðµ.");
Database.addText("ru.theCavePattern_ChocolateBarNowSeeChocolateBar", "Ð’Ñ‹ Ð·Ð°Ð¼ÐµÑ‚Ð¸Ð»Ð¸ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½ÑƒÑŽ Ð¿Ð»Ð¸Ñ‚ÐºÑƒ Ð¿ÐµÑ€ÐµÐ´ Ð²Ð°Ð¼Ð¸.");
Database.addText("ru.theCavePattern_TreasureMapSentence", "Ð’Ñ‹ Ð²Ð¸Ð´Ð¸Ñ‚Ðµ Ð¼Ð°Ð»ÐµÐ½ÑŒÐºÐ¸Ðµ ÐºÐ°Ð¼ÑƒÑˆÐºÐ¸, ÑÑ‚Ñ€Ð°Ð½Ð½Ð¾ Ñ€Ð°Ð·Ð»Ð¾Ð¶ÐµÐ½Ð½Ñ‹Ðµ Ð½Ð° Ð¿Ð¾Ð»Ñƒ.");
Database.addText("ru.theCavePattern_MonkeyWizardSentence", "Ð’Ñ‹ Ð½Ð°Ñ‚ÐºÐ½ÑƒÐ»Ð¸ÑÑŒ Ð½Ð° Ð³Ð¾Ð»Ð¾Ð³Ð¾ Ð¾Ð±ÐµÐ·ÑŒÑÐ½Ð½ÐµÐ³Ð¾ Ð²Ð¾Ð»ÑˆÐµÐ±Ð½Ð¸ÐºÐ°.");
Database.addText("ru.theCavePattern_MonkeyWizardButton", "Ð¡Ñ€Ð°Ð·Ð¸Ñ‚ÑŒÑÑ Ñ Ð½Ð¸Ð¼");
Database.addText("ru.theCavePattern_OctopusKingSentence", "Ð’Ñ‹ Ð½Ð°Ñ‚ÐºÐ½ÑƒÐ»Ð¸ÑÑŒ Ð½Ð° ÐšÐ¾Ñ€Ð¾Ð»Ñ ÐžÑÑŒÐ¼Ð¸Ð½Ð¾Ð³Ð°. ÐžÐ½ Ð²Ñ‹Ð³Ð»ÑÐ´Ð¸Ñ‚ Ð¿Ñ€Ð¾Ñ‚Ð¸Ð²Ð½Ð¾.");
Database.addText("ru.theCavePattern_OctopusKingButton", "Ð¡Ñ€Ð°Ð·Ð¸Ñ‚ÑŒÑÑ Ñ Ð½Ð¸Ð¼");
Database.addText("ru.fortressInsideText0", "Ð’Ñ‹ Ð²Ð½ÑƒÑ‚Ñ€Ð¸ Ð¿ÑƒÑÑ‚Ñ‹Ð½Ð½Ð¾Ð¹ ÐºÑ€ÐµÐ¿Ð¾ÑÑ‚Ð¸.");
Database.addText("ru.fortressInsideText1", "ÐŸÐµÑ€ÐµÐ´ Ð²Ð°Ð¼Ð¸ ÑÑ‚Ð¾Ð¸Ñ‚ Ð²Ñ‹Ð±Ð¾Ñ€ Ð¸Ð· Ñ‚Ñ€Ñ‘Ñ… Ð´Ð²ÐµÑ€ÐµÐ¹.");
Database.addText("ru.fortressInsideText2", "ÐšÐ°Ð¶Ð´Ð°Ñ Ð¸Ð· Ð½Ð¸Ñ… Ð²ÐµÐ´Ñ‘Ñ‚ Ð² Ð±Ð¾Ð»ÑŒÑˆÑƒÑŽ ÐºÐ¾Ð¼Ð½Ð°Ñ‚Ñƒ Ñ ÑÐ¾ÐºÑ€Ð¾Ð²Ð¸Ñ‰ÐµÐ¼ Ð² ÐºÐ¾Ð½Ñ†Ðµ..");
Database.addText("ru.fortressInsideEnterRoom1", "Ð’Ð¾Ð¹Ñ‚Ð¸ Ð² Ð¿ÐµÑ€Ð²ÑƒÑŽ ÐºÐ¾Ð¼Ð½Ð°Ñ‚Ñƒ");
Database.addText("ru.fortressInsideEnterRoom2", "Ð’Ð¾Ð¹Ñ‚Ð¸ Ð²Ñ‚Ð¾Ñ€ÑƒÑŽ ÐºÐ¾Ð¼Ð½Ð°Ñ‚Ñƒ");
Database.addText("ru.fortressInsideEnterRoom3", "Ð’Ð¾Ð¹Ñ‚Ð¸ Ð² Ñ‚Ñ€ÐµÑ‚ÑŒÑŽ ÐºÐ¾Ð¼Ð½Ð°Ñ‚Ñƒ");
Database.addText("ru.treasureButtonDig", "ÐšÐ¾Ð¿Ð°Ñ‚ÑŒ");
Database.addText("ru.treasureButtonYouFound", "Ð’Ñ‹ Ð½Ð°ÑˆÐ»Ð¸ Ñ‚Ñ€Ð¸ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ñ‹Ñ… Ð¿Ð»Ð¸Ñ‚ÐºÐ¸!");
Database.addText("ru.sorceressHutHello", "ÐŸÑ€Ð¸Ð²ÐµÑ‚, Ñ Ð²Ð¾Ð»ÑˆÐµÐ±Ð½Ð¸Ñ†Ð°. Ð¯ Ð¼Ð¾Ð³Ð»Ð° Ð±Ñ‹ Ð¾Ð±ÑƒÑ‡Ð¸Ñ‚ÑŒ Ð²Ð°Ñ Ð¿Ð°Ñ€Ð¾Ñ‡ÐºÐµ Ð¼Ð°Ð³Ð¸Ñ‡ÐµÑÐºÐ¸Ñ… Ð²ÐµÑ‰ÐµÐ¹. Ð¢Ð°ÐºÐ¶Ðµ Ñ Ð¼Ð¾Ð³Ñƒ Ð´Ð°Ñ‚ÑŒ Ð½ÐµÑÐºÐ¾Ð»ÑŒÐºÐ¾ Ð¸Ð½Ñ‚ÐµÑ€ÐµÑÐ½Ñ‹Ñ… Ð²ÐµÑ‰Ð¸Ñ†, Ð¸Ð»Ð¸ ÐºÐ°ÑÑ‚Ð°Ð½ÑƒÑ‚ÑŒ Ð´Ð»Ñ Ð²Ð°Ñ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ñ. ÐÐ¾ Ñƒ Ð²ÑÐµÐ³Ð¾ ÐµÑÑ‚ÑŒ Ñ†ÐµÐ½Ð°! Ð˜ ÑÑ‚Ð¾Ð¹ Ñ†ÐµÐ½Ð¾Ð¹ Ð±ÑƒÐ´ÑƒÑ‚ Ð»ÐµÐ´ÐµÐ½Ñ†Ñ‹. ÐœÐ½Ð¾Ð³Ð¾ Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð².");
Database.addText("ru.sorceressHutClickedGrimoire", "Ð­Ñ‚Ð¾Ñ‚ Ð³Ñ€Ð¸Ð¼ÑƒÐ°Ñ€ ÑÐ´ÐµÐ»Ð°Ð½ Ð´Ð»Ñ Ð½Ð¾Ð²Ð¸Ñ‡ÐºÐ¾Ð². ÐÐ¾ÑÑ ÐµÐ³Ð¾ Ñ ÑÐ¾Ð±Ð¾Ð¹ Ð½Ð° ÐºÐ²ÐµÑÑ‚Ñ‹, Ð²Ñ‹ ÑÐ¼Ð¾Ð¶ÐµÑ‚Ðµ ÐºÐ°ÑÑ‚Ð¾Ð²Ð°Ñ‚ÑŒ Ð¿Ñ€Ð¾ÑÑ‚Ñ‹Ðµ, Ð½Ð¾ Ð¿Ð¾Ð»ÐµÐ·Ð½Ñ‹Ðµ Ð·Ð°ÐºÐ»Ð¸Ð½ÐµÐ½Ð¸Ñ. ÐžÐ½ Ð²Ð°Ð¼ Ð½ÑƒÐ¶ÐµÐ½! Ð¢Ð¾Ð»ÑŒÐºÐ¾ Ð»Ð¸ÑˆÑŒ 5 000 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð².");
Database.addText("ru.sorceressHutBuyGrimoireButton", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ ÑÑ‚Ð¾Ñ‚ Ð³Ñ€Ð¸Ð¼ÑƒÐ°Ñ€ (5 000 ÐºÐ¾Ð½Ñ„ÐµÑ‚)");
Database.addText("ru.sorceressHutBuyGrimoireSpeech", "Ð¡Ð¿Ð°ÑÐ¸Ð±Ð¾ Ð·Ð° Ð¿Ð¾ÐºÑƒÐ¿ÐºÑƒ! Ð˜ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÑ ÑÑ‚Ð¾Ñ‚ Ð³Ñ€Ð¸Ð¼ÑƒÐ°Ñ€, Ð²Ñ‹ ÑÐ¼Ð¾Ð¶ÐµÑ‚Ðµ ÐºÐ°ÑÑ‚Ð¾Ð²Ð°Ñ‚ÑŒ Ñ‚Ñ€Ð¸ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ñ. Ð£Ð´Ð°Ñ‡Ð¸!");
Database.addText("ru.sorceressHutClickedGrimoire2", "Ð­Ñ‚Ð¾ Ð¿Ñ€Ð¾Ð´Ð²Ð¸Ð½ÑƒÑ‚Ñ‹Ð¹ Ð³Ñ€Ð¸Ð¼ÑƒÐ°Ñ€. ÐÐ¾ÑÑ ÐµÐ³Ð¾ Ñ ÑÐ¾Ð±Ð¾Ð¹ Ð½Ð° ÐºÐ²ÐµÑÑ‚Ñ‹, Ð²Ñ‹ ÑÐ¼Ð¾Ð¶ÐµÑ‚Ðµ ÐºÐ°ÑÑ‚Ð¾Ð²Ð°Ñ‚ÑŒ Ð´Ð²Ð° Ð¿Ñ€Ð¾Ð´Ð²Ð¸Ð½ÑƒÑ‚Ñ‹Ñ… Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ñ. Ð¯ ÑÐ°Ð¼Ð° ÐµÐ³Ð¾ Ð½Ð°Ð¿Ð¸ÑÐ°Ð»Ð°, Ð¸ ÑÑ‚Ð¾ Ð±Ñ‹Ð»Ð¾ Ð½ÐµÐ»ÐµÐ³ÐºÐ¾. 20 000 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð² Ð±ÑƒÐ´ÐµÑ‚ Ñ‡ÐµÑÑ‚Ð½Ð¾Ð¹ Ñ†ÐµÐ½Ð¾Ð¹.");
Database.addText("ru.sorceressHutBuyGrimoire2Button", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ ÑÑ‚Ð¾Ñ‚ Ð³Ñ€Ð¸Ð¼ÑƒÐ°Ñ€ (20 000 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð²)");
Database.addText("ru.sorceressHutBuyGrimoire2Speech", "Ð¡Ð¿Ð°ÑÐ¸Ð±Ð¾ Ð·Ð° Ð¿Ð¾ÐºÑƒÐ¿ÐºÑƒ! Ð˜ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÑ ÑÑ‚Ð¾Ñ‚ Ð³Ñ€Ð¸Ð¼ÑƒÐ°Ñ€, Ð²Ñ‹ ÑÐ¼Ð¾Ð¶ÐµÑ‚Ðµ ÐºÐ°ÑÑ‚Ð¾Ð²Ð°Ñ‚ÑŒ Ð´Ð²Ð° Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð¸Ñ. Ð˜ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÑ‚Ðµ Ð¸Ñ… Ñ Ð¼ÑƒÐ´Ñ€Ð¾ÑÑ‚ÑŒÑŽ!");
Database.addText("ru.sorceressHutClickedCauldron", "Ð­Ñ‚Ð¾ Ð¼Ð¾Ð¹ ÐºÐ¾Ñ‚Ñ‘Ð». Ð¡ ÐµÐ³Ð¾ Ð¿Ð¾Ð¼Ð¾Ñ‰ÑŒÑŽ Ñ Ð²Ð°Ñ€ÑŽ Ð²Ð¾Ð»ÑˆÐµÐ±Ð½Ñ‹Ðµ Ð·ÐµÐ»ÑŒÑ. Ð¯ Ð¼Ð¾Ð³Ð»Ð° Ð±Ñ‹ Ð¿Ñ€Ð¾Ð´Ð°Ñ‚ÑŒ ÐµÐ³Ð¾ Ð²Ð°Ð¼, Ð½Ð¾ Ð¾Ð½ Ð¾Ñ‡ÐµÐ½ÑŒ Ñ†ÐµÐ½Ð½Ñ‹Ð¹... Ð¾Ð½ Ð±ÑƒÐ´ÐµÑ‚ ÑÑ‚Ð¾Ð¸Ñ‚ÑŒ 100 000 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð².");
Database.addText("ru.sorceressHutBuyCauldronButton", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ ÐºÐ¾Ñ‚Ñ‘Ð» (100 000 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð²)");
Database.addText("ru.sorceressHutBuyCauldronSpeech", "Ð¡Ð¿Ð°ÑÐ¸Ð±Ð¾ Ð±Ð¾Ð»ÑŒÑˆÐ¾Ðµ! Ð£ Ð¼ÐµÐ½Ñ ÐµÑÑ‚ÑŒ 1000 000 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð²! Ð¢Ð°ÐºÐ¶Ðµ Ñ Ð´Ð°Ð»Ð° Ð²Ð°Ð¼ Ð¼Ð°Ð½ÑƒÐ°Ð» Ð¿Ð¾ Ð²Ð°Ñ€ÐºÐµ Ð·ÐµÐ»Ð¸Ð¹. ÐžÐ½ Ð±ÑƒÐ´ÐµÑ‚ Ð¿Ð¾Ð»ÐµÐ·ÐµÐ½.");
Database.addText("ru.sorceressHutClickedHat", "ÐšÐ¾Ð½ÐµÑ‡Ð½Ð¾ Ñƒ Ð¼ÐµÐ½Ñ ÐºÑ€Ð°ÑÐ¸Ð²Ð°Ñ ÑˆÐ»ÑÐ¿Ð°! ÐÐ¾ Ñ Ð¿Ñ€Ð°Ð²Ð´Ð° Ð½Ðµ Ð¼Ð¾Ð³Ñƒ Ð¿Ñ€Ð¾Ð´Ð°Ñ‚ÑŒ ÐµÑ‘ Ð²Ð°Ð¼. ÐžÐ½Ð° Ð¾Ð¾Ð¾Ð¾Ð¾Ñ‡ÐµÐ½ÑŒ Ñ†ÐµÐ½Ð½Ð°Ñ. ÐŸÑ€Ð°Ð²Ð´Ð° Ð½Ðµ Ð¼Ð¾Ð³Ñƒ. ÐÐµ Ð½Ð°ÑÑ‚Ð°Ð¸Ð²Ð°Ð¹Ñ‚Ðµ. ÐÐµÑ‚. ÐÐµ-Ð½Ðµ-Ð½Ðµ-Ð½Ðµ, Ñ Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð° ÑÑ‚Ð¾Ð³Ð¾ Ð´ÐµÐ»Ð°Ñ‚ÑŒ. ÐÑƒ Ñ…Ð¾Ñ€Ð¾ÑˆÐ¾, Ñ Ð¿Ñ€Ð¾Ð´Ð°Ð¼ ÐµÑ‘, Ð½Ð¾ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ð·Ð° 1 000 000 000 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð². Ð’Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ñƒ Ð²Ð°Ñ Ð²ÑÑ‘ Ñ€Ð°Ð²Ð½Ð¾ Ð½Ðµ Ñ…Ð²Ð°Ñ‚Ð¸Ñ‚ Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð², Ñ‡Ñ‚Ð¾Ð±Ñ‹ ÐºÑƒÐ¿Ð¸Ñ‚ÑŒ ÐµÑ‘.");
Database.addText("ru.sorceressHutBuyHatButton", "ÐšÑƒÐ¿Ð¸Ñ‚ÑŒ ÑˆÐ»ÑÐ¿Ñƒ (1 000 000 000 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð²)");
Database.addText("ru.sorceressHutBuyHatSpeech", "Ð£ Ð¼ÐµÐ½Ñ ÐµÑÑ‚ÑŒ Ð¾Ð´Ð¸Ð½ Ð¼Ð¸Ð»Ð»Ð¸Ð°Ñ€Ð´ Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð¾Ð¾Ð¾Ð¾Ð¾Ð¾Ð¾Ð²!  ÐÐ¾ Ñ‚ÐµÐ¿ÐµÑ€ÑŒ Ñƒ Ð¼ÐµÐ½Ñ Ð±Ð¾Ð»ÑŒÑˆÐµ Ð½ÐµÑ‚ ÑˆÐ»ÑÐ¿Ñ‹... Ð½Ð¾ Ð¼Ð¸Ð»Ð»Ð¸Ð°Ñ€Ð´ Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð², Ð¾Ð¼Ð³!.. ÐžÐ½Ð¾ Ñ‚Ð¾Ð³Ð¾ ÑÑ‚Ð¾Ð¸Ð»Ð¾.");
Database.addText("ru.cauldronPreviousPageButton", "ÐŸÑ€ÐµÐ´Ñ‹Ð´ÑƒÑ‰Ð°Ñ ÑÑ‚Ñ€Ð°Ð½Ð¸Ñ†Ð°");
Database.addText("ru.cauldronNextPageButton", "Ð¡Ð»ÐµÐ´ÑƒÑŽÑ‰Ð°Ñ ÑÑ‚Ñ€Ð°Ð½Ð¸Ñ†Ð°");
Database.addText("ru.cauldronWhatYouWantToPut", "Ð§Ñ‚Ð¾ Ð²Ñ‹ Ñ…Ð¾Ñ‚Ð¸Ñ‚Ðµ ÑÐ»Ð¾Ð¶Ð¸Ñ‚ÑŒ Ð² ÐºÐ¾Ñ‚Ñ‘Ð»");
Database.addText("ru.cauldronWhatIsIn", "Ð§Ñ‚Ð¾ Ð½Ð°Ñ…Ð¾Ð´Ð¸Ñ‚ÑÑ Ð² ÐºÐ¾Ñ‚Ð»Ðµ");
Database.addText("ru.cauldronWhatYouCanDo", "Ð§Ñ‚Ð¾ Ð²Ñ‹ Ð¼Ð¾Ð¶ÐµÑ‚Ðµ Ð¸Ð· ÑÑ‚Ð¾Ð³Ð¾ ÑÐ¾Ñ‚Ð²Ð¾Ñ€Ð¸Ñ‚ÑŒ");
Database.addText("ru.castleBigRoomComment", "Ð‘Ð¾Ð»ÑŒÑˆÐ°Ñ ÐºÐ¾Ð¼Ð½Ð°Ñ‚Ð°");
Database.addText("ru.castleARoomComment", "ÐšÐ¾Ð¼Ð½Ð°Ñ‚Ð°");
Database.addText("ru.castleADarkRoomComment", "Ð¢Ñ‘Ð¼Ð½Ð°Ñ ÐºÐ¾Ð¼Ð½Ð°Ñ‚Ð°");
Database.addText("ru.castleCastleEntranceComment", "Ð’Ñ…Ð¾Ð´ Ð² Ð·Ð°Ð¼Ð¾Ðº");
Database.addText("ru.castleTowerEntranceComment", "Ð’Ñ…Ð¾Ð´ Ð² Ð±Ð°ÑˆÐ½ÑŽ");
Database.addText("ru.castleNougatMonsterComment", "ÐÑ‚Ð°ÐºÐ¾Ð²Ð°Ñ‚ÑŒ Ð³Ð¸Ð³Ð°Ð½Ñ‚ÑÐºÐ¾Ð³Ð¾ Ð¼Ð¾Ð½ÑÑ‚Ñ€Ð° Ð¸Ð· Ð½ÑƒÐ³Ð¸");
Database.addText("ru.castleGuardsComment", "ÐÑ‚Ð°ÐºÐ¾Ð²Ð°Ñ‚ÑŒ ÑÑ‚Ñ€Ð°Ð¶Ñƒ");
Database.addText("ru.castleStairsComment", "Ð›ÐµÑÑ‚Ð½Ð¸Ñ†Ð°");
Database.addText("ru.buttonBackToTheCastle", "ÐÐ°Ð·Ð°Ð´ Ð² Ð·Ð°Ð¼Ð¾Ðº");
Database.addText("ru.castleBigRoomHovenSpeechSad", "ÐŸÑ€Ð¸Ð²ÐµÑ‚, Ñ Ð¾Ñ‡ÐµÐ½ÑŒ ÑÑ‚Ð°Ñ€Ð°Ñ Ñ…Ð»ÐµÐ±Ð¾Ð¿ÐµÑ‡ÐºÐ°. Ð Ð°Ð½ÑŒÑˆÐµ Ñ Ð¿ÐµÐºÐ»Ð° Ñ‚Ð¾Ð½Ð½Ñ‹ Ñ…Ð¾Ñ€Ð¾ÑˆÐµÐ¹ Ð²Ñ‹Ð¿ÐµÑ‡ÐºÐ¸, Ð½Ð¾ Ñ‚ÐµÐ¿ÐµÑ€ÑŒ Ð½Ð¸ÐºÑ‚Ð¾ Ð¼ÐµÐ½Ñ Ð½Ðµ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐµÑ‚. ÐœÐ¾Ð¶ÐµÑ‚... Ð¼Ð¾Ð¶ÐµÑ‚ Ð±Ñ‹Ñ‚ÑŒ Ñ‚Ñ‹ Ð¼Ð¾Ð¶ÐµÑˆÑŒ Ð¼Ð½Ðµ Ð¿Ð¾Ð¼Ð¾Ñ‡ÑŒ? ÐŸÑ€Ð¾ÑÑ‚Ð¾ Ð¿Ð¾Ð·Ð²Ð¾Ð»ÑŒ Ð¼Ð½Ðµ Ð²Ð·ÑÑ‚ÑŒ Ð½ÐµÑÐºÐ¾Ð»ÑŒÐºÐ¾ Ñ‚Ð²Ð¾Ð¸Ñ… ÑÐ»Ð°Ð´Ð¾ÑÑ‚ÐµÐ¹. ÐÐµ Ð±ÐµÑÐ¿Ð¾ÐºÐ¾Ð¹ÑÑ, Ñ‚Ñ‹ Ð½Ðµ Ð¿Ð¾Ð¶Ð°Ð»ÐµÐµÑˆÑŒ. Ð¢Ñ‹ Ð¼Ð¾Ð¶ÐµÑˆÑŒ Ð´Ð¾Ð²ÐµÑ€ÑÑ‚ÑŒ Ð¼Ð½Ðµ.");
Database.addText("ru.castleBigRoomHovenNotEnough", "ÐžÐ¹Ð¹Ð¹... Ñƒ Ñ‚ÐµÐ±Ñ Ð½ÐµÐ´Ð¾ÑÑ‚Ð°Ñ‚Ð¾Ñ‡Ð½Ð¾ ÑÐ»Ð°Ð´Ð¾ÑÑ‚ÐµÐ¹, Ñ Ð½Ð¸Ñ‡ÐµÐ³Ð¾ Ð½Ðµ Ð¼Ð¾Ð³Ñƒ ÑÐ´ÐµÐ»Ð°Ñ‚ÑŒ. Ð¯ Ð¿Ñ€Ð¾ÑÑ‚Ð¾ Ð±ÐµÑÐ¿Ð¾Ð»ÐµÐ·Ð½Ð°. Ð¯ Ð±ÐµÑÐ¿Ð¾Ð»ÐµÐ·Ð½Ð°Ñ Ñ…Ð»ÐµÐ±Ð¾Ð¿ÐµÑ‡ÐºÐ°, Ð·Ð¾Ð²Ð¸ Ð¼ÐµÐ½Ñ Ñ‚ÐµÐ¿ÐµÑ€ÑŒ Ñ‚Ð°Ðº.");
Database.addText("ru.castleBigRoomHovenSpeechMadePainAuChocolat", "Ð’Ð°Ñƒ! Ð¡Ð¿Ð°ÑÐ¸Ð±Ð¾ Ð¾Ð³Ñ€Ð¾Ð¼Ð½Ð¾Ðµ! Ð¯ Ð²Ð·ÑÐ»Ð° 100 ÐºÐ¾Ð½Ñ„ÐµÑ‚Ð¾Ðº Ð¸ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½ÑƒÑŽ Ð¿Ð»Ð¸Ñ‚ÐºÑƒ, Ð¸ ÑÐ´ÐµÐ»Ð°Ð»Ð° Ð´Ð»Ñ Ñ‚ÐµÐ±Ñ... Ð¨Ð¾ÐºÐ¾Ð»Ð°Ð´Ð½Ñ‹Ð¹ Ñ…Ð»ÐµÐ±! Ð­Ñ‚Ð¾ Ð¼Ð¾Ñ Ð»ÑŽÐ±Ð¸Ð¼Ð°Ñ Ð²Ñ‹Ð¿ÐµÑ‡ÐºÐ°, Ð½Ð°Ð´ÐµÑŽÑÑŒ, Ñ‚ÐµÐ±Ðµ Ð¾Ð½Ð° Ñ‚Ð¾Ð¶Ðµ Ð¿Ð¾Ð½Ñ€Ð°Ð²Ð¸Ñ‚ÑÑ!");
Database.addText("ru.castleBigRoomHovenSpeechHappy", "Ð­Ð¹! Ð•ÑÐ»Ð¸ Ñ‚Ñ‹ Ñ…Ð¾Ñ‡ÐµÑˆÑŒ, Ñ‡Ñ‚Ð¾Ð±Ñ‹ Ñ ÐµÑ‰Ñ‘ Ñ‡ÐµÐ³Ð¾-Ð½Ð¸Ð±ÑƒÐ´ÑŒ Ð¸ÑÐ¿ÐµÐºÐ»Ð°, Ð¿Ñ€Ð¾ÑÑ‚Ð¾ ÑÐºÐ°Ð¶Ð¸. Ð‘ÑƒÐ´Ñƒ ÑÑ‡Ð°ÑÑ‚Ð»Ð¸Ð²Ð° Ð¿Ð¾Ð¼Ð¾Ñ‡ÑŒ.");
Database.addText("ru.castleBigRoomHovenSpeechHappyNotEnough", "ÐžÐ¹, Ð° Ñƒ Ñ‚ÐµÐ±Ñ Ð½ÐµÐ´Ð¾ÑÑ‚Ð°Ñ‚Ð¾Ñ‡Ð½Ð¾ ÑÐ»Ð°Ð´Ð¾ÑÑ‚ÐµÐ¹, Ð¿ÐµÑ‡Ð°Ð»ÑŒÐ½Ð¾. ÐœÐ½Ðµ Ð½ÑƒÐ¶Ð½Ð¾ 100 ÐºÐ¾Ð½Ñ„ÐµÑ‚ Ð¸ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ð°Ñ Ð¿Ð»Ð¸Ñ‚ÐºÐ°. ÐŸÑ€Ð¸Ñ…Ð¾Ð´Ð¸, ÐºÐ¾Ð³Ð´Ð° Ñƒ Ñ‚ÐµÐ±Ñ ÑÑ‚Ð¾ Ð²ÑÑ‘ Ð±ÑƒÐ´ÐµÑ‚.");
Database.addText("ru.castleBigRoomHovenLetHovenTakeButton", "ÐŸÐ¾Ð·Ð²Ð¾Ð»Ð¸Ñ‚ÑŒ Ñ…Ð»ÐµÐ±Ð¾Ð¿ÐµÑ‡ÐºÐµ Ð²Ð·ÑÑ‚ÑŒ Ð²ÑÐµ ÑÐ»Ð°Ð´Ð¾ÑÑ‚Ð¸, ÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ðµ ÐµÐ¹ Ð½ÑƒÐ¶Ð½Ñ‹");
Database.addText("ru.castleBigRoomHovenThanks", "Ð¡Ð¿Ð°ÑÐ¸Ð±Ð¾, Ð¿ÐµÑ‡ÑŒ!");
Database.addText("ru.dragonStopTickling", "Ð­Ð¹, Ñ‚Ñ‹! ÐŸÑ€ÐµÐºÑ€Ð°Ñ‚Ð¸ Ð¼ÐµÐ½Ñ Ñ‰ÐµÐºÐ¾Ñ‚Ð°Ñ‚ÑŒ, Ð½Ñƒ Ð¿Ð¾Ð¶Ð°Ð»ÑƒÐ¹ÑÑ‚Ð°.");
Database.addText("ru.dragonStopTicklingButton", "Ð­ÑÑ, Ð¾Ð¼Ð³, Ð¿Ñ€Ð¾ÑÑ‚Ð¸Ñ‚Ðµ, Ñ Ð´ÑƒÐ¼Ð°Ð», Ð¼Ð½Ðµ Ð½Ð°Ð´Ð¾ Ð±Ñ‹Ð»Ð¾ Ð²Ð°Ñ Ð°Ñ‚Ð°ÐºÐ¾Ð²Ð°Ñ‚ÑŒ");
Database.addText("ru.dragonTalking", "Ð¯ - Ð´Ñ€Ð°ÐºÐ¾Ð½ Ð¸ ÑÑ‚Ð¾ Ð¼Ð¾Ð¹ Ð·Ð°Ð¼Ð¾Ðº. Ð’Ð¸Ð¶Ñƒ, Ñ‡Ñ‚Ð¾ Ñ‚ÐµÐ±Ðµ ÑƒÐ´Ð°Ð»Ð¾ÑÑŒ Ð²Ð¾Ð¹Ñ‚Ð¸, Ñ‚Ñ‹, Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±Ñ‹Ñ‚ÑŒ, Ð¾Ñ‡ÐµÐ½ÑŒ Ñ…Ñ€Ð°Ð±Ñ€... Ð‘ÑƒÐ´Ñƒ ÑÑ‡Ð°ÑÑ‚Ð»Ð¸Ð² Ð¿Ð¾Ð¼Ð¾Ñ‡ÑŒ Ñ‚Ð°ÐºÐ¾Ð¼Ñƒ, ÐºÐ°Ðº Ñ‚Ñ‹. Ð§ÐµÐ³Ð¾ Ð¸Ñ‰ÐµÑ‰ÑŒ-Ñ‚Ð¾?");
Database.addText("ru.dragonTalkingChallengeButton", "Ð”Ñ€Ð°ÐºÑƒ");
Database.addText("ru.dragonTalkingFameButton", "Ð¡Ð»Ð°Ð²Ñƒ");
Database.addText("ru.dragonTalkingCandiesButton", "ÐšÐ¾Ð½Ñ„ÐµÑ‚Ñ‹");
Database.addText("ru.dragonTalkingChallengeSpeech", "Ðž, Ñ‚Ð°Ðº Ñ‚Ñ‹ Ñ…Ð¾Ñ‡ÐµÑˆÑŒ Ð´Ñ€Ð°ÐºÑƒ? Ð”ÑƒÐ¼Ð°ÑŽ, Ñ‚Ñ‹ Ð´Ð¾Ð»Ð¶ÐµÐ½ Ð¿Ð¾Ð¹Ñ‚Ð¸ Ð² Ð°Ð´. Ð¯ ÑÐµÑ€ÑŒÑ‘Ð·Ð½Ð¾. ÐžÐ±Ñ‰ÐµÐ¸Ð·Ð²ÐµÑÑ‚Ð½Ð¾, Ñ‡Ñ‚Ð¾ Ð”ÑŒÑÐ²Ð¾Ð» - Ñ…Ð¾Ñ€Ð¾ÑˆÐ¸Ð¹ ÑÐ¾Ð¿ÐµÑ€Ð½Ð¸Ðº. Ð—Ð°Ð¿Ñ€Ñ‹Ð³Ð¸Ð²Ð°Ð¹ ÐºÐ¾ Ð¼Ð½Ðµ Ð½Ð° ÑÐ¿Ð¸Ð½Ñƒ, Ñ Ð¾Ñ‚Ð²ÐµÐ·Ñƒ Ñ‚ÐµÐ±Ñ Ð² Ð°Ð´!");
Database.addText("ru.dragonTalkingFameSpeech", "Ð’ÑÑ‚Ñ€ÐµÑ‚Ð¸Ñ‚ÑŒ Ð¸ Ð¿Ð¾Ð±ÐµÐ´Ð¸Ñ‚ÑŒ Ñ€Ð°Ð·Ñ€Ð°Ð±Ð¾Ñ‚Ñ‡Ð¸ÐºÐ° ÑÑ‚Ð¾ Ð½Ð°Ð¸Ð»ÑƒÑ‡ÑˆÐ¸Ð¹ ÑÐ¿Ð¾ÑÐ¾Ð± ÑÑ‚Ð°Ñ‚ÑŒ Ð¸Ð·Ð²ÐµÑÑ‚Ð½Ñ‹Ð¼. Ð¯ Ð·Ð½Ð°ÑŽ, Ð³Ð´Ðµ Ð¾Ð½ Ð¶Ð¸Ð²Ñ‘Ñ‚, Ð¸ Ñ Ð¼Ð¾Ð³ Ð±Ñ‹ Ð´Ð¾ÑÑ‚Ð°Ð²Ð¸Ñ‚ÑŒ Ñ‚ÐµÐ±Ñ Ñ‚ÑƒÐ´Ð°. ÐÐ¾ Ð¿Ð¾Ð´Ð³Ð¾Ñ‚Ð¾Ð²ÑŒÑÑ, ÑÑ‚Ð¾ Ð±ÑƒÐ´ÐµÑ‚ Ð½ÐµÐ»ÐµÐ³ÐºÐ¾.");
Database.addText("ru.dragonTalkingCandiesSpeech", "ÐÐ±ÑÐ¾Ð»ÑŽÑ‚Ð½Ð¾ Ð²ÑÐµ Ñ…Ð¾Ñ‚ÑÑ‚ ÐºÐ¾Ð½Ñ„ÐµÑ‚, Ð½Ðµ Ñ‚Ð°Ðº Ð»Ð¸? Ð¯ Ð´ÑƒÐ¼Ð°ÑŽ Ð¼Ð¾Ð¹ Ð´Ñ€ÑƒÐ³ Ð¼Ð¾Ð¶ÐµÑ‚ Ñ‚ÐµÐ±Ðµ Ñ ÑÑ‚Ð¸Ð¼ Ð¿Ð¾Ð¼Ð¾Ñ‡ÑŒ. Ð¢Ñ‹ Ð»ÐµÐ³ÐºÐ¾ ÑƒÐ·Ð½Ð°ÐµÑˆÑŒ ÐµÐ³Ð¾, Ñƒ Ð½ÐµÐ³Ð¾ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ð¾Ð´Ð¸Ð½ Ð³Ð»Ð°Ð·. ÐŸÑ€Ð¾ÑÑ‚Ð¾ ÑÐºÐ°Ð¶Ð¸ ÐµÐ¼Ñƒ, Ñ‡Ñ‚Ð¾ Ñ‚Ñ‹ Ð¼ÐµÐ½Ñ Ð·Ð½Ð°ÐµÑˆÑŒ.");
Database.addText("ru.dragonTalkingChallengeAnswer", "ÐÑƒ Ð¿Ð¾ÐµÑ…Ð°Ð»Ð¸!");
Database.addText("ru.dragonTalkingFameAnswer", "Ð¯ Ð³Ð¾Ñ‚Ð¾Ð².");
Database.addText("ru.dragonTalkingCandiesAnswer", "ÐžÐºÐµÐ¹, ÑÐ¿Ð°ÑÐ¸Ð±Ð¾!");
Database.addText("ru.buttonBackToCastle", "ÐÐ°Ð·Ð°Ð´ Ð² Ð·Ð°Ð¼Ð¾Ðº");
Database.addText("ru.talkingCandySpeechNoBox", "ÐŸÑ€Ð¸Ð²ÐµÑ‚! Ð¯ - Ð³Ð¾Ð²Ð¾Ñ€ÑÑ‰Ð°Ñ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ð°. Ð¢Ñ‹ Ð¿Ð¾Ñ‡Ñ‚Ð¸ Ð¿Ñ€Ð¾ÑˆÑ‘Ð» Ð¸Ð³Ñ€Ñƒ. Ð¢ÐµÐ¿ÐµÑ€ÑŒ Ñ‚ÐµÐ±Ðµ Ð¾ÑÑ‚Ð°Ð»Ð¾ÑÑŒ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ð½Ð°Ð¹Ñ‚Ð¸ candy box. ÐžÐ½ Ð² Ð´Ð¾Ð¼Ðµ Ð½Ð° Ð¾ÐºÑ€Ð°Ð¸Ð½Ðµ Ð´ÐµÑ€ÐµÐ²Ð½Ð¸. Ð­Ñ‚Ð¾ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¹ ÑˆÐ°Ð³!");
Database.addText("ru.talkingCandySpeech1", "ÐŸÑ€Ð¸Ð²ÐµÑ‚! Ð¯ - Ð³Ð¾Ð²Ð¾Ñ€ÑÑ‰Ð°Ñ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ð°. ÐŸÐ¾Ð·Ð´Ñ€Ð°Ð²Ð»ÑÑŽ, Ñ‚Ñ‹ Ð¿Ñ€Ð¾ÑˆÑ‘Ð» Ð¸Ð³Ñ€Ñƒ! Ð¯ Ð¾Ñ‚ÐºÑ€Ð¾ÑŽ Ñ‚Ð²Ð¾Ð¹ candy box, ÑÑ‚Ð¾ ÑÑ‚Ð°Ð½ÐµÑ‚ Ñ‚Ð²Ð¾ÐµÐ¹ Ð½Ð°Ð³Ñ€Ð°Ð´Ð¾Ð¹. ÐžÑ‚ÐºÑ€Ñ‹Ñ‚ÑŒ?");
Database.addText("ru.talkingCandySpeech2", "Ð“Ð¾Ñ‚Ð¾Ð²Ð¾! Ð¢ÐµÐ¿ÐµÑ€ÑŒ Ñ‚Ñ‹ Ð¼Ð¾Ð¶ÐµÑˆÑŒ Ð² Ð½ÐµÑ‘ Ð²Ð¾Ð¹Ñ‚Ð¸. ÐÐ°Ð´ÐµÑŽÑÑŒ, Ñ‚ÐµÐ±Ðµ Ð¿Ð¾Ð½Ñ€Ð°Ð²Ð¸Ð»Ð°ÑÑŒ Ð¸Ð³Ñ€Ð° :)");
Database.addText("ru.talkingCandyButton", "Ð”Ð°!!!");
Database.addText("ru.lighthousePuzzleResetButton", "Ð¡Ð±Ñ€Ð¾ÑÐ¸Ñ‚ÑŒ Ð¸Ð³Ñ€Ñƒ");
Database.addText("tr.mapVillageComment", "KÃ¶y");
Database.addText("tr.mapFortressComment", "Ã‡Ã¶l hisarÄ±");
Database.addText("tr.mapATreeComment", "Bir aÄŸaÃ§");
Database.addText("tr.mapTheDesertComment", "Ã‡Ã¶l");
Database.addText("tr.mapWishingWellComment", "Dilek kuyusu");
Database.addText("tr.mapLonelyHouseComment", "YalnÄ±z bir ev");
Database.addText("tr.mapForestComment", "Orman");
Database.addText("tr.mapCastleEntranceComment", "Kalenin giriÅŸi");
Database.addText("tr.mapCastleComment", "Kale");
Database.addText("tr.mapDragonComment", "Ejderha");
Database.addText("tr.candyBoxEatCandiesButton", "BÃ¼tÃ¼n ÅŸekerleri ye!");
Database.addText("tr.candyBoxThrowCandiesButton", "10 tane ÅŸekeri yere at");
Database.addText("tr.mapVillageAHouseComment", "Bir ev");
Database.addText("tr.mapVillageForgeComment", "Demirci ocaÄŸÄ±");
Database.addText("tr.buttonBackToTheMap", "Haritaya geri dÃ¶n");
Database.addText("tr.mapSorceressHutComment", "SihirbazÄ±n kulÃ¼besi");
Database.addText("tr.buttonBackToTheVillage", "KÃ¶ye geri dÃ¶n");
Database.addText("tr.mapATreeIntroductionSpeech", "Merhaba, ben sincap. Size ÅŸeker ve bir sÃ¼rÃ¼ ÅŸey verebilirim. Åžekeri ne kadar Ã§ok sevdiÄŸinizi biliyorum. Fakat bu ormanda Ã§ok yalnÄ±zÄ±m.");
Database.addText("tr.mapATreeIntroductionButton", "NasÄ±l yardÄ±mcÄ± olabilirim ?");
Database.addText("tr.mapATreeFirstQuestion", "Size sorular soracaÄŸÄ±m. DoÄŸru cevaplarsanÄ±z, tatlÄ±larÄ±n en tatlÄ±sÄ± sizin olacak! Ä°lk soru: gerÃ§ekten ÅŸekerleri seviyor musunuz? (cevaplar ingilizce olacaktÄ±r)");
Database.addText("tr.mapATreeSecondQuestion", "Aynen Ã¶yle! Bu 20 ÅŸeker senin. Åžimdi sÄ±radaki harfi doÄŸru tahmin edip sÄ±ralamayÄ± tamamla ve yeni Ã¶dÃ¼lÃ¼nÃ¼ al: S, E, I, D, N, A, ?");
Database.addText("tr.mapATreeThirdQuestion", "Åžekerler! Bu 100 ÅŸeker senin. SÄ±radaki soru : DÃ¼nyadaki en ÅŸeker insanÄ±n kaÃ§ ÅŸekeri var?");
Database.addText("tr.mapATreeFourthQuestion", "Bu 500 ÅŸeker senin! SÄ±radaki Ã¶dÃ¼l Ã§ok daha ilginÃ§ olmalÄ±...  Bilmece geliyor : Kadim bir ormanda Ã§ok yaÅŸlÄ± bir aÄŸaÃ§ bÃ¼yÃ¼r, Ã¼zerinde dÃ¼nyanÄ±n en zeki hayvanÄ± yaÅŸar. Ã–yle denir ki bu aÄŸacÄ±n 60 kÃ¶kÃ¼, 360 dalÄ± ve 2160 yapraÄŸÄ± vardÄ±r. GÃ¶vdesinde kaÃ§ tane iz bulabilirsin?");
Database.addText("tr.mapATreeFifthQuestion", "Tebrikler! Tabi ki kendi aÄŸacÄ±mdan bahsediyordum. Bu 3 lolipop senin, gÃ¼zelce kullan! SÄ±radaki bilmecen geliyor, dikkatli dinle: DolunayÄ±n Ä±ÅŸÄ±ÄŸÄ±nda, kÄ±zÄ±l bir denize sarÄ± bir ÅŸapka attÄ±m. SarÄ± ÅŸapkaya ne olur?");
Database.addText("tr.mapATreeTicTacToeIntro", "GÃ¼zel cevapladÄ±n! O kadar da zor deÄŸildi. Bu 3 Ã§ikolata senin! SÄ±radaki Ã¶dÃ¼l iÃ§in, kurallarÄ± biraz deÄŸiÅŸtiriyoruz. Benimle bir oyun oynamak zorundasÄ±n!  HazÄ±r mÄ±sÄ±n?");
Database.addText("tr.mapATreeTicTacToeIntroButton", "Tabi ki Ã¶yleyim!");
Database.addText("tr.mapATreeTicTacToeLetsPlay", "Oyunumuzun adÄ± tic-tac-toe. 3e 3lÃ¼k bir tahtada oynuyorz. Sen X iÅŸaretini kullanÄ±rken ben O iÅŸaretini kullanacaÄŸÄ±m. Ä°ÅŸaretlerimizi deÄŸiÅŸik ÅŸekillerde koyacaÄŸÄ±z ve amacÄ±mÄ±z 3 tane iÅŸareti yanyana / Ã¼stÃ¼ste / Ã§apraz yaparak Ã¼Ã§lÃ¼ yakalamak. Hadi, ilk sen baÅŸla!");
Database.addText("tr.mapATreeTicTacToeNobodyWins", "Tahta aÄŸzÄ±na kadar doldu ve ikimiz de Ã¼Ã§lÃ¼ yakalayamadÄ±k : kimse kazanamadÄ±! Tekrar denemek ister misin?");
Database.addText("tr.mapATreeTicTacToeYouLose", "ÃœÃ§lÃ¼ yakaladÄ±m! Ben kazandÄ±m.Tekrar denemek ister misin?");
Database.addText("tr.mapATreeTicTacToeTryAgainButton", "Evet!");
Database.addText("tr.mapATreeTicTacToeYouWin", "Vay, bu hareketi beklemiyordum. Ama Ã¼Ã§lÃ¼yÃ¼ yakaladÄ±n, orasÄ± kesin. Sen kazandÄ±n! Bu anahtarÄ± al! Bu anahtar ormanÄ±n altÄ±ndaki evlerden birini aÃ§Ä±yor.");
Database.addText("tr.mapATreeTicTacToeAnymoreSweet", "TeÅŸekkÃ¼rler sincap, baÅŸka bilmecen var mÄ±?");
Database.addText("tr.mapATreeNoMoreChallenge", "Malesef hayÄ±r, baÅŸka bilmecem kalmadÄ±... Senle oynamak Ã§ok eÄŸlenceliydi, bunun iÃ§in teÅŸekkÃ¼r ederim!");
Database.addText("tr.buttonExitQuestKeeping", "GÃ¶revden Ã§Ä±k (ve bulduÄŸunu al)");
Database.addText("tr.buttonExitQuestNoKeeping", "GÃ¶revden Ã§Ä±k (bulduÄŸunu alamayacaksÄ±n)");
Database.addText("tr.buttonExitQuestNoKeepingBecauseLose", "GÃ¶revden Ã§Ä±k (bulduÄŸunu alamayacaksÄ±n Ã§Ã¼nkÃ¼ baÅŸarÄ±sÄ±z oldun)");
Database.addText("tr.mapVillageLockedHouseComment", "Kilitli bir ev");
Database.addText("tr.mapVillageForgeIntroductionSpeech", "Selam! Ben demirci. EnvaiÃ§eÅŸit silah ve ekipmanlarÄ± satabilirim.");
Database.addText("tr.mapVillageForgeIntroductionSpeechNoMoreToSell", "Selam! Ben demirci. Malesef, satacak birÅŸeyim kalmadÄ±. Sonra gelirsen, belki?");
Database.addText("tr.mapVillageFifthHouseNoWeaponSpeech", "Merhaba. Kilerim farelerle dolup taÅŸtÄ±, onlardan kurtulmam lazÄ±m... KeÅŸke silahlÄ± biri bana yardÄ±m etseydi...");
Database.addText("tr.mapVillageFifthHouseWeaponSpeech", "ÅžÅŸt, sen! SilahÄ±n var! Kilerimi mahveden farelerden kutrulursan, seni Ã¶dÃ¼llendiririm!");
Database.addText("tr.mapVillageFifthHouseAgree", "O zaman hadi gidelim!");
Database.addText("tr.mapVillageFifthHouseCellarDone", "Onlardan kurtulduÄŸun iÃ§in teÅŸekkÃ¼r ederim! Ã–dÃ¼l olarak Ã§ok kÄ±ymetli biÅŸey var : dÃ¼nyanÄ±n bir haritasÄ±. SanÄ±rÄ±m sen bunu benden fazla kullanacksÄ±n.");
Database.addText("tr.mapVillageTheShopComment", "DÃ¼kkan");
Database.addText("tr.mapBridgeComment", "KÃ¶prÃ¼");
Database.addText("tr.mapFarmComment", "Lolipop tarlasÄ±");
Database.addText("tr.mapCaveEntranceComment", "MaÄŸara giriÅŸi");
Database.addText("tr.mapLighthouseComment", "Deniz feneri");
Database.addText("tr.mapPierComment", "Ä°skele");
Database.addText("tr.mapTheHoleComment", "Ã‡ukur");
Database.addText("tr.candyBoxRequestStatusBarUnlocked", "GeliÅŸtiriciden yeni bir Ã¶zellik iste (30 ÅŸeker)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedCfg", "BaÅŸka bir tane iste (5 ÅŸeker)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedSave", "Bir kere daha iste (5 ÅŸeker)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedHealthBar", "Daha etkileyici birÅŸeyler iste (5 ÅŸeker)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedMap", "Son isteÄŸin! Bunun verdiÄŸin ÅŸekerlere deÄŸmesi lazÄ±m. (10 ÅŸeker)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedComment", "Durum Ã§ubuÄŸunu aÃ§tÄ±n! (yukarÄ±da)");
Database.addText("tr.candyBoxRequestStatusBarUnlockedCfgComment1", "ArtÄ±k ayarlar sekmesine eriÅŸebilirsin.");
Database.addText("tr.candyBoxRequestStatusBarUnlockedCfgComment2", "EÄŸer istersen, dili deÄŸiÅŸtirebilirsin.");
Database.addText("tr.candyBoxRequestStatusBarUnlockedSaveComment", "VahÅŸi bir kayÄ±t sekmesi belirdi!");
Database.addText("tr.candyBoxRequestStatusBarUnlockedHealthBarComment", "Bu 100 saÄŸlÄ±k puanÄ± senin. Bunlar iÅŸine yarayacak.");
Database.addText("tr.cfgChooseLanguage", "Dili seÃ§ :");
Database.addText("tr.cfgInvertColors", "ZÄ±t renkler?");
Database.addText("tr.gridItemMainMapName", "Harita");
Database.addText("tr.gridItemMainMapDescription", "DÃ¼nyanÄ±n haritasÄ±");
Database.addText("tr.gridItemPogoStickName", "Pogo Ã§ubuÄŸu");
Database.addText("tr.gridItemPogoStickDescription", "Bu eÅŸya gÃ¶revlerde zÄ±plamana yarar!");
Database.addText("tr.gridItemTimeRingName", "Zaman yÃ¼zÃ¼ÄŸÃ¼");
Database.addText("tr.gridItemTimeRingDescription", "Bu item gÃ¶revlerde yeni bir yetenek ekler: zamanÄ± yavaÅŸlatabilirsin. Olaylar senin iÃ§in Ã§ok hÄ±zlÄ±ysa, yÃ¼zÃ¼ÄŸÃ¼ kullan!");
Database.addText("tr.gridItemThirdHouseKeyName", "ÃœÃ§Ã¼ncÃ¼ evin anahtarÄ±");
Database.addText("tr.gridItemThirdHouseKeyDescription", "Bu anahtar kÃ¶ydeki Ã¼Ã§Ã¼ncÃ¼ eve girmeni saÄŸlar.");
Database.addText("tr.gridItemFeatherName", "Ã‡Ã¶l kuÅŸunun tÃ¼yÃ¼");
Database.addText("tr.gridItemFeatherDescription", "Bu bÃ¼yÃ¼lÃ¼ tÃ¼y pogo Ã§ubuÄŸu kullanÄ±rken daha yukarÄ± zÄ±plamana yarar!");
Database.addText("tr.gridItemFeatherDescriptionNoPogoStick", "Durup dururken, bu tÃ¼yÃ¼n pogo Ã§ubuÄŸun olsa iÅŸe yarayacaÄŸÄ±nÄ± hissediyorsun...");
Database.addText("tr.gridItemSpongeName", "BÃ¼yÃ¼lÃ¼ sÃ¼nger");
Database.addText("tr.gridItemSpongeDescription", "Bu bÃ¼yÃ¼lÃ¼ sÃ¼nger kendini sÃ¼nger gibi sÄ±kmanÄ± saÄŸlar, bÃ¶ylece boyutun kÃ¼Ã§Ã¼lÃ¼r.");
Database.addText("tr.gridItemFortressKeyName", "Ã‡Ã¶l hisarÄ±nÄ±n anahtarÄ±");
Database.addText("tr.gridItemFortressKeyDescription", "Bu anahtar Ã§Ã¶lÃ¼n Ã¼zerindeki  eski kadim hisara girmeni saÄŸlar. Orada ne bulacaÄŸÄ±nÄ± kim bilebilir?");
Database.addText("tr.gridItemHeartPendantName", "Kalpli kolye ucu");
Database.addText("tr.gridItemHeartPendantDescription", "Bu kalpli kolye, boynuna astÄ±ÄŸÄ±n sÃ¼rece saÄŸlÄ±k puanÄ±nÄ± arttÄ±racak.");
Database.addText("tr.gridItemHeartPlugName", "Kalp tÄ±kacÄ±");
Database.addText("tr.gridItemHeartPlugDescription", "Demirden, Ã¶rÃ¼mcek bacaklarÄ±ndan ve merkezinde mÃ¼hÃ¼rlÃ¼ olan \"can likÃ¶rÃ¼\"nden yapÄ±lmÄ±ÅŸ bu can tÄ±kacÄ± can puanlarÄ±nÄ± yÃ¼zde 20 arttÄ±racak!");
Database.addText("tr.gridItemBeginnersGrimoireName", "Acemilerin bÃ¼yÃ¼ kitabÄ±");
Database.addText("tr.gridItemBeginnersGrimoireDescription", "Bu bÃ¼yÃ¼ kitabÄ±, kullanmasÄ± kolay Ã¼Ã§ bÃ¼yÃ¼ iÃ§erir. GerÃ§ekten acemiler iÃ§indir. Asit yaÄŸmuru bÃ¼yÃ¼sÃ¼nÃ¼ (bÃ¼yÃ¼k miktarda asit damlalarÄ± dÃ¼ÅŸmanlarÄ±nÄ±n Ã¼zerine dÃ¼ÅŸer) Alev topu bÃ¼yÃ¼sÃ¼nÃ¼ (alevden oluÅŸan dev bir sihirli top dÃ¼ÅŸmanlarÄ±na doÄŸru uÃ§ar.) ve Ä±ÅŸÄ±nlanma bÃ¼yÃ¼sÃ¼nÃ¼ (ki seni tamamen rastgele bir yere Ä±ÅŸÄ±nlar) kullanmanÄ± saÄŸlar.");
Database.addText("tr.gridItemAdvancedGrimoireName", "UzmanlarÄ±n bÃ¼yÃ¼ kitabÄ±");
Database.addText("tr.gridItemAdvancedGrimoireDescription", "Bu ileri bÃ¼yÃ¼ kitabÄ± iki bÃ¼yÃ¼ kullanmanÄ± saÄŸlar : sihir silme bÃ¼yÃ¼sÃ¼ ve aÄŸaÃ§ kalkanÄ± bÃ¼yÃ¼sÃ¼. Birincisi gÃ¶rev zamanÄ±nda bÃ¼tÃ¼n bÃ¼yÃ¼leri silmeni saÄŸlar, buna senin ve dÃ¼ÅŸmanlarÄ±nÄ±n bÃ¼yÃ¼leri de dahildir. Ä°kincisi ise senin etrafÄ±nda temas halinde dÃ¼ÅŸmanÄ±na hasar veren, aÄŸaÃ§lardan oluÅŸan bir kalkan oluÅŸturur.");
Database.addText("tr.gridItemBlackMagicGrimoireName", "Kara bÃ¼yÃ¼ kitabÄ±");
Database.addText("tr.gridItemBlackMagicGrimoireDescription", "Bu kitabÄ± maÄŸarada buldun, ulaÅŸmasÄ± Ã§ok zordu, ve bunun bir sebebi vardÄ±. Bu kitap sana Ã§ok gÃ¼Ã§lÃ¼ iki kara bÃ¼yÃ¼ bahÅŸeder. Birincisi, Ã¶nÃ¼nde obsidyenden oluÅŸan dev bir duvar oluÅŸturur, bunu dÃ¼ÅŸmanlarÄ±nÄ± yavaÅŸlatmak iÃ§in kullanabilirsin. Ä°kincisi ise sen dahil gÃ¶revdeki herkese saldÄ±ran bir ÅŸeytan gÃ¼ruhu Ã§aÄŸÄ±rÄ±r. Bunu kullanÄ±rken dikkatli ol.");
Database.addText("tr.gridItemUnicornHornName", "Tek boynuzlu atÄ±n boynuzu");
Database.addText("tr.gridItemUnicornHornDescription", "Bu bÃ¼yÃ¼lÃ¼ boynuz zamanÄ±nda bir tek boynuzlu atÄ±ndÄ±. GÃ¼Ã§lÃ¼ iyileÅŸtirme Ã¶zellikleri sana bolca yardÄ±m edecek. Bu tek boynuzlu atÄ±n adÄ±nÄ± Mahmut diye duydun.");
Database.addText("tr.gridItemXinopherydonClawName", "Xinopherydon penÃ§esi");
Database.addText("tr.gridItemXinopherydonClawDescription", "Bu penÃ§e bir Xinopherydona aitti -, herkesin soyunun tÃ¼kendiÄŸine inandÄ±ÄŸÄ± iki baÅŸlÄ± antik bir hayvan. Bu penÃ§e kullandÄ±ÄŸÄ±n silahÄ±n hasarÄ±nÄ± ikiye katlar.");
Database.addText("tr.gridItemPitchforkName", "Dirgen");
Database.addText("tr.gridItemPitchforkDescription", "Bu Ã¶zel dirgen topraÄŸÄ± ters dÃ¼z etmeden gevÅŸetmene yarar, bÃ¶ylece topraÄŸÄ±n altÄ±ndaki ekosisteme zarar vermezsin. Dirgen ile lolipop tarlanÄ±n Ã¼retimi Ã¼Ã§e katlanÄ±r.");
Database.addText("tr.gridItemShellPowderName", "Kabuk tozu");
Database.addText("tr.gridItemShellPowderDescription", "Kabuk tozlarÄ± Ã§iftÃ§iler tarafÄ±ndan lolipop tarlalarÄ±nÄ±n Ã¼retimini arttÄ±rmak amacÄ±yla sÄ±klÄ±kla kullanÄ±lÄ±r. Bu toz ile lolipop tarlanÄ±n Ã¼retimi Ã¼Ã§e katlanÄ±r!");
Database.addText("tr.gridItemPName", "P taÅŸÄ±");
Database.addText("tr.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("tr.gridItemLName", "L taÅŸÄ±");
Database.addText("tr.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("tr.gridItemAName", "A taÅŸÄ±");
Database.addText("tr.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("tr.gridItemYName", "Y taÅŸÄ±");
Database.addText("tr.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("tr.gridItemRedSharkFinName", "BÃ¼yÃ¼lÃ¼ kÄ±rmÄ±zÄ± kÃ¶pekbalÄ±ÄŸÄ± yÃ¼zgeci");
Database.addText("tr.gridItemRedSharkFinDescription", "Bu bÃ¼yÃ¼lÃ¼ yÃ¼zgeÃ§  alev toplarÄ±nÄ±n verdiÄŸi hasarÄ± yÃ¼ksek miktarda arttÄ±rÄ±r. Sonunda ÅŸu alev topu bir iÅŸe yaramaya baÅŸladÄ±.");
Database.addText("tr.gridItemGreenSharkFinName", "BÃ¼yÃ¼lÃ¼ yeÅŸil kÃ¶pekbalÄ±ÄŸÄ± yÃ¼zgeci");
Database.addText("tr.gridItemGreenSharkFinDescription", "Bu bÃ¼yÃ¼lÃ¼ yÃ¼zgeÃ§ lolipop tarlana doÄŸanÄ±n gÃ¼cÃ¼nÃ¼ getirir! Ãœretimin 5e katlandÄ±.");
Database.addText("tr.gridItemPurpleSharkFinName", "BÃ¼yÃ¼lÃ¼ mor kÃ¶pekbalÄ±ÄŸÄ± yÃ¼zgeci");
Database.addText("tr.gridItemPurpleSharkFinDescription", "Bu bÃ¼yÃ¼lÃ¼ yÃ¼zgeÃ§ sana yeni bir kara bÃ¼yÃ¼ getirdi. Her gÃ¶revde bir kere kullanabilirsin, Ã§ok dikkatli ol.");
Database.addText("tr.gridItemTalkingCandyName", "KonuÅŸan bir ÅŸeker");
Database.addText("tr.gridItemTalkingCandyDescription", "Bu konuÅŸan ÅŸeker, kalenin kulesinin tepesine dÃ¶rt taÅŸÄ± koyunca belirdi. Belki sana candy box'Ä± aÃ§ma konusunda yardÄ±mcÄ± olabilir...");
Database.addText("tr.inventorySpecialNothingEqItem", "HiÃ§ bir ÅŸey");
Database.addText("tr.eqItemWeaponWoodenSwordName", "Tahta KÄ±lÄ±Ã§");
Database.addText("tr.eqItemWeaponWoodenSwordDescription", "Tahtadan yapÄ±lmÄ±ÅŸ basit bir kÄ±lÄ±Ã§");
Database.addText("tr.eqItemWeaponIronAxeName", "Demir balta");
Database.addText("tr.eqItemWeaponIronAxeDescription", "YalnÄ±zca demir balta. Ä°yi bilenmiÅŸ. Tahta kÄ±lÄ±Ã§tan Ã§ok daha gÃ¼Ã§lÃ¼.");
Database.addText("tr.eqItemWeaponPolishedSilverSwordName", "ParlatÄ±lmÄ±ÅŸ gÃ¼mÃ¼ÅŸ kÄ±lÄ±Ã§");
Database.addText("tr.eqItemWeaponPolishedSilverSwordDescription", "GÃ¼Ã§lÃ¼ bir kÄ±lÄ±Ã§, dikenlerle gÃ¼Ã§lendirildi.");
Database.addText("tr.eqItemWeaponTrollBludgeonName", "Troll'Ã¼n sopasÄ±");
Database.addText("tr.eqItemWeaponTrollBludgeonDescription", "Bu sopayÄ± kÃ¶prÃ¼yÃ¼ koruyan trollden aldÄ±n. Biraz yavaÅŸ ama dÃ¼ÅŸmanlarÄ±nÄ± gayet gÃ¼zel eziyor.");
Database.addText("tr.eqItemWeaponTribalSpearName", "Kabile mÄ±zraÄŸÄ±");
Database.addText("tr.eqItemWeaponTribalSpearDescription", "Bu kabile mÄ±zraÄŸÄ±nÄ± yerdeki bÃ¼yÃ¼k delikte kaybolmuÅŸ kabile savaÅŸÃ§Ä±sÄ±nÄ±n cesedinde buldun. BaÅŸta kullanmasÄ± zor gelse de bir kere alÄ±ÅŸÄ±nca gÃ¼zel bir silah olduÄŸunu anlÄ±yorsun.");
Database.addText("tr.eqItemWeaponSummoningTribalSpearName", "Celbeden kabile mÄ±zraÄŸÄ±");
Database.addText("tr.eqItemWeaponSummoningTribalSpearDescription", "Bu bÃ¼yÃ¼lÃ¼ kabile mÄ±zraÄŸÄ± normal kabile mÄ±zraÄŸÄ±ndan biraz daha gÃ¼Ã§lÃ¼ olmasÄ±nÄ±n yanÄ± sÄ±ra, gÃ¶revlerinde sÄ±k sÄ±k yardÄ±ma gelecek kabile savaÅŸÃ§Ä±larÄ±nÄ± Ã§aÄŸÄ±rÄ±r.");
Database.addText("tr.eqItemWeaponMonkeyWizardStaffName", "BÃ¼yÃ¼cÃ¼ maymunun asasÄ±");
Database.addText("tr.eqItemWeaponMonkeyWizardStaffDescription", "Bu asa maÄŸarada bulduÄŸun Ã§Ä±plak bÃ¼yÃ¼cÃ¼ maymuna aitti. DÃ¼ÅŸmanlarÄ±nÄ± hedef alan, sÄ±k sÄ±k bÃ¼yÃ¼ler gÃ¶nderir.");
Database.addText("tr.eqItemWeaponEnchantedMonkeyWizardStaffName", "BÃ¼yÃ¼cÃ¼ maymunun asasÄ± (efsunlu)");
Database.addText("tr.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Bu asa efsunsuz olanÄ±ndan daha hÄ±zlÄ±, ayrÄ±ca daha fazla bÃ¼yÃ¼ gÃ¶nderiyor.");
Database.addText("tr.eqItemWeaponGiantSpoonName", "Dev bir kaÅŸÄ±k");
Database.addText("tr.eqItemWeaponGiantSpoonDescription", "Bu dev kaÅŸÄ±k Ã§Ã¶l hisarÄ±ndaki dev Ã§aydanlÄ±ÄŸÄ±n iÃ§indeydi. Daha Ã¶nce biri bunu kaÅŸÄ±k olarak kullandÄ± mÄ±, bilmiyorsun ama eÄŸer biri kullandÄ±ysa kullanan kiÅŸi Ã§ok bÃ¼yÃ¼k olmalÄ±. Muhtemelen onunla tanÄ±ÅŸmak istemezsin.");
Database.addText("tr.eqItemWeaponGiantSpoonOfDoomName", "Cehennemin dev kaÅŸÄ±ÄŸÄ±");
Database.addText("tr.eqItemWeaponGiantSpoonOfDoomDescription", "Bu dev kaÅŸÄ±k bulabileceÄŸin normal dev kaÅŸÄ±klardan daha da gÃ¼Ã§lÃ¼, Ã¶rneÄŸin, Ã§aydanlÄ±kta. Yine de yeteri kadar yavaÅŸ.");
Database.addText("tr.eqItemWeaponScytheName", "TÄ±rpan");
Database.addText("tr.eqItemWeaponScytheDescription", "Derler ki bu tÄ±rpan bizzat Ã–lÃ¼mÃ¼n kendisine aitti. FazlasÄ±yla hÄ±zlÄ±.");
Database.addText("tr.eqItemHatMerchantHatName", "TÃ¼ccarÄ±n ÅŸapkasÄ±");
Database.addText("tr.eqItemHatMerchantHatDescription", "Bu ÅŸapka sana ÅŸeker tÃ¼ccarÄ± tarafÄ±ndan satÄ±ldÄ±. Åžeker tÃ¼ccarÄ± ÅŸekerleri sever. Bu ÅŸapkayla gÃ¶revlerde bulacaÄŸÄ±n ÅŸekerler 7ye katlandÄ±!");
Database.addText("tr.eqItemHatSorceressHatName", "SihirbazÄ±n ÅŸapkasÄ±");
Database.addText("tr.eqItemHatSorceressHatDescription", "Bu ÅŸapka sana sihirbaz tarafÄ±ndan satÄ±ldÄ±. Bu bÃ¼yÃ¼lerinin ve iksirlerinin etkilerini gÃ¼Ã§lendirecek.");
Database.addText("tr.eqItemHatOctopusKingCrownName", "Ahtapot KralÄ±n tacÄ±");
Database.addText("tr.eqItemHatOctopusKingCrownDescription", "Bu tacÄ± giydiÄŸinde kendinden daha emin hissediyorsun. TacÄ±n sana gÃ¶revlerde bir artÄ±sÄ± yok fakat kendine gÃ¼ven Ã¶nemlidir.");
Database.addText("tr.eqItemHatOctopusKingCrownWithJaspersName", "Ahtapot KralÄ±n yeÅŸim taÅŸlÄ± tacÄ±");
Database.addText("tr.eqItemHatOctopusKingCrownWithJaspersDescription", "Bu efsunlu tac, altÄ±ndan ve kÄ±rmÄ±zÄ± yeÅŸim taÅŸÄ±ndan yapÄ±lmÄ±ÅŸ. GÃ¶revlerde etrafÄ±na gÃ¼Ã§lÃ¼ alev toplarÄ± gÃ¶nderir. Ve ayrÄ±ca, parlÄ±yor.");
Database.addText("tr.eqItemHatOctopusKingCrownWithObsidianName", "Ahtapot KralÄ±n obsidyenli tacÄ±");
Database.addText("tr.eqItemHatOctopusKingCrownWithObsidianDescription", "Bu efsunlu tac, altÄ±ndan ve obsidyenden yapÄ±lmÄ±ÅŸ ve Ã§ok gÃ¼zel gÃ¶rÃ¼nÃ¼yor. GÃ¶revlerde bir sÃ¼reliÄŸine yardÄ±mÄ±na gelecek Ahtapot KralÄ± Ã§aÄŸÄ±rÄ±r. Ne sarÄ±lgan mÃ¼ttefik ama!");
Database.addText("tr.eqItemGlovesLeatherGlovesName", "Deri eldivenler");
Database.addText("tr.eqItemGlovesLeatherGlovesDescription", "Bu eldivenler basitÃ§e hiÃ§ biÅŸey yapmÄ±yor. Ama en azÄ±ndan yumuÅŸak ve rahatlar!");
Database.addText("tr.eqItemGlovesRedEnchantedGlovesName", "KÄ±rmÄ±zÄ± efsunlu eldivenler");
Database.addText("tr.eqItemGlovesRedEnchantedGlovesDescription", "Bu efsunlu eldivenler etraf karanlÄ±k olduÄŸunda kÄ±rmÄ±zÄ± ve yumuÅŸak bir Ä±ÅŸÄ±k yayar. GÃ¶revlerde dÃ¼ÅŸmanlarÄ±na doÄŸru kÃ¼Ã§Ã¼k alev toplarÄ± yollar, yani kesinlikle iÅŸe yarar.");
Database.addText("tr.eqItemGlovesPinkEnchantedGlovesName", "Pembe efsunlu eldivenler");
Database.addText("tr.eqItemGlovesPinkEnchantedGlovesDescription", "Bu efsunlu eldivenler dokunduÄŸun her ÅŸeye pembe bir iz bÄ±rakÄ±r. GÃ¶revlerde canÄ±nÄ± durmaksÄ±zÄ±n arttÄ±rÄ±r.");
Database.addText("tr.eqItemBootsRocketBootsName", "Roket botlar");
Database.addText("tr.eqItemBootsRocketBootsDescription", "Bu mÃ¼kemmel roket botlar havada zÄ±plamana yarar, bÃ¶ylece aslÄ±nda uÃ§uyor oluyorsun!");
Database.addText("tr.eqItemBootsLeatherBootsName", "Deri botlar");
Database.addText("tr.eqItemBootsLeatherBootsDescription", "Sadece deri botlar. HiÃ§birÅŸeyleri Ã¶zel deÄŸil.");
Database.addText("tr.eqItemBootsBootsOfIntrospectionName", "OturaklÄ± botlar");
Database.addText("tr.eqItemBootsBootsOfIntrospectionDescription", "Nefes al ve sakinleÅŸ. Bu botlarÄ± giydiysen yere dokunduÄŸun sÃ¼rece asla hareket edemeyeceksin.");
Database.addText("tr.eqItemBodyArmoursLightweightBodyArmourName", "Hafif vÃ¼cut zÄ±rhÄ±");
Database.addText("tr.eqItemBodyArmoursLightweightBodyArmourDescription", "Bu vÃ¼cut zÄ±rhÄ± sana zayÄ±f bir koruma sunar. DÃ¼ÅŸmanlarÄ±n saldÄ±rÄ±larÄ±na karÅŸÄ± biraz daha dayanÄ±klÄ± olursun.");
Database.addText("tr.eqItemBodyArmoursKnightBodyArmourName", "ÅžÃ¶valyenin vÃ¼cut zÄ±rhÄ±");
Database.addText("tr.eqItemBodyArmoursKnightBodyArmourDescription", "Bu gÃ¼Ã§lÃ¼ vÃ¼cut armoru seni korur. DÃ¼ÅŸman saldÄ±rÄ±larÄ±na daha fazla dayanÄ±rsÄ±n.");
Database.addText("tr.eqItemBodyArmoursEnchantedKnightBodyArmourName", "ÅžÃ¶valyenin efsunlu vÃ¼cut zÄ±rhÄ±");
Database.addText("tr.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Bu zÄ±rh Ã§ok Ã¶zeldir. DÃ¼ÅŸmanlarÄ±n saldÄ±rÄ±larÄ±na karÅŸÄ± Ã‡OK daha fazla dayanÄ±klÄ± olursun ama silahÄ±nÄ±n verdiÄŸi hasar yarÄ±ya iner.");
Database.addText("tr.mapVillageForgeBuyWoodenSwordButton", "Tahta bir kÄ±lÄ±Ã§ al (150 ÅŸeker)");
Database.addText("tr.mapVillageForgeBuyWoodenSwordSpeech", "AldÄ±ÄŸÄ±n iÃ§in teÅŸekkÃ¼rler! Bu tahta kÄ±lÄ±Ã§ baya zayÄ±f ama baÅŸlangÄ±Ã§ baÅŸlangÄ±Ã§tÄ±r.");
Database.addText("tr.mapVillageForgeBuyIronAxeButton", "Demir bir balta al (400 ÅŸeker)");
Database.addText("tr.mapVillageForgeBuyIronAxeSpeech", "Umarum bu demir baltayÄ± seversin. Senin iÃ§in daha yeni biledim!");
Database.addText("tr.mapVillageForgeBuyPolishedSilverSwordButton", "ParlatÄ±lmÄ±ÅŸ gÃ¼mÃ¼ÅŸ bir kÄ±lÄ±Ã§ al (2 000 ÅŸeker)");
Database.addText("tr.mapVillageForgeBuyPolishedSilverSwordSpeech", "Bu silahÄ± oluÅŸturmak benim iÃ§in Ã§ok fazla zamana mal oldu. Ãœcretine deÄŸeceÄŸine garanti veriyorum.");
Database.addText("tr.mapVillageForgeBuyLightweightBodyArmourButton", "Hafif bir vÃ¼cut zÄ±rhu al (15 000 ÅŸeker)");
Database.addText("tr.mapVillageForgeBuyLightweightBodyArmourSpeech", "Bu vÃ¼cut zÄ±rhÄ± dÃ¼ÅŸmanlarÄ±na karÅŸÄ± koruma sunar.");
Database.addText("tr.mapVillageForgeBuyScytheButton", "Bir tÄ±rpan al (5 000 000 ÅŸeker)");
Database.addText("tr.mapVillageForgeBuyScytheSpeech", "Bu tÄ±rpanÄ± yapmak bir kaÃ§ ay sÃ¼rdÃ¼. GerÃ§ek bir sanat eseridir. Muhtemelen kullanabileceÄŸin en hÄ±zlÄ± silah bu silahtÄ±r. Ä°yi ÅŸanslar!");
Database.addText("tr.wishingWellThrowFirstCandyButton", "Kuyuya bir ÅŸeker at");
Database.addText("tr.wishingWellCandyIntroductionSpeech", "Merhaba, gezgin! Ben dilek kuyusuyum! Ben sana tatlÄ±lar karÅŸÄ±lÄ±ÄŸÄ±nda dilekler bahÅŸedeceÄŸim! Bana ÅŸeker attÄ±ÄŸÄ±nda yaralarÄ±nÄ± iyileÅŸtiririm.");
Database.addText("tr.wishingWellThrewCandiesSpeech", "YaralarÄ±n iyileÅŸti !");
Database.addText("tr.wishingWellNoWoundSpeech", "Ä°yileÅŸecek yaran yok!");
Database.addText("tr.wishingWellThrowFirstLollipopButton", "Kuyuya bir lolipop at");
Database.addText("tr.wishingWellLollipopIntroductionSpeech", "Merhaba, gezgin! Ben dilek kuyusuyum! Ben sana tatlÄ±lar karÅŸÄ±lÄ±ÄŸÄ±nda dilekler bahÅŸedeceÄŸim! Bana lolipop attÄ±ÄŸÄ±nda onlarÄ± ÅŸekere dÃ¶nÃ¼ÅŸtÃ¼rÃ¼rÃ¼m.");
Database.addText("tr.wishingWellThrewLollipopsSpeech", "LolipoplarÄ±n ÅŸekere dÃ¶nÃ¼ÅŸtÃ¼! Bir ÅŸekere iki lolipop.");
Database.addText("tr.wishingWellThrowChocolateBarButton", "Kuyuya bir Ã§ikolata barÄ± at");
Database.addText("tr.wishingWellChocolateBarIntroductionSpeech", "Merhaba, gezgin! Ben dilek kuyusuyum! Ben sana tatlÄ±lar karÅŸÄ±lÄ±ÄŸÄ±nda dilekler bahÅŸedeceÄŸim! Ã‡ikolata barlarÄ±nÄ± Ã§ok severim. GerÃ§ekten, Ã§ok severim. Bana attÄ±ÄŸÄ±n her Ã§ikolata barÄ± iÃ§in, bu da dahil, bÃ¼yÃ¼lÃ¼ bir efsunla Ã¶dÃ¼llendirileceksin.");
Database.addText("tr.wishingWellThrewChocolateBarSpeech", "Hangi nesneyi efsunlamak istersin?");
Database.addText("tr.wishingWellThrowPainAuChocolatButton", "Kuyuya bir pain au chocolat at");
Database.addText("tr.wishingWellPainAuChocolatIntroductionSpeech", "Merhaba, gezgin! Ben dilek kuyusuyum! Ben sana tatlÄ±lar karÅŸÄ±lÄ±ÄŸÄ±nda dilekler bahÅŸedeceÄŸim! Bana bir pain au chocolat attÄ±ÄŸÄ±n zaman Ã§ok Ã¶zel bir hediye alacaksÄ±n. Dikkatlice seÃ§.");
Database.addText("tr.wishingWellThrewPainAuChocolatSpeech", "Pain au chocolat iÃ§in teÅŸekkÃ¼rler! Åžimdi hediyeni seÃ§ebilirsin.");
Database.addText("tr.wishingWellChooseGift", "Hediyeni seÃ§!");
Database.addText("tr.wishingWellChooseGiftButton", "SeÃ§");
Database.addText("tr.wishingWellGiftDoneSpeech", "TamamdÄ±r! ArtÄ±k yeni bir hediyen var. Hediyen envanter durumu ekranÄ±nda belirecektir.");
Database.addText("tr.wishingWellNoPossibleEnchantment", "Efsunlanacak ÅŸey yok.");
Database.addText("tr.wishingWellChooseEnchantment", "Efsunu seÃ§");
Database.addText("tr.wishingWellEnchantButton", "Efsunla");
Database.addText("tr.wishingWellEnchantmentDoneSpeech", "Oldu! EÅŸyan efsunlandÄ±.");
Database.addText("tr.pierLighthouseButton", "Deniz fenerine botla git");
Database.addText("tr.pierTheSeaButton", "Denize atla");
Database.addText("tr.lonelyHouseOpenBox", "Kutuyu aÃ§");
Database.addText("tr.lonelyHouseShakeBox", "Kutuyu salla");
Database.addText("tr.lonelyHouseBreakLock", "Kilidi kÄ±r");
Database.addText("tr.lonelyHouseKickBox", "Kutuyu tekmele");
Database.addText("tr.lonelyHouseAskTheBoxToOpenItself", "Kutudan kendi kendine aÃ§Ä±lmasÄ±nÄ± iste");
Database.addText("tr.lonelyHouseLureTheBoxWithACandy", "Kutuyu ÅŸekerle cezbet");
Database.addText("tr.lonelyHouseTakeTheBox", "Kutuyu yanÄ±na al, zaten aÃ§mak iÃ§in muhtemelen bir anahtara ihtiyacÄ±n var");
Database.addText("tr.lonelyHouseOpenBoxResult", "Kutu kilitli");
Database.addText("tr.lonelyHouseShakeBoxResult", "HiÃ§birÅŸey olmadÄ±.");
Database.addText("tr.lonelyHouseBreakLockResult", "Kilit direniyor");
Database.addText("tr.lonelyHouseKickBoxResult", "AyaÄŸÄ±n biraz acÄ±dÄ± fakat hiÃ§birÅŸey olmadÄ±.");
Database.addText("tr.lonelyHouseAskTheBoxToOpenItselfResult", "...kutuyla konuÅŸtuÄŸunun farkÄ±nda mÄ±sÄ±n?");
Database.addText("tr.lonelyHouseLureTheBoxWithACandyResult", "Kutunun umrunda deÄŸil");
Database.addText("tr.lonelyHouseTakeTheBoxResult", "Candy box muhtemelen iÃ§inde Ã§ok ilginÃ§ ÅŸeyler barÄ±ndÄ±rÄ±yor.");
Database.addText("tr.lollipopFarmConstructMill", "DeÄŸirmen inÅŸa et (10 000 lolipop)");
Database.addText("tr.lollipopFarmFeedMill", "DeÄŸirmeni besle");
Database.addText("tr.lollipopFarmCurrentCandiesProduction", "AnlÄ±k ÅŸeker Ã¼retimi");
Database.addText("tr.lollipopFarmDigPond", "Yapay gÃ¶l kaz (100 000 lolipop)");
Database.addText("tr.lollipopFarmBuyLolligator", "Bir lolimsah al (1200 ÅŸeker)");
Database.addText("tr.lollipopFarmLolligatorsConversionText", "Åžeker -> Lolipop dÃ¶nÃ¼ÅŸÃ¼mÃ¼ aktif");
Database.addText("tr.lighthouseAskButton", "Sor");
Database.addText("tr.lighthouseQuestionWho", "Siz kimsiniz?");
Database.addText("tr.lighthouseQuestionWhoSpeech", "Ben Ã§ok yaÅŸlÄ± bir tek gÃ¶zlÃ¼ devim.");
Database.addText("tr.lighthouseQuestionWhat", "Burada napÄ±yorsunuz?");
Database.addText("tr.lighthouseQuestionWhatSpeech", "Burada yaÅŸayÄ±p bÃ¼tÃ¼n gÃ¼n bir botun gelmesini beklerim. Daha Ã¶nce bir bot gÃ¶reli uzun zaman oldu, ama burada beklemeliyim, denize gÃ¶zlerimi dikip, Ã§Ã¼nkÃ¼ o bot gelecektir...");
Database.addText("tr.lighthouseQuestionWhyEatCandies", "Neden ÅŸeker yemeliyim?");
Database.addText("tr.lighthouseQuestionWhyEatCandiesSpeech", "Ã‡Ã¼nkÃ¼ ÅŸekerler saÄŸlÄ±ÄŸa faydalÄ±dÄ±r!");
Database.addText("tr.lighthouseQuestionCandyBox", "Candy box nedir biliyor musunuz?");
Database.addText("tr.lighthouseQuestionCandyBoxSpeech", "DÃ¼nyadaki bÃ¼tÃ¼n ÅŸekerleri iÃ§erdiÄŸi sÃ¶ylenen Ã§ok eski bir kutudur. Efsaneye gÃ¶re kutuyu aÃ§mayÄ± baÅŸaran her kimse o kadar fazla ÅŸekere sahip olur ki onun iÃ§in her ÅŸey mÃ¼mkÃ¼ndÃ¼r.");
Database.addText("tr.lighthouseQuestionDragon", "Buraya gelmemi ejderha sÃ¶yledi Ã§Ã¼nkÃ¼ ÅŸeker istiyorum.");
Database.addText("tr.lighthouseQuestionDragonSpeech", "Hmm, anlÄ±yorum... Yani, sana ÅŸekerleri direk veremem ama sana Ã§ok fazla ÅŸeker elde etmen iÃ§in gerekli temel bir ÅŸey verebilirim. Vermeden Ã¶nce sadece seni test etmem gerekiyor. Ã‡Ã¼nkÃ¼ elimdeki ÅŸey herkese verilemez. Bu bulmacayÄ± Ã§Ã¶z ve senin olsun.");
Database.addText("tr.lighthouseFoundStone", "Tebrikler! Testi geÃ§tin ve taÅŸÄ± buldun. Bu Ã§ok kÄ±ymetli, ama sadece bunun gibi diÄŸer Ã¼Ã§ taÅŸÄ± bulduktan sonra. Ä°yi ÅŸanslar!");
Database.addText("tr.lighthouseFoundStoneAgain", "Ä°yi iÅŸ, bulmacayÄ± bir kere daha yaptÄ±n. Bunu seviyorsun gibi gÃ¶rÃ¼nÃ¼yor.");
Database.addText("tr.saveLocalSaveTitle", "TarayÄ±cÄ±yÄ± kaydet");
Database.addText("tr.saveLocalSaveWhy", "Bu aygÄ±tta ve tarayÄ±cÄ±da oynamaya devam etmek iÃ§in kayÄ±tlarÄ± seÃ§in.");
Database.addText("tr.saveLocalSaveWarning0", "TarayÄ±cÄ±n HTML5i desteklemiyor gibi gÃ¶rÃ¼nÃ¼yor.");
Database.addText("tr.saveLocalSaveWarning1", "Yerel kayÄ±t Ã¶zelliÄŸini kullanmak iÃ§in tarayÄ±cÄ±nÄ± gÃ¼ncellemelisin.");
Database.addText("tr.saveLocalSaveChooseSlot", "KayÄ±t yeri seÃ§ :");
Database.addText("tr.saveLocalSaveAutosaveEnabled", "Otomatik kayÄ±t aktif");
Database.addText("tr.saveLocalSaveChooseWhatToDo", "Yapmak istediÄŸini seÃ§ :");
Database.addText("tr.saveLocalSaveSaveButton", "Kaydet");
Database.addText("tr.saveLocalSaveAutosaveButton", "Her 10 dakikada bir kaydet");
Database.addText("tr.saveLocalSaveDisableAutosaveButton", "Otomatik kaydÄ± devre dÄ±ÅŸÄ± bÄ±rak");
Database.addText("tr.saveFileSaveTitle", "Metin kaydÄ±");
Database.addText("tr.saveFileSaveWhy0", "Metin kaydÄ±nÄ± ÅŸunun iÃ§in yap :");
Database.addText("tr.saveFileSaveWhy1", "Oyuna baÅŸka bir tarayÄ±cÄ±da ya da aygÄ±tta devam etmek istiyorsan");
Database.addText("tr.saveFileSaveWhy2", "KaydÄ±nÄ± baÅŸka birisiyle paylaÅŸmak istiyorsan");
Database.addText("tr.saveFileSaveWhy3", "Herhangi bir sebepten dolayÄ± tarayÄ±cÄ± Ã¶nbelleÄŸini boÅŸaltmak istiyorsan");
Database.addText("tr.saveFileSaveWhy4", "(Yerel kayÄ±tlarÄ±n silinecek)");
Database.addText("tr.saveFileSaveButton", "GeÃ§erli oyunu metin olarak al");
Database.addText("tr.saveFileSaveWarning", "Bu metni baÅŸka bir yere kopyala! (Ã¶rneÄŸin bir dosyaya)");
Database.addText("tr.saveLocalLoadTitle", "TarayÄ±cÄ±ya yÃ¼kle");
Database.addText("tr.saveLocalLoadYouCan", "Bu linkleri kullanarak yerel bir kayedÄ± yÃ¼kleyebilirsin:");
Database.addText("tr.saveLocalLoadThanksTo", "HTML5 saÄŸolsun,bu linkleri offline iken bile kullanabilmen lazÄ±m.");
Database.addText("tr.saveFileLoadTitle", "Metin yÃ¼kle");
Database.addText("tr.saveFileLoadPaste", "KaydÄ±nÄ± aÅŸaÄŸÄ±ya yapÄ±ÅŸtÄ±r, sonra YÃ¼kle tuÅŸuna tÄ±kla");
Database.addText("tr.saveFileLoadButton", "YÃ¼kle");
Database.addText("tr.mountainsText0", "DaÄŸlarda bir ÅŸeye rastladÄ±n!");
Database.addText("tr.mountainsText1", "Ä°lginÃ§ gÃ¶rÃ¼nÃ¼yor. Belki iÅŸe yarayabilir.");
Database.addText("tr.mountainsTextButton", "DaÄŸlara tÄ±rmanÄ±p ÅŸeyi al.");
Database.addText("tr.mountainsTextAfter", "Pogo Ã§ubuÄŸu buldun! Envanterine eklendi.");
Database.addText("tr.secondHouseIntroSpeech", "Merhaba, ben ÅŸeker tÃ¼ccarÄ±yÄ±m. Åžekerler iÃ§in herÅŸeyi yaparÄ±m. Neye ihtiyacÄ±n var?");
Database.addText("tr.secondHouseLollipop1Speech", "Bu limon aromalÄ± lolipop. Benim favorim! FiyatÄ± 60 ÅŸeker ama buna deÄŸer.");
Database.addText("tr.secondHouseLollipop2Speech", "Bu Ã§ilek aromalÄ± lolipop. TadÄ± gÃ¼zeldir. KÄ±rmÄ±zÄ± rengini seviyorum. Sadece 60 ÅŸeker!");
Database.addText("tr.secondHouseLollipop3Speech", "Bu balkabaÄŸÄ± aromalÄ± lolipop. Ä°ddiaya girerim daha Ã¶nce hiÃ§ denemedin! 60 ÅŸeker ver ve senin olsun.");
Database.addText("tr.secondHouseLollipopButtonText", "Bu lolipopu al (60 ÅŸeker)");
Database.addText("tr.secondHouseMerchantHatSpeech", "Sana ÅŸapkamÄ± satardÄ±m, ama bilirsin, Ã§ok deÄŸerlidir. Bunun iÃ§in bana Ã§ok fazla ÅŸeker vermen lazÄ±m. Diyelim ki fiyatÄ± 1 milyon ÅŸeker olsun. Adil, deÄŸil mi?");
Database.addText("tr.secondHouseMerchantHatButtonText", "TÃ¼ccarÄ±n ÅŸapkasÄ±nÄ± al (1 000 000 ÅŸeker)");
Database.addText("tr.secondHouseTimeRingSpeech", "Bu bir zaman yÃ¼zÃ¼ÄŸÃ¼. Bir ÅŸekilde bÃ¼yÃ¼lÃ¼ bir yÃ¼zÃ¼k. Tehlike iÃ§indeyken zamanÄ± yavaÅŸlatmana yarar.");
Database.addText("tr.secondHouseTimeRingButtonText", "Zaman yÃ¼zÃ¼ÄŸÃ¼nÃ¼ al (500 ÅŸeker)");
Database.addText("tr.secondHouseLeatherGlovesSpeech", "Bu deri eldivenler deve derisinden yapÄ±lma, yÃ¼ksek kalitededir. Depomda bunlardan Ã§ok var, bu yÃ¼zden bu kadar ucuzlar : sadece 300 ÅŸeker!");
Database.addText("tr.secondHouseLeatherBootsButtonText", "Bir Ã§ift deri bot al  (300 ÅŸeker)");
Database.addText("tr.secondHouseLeatherBootsSpeech", "Bu yÃ¼ksek kalite deri botlar, deve derisinden yapÄ±lmalar, ayaklarÄ±nÄ± sÄ±cak tutarlar.");
Database.addText("tr.secondHouseLeatherGlovesButtonText", "Bir Ã§ift deri eldiven al (300 ÅŸeker)");
Database.addText("tr.secondHouseChocolateBarSpeech", "Bu Ã§ikolata. Ne iÃ§in kullanÄ±ldÄ±ÄŸÄ±nÄ± bilmiyorum ama baya nadirler, ki fiyatÄ±nÄ± aÃ§Ä±klÄ±yor: 800 ÅŸeker ver ve senin olsun!");
Database.addText("tr.secondHouseChocolateBarButtonText", "Ã‡ikolata al (800 ÅŸeker)");
Database.addText("tr.outsideTheHoleButton", "Yerdeki bÃ¼yÃ¼k deliÄŸe atla");
Database.addText("tr.theCaveExitText0", "Sonunda mÄŸaradanÄ±n Ã§Ä±kÄ±ÅŸÄ±na ulaÅŸtÄ±n.");
Database.addText("tr.theCaveExitText1", "DÄ±ÅŸarÄ±da bÃ¼yÃ¼k bir orman gÃ¶rÃ¼yorsun.");
Database.addText("tr.theCaveExitButtonText", "MaÄŸaradan Ã§Ä±k");
Database.addText("tr.theCaveFirstSentenceWentStraight", "DÃ¼z gittin.");
Database.addText("tr.theCaveFirstSentenceWentLeft", "Soldaki yolu seÃ§tin.");
Database.addText("tr.theCaveFirstSentenceWentRight", "SaÄŸdaki yolu seÃ§tin.");
Database.addText("tr.theCaveFirstSentenceYouAre", "MaÄŸaradasÄ±n. Ã–nÃ¼nde Ã¼Ã§ tane yol var.");
Database.addText("tr.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Yerde, Ã¶nÃ¼nde ilginÃ§ bir ÅŸeye dikkat ettin.");
Database.addText("tr.theCavePattern_ChocolateBarNowSeeChocolateBar", "Ã–nÃ¼nde bir tane Ã§ikolata var.");
Database.addText("tr.theCavePattern_TreasureMapSentence", "Yerdeki kÃ¼Ã§Ã¼k taÅŸlarÄ±n garip bir ÅŸekilde dÃ¼zenlendiÄŸini gÃ¶rÃ¼yorsun.");
Database.addText("tr.theCavePattern_MonkeyWizardSentence", "Ã‡Ä±plak bÃ¼yÃ¼cÃ¼ maymun karÅŸÄ±na Ã§Ä±ktÄ±.");
Database.addText("tr.theCavePattern_MonkeyWizardButton", "Meydan oku");
Database.addText("tr.theCavePattern_OctopusKingSentence", "Ahtapot Kral karÅŸÄ±na Ã§Ä±ktÄ±. Tehlikeli gÃ¶rÃ¼nÃ¼yor.");
Database.addText("tr.theCavePattern_OctopusKingButton", "Meydan oku");
Database.addText("tr.fortressInsideText0", "Ã‡Ã¶l hisarÄ±nÄ±n iÃ§indesin.");
Database.addText("tr.fortressInsideText1", "ÃœÃ§ kapÄ±dan birini seÃ§ebilirsin.");
Database.addText("tr.fortressInsideText2", "Her biri, seni sonunda hazine olan bÃ¼yÃ¼k bir odaya gÃ¶tÃ¼rÃ¼yor.");
Database.addText("tr.fortressInsideEnterRoom1", "Ä°lk odaya gir");
Database.addText("tr.fortressInsideEnterRoom2", "Ä°kinci odaya gir");
Database.addText("tr.fortressInsideEnterRoom3", "ÃœÃ§Ã¼ncÃ¼ odaya gir");
Database.addText("tr.treasureButtonDig", "Kaz");
Database.addText("tr.treasureButtonYouFound", "ÃœÃ§ tane Ã§ikolata buldun!");
Database.addText("tr.sorceressHutHello", "Merhaba, ben bÃ¼yÃ¼cÃ¼yÃ¼m. Sana sihir hakkÄ±nda bir iki ÅŸey Ã¶ÄŸretebilirim. Sana ilginÃ§ ÅŸeyler de verebilirim, ya da sana bÃ¼yÃ¼ler veririm. Ama her ÅŸeyin bir Ã¼creti var! Ve bu Ã¼cret de lolipoplar. Ã‡ok fazla.");
Database.addText("tr.sorceressHutClickedGrimoire", "Bu amatÃ¶rler iÃ§in bÃ¼yÃ¼ kitabÄ±. GÃ¶revlerde bunu taÅŸÄ±yarak basit ama kullanÄ±ÅŸlÄ± bÃ¼yÃ¼ler yapabilirsin. Buna ihtiyacÄ±n var! Sadece 5 000 lolipop.");
Database.addText("tr.sorceressHutBuyGrimoireButton", "Bu kitabÄ± al (5 000 lolipop)");
Database.addText("tr.sorceressHutBuyGrimoireSpeech", "AldÄ±ÄŸÄ±n iÃ§in teÅŸekkÃ¼rler! Bu kitapla Ã¼Ã§ tane bÃ¼yÃ¼ yapabileceksin. Ä°yi ÅŸanslar!");
Database.addText("tr.sorceressHutClickedGrimoire2", "Bu bir ileri bÃ¼yÃ¼ kitabÄ±. GÃ¶revlerde bunu taÅŸÄ±yarak iki tane ileri bÃ¼yÃ¼ yapabilirsin. Bizzat kendim yazdÄ±m, hiÃ§ kolay olmadÄ±. 20 000 lolipop adil bir fiyat olur.");
Database.addText("tr.sorceressHutBuyGrimoire2Button", "Bu kitabÄ± al (20 000 lolipop)");
Database.addText("tr.sorceressHutBuyGrimoire2Speech", "AldÄ±ÄŸÄ±n iÃ§in teÅŸekkÃ¼rler! Bu kitapla Ã¼Ã§ tane bÃ¼yÃ¼ yapabileceksin. Dikkatli kullan!");
Database.addText("tr.sorceressHutClickedCauldron", "Bu benim kazanÄ±m. Benim bÃ¼yÃ¼lÃ¼ iksirler yapmamÄ± saÄŸlÄ±yor. Sana satardÄ±m, ama bu Ã§ok deÄŸerli... sana 100 000 lolipopa patlar.");
Database.addText("tr.sorceressHutBuyCauldronButton", "KazanÄ± al (100 000 lolipop)");
Database.addText("tr.sorceressHutBuyCauldronSpeech", "Ã‡ok teÅŸekkÃ¼rler! 100 000 lolipopum oldu! AyrÄ±ca sana iksir yapma rehberini verdim. Ä°ÅŸine yarayacaktÄ±r.");
Database.addText("tr.sorceressHutClickedHat", "GÃ¼zel bir ÅŸapkam var, evet! Ama cidden sana bunu satamam. Ã‡Ã¼nkÃ¼ Ã§oook deÄŸerli. Cidden, olmaz. Israr etme. HayÄ±r. hayÄ±rhayÄ±rhayÄ±r bunu yapmamalÄ±yÄ±m. Amaan, neyse, satabilirim ama fiyatÄ± 1 000 000 000 lolipop olur. Muhtemelen bu kadarÄ±nÄ± zaten Ã¶deyemezsin.");
Database.addText("tr.sorceressHutBuyHatButton", "Buy the hat (1 000 000 000 lollipops)");
Database.addText("tr.sorceressHutBuyHatSpeech", "Bir milyar lolipopum olduuuuuu! Ama artÄ±k ÅŸapkam yok.. ama bir milyar lolipop, vay! Sonuna kadar deÄŸdi.");
Database.addText("tr.cauldronPreviousPageButton", "Ã–nceki sayfa");
Database.addText("tr.cauldronNextPageButton", "Sonraki sayfa");
Database.addText("tr.cauldronWhatYouWantToPut", "Kazana koymak istediklerin");
Database.addText("tr.cauldronWhatIsIn", "KazanÄ±n iÃ§indekiler");
Database.addText("tr.cauldronWhatYouCanDo", "Bunlarla yapabileceklerin");
Database.addText("tr.castleBigRoomComment", "BÃ¼yÃ¼k bir oda");
Database.addText("tr.castleARoomComment", "Bir oda");
Database.addText("tr.castleADarkRoomComment", "KaranlÄ±k bir oda");
Database.addText("tr.castleCastleEntranceComment", "Kalenin giriÅŸi");
Database.addText("tr.castleTowerEntranceComment", "Kulenin giriÅŸi");
Database.addText("tr.castleNougatMonsterComment", "Dev nuga canavarÄ±na saldÄ±r");
Database.addText("tr.castleGuardsComment", "Gardiyanlara saldÄ±r");
Database.addText("tr.castleStairsComment", "Merdivenler");
Database.addText("tr.buttonBackToTheCastle", "Kaleye geri dÃ¶n");
Database.addText("tr.castleBigRoomHovenSpeechSad", "Merhaba! Ben Ã§ok eski bir ekmek fÄ±rÄ±nÄ±yÄ±m. Ã–nceden tonlarca gÃ¼zel hamuriÅŸleri piÅŸirirdim, ama artÄ±k kimse beni kullanmÄ±yor. Belki... belki sen bana yardÄ±m edebilirsin. Sadece senden biraz tatlÄ± almama izin ver. TelaÅŸlanma, piÅŸman olmayacaksÄ±n! Bana gÃ¼venebilirsin.");
Database.addText("tr.castleBigRoomHovenNotEnough", "Oh... sende yeteri kadar tatlÄ± yok, ben birÅŸey yapamam. Ben sadece iÅŸe yaramazÄ±m. Ben iÅŸe yaramaz ekmek fÄ±rÄ±nÄ±yÄ±m, beni bÃ¶yle anmalÄ±sÄ±n.");
Database.addText("tr.castleBigRoomHovenSpeechMadePainAuChocolat", "Oley! Ã‡ok teÅŸekkÃ¼rler! 100 ÅŸeker ve bir Ã§ikolata kullandÄ±m ve sana... pain au chocolat yaptÄ±m! Benim favori hamuriÅŸimdir, umarÄ±m sen de seversin!");
Database.addText("tr.castleBigRoomHovenSpeechHappy", "Hey! eÄŸer baÅŸka bir hamuriÅŸi piÅŸirmemi istersen sadece sÃ¶yle! Seve seve yardÄ±mcÄ± olurum.");
Database.addText("tr.castleBigRoomHovenSpeechHappyNotEnough", "Oh, sende yeteri kadar tatlÄ± yok, maalesef. 100 ÅŸekere ve bir Ã§ikolataya ihtiyacÄ±m var. BunlarÄ± bulduÄŸunda geri gel!");
Database.addText("tr.castleBigRoomHovenLetHovenTakeButton", "FÄ±rÄ±nÄ±n almak istediÄŸi tatlÄ±larÄ± almasÄ±na izin ver");
Database.addText("tr.castleBigRoomHovenThanks", "TeÅŸekkÃ¼rler, fÄ±rÄ±n!");
Database.addText("tr.dragonStopTickling", "Hey, sen! Beni gÄ±dÄ±klamaktan vazgeÃ§ lÃ¼tfen.");
Database.addText("tr.dragonStopTicklingButton", "Uh, oh, Ã¼zgÃ¼nÃ¼m, Ben de sana saldÄ±rdÄ±ÄŸÄ±mÄ± dÃ¼ÅŸÃ¼nÃ¼yordum.");
Database.addText("tr.dragonTalking", "Ben bir ejderhayÄ±m ve bursaÄ± da benim kalem. Girmeyi baÅŸardÄ±ÄŸÄ±nÄ± gÃ¶rÃ¼yorum, Ã§ok cesur olmalÄ±sÄ±n... Senin gibi birine seve seve yardÄ±mcÄ± olurum. Ne ile ilgileniyorsun?");
Database.addText("tr.dragonTalkingChallengeButton", "Meydan okuma");
Database.addText("tr.dragonTalkingFameButton", "Ãœn");
Database.addText("tr.dragonTalkingCandiesButton", "Åžekerler");
Database.addText("tr.dragonTalkingChallengeSpeech", "Demek meydan okumak istiyorsun? Bence cehennemin kendisine gitmelisin, ÅŸeytan zorlu bir rakip olarak bilinir. SÄ±rtÄ±mÄ± atla ve seni gÃ¶tÃ¼reyim!");
Database.addText("tr.dragonTalkingFameSpeech", "ÃœnlÃ¼ olmanÄ±n en iyi yolu geliÅŸtiricinin kendisiyle yÃ¼zleÅŸmektir. Nerede yaÅŸadÄ±ÄŸÄ±nÄ± biliyorum ve seni oraya gÃ¶tÃ¼rebilirim. Ama hazÄ±rlÄ±klÄ± ol, bu hiÃ§ kolay olmayacak.");
Database.addText("tr.dragonTalkingCandiesSpeech", "Eninde sonunda, hepimizin istediÄŸi ÅŸey ÅŸekerler, deÄŸil mi? SanÄ±rÄ±m bir arkadaÅŸÄ±m bu konuda sana yardÄ±mcÄ± olabilir. Onu kolayca farkedebilirsin, sadece tek gÃ¶zÃ¼ var. Ona beni tanÄ±dÄ±ÄŸÄ±nÄ± sÃ¶yle.");
Database.addText("tr.dragonTalkingChallengeAnswer", "O zaman hadi gidelim!");
Database.addText("tr.dragonTalkingFameAnswer", "Ben hazÄ±rÄ±m.");
Database.addText("tr.dragonTalkingCandiesAnswer", "Tamam, teÅŸekkÃ¼rler!");
Database.addText("tr.buttonBackToCastle", "Kaleye geri dÃ¶n");
Database.addText("tr.talkingCandySpeechNoBox", "Hey! Ben konuÅŸan ÅŸeker. Neredeyse oyunu kazandÄ±n. Sadece candy box'Ä± bulman lazÄ±m. KÃ¶yÃ¼n dÄ±ÅŸÄ±ndaki evin iÃ§inde. Bu son adÄ±m!");
Database.addText("tr.talkingCandySpeech1", "Hey! Ben konuÅŸan ÅŸeker. Tebrikler, oyunu kazandÄ±n! ISenin iÃ§in Candy box'Ä± aÃ§acaÄŸÄ±m, Ã¶dÃ¼lÃ¼n bu. Devam edeyim mi?");
Database.addText("tr.talkingCandySpeech2", "TamamdÄ±r! ArtÄ±k girebilirsin. UmarÄ±m oyunu sevmiÅŸsindir :)");
Database.addText("tr.talkingCandyButton", "Evet!!");
Database.addText("tr.lighthousePuzzleResetButton", "Reset");
Database.addText("zh.mapVillageComment", "æ‘åº„");
Database.addText("zh.mapFortressComment", "æ²™æ¼ è¦å¡ž");
Database.addText("zh.mapATreeComment", "ä¸€æ£µæ ‘");
Database.addText("zh.mapTheDesertComment", "æ²™æ¼ ");
Database.addText("zh.mapWishingWellComment", "è®¸æ„¿äº•");
Database.addText("zh.mapLonelyHouseComment", "ä¸€å¹¢å­¤å®…");
Database.addText("zh.mapForestComment", "æ£®æž—");
Database.addText("zh.mapCastleEntranceComment", "åŸŽå ¡å…¥å£");
Database.addText("zh.mapCastleComment", "åŸŽå ¡");
Database.addText("zh.mapDragonComment", "å·¨é¾™");
Database.addText("zh.candyBoxEatCandiesButton", "åƒå…‰ç³–æžœ");
Database.addText("zh.candyBoxThrowCandiesButton", "æŠŠåé¢—ç³–æžœæ‰”åœ¨åœ°ä¸Š");
Database.addText("zh.mapVillageAHouseComment", "ä¸€æ ‹æˆ¿å±‹");
Database.addText("zh.mapVillageForgeComment", "é“åŒ é“º");
Database.addText("zh.buttonBackToTheMap", "è¿”å›žåœ°å›¾");
Database.addText("zh.mapSorceressHutComment", "å¥³å·«çš„å°å±‹");
Database.addText("zh.buttonBackToTheVillage", "è¿”å›žæ‘åº„");
Database.addText("zh.mapATreeIntroductionSpeech", "ä½ å¥½ï¼Œæˆ‘æ˜¯å°æ¾é¼ ã€‚æˆ‘å¯ä»¥ç»™ä½ ç³–æžœå’Œå¾ˆå¤šçš„ä¸œè¥¿ã€‚æˆ‘çŸ¥é“ä½ æœ‰å¤šå–œæ¬¢ç³–æžœã€‚ä½†æˆ‘åœ¨æ£®æž—é‡Œå¾ˆå­¤ç‹¬ã€‚");
Database.addText("zh.mapATreeIntroductionButton", "æˆ‘èƒ½å¸®ä½ ä»€ä¹ˆå¿™å—ï¼Ÿ");
Database.addText("zh.mapATreeFirstQuestion", "æˆ‘ä¼šé—®ä½ å‡ ä¸ªé—®é¢˜ã€‚å¦‚æžœä½ å›žç­”æ­£ç¡®çš„è¯ï¼Œæœ€ç”œç¾Žçš„ç³–æžœå°±éƒ½æ˜¯ä½ çš„äº†ï¼ç¬¬ä¸€ä¸ªé—®é¢˜ï¼šä½ çœŸçš„å–œæ¬¢ç³–æžœå—ï¼Ÿï¼ˆç”¨è‹±è¯­å›žç­”ï¼‰");
Database.addText("zh.mapATreeSecondQuestion", "è¿™å°±å¯¹äº†ï¼ç»™ä½ 20é¢—ç³–æžœã€‚çŽ°åœ¨è¯·å®Œæˆè¿™ä¸ªå­—æ¯åºåˆ—ï¼Œä½ å°±ä¼šå¾—åˆ°æ–°çš„å¥–åŠ±ï¼šS,E,I,D,N,A,?");
Database.addText("zh.mapATreeThirdQuestion", "ç³–æžœï¼å†ç»™ä½ 100é¢—ç³–æžœã€‚ä¸‹ä¸€ä¸ªé—®é¢˜ï¼šè¿™ä¸–ç•Œä¸Šæœ€æœ‰ç³–çš„äººæ‹¥æœ‰å¤šå°‘é¢—ç³–æžœå‘¢ï¼Ÿ");
Database.addText("zh.mapATreeFourthQuestion", "ä½ å¾—åˆ°äº†500é¢—ç³–æžœï¼è€Œä¸‹ä¸€ä¸ªå¥–åŠ±ä¼šæ›´æœ‰è¶£â€¦â€¦è¿™æ˜¯ä¸ªè°œè¯­ï¼šåœ¨å¤è€çš„æ£®æž—é‡Œï¼Œç”Ÿé•¿ç€ä¸€æ£µéžå¸¸å¹´è¿ˆçš„æ ‘ï¼Œæ ‘ä¸Šæœ‰ä¸€åªä¸–ç•Œä¸Šæœ€èªæ˜Žçš„åŠ¨ç‰©ã€‚æ®è¯´è¿™æ£µæ ‘æœ‰60æ¡æ ‘æ ¹ï¼Œ360æ ¹æ ‘æžå’Œ2160ç‰‡æ ‘å¶ï¼Œé‚£ä¹ˆä½ èƒ½åœ¨å®ƒçš„æ ‘å¹²ä¸Šæ‰¾åˆ°å¤šå°‘å°è®°å‘¢ï¼Ÿ");
Database.addText("zh.mapATreeFifthQuestion", "æ­å–œä½ ï¼çš„ç¡®ï¼Œæˆ‘æ‰€è¯´çš„å°±æ˜¯æˆ‘çš„è¿™é¢—æ ‘ã€‚ç»™ä½ ä¸‰æ ¹æ£’æ£’ç³–ï¼Œè¦å¦¥å–„åˆ©ç”¨å®ƒä»¬å“¦ï¼ä»”ç»†å¬å¥½ï¼Œä¸‹ä¸€ä¸ªè°œè¯­ï¼šåœ¨ä¸€è½®æ»¡æœˆä¹‹ä¸‹ï¼Œæˆ‘æŠŠä¸€é¡¶é»„è‰²çš„å¸½å­æ‰”è¿›äº†çº¢è‰²çš„å¤§æµ·é‡Œï¼Œè¿™é¡¶é»„è‰²çš„å¸½å­ä¼šæ€Žæ ·å‘¢ï¼Ÿ");
Database.addText("zh.mapATreeTicTacToeIntro", "å›žç­”æ­£ç¡®ï¼è¿™å¹¶ä¸å›°éš¾å˜›ã€‚ç»™ä½ ä¸‰å—å·§å…‹åŠ›ï¼å…³äºŽä¸‹ä¸€ä¸ªå¥–åŠ±ï¼Œæˆ‘ä»¬è¦ç¨å¾®æ”¹å˜ä¸€ä¸‹è§„åˆ™äº†ã€‚ä½ è¦è·Ÿæˆ‘çŽ©ä¸€åœºæ¸¸æˆï¼ä½ å‡†å¤‡å¥½äº†å—ï¼Ÿ");
Database.addText("zh.mapATreeTicTacToeIntroButton", "å½“ç„¶å‡†å¤‡å¥½äº†ï¼");
Database.addText("zh.mapATreeTicTacToeLetsPlay", "è¿™æ˜¯ä¸€ä¸ªäº•å­—ï¼ˆä¸‰è¿žï¼‰æ¸¸æˆã€‚æˆ‘ä»¬åœ¨ä¸€ä¸ª3x3çš„æ¸¸æˆé¢æ¿ä¸Šè¿›è¡Œï¼Œä½ ä½¿ç”¨Xæ ‡è®°ï¼Œæˆ‘ä½¿ç”¨Oæ ‡è®°ã€‚æˆ‘ä»¬äº¤æ›¿æ”¾ç½®è‡ªå·±çš„æ ‡è®°ï¼Œç›®æ ‡å°±æ˜¯è®©è‡ªå·±çš„ä¸‰ä¸ªæ ‡è®°è¿žæˆä¸€è¡Œã€‚æˆ‘ä¼šè®©ä½ å…ˆæ¥ï¼");
Database.addText("zh.mapATreeTicTacToeNobodyWins", "é¢æ¿å·²ç»è¢«å¡«æ»¡äº†ï¼Œæˆ‘ä»¬éƒ½æ²¡èƒ½æŠŠä¸‰ä¸ªæ ‡è®°è¿žæˆä¸€è¡Œï¼šå¹³å±€ï¼ä½ æ‰“ç®—å†æ¥ä¸€æ¬¡å—ï¼Ÿ");
Database.addText("zh.mapATreeTicTacToeYouLose", "æˆ‘æŠŠä¸‰ä¸ªè¿žæˆä¸€è¡Œå•¦ï¼æˆ‘èµ¢äº†ã€‚ä½ æ‰“ç®—å†æ¥ä¸€æ¬¡å—ï¼Ÿ");
Database.addText("zh.mapATreeTicTacToeTryAgainButton", "å½“ç„¶ï¼å†æ¥ï¼");
Database.addText("zh.mapATreeTicTacToeYouWin", "å“¦ï¼Œè¿™å¯çœŸæ˜¯æ„æƒ³ä¸åˆ°çš„å¦™ç€ã€‚ä½†ä½ æŠŠä¸‰ä¸ªè¿žæˆä¸€è¡Œäº†ï¼Œæˆ‘ä¸å¾—ä¸æœã€‚ä½ èµ¢äº†ï¼ç»™ä½ è¿™æŠŠé’¥åŒ™ï¼å®ƒå¯ä»¥æ‰“å¼€æ£®æž—ä¸‹æ–¹æ‘åº„ä¸­çš„ä¸€æ ‹æˆ¿å±‹ã€‚");
Database.addText("zh.mapATreeTicTacToeAnymoreSweet", "è°¢è°¢ä½ ï¼Œå°æ¾é¼ ï¼è¿˜æœ‰æ›´å¤šæŒ‘æˆ˜å—ï¼Ÿ");
Database.addText("zh.mapATreeNoMoreChallenge", "å¾ˆå¯æƒœï¼Œæ²¡æœ‰äº†ã€‚æˆ‘å·²ç»æ²¡æœ‰æ›´å¤šæŒ‘æˆ˜å¯é™ªä½ çŽ©äº†â€¦â€¦å’Œä½ çŽ©å¯çœŸæœ‰è¶£ï¼Œè°¢è°¢ä½ é™ªæˆ‘ï¼");
Database.addText("zh.buttonExitQuestKeeping", "é€€å‡ºæŽ¢ç´¢ï¼ˆä¿ç•™å·²èŽ·å¾—çš„æˆ˜åˆ©å“ï¼‰");
Database.addText("zh.buttonExitQuestNoKeeping", "é€€å‡ºæŽ¢ç´¢ï¼ˆæ— æ³•ä¿ç•™å·²èŽ·å¾—çš„æˆ˜åˆ©å“ï¼‰");
Database.addText("zh.buttonExitQuestNoKeepingBecauseLose", "é€€å‡ºæŽ¢ç´¢ï¼ˆå› ä¸ºä½ å¤±è´¥äº†ï¼Œæ‰€ä»¥æ— æ³•ä¿ç•™å·²èŽ·å¾—çš„æˆ˜åˆ©å“ï¼‰");
Database.addText("zh.mapVillageLockedHouseComment", "ä¸€æ ‹é”ä½çš„æˆ¿å±‹");
Database.addText("zh.mapVillageForgeIntroductionSpeech", "ä½ å¥½ï¼æˆ‘æ˜¯ä¸ªé“åŒ ï¼Œæˆ‘å¯ä»¥å–ç»™ä½ å„ç§æ­¦å™¨å’Œè£…å¤‡ã€‚");
Database.addText("zh.mapVillageForgeIntroductionSpeechNoMoreToSell", "ä½ å¥½ï¼æˆ‘æ˜¯ä¸ªé“åŒ ï¼Œå¾ˆé—æ†¾ï¼ŒçŽ°åœ¨æˆ‘å·²ç»æ²¡ä¸œè¥¿å¯å–äº†ã€‚ä¹Ÿè®¸ä½ åº”è¯¥è¿‡äº›æ—¶å€™å†æ¥ï¼Ÿ");
Database.addText("zh.mapVillageFifthHouseNoWeaponSpeech", "ä½ å¥½ã€‚æˆ‘çš„åœ°çª–é‡Œå…¨æ˜¯è€é¼ ï¼Œæˆ‘éœ€è¦é™¤æŽ‰å®ƒä»¬â€¦â€¦å¦‚æžœæœ‰è°èƒ½å¸¦ç€ä¸€æŠŠæ­¦å™¨æ¥å¸®æˆ‘çš„è¯â€¦â€¦");
Database.addText("zh.mapVillageFifthHouseWeaponSpeech", "å˜¿ï¼å°±æ˜¯ä½ ï¼æˆ‘çœ‹ä½ æ‹¿ç€ä¸€æŠŠæ­¦å™¨ï¼å¦‚æžœä½ èƒ½å¹²æŽ‰é‚£äº›æ…ä¹±æˆ‘åœ°çª–çš„è€é¼ çš„è¯ï¼Œæˆ‘ä¼šç»™ä½ å¥–åŠ±çš„ï¼");
Database.addText("zh.mapVillageFifthHouseAgree", "é‚£å°±åŠ¨æ‰‹å§ï¼");
Database.addText("zh.mapVillageFifthHouseCellarDone", "è°¢è°¢ä½ å¸®æˆ‘é™¤æŽ‰å®ƒä»¬ï¼è¿™ä¸€ä¸ªéžå¸¸å®è´µçš„å¥–åŠ±ï¼šä¸€å¼ ä¸–ç•Œåœ°å›¾ã€‚æˆ‘è§‰å¾—ä½ ä¼šæ¯”æˆ‘æ›´ç”¨å¾—ç€å®ƒçš„ã€‚");
Database.addText("zh.mapVillageTheShopComment", "å•†åº—");
Database.addText("zh.mapBridgeComment", "å¤§æ¡¥");
Database.addText("zh.mapFarmComment", "æ£’æ£’ç³–å†œåœº");
Database.addText("zh.mapCaveEntranceComment", "æ´žç©´å…¥å£");
Database.addText("zh.mapLighthouseComment", "ç¯å¡”");
Database.addText("zh.mapPierComment", "ç å¤´");
Database.addText("zh.mapTheHoleComment", "æ·±å‘");
Database.addText("zh.candyBoxRequestStatusBarUnlocked", "å‘å¼€å‘è€…è¦æ±‚å¾—åˆ°ä¸€é¡¹æ–°åŠŸèƒ½ï¼ˆ30é¢—ç³–æžœï¼‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedCfg", "å†è¦å¦ä¸€é¡¹æ–°åŠŸèƒ½ï¼ˆ5é¢—ç³–æžœï¼‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedSave", "å†è¦ä¸€æ¬¡(5é¢—ç³–æžœ)");
Database.addText("zh.candyBoxRequestStatusBarUnlockedHealthBar", "è¦æ±‚å¾—åˆ°æ›´æ¿€åŠ¨äººå¿ƒçš„æ–°ä¸œè¥¿ï¼ˆ5é¢—ç³–æžœï¼‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedMap", "è¿™æ˜¯æœ€åŽä¸€æ¬¡è¦æ±‚äº†ï¼è¿™æ¬¡è‚¯å®šå€¼å¾—ä¸Šè¿™ä¹ˆå¤šç³–æžœã€‚(10é¢—ç³–æžœ)");
Database.addText("zh.candyBoxRequestStatusBarUnlockedComment", "ä½ è§£é”äº†çŠ¶æ€æ ï¼ï¼ˆåœ¨ä¸Šé¢ï¼‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedCfgComment1", "çŽ°åœ¨ä½ å¯ä»¥è®¿é—®é…ç½®æ ‡ç­¾ï¼ˆCFGï¼‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedCfgComment2", "ä½ å¯ä»¥åœ¨æŽ§åˆ¶é¢æ¿ä¸­åˆ‡æ¢è¯­è¨€ã€‚");
Database.addText("zh.candyBoxRequestStatusBarUnlockedSaveComment", "ä¸€åªé‡Žç”Ÿçš„å­˜å‚¨æ ‡ç­¾å‡ºçŽ°äº†ï¼ï¼ˆSAVEï¼‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedHealthBarComment", "è¿™æ˜¯ä¸ºä½ å‡†å¤‡çš„100ç‚¹ç”Ÿå‘½å€¼ï¼Œä»–ä»¬ä¼šéžå¸¸æœ‰ç”¨çš„ã€‚");
Database.addText("zh.cfgChooseLanguage", "é€‰æ‹©è¯­è¨€ï¼š");
Database.addText("zh.cfgInvertColors", "åè‰²æ˜¾ç¤ºï¼Ÿ");
Database.addText("zh.gridItemMainMapName", "åœ°å›¾");
Database.addText("zh.gridItemMainMapDescription", "è¿™ä¸ªä¸–ç•Œçš„åœ°å›¾");
Database.addText("zh.gridItemPogoStickName", "å¼¹è·³æ£’");
Database.addText("zh.gridItemPogoStickDescription", "è¿™ä¸ªç‰©å“è®©ä½ èƒ½å¤Ÿåœ¨æŽ¢ç´¢æ—¶è·³è·ƒï¼");
Database.addText("zh.gridItemTimeRingName", "æ—¶é—´æŒ‡çŽ¯");
Database.addText("zh.gridItemTimeRingDescription", "è¿™ä¸ªç‰©å“è®©ä½ èƒ½å¤Ÿåœ¨æŽ¢ç´¢ä¸­ä½¿ç”¨æ–°çš„èƒ½åŠ›ï¼šä½ å¯ä»¥å‡ç¼“æ—¶é—´çš„æµé€ã€‚å¦‚æžœå‘¨å›´çš„ä¸€åˆ‡å¯¹ä½ æ¥è¯´è¿‡äºŽè¿…é€Ÿçš„è¯ï¼Œåˆ«å¿˜äº†ä½¿ç”¨ä½ çš„æ—¶é—´æŒ‡çŽ¯ï¼");
Database.addText("zh.gridItemThirdHouseKeyName", "ç¬¬ä¸‰æ ‹æˆ¿å±‹çš„é’¥åŒ™");
Database.addText("zh.gridItemThirdHouseKeyDescription", "è¿™æžšé’¥åŒ™è®©ä½ å¯ä»¥è¿›å…¥æ‘åº„é‡Œçš„ç¬¬ä¸‰æ ‹æˆ¿å±‹ã€‚");
Database.addText("zh.gridItemFeatherName", "æ²™æ¼ é£žé¸Ÿçš„ç¾½æ¯›");
Database.addText("zh.gridItemFeatherDescription", "è¿™æžšé­”æ³•ç¾½æ¯›è®©ä½ åœ¨ä½¿ç”¨å¼¹è·³æ£’æ—¶èƒ½å¤Ÿè·³å¾—æ›´é«˜ï¼");
Database.addText("zh.gridItemFeatherDescriptionNoPogoStick", "ä¸çŸ¥ä»€ä¹ˆåŽŸå› ï¼Œä½ è§‰å¾—å¦‚æžœä½ æœ‰ä¸€æ ¹å¼¹è·³æ£’çš„è¯ï¼Œè¿™æ ¹ç¾½æ¯›å°±èƒ½æ´¾ä¸Šç”¨åœºâ€¦â€¦");
Database.addText("zh.gridItemSpongeName", "é­”æ³•æµ·ç»µ");
Database.addText("zh.gridItemSpongeDescription", "é­”æ³•æµ·ç»µè®©ä½ å¯ä»¥åƒæµ·ç»µä¸€æ ·æŒ¤åŽ‹è‡ªå·±ï¼Œä»¥æ­¤ç¼©å°è‡ªå·±çš„ä½“ç§¯ã€‚");
Database.addText("zh.gridItemFortressKeyName", "æ²™æ¼ è¦å¡žçš„é’¥åŒ™");
Database.addText("zh.gridItemFortressKeyDescription", "è¿™æžšé’¥åŒ™è®©ä½ å¯ä»¥è¿›å…¥ä½äºŽæ²™æ¼ ä¸Šæ–¹çš„è¿œå¤è¦å¡žã€‚è°çŸ¥é“ä½ èƒ½åœ¨é‚£é‡Œæ‰¾åˆ°ä»€ä¹ˆå‘¢ï¼Ÿ");
Database.addText("zh.gridItemHeartPendantName", "å¿ƒå½¢åž‚é¥°");
Database.addText("zh.gridItemHeartPendantDescription", "åªè¦ä½ æŠŠå®ƒæˆ´åœ¨è„–å­ä¸Šï¼Œè¿™æžšå¿ƒå½¢åž‚é¥°å°±å¯ä»¥å¢žåŠ ä½ çš„ç”Ÿå‘½å€¼ã€‚");
Database.addText("zh.gridItemHeartPlugName", "çº¢å¿ƒè€³é¥°");
Database.addText("zh.gridItemHeartPlugDescription", "è¿™æžšçº¢å¿ƒè€³é¥°æ˜¯ç”±é“ã€èœ˜è››è…¿ï¼Œä»¥åŠè¢«å°å…¥ä¸­å¿ƒä½ç½®çš„â€œçº¢å¿ƒé…’â€åˆ¶æˆçš„ï¼Œå®ƒèƒ½å¤Ÿä¸ºä½ å¢žåŠ 20%çš„ç”Ÿå‘½å€¼ï¼");
Database.addText("zh.gridItemBeginnersGrimoireName", "æ–°æ‰‹é­”æ³•ä¹¦");
Database.addText("zh.gridItemBeginnersGrimoireDescription", "è¿™æœ¬é­”æ³•ä¹¦å¯ä¸ºä½ æä¾›ä¸‰ç§ç›¸å½“å®¹æ˜“æ–½æ”¾çš„æ³•æœ¯ï¼Œç€å®žæ˜¯ä¸ºæ–°æ‰‹å‡†å¤‡çš„ã€‚ä½ èƒ½å¤Ÿä½¿ç”¨é…¸é›¨æ³•æœ¯ï¼ˆå¤§ç‰‡é…¸é›¨é™è‡³æ•Œäººçš„å¤´é¡¶ï¼‰ï¼Œç«çƒæ³•æœ¯ï¼ˆä¸€é¢—å·¨å¤§çš„ç«ç„°é­”æ³•çƒé£žå‘ä½ çš„æ•Œäººï¼‰ï¼Œä»¥åŠä¼ é€æ³•æœ¯ï¼ˆè¯¥æ³•æœ¯å¯å°†ä½ ä¼ é€è‡³æ— æ³•é¢„æµ‹çš„ä½ç½®ï¼‰ã€‚");
Database.addText("zh.gridItemAdvancedGrimoireName", "é«˜é˜¶é­”æ³•ä¹¦");
Database.addText("zh.gridItemAdvancedGrimoireDescription", "è¿™æœ¬é«˜é˜¶é­”æ³•ä¹¦å¯ä¸ºä½ æä¾›ä¸¤ç§æ³•æœ¯ï¼šæ¶ˆé™¤é­”æ³•æ³•æœ¯å’Œè†æ£˜ä¹‹ç›¾æ³•æœ¯ã€‚å‰è€…å¯åœ¨æŽ¢ç´¢ä¸­æ¶ˆé™¤æŸä¸€æ—¶åˆ»çš„æ³•æœ¯â€•â€•åŒ…æ‹¬ä½ ä¸Žæ•Œäººæ–½æ”¾çš„å…¨éƒ¨ã€‚åŽè€…å¯åœ¨ä½ å‘¨å›´åˆ›é€ ä¸€é¢ç”±æ¼‚æµ®çš„è†æ£˜æž„æˆçš„ç›¾ç‰Œï¼Œè¿™äº›è†æ£˜ä¼šå¯¹æŽ¥è§¦çš„æ•Œäººé€ æˆä¼¤å®³ã€‚");
Database.addText("zh.gridItemBlackMagicGrimoireName", "é»‘é­”æ³•ä¹¦");
Database.addText("zh.gridItemBlackMagicGrimoireDescription", "ä½ åœ¨ä¸€ä¸ªæ´žç©´ä¸­æ‰¾åˆ°äº†è¿™æœ¬é­”æ³•ä¹¦ï¼Œå®ƒéžå¸¸éš¾ä»¥è§¦åŠï¼Œè€Œè¿™å¹¶ä¸æ˜¯æ²¡ç†ç”±çš„ã€‚å®ƒå¯ä¸ºä½ æä¾›ä¸¤ç§å¼ºåŠ›é»‘é­”æ³•ã€‚å…¶ä¸€å¯åœ¨ä½ é¢å‰åˆ›é€ ä¸€é¢ç”±é»‘æ›œçŸ³ç –å—æž„æˆçš„å·¨å¢™ï¼Œå¯¹äºŽå‡ç¼“æ•Œäººçš„æ”»åŠ¿éžå¸¸æœ‰æ•ˆã€‚å…¶äºŒå¯å¬å”¤ç¾¤é­”æ”»å‡»æŽ¢ç´¢ä¸­çš„æ‰€æœ‰ç”Ÿç‰©ï¼Œå½“ç„¶ä¹ŸåŒ…æ‹¬ä½ åœ¨å†…ã€‚ä½¿ç”¨ç¬¬äºŒç§é­”æ³•æ—¶éœ€è°¨æ…Žè¡Œäº‹ã€‚");
Database.addText("zh.gridItemUnicornHornName", "ç‹¬è§’å…½ä¹‹è§’");
Database.addText("zh.gridItemUnicornHornDescription", "è¿™æ”¯å¸¦æœ‰é­”åŠ›çš„è§’æ›¾å±žäºŽä¸€åªç‹¬è§’å…½ã€‚å®ƒæžå¼ºçš„æ²»æ„ˆèƒ½åŠ›å¯¹ä½ æžæœ‰å¸®åŠ©ã€‚ä½ å¬è¯´è¿™åªç‹¬è§’å…½çš„åå­—å«æŸ¥ç†ã€‚");
Database.addText("zh.gridItemXinopherydonClawName", "è¥¿è¯ºå¼—é¡¿ä¹‹çˆª");
Database.addText("zh.gridItemXinopherydonClawDescription", "è¿™æ ¹çˆªå­æ›¾å±žäºŽè¥¿è¯ºå¼—é¡¿ï¼Œä¸€åªäººä»¬è®¤ä¸ºå·²ç»ç­ç»çš„åŒå¤´è¿œå¤å·¨å…½ã€‚å®ƒä¼šå°†ä½ å½“å‰ä½¿ç”¨çš„æ­¦å™¨çš„ä¼¤å®³å¢žå¹…è‡³åŒå€ã€‚");
Database.addText("zh.gridItemPitchforkName", "è‰å‰");
Database.addText("zh.gridItemPitchforkDescription", "é€šè¿‡è¿™æŸ„ç‰¹æ®Šçš„è‰å‰ï¼Œä½ æ— éœ€ç¿»è½¬åœŸåœ°å°±èƒ½å®žçŽ°æ¾åœŸï¼Œå®ƒèƒ½å¤Ÿæœ‰æ•ˆä¿æŠ¤åœ°ä¸‹çš„åœŸå£¤ç”Ÿæ€ç³»ç»Ÿã€‚è¯¥é“å…·å¯å°†æ£’æ£’ç³–å†œåœºçš„äº§é‡å¢žå¹…ä¸‰å€ã€‚");
Database.addText("zh.gridItemShellPowderName", "è´å£³ç²‰");
Database.addText("zh.gridItemShellPowderDescription", "è´å£³ç²‰é€šå¸¸è¢«å†œåœºä¸»ä»¬ç”¨äºŽåŠ å¿«æ£’æ£’ç³–çš„æˆé•¿é€Ÿåº¦ã€‚è¿™äº›ç²‰æœ«å¯å°†æ£’æ£’ç³–å†œåœºçš„äº§é‡å¢žåŠ ä¸‰å€ï¼");
Database.addText("zh.gridItemPName", "Pç¬¦æ–‡çŸ³");
Database.addText("zh.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("zh.gridItemLName", "Lç¬¦æ–‡çŸ³");
Database.addText("zh.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("zh.gridItemAName", "Aç¬¦æ–‡çŸ³");
Database.addText("zh.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("zh.gridItemYName", "Yç¬¦æ–‡çŸ³");
Database.addText("zh.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("zh.gridItemRedSharkFinName", "é­”åŠ›çº¢è‰²é²¨é±¼é³");
Database.addText("zh.gridItemRedSharkFinDescription", "å¸¦æœ‰é­”åŠ›çš„çº¢è‰²é²¨é±¼é³ä¼šä¸ºä½ çš„ç«çƒæ³•æœ¯å¸¦æ¥æžé«˜çš„ä¼¤å®³å¢žå¹…ã€‚ç«çƒæ€»ç®—æ˜¯èƒ½æ´¾ä¸Šç”¨åœºäº†ã€‚");
Database.addText("zh.gridItemGreenSharkFinName", "é­”åŠ›ç»¿è‰²é²¨é±¼é³");
Database.addText("zh.gridItemGreenSharkFinDescription", "å¸¦æœ‰é­”åŠ›çš„ç»¿è‰²é²¨é±¼é³ä¼šå°†è‡ªç„¶ä¹‹åŠ›æ³¨å…¥ä½ çš„æ£’æ£’ç³–å†œåœºï¼å†œåœºçš„äº§é‡ä¼šå¾—åˆ°5å€çš„å¢žå¹…ã€‚");
Database.addText("zh.gridItemPurpleSharkFinName", "é­”åŠ›ç´«è‰²é²¨é±¼é³");
Database.addText("zh.gridItemPurpleSharkFinDescription", "å¸¦æœ‰é­”åŠ›çš„ç´«è‰²é²¨é±¼é³ä¼šä¸ºä½ æä¾›ä¸€ç§æ–°çš„é»‘é­”æ³•ã€‚è¿™ç§é­”æ³•åœ¨æ¯æ¬¡æŽ¢ç´¢ä¸­åªèƒ½ä½¿ç”¨ä¸€æ¬¡ã€‚ä½¿ç”¨æ—¶éœ€è¦æ ¼å¤–å½“å¿ƒï¼");
Database.addText("zh.gridItemTalkingCandyName", "ä¼šè¯´è¯çš„ç³–æžœ");
Database.addText("zh.gridItemTalkingCandyDescription", "å½“ä½ åœ¨åŸŽå ¡å¡”æ¥¼çš„é¡¶éƒ¨æ”¾ç½®å››æžšç¬¦æ–‡çŸ³åŽï¼Œè¿™é¢—ä¼šè¯´è¯çš„ç³–æžœå‡ºçŽ°åœ¨ä½ é¢å‰ã€‚ä»–ä¹Ÿè®¸èƒ½å¤Ÿå¸®ä½ å¼€å¯candy boxâ€¦â€¦");
Database.addText("zh.inventorySpecialNothingEqItem", "æ— è£…å¤‡");
Database.addText("zh.eqItemWeaponWoodenSwordName", "æœ¨å‰‘");
Database.addText("zh.eqItemWeaponWoodenSwordDescription", "ä¸€æŠŠç®€é™‹çš„æœ¨åˆ¶å‰‘");
Database.addText("zh.eqItemWeaponIronAxeName", "é“æ–§");
Database.addText("zh.eqItemWeaponIronAxeDescription", "ä¸€æŠŠæœ´ç´ çš„é“æ–§ã€‚éžå¸¸é”‹åˆ©ã€‚æ¯”æœ¨å‰‘æ›´ä¸ºå¼ºåŠ›ã€‚");
Database.addText("zh.eqItemWeaponPolishedSilverSwordName", "æŠ›å…‰çš„é“¶å‰‘");
Database.addText("zh.eqItemWeaponPolishedSilverSwordDescription", "ä¸€æŸ„å¼ºåŠ›çš„å®å‰‘,å‰‘èº«ä¸Šè¦†ç›–ç€é“¶é’‰");
Database.addText("zh.eqItemWeaponTrollBludgeonName", "å·¨é­”çš„å·¨æ£’");
Database.addText("zh.eqItemWeaponTrollBludgeonDescription", "ä½ ä»Žå®ˆå«å¤§æ¡¥çš„å·¨é­”é‚£é‡Œå¾—åˆ°äº†è¿™æ ¹å·¨æ£’ã€‚å®ƒçš„é€Ÿåº¦ç¼“æ…¢ï¼Œä½†èƒ½å¤Ÿæœ‰æ•ˆç ¸çƒ‚æ•Œäººã€‚");
Database.addText("zh.eqItemWeaponTribalSpearName", "éƒ¨è½é•¿çŸ›");
Database.addText("zh.eqItemWeaponTribalSpearDescription", "ä½ ä»Žä¸€ä½è¿·å¤±åœ¨æ·±å‘ä¸­çš„éƒ¨è½æˆ˜å£«çš„å°¸ä½“ä¸Šå¾—åˆ°äº†è¿™æ ¹é•¿çŸ›ã€‚å®ƒå¾ˆéš¾ä¸Šæ‰‹ï¼Œè€Œä¸€æ—¦ç²¾é€šï¼Œå®ƒå°±ç€å®žæ˜¯ä¸€æŠŠå‡ºè‰²çš„æ­¦å™¨ã€‚");
Database.addText("zh.eqItemWeaponSummoningTribalSpearName", "å¬å”¤ä¹‹åŠ›éƒ¨è½é•¿çŸ›");
Database.addText("zh.eqItemWeaponSummoningTribalSpearDescription", "è¿™æŠŠé™„é­”çš„éƒ¨è½é•¿çŸ›ä¸å…‰æ˜¯æ¯”æ™®é€šçš„éƒ¨è½é•¿çŸ›ç¨å¾®é”‹åˆ©äº†ä¸€ç‚¹ï¼Œå®ƒè¿˜èƒ½å¤Ÿé¢‘ç¹å¬å”¤éƒ¨è½æˆ˜å£«åœ¨æŽ¢ç´¢ä¸­åŠ©ä½ ä¸€è‡‚ä¹‹åŠ›ã€‚");
Database.addText("zh.eqItemWeaponMonkeyWizardStaffName", "çŒ´ç‹²æ³•å¸ˆä¹‹æ–");
Database.addText("zh.eqItemWeaponMonkeyWizardStaffDescription", "è¿™æŸ„æ³•æ–æ›¾å±žäºŽæ´žç©´ä¸­ä¸€ä½èµ¤èº«è£¸ä½“çš„çŒ´ç‹²æ³•å¸ˆã€‚å®ƒèƒ½å¤Ÿè‡ªè¡Œçž„å‡†ä½ çš„æ•Œäººå¹¶é¢‘ç¹æ–½æ”¾æ³•æœ¯ã€‚");
Database.addText("zh.eqItemWeaponEnchantedMonkeyWizardStaffName", "çŒ´ç‹²æ³•å¸ˆä¹‹æ–ï¼ˆå·²é™„é­”ï¼‰");
Database.addText("zh.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "è¿™æŸ„æ³•æ–è¾ƒæœªé™„é­”çš„ç‰ˆæœ¬æ›´ä¸ºè¿…é€Ÿï¼Œå®ƒèƒ½å¤Ÿæ›´é«˜æ•ˆåœ°æ–½æ”¾å¤§é‡æ³•æœ¯ã€‚");
Database.addText("zh.eqItemWeaponGiantSpoonName", "å·¨åž‹èŒ¶åŒ™");
Database.addText("zh.eqItemWeaponGiantSpoonDescription", "è¿™æŸ„å·¨åž‹èŒ¶åŒ™æ›¾è¢«æ”¾ç½®åœ¨æ²™æ¼ è¦å¡žä¸­çš„å·¨åž‹èŒ¶å£¶é‡Œã€‚ä½ ä¼°ä¸åˆ°æ˜¯å¦æœ‰ä»€ä¹ˆäººæ›¾æŠŠå®ƒå½“æˆè¿‡èŒ¶åŒ™æ¥ç”¨ï¼Œä½†å¦‚æžœçœŸæœ‰è¿™å›žäº‹çš„è¯ï¼Œé‚£å®¶ä¼™è‚¯å®šæœ‰ç€å¾ˆå¤§çš„ä¸ªå¤´ã€‚ä½ ä¹Ÿè®¸ä¸ä¼šæƒ³è¦å’Œä»–è§ä¸Šä¸€é¢çš„ã€‚");
Database.addText("zh.eqItemWeaponGiantSpoonOfDoomName", "æ¯ç­ä¹‹åŠ›å·¨åž‹èŒ¶åŒ™");
Database.addText("zh.eqItemWeaponGiantSpoonOfDoomDescription", "è¿™æŸ„å·¨åž‹èŒ¶åŒ™å±…ç„¶è¦æ¯”ä½ åœ¨èŒ¶å£¶ä¸­æ‰€èƒ½æ‰¾åˆ°çš„é€šå¸¸çš„å·¨åž‹èŒ¶åŒ™æ›´æœ‰æ€ä¼¤åŠ›ã€‚ä¸è¿‡å®ƒçš„é€Ÿåº¦ä¹Ÿç€å®žå¤Ÿæ…¢çš„ã€‚");
Database.addText("zh.eqItemWeaponScytheName", "é•¿æŸ„é•°åˆ€");
Database.addText("zh.eqItemWeaponScytheDescription", "æ®è¯´è¿™æŠŠé•°åˆ€æ›¾ç»å±žäºŽæ­»ç¥žæœ¬å°Šï¼Œå®ƒçš„é€Ÿåº¦å¿«åˆ°ä»¤äººéš¾ä»¥ç½®ä¿¡ã€‚");
Database.addText("zh.eqItemHatMerchantHatName", "å•†äººå¸½");
Database.addText("zh.eqItemHatMerchantHatDescription", "ç³–æžœå•†äººæŠŠè¿™é¡¶å¸½å­å–ç»™äº†ä½ ã€‚ç³–æžœå•†äººéžå¸¸å–œæ¬¢ç³–æžœã€‚è¿™é¡¶å¸½å­èƒ½å¤Ÿä»¤ä½ åœ¨æŽ¢ç´¢ä¸­èŽ·å¾—çš„ç³–æžœæ•°é‡å¢žåŠ ä¸ƒå€ï¼");
Database.addText("zh.eqItemHatSorceressHatName", "å¥³å·«å¸½");
Database.addText("zh.eqItemHatSorceressHatDescription", "å¥³å·«æŠŠè¿™é¡¶å¸½å­å–ç»™äº†ä½ ã€‚å®ƒèƒ½å¤Ÿå¢žå¼ºä½ çš„æ³•æœ¯å’Œè¯å‰‚çš„æ•ˆåŠ›ã€‚");
Database.addText("zh.eqItemHatOctopusKingCrownName", "ç« é±¼çŽ‹å† ");
Database.addText("zh.eqItemHatOctopusKingCrownDescription", "å½“ä½ æˆ´ä¸Šè¿™é¡¶çŽ‹å† æ—¶ï¼Œä½ æ„Ÿåˆ°æ¯”ä»¥å¾€è‡ªä¿¡äº†è®¸å¤šã€‚å®ƒæ— æ³•åœ¨æŽ¢ç´¢ä¸­ç»™ä½ å¸¦æ¥å¤šå°‘å®žæƒ ï¼Œä½†è‡ªä¿¡æ€»æ˜¯é‡è¦çš„ï¼");
Database.addText("zh.eqItemHatOctopusKingCrownWithJaspersName", "é•¶åµŒçº¢ç¢§çŽ‰çš„ç« é±¼çŽ‹å† ");
Database.addText("zh.eqItemHatOctopusKingCrownWithJaspersDescription", "è¿™é¡¶é™„é­”çš„çŽ‹å† ä»¥é»„é‡‘ä¸Žçº¢ç¢§çŽ‰åˆ¶æˆã€‚åœ¨æŽ¢ç´¢ä¸­ï¼Œå®ƒä¼šé¢‘ç¹å‘ä½ å››å‘¨æ–½æ”¾å¼ºåŠ›çš„é­”æ³•ç«çƒã€‚é¡ºä¾¿ï¼Œå®ƒè¿˜é—ªé—ªå‘å…‰ï¼");
Database.addText("zh.eqItemHatOctopusKingCrownWithObsidianName", "é•¶åµŒé»‘æ›œçŸ³çš„ç« é±¼çŽ‹å† ");
Database.addText("zh.eqItemHatOctopusKingCrownWithObsidianDescription", "è¿™é¡¶é™„é­”çš„çŽ‹å† ä»¥é»„é‡‘ä¸Žé»‘æ›œçŸ³åˆ¶æˆã€‚å…¶é€ åž‹ç¾Žä¸½åŠ¨äººã€‚åœ¨æŽ¢ç´¢ä¸­ï¼Œå®ƒä¼šæ—¶ä¸æ—¶åœ°å¬å”¤å‡ºç« é±¼çŽ‹ä¸Žä½ å¹¶è‚©ä½œæˆ˜ã€‚è¿™æ˜¯å¤šä¹ˆâ€œè§¦æ‰‹â€å¯åŠçš„åŒç›Ÿå•Šï¼");
Database.addText("zh.eqItemGlovesLeatherGlovesName", "çš®æ‰‹å¥—");
Database.addText("zh.eqItemGlovesLeatherGlovesDescription", "è¿™åŒæ‰‹å¥—åŸºæœ¬æ²¡æœ‰ä»»ä½•ä½œç”¨ï¼Œä½†è‡³å°‘å®ƒä»¬æ—¢æŸ”è½¯åˆèˆ’é€‚ï¼");
Database.addText("zh.eqItemGlovesRedEnchantedGlovesName", "çº¢è‰²é™„é­”æ‰‹å¥—");
Database.addText("zh.eqItemGlovesRedEnchantedGlovesDescription", "å½“ä½ èº«å¤„é»‘æš—ä¹‹ä¸­æ—¶ï¼Œè¿™åŒé™„é­”æ‰‹å¥—ä¼šå‘å‡ºæŸ”å’Œçš„çº¢è‰²å…‰èŠ’ã€‚åœ¨æŽ¢ç´¢ä¸­ï¼Œæ‰‹å¥—ä¼šéšæœºå‘æ•Œäººæ–½æ”¾å°ç«çƒï¼Œè¿™ç»å¯¹èƒ½æ´¾ä¸Šç”¨åœºã€‚");
Database.addText("zh.eqItemGlovesPinkEnchantedGlovesName", "ç²‰è‰²é™„é­”æ‰‹å¥—");
Database.addText("zh.eqItemGlovesPinkEnchantedGlovesDescription", "è¿™åŒé™„é­”æ‰‹å¥—ä¼šåœ¨ä½ ç¢°è§¦çš„ä»»ä½•ä¸œè¥¿ä¸Šç•™ä¸‹ç²‰è‰²çš„å°è®°ã€‚åœ¨æŽ¢ç´¢ä¸­ï¼Œæ‰‹å¥—ä¼šæŒç»­ä¸ºä½ æä¾›æ²»æ„ˆã€‚");
Database.addText("zh.eqItemBootsRocketBootsName", "ç«ç®­é´");
Database.addText("zh.eqItemBootsRocketBootsDescription", "è¿™åŒè¶…èµžçš„ç«ç®­é´è®©ä½ èƒ½å¤Ÿåœ¨åŠç©ºä¸­è¿›è¡Œè·³è·ƒï¼Œä¹Ÿå°±æ˜¯è¯´ï¼Œä½ åŸºæœ¬ä¸Šå¯ä»¥é£žèµ·æ¥äº†ï¼");
Database.addText("zh.eqItemBootsLeatherBootsName", "çš®é´");
Database.addText("zh.eqItemBootsLeatherBootsDescription", "æœ´ç´ çš„çš®é´ï¼Œæ²¡æœ‰ä»»ä½•ç‰¹åˆ«ä¹‹å¤„ã€‚");
Database.addText("zh.eqItemBootsBootsOfIntrospectionName", "å†…çœä¹‹é´");
Database.addText("zh.eqItemBootsBootsOfIntrospectionDescription", "èŠ±æ—¶é—´é™ä¸‹å¿ƒæ¥æ·±å‘¼å¸ã€‚å¦‚æžœä½ ç©¿ç€è¿™åŒé´å­ï¼Œä½ åœ¨è„šè¸å®žåœ°æ—¶å°±å†ä¹Ÿä¸ä¼šå‰è¿›åˆ†æ¯«ã€‚");
Database.addText("zh.eqItemBodyArmoursLightweightBodyArmourName", "è½»åž‹æŠ¤ç”²");
Database.addText("zh.eqItemBodyArmoursLightweightBodyArmourDescription", "è¿™èº«æŠ¤ç”²å¯ä¸ºä½ æä¾›è½»å¾®çš„ä¿æŠ¤ã€‚ä½ å¯¹æ•Œäººæ”»å‡»çš„æŠµæŠ—åŠ›ä¼šç•¥å¾®å¾—åˆ°æå‡ã€‚");
Database.addText("zh.eqItemBodyArmoursKnightBodyArmourName", "éª‘å£«æŠ¤ç”²");
Database.addText("zh.eqItemBodyArmoursKnightBodyArmourDescription", "è¿™èº«åŽšé‡çš„æŠ¤ç”²ä¼šä¸ºä½ æä¾›é˜²æŠ¤ã€‚ä½ å¯¹æ•Œäººæ”»å‡»çš„æŠµæŠ—åŠ›ä¼šå¾—åˆ°æ›´å¤§æå‡ã€‚");
Database.addText("zh.eqItemBodyArmoursEnchantedKnightBodyArmourName", "é™„é­”éª‘å£«æŠ¤ç”²");
Database.addText("zh.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "è¿™èº«æŠ¤ç”²éžå¸¸ç‰¹æ®Šã€‚ä½ å¯¹æ•Œäººæ”»å‡»çš„æŠµæŠ—åŠ›ä¼šå¾—åˆ°æžå¤§æå‡ï¼Œä½†ä½ ä½¿ç”¨çš„æ­¦å™¨æ‰€é€ æˆçš„ä¼¤å®³ä¼šå› æ­¤è€Œå‡åŠã€‚");
Database.addText("zh.mapVillageForgeBuyWoodenSwordButton", "ä¹°ä¸€æŠŠæœ¨å‰‘ï¼ˆ150é¢—ç³–æžœï¼‰");
Database.addText("zh.mapVillageForgeBuyWoodenSwordSpeech", "è°¢è°¢æƒ é¡¾ï¼è¿™æŠŠæœ¨å‰‘ç›¸å½“è´«å¼±ï¼Œå´æ˜¯ä¸ªè‰¯å¥½çš„å¼€ç«¯ã€‚");
Database.addText("zh.mapVillageForgeBuyIronAxeButton", "ä¹°ä¸€æŠŠé“æ–§ï¼ˆ400é¢—ç³–æžœï¼‰");
Database.addText("zh.mapVillageForgeBuyIronAxeSpeech", "æˆ‘å¸Œæœ›ä½ ä¼šå–œæ¬¢è¿™æŠŠé“æ–§ï¼Œæˆ‘åˆšä¸ºä½ æŠŠå®ƒæ‰“ç£¨é”‹åˆ©ï¼");
Database.addText("zh.mapVillageForgeBuyPolishedSilverSwordButton", "ä¹°ä¸€æŠŠæŠ›å…‰çš„é“¶å‰‘ï¼ˆ2000é¢—ç³–æžœï¼‰");
Database.addText("zh.mapVillageForgeBuyPolishedSilverSwordSpeech", "é“¸è¿™æŠŠå‰‘å¯èŠ±äº†æˆ‘ä¸å°‘æ—¶é—´ã€‚æˆ‘å¯ä»¥å‘ä½ ä¿è¯å®ƒç»å¯¹å€¼å¾—ä¸Šè¿™ç¬”ä»·ã€‚");
Database.addText("zh.mapVillageForgeBuyLightweightBodyArmourButton", "ä¹°ä¸€ä»¶è½»åž‹æŠ¤ç”²ï¼ˆ15000é¢—ç³–æžœï¼‰");
Database.addText("zh.mapVillageForgeBuyLightweightBodyArmourSpeech", "è¿™èº«æŠ¤ç”²å¯ä»¥åœ¨ä½ ä¸Žæ•Œäººä½œæˆ˜æ—¶æä¾›ä¸€å®šçš„ä¿æŠ¤ã€‚");
Database.addText("zh.mapVillageForgeBuyScytheButton", "ä¹°ä¸€æŠŠé•¿æŸ„é•°åˆ€ï¼ˆ5 000 000é¢—ç³–æžœï¼‰");
Database.addText("zh.mapVillageForgeBuyScytheSpeech", "æˆ‘èŠ±äº†å‡ ä¸ªæœˆæ—¶é—´æ‰æ‰“é€ å‡ºè¿™æŸ„é•°åˆ€ã€‚å®ƒå¯æ˜¯ä¸€ä»¶å½“ä¹‹æ— æ„§çš„è‰ºæœ¯å“ã€‚è¿™å¯èƒ½ä¼šæ˜¯ä½ æ‰€èƒ½ç”¨åˆ°çš„æ‰€æœ‰æ­¦å™¨ä¸­æœ€è¿…é€Ÿçš„ã€‚ç¥ä½ å¥½è¿ï¼");
Database.addText("zh.wishingWellThrowFirstCandyButton", "æŠŠä¸€æžšç³–æžœæ‰”è¿›äº•é‡Œ");
Database.addText("zh.wishingWellCandyIntroductionSpeech", "ä½ å¥½ï¼Œæ—…è¡Œè€…ï¼æˆ‘æ˜¯è®¸æ„¿äº•ã€‚æˆ‘ä¼šä»¥å„ç§ç³–æžœä¸ºä»£ä»·æ»¡è¶³ä½ çš„æ„¿æœ›ï¼å½“ä½ æŠŠç³–æ‰”è¿›äº•ä¸­ï¼Œæˆ‘å°±ä¼šæ²»æ„ˆä½ çš„ä¼¤ç—›ã€‚");
Database.addText("zh.wishingWellThrewCandiesSpeech", "ä½ çš„ä¼¤ç—›å¾—åˆ°äº†æ²»æ„ˆï¼");
Database.addText("zh.wishingWellNoWoundSpeech", "ä½ å¹¶æ²¡æœ‰ä¼¤ç—›å¯ä¾›æ²»æ„ˆï¼");
Database.addText("zh.wishingWellThrowFirstLollipopButton", "æŠŠä¸€æ ¹æ£’æ£’ç³–æ‰”è¿›äº•é‡Œ");
Database.addText("zh.wishingWellLollipopIntroductionSpeech", "ä½ å¥½ï¼Œæ—…è¡Œè€…ï¼æˆ‘æ˜¯è®¸æ„¿äº•ã€‚æˆ‘ä¼šä»¥å„ç§ç³–æžœä¸ºä»£ä»·æ»¡è¶³ä½ çš„æ„¿æœ›ï¼å½“ä½ æŠŠæ£’æ£’ç³–æ‰”è¿›äº•ä¸­ï¼Œæˆ‘å°±ä¼šä¸ºä½ æŠŠå®ƒä»¬è½¬åŒ–ä¸ºç³–æžœã€‚");
Database.addText("zh.wishingWellThrewLollipopsSpeech", "ä½ çš„æ£’æ£’ç³–è¢«è½¬åŒ–æˆäº†ç³–æžœï¼ä¸¤æ ¹æ£’æ£’ç³–æ¢ä¸€æžšç³–æžœã€‚");
Database.addText("zh.wishingWellThrowChocolateBarButton", "æŠŠä¸€å—å·§å…‹åŠ›æ‰”è¿›äº•é‡Œ");
Database.addText("zh.wishingWellChocolateBarIntroductionSpeech", "ä½ å¥½ï¼Œæ—…è¡Œè€…ï¼æˆ‘æ˜¯è®¸æ„¿äº•ã€‚æˆ‘ä¼šä»¥å„ç§ç³–æžœä¸ºä»£ä»·æ»¡è¶³ä½ çš„æ„¿æœ›ï¼æˆ‘å–œæ¬¢å·§å…‹åŠ›ï¼Œæˆ‘æœ€å–œæ¬¢å·§å…‹åŠ›äº†ã€‚ä¸ºäº†ä½ æ‰”è¿›äº•ä¸­çš„æ¯ä¸€å—å·§å…‹åŠ›ï¼ŒåŒ…æ‹¬åˆšæ‰é‚£ä¸€å—ï¼Œæˆ‘éƒ½ä¼šç»™äºˆä½ ä¸€æ¬¡é™„é­”çš„æœºä¼šã€‚");
Database.addText("zh.wishingWellThrewChocolateBarSpeech", "ä½ æƒ³è¦é™„é­”ä»€ä¹ˆç‰©å“ï¼Ÿ");
Database.addText("zh.wishingWellThrowPainAuChocolatButton", "æŠŠä¸€ä¸ªå·§å…‹åŠ›é¢åŒ…æ‰”è¿›äº•é‡Œ");
Database.addText("zh.wishingWellPainAuChocolatIntroductionSpeech", "ä½ å¥½ï¼Œæ—…è¡Œè€…ï¼æˆ‘æ˜¯è®¸æ„¿äº•ã€‚æˆ‘ä¼šä»¥å„ç§ç³–æžœä¸ºä»£ä»·æ»¡è¶³ä½ çš„æ„¿æœ›ï¼å½“ä½ æŠŠå·§å…‹åŠ›é¢åŒ…æ‰”è¿›äº•ä¸­ï¼Œæˆ‘ä¼šç»™ä½ ä¸€ä¸ªéžå¸¸ç‰¹åˆ«çš„ç¤¼ç‰©ã€‚è¯·åšå‡ºæ˜Žæ™ºçš„é€‰æ‹©ã€‚");
Database.addText("zh.wishingWellThrewPainAuChocolatSpeech", "è°¢è°¢ä½ çš„å·§å…‹åŠ›é¢åŒ…ï¼çŽ°åœ¨è¯·é€‰æ‹©ä½ çš„ç¤¼ç‰©ã€‚");
Database.addText("zh.wishingWellChooseGift", "é€‰æ‹©ä½ çš„ç¤¼ç‰©ï¼");
Database.addText("zh.wishingWellChooseGiftButton", "é€‰æ‹©");
Database.addText("zh.wishingWellGiftDoneSpeech", "æžå®šï¼ä½ å·²ç»å¾—åˆ°äº†ä¸€ä¸ªæ–°ç¤¼ç‰©ã€‚å®ƒä¼šæ˜¾ç¤ºåœ¨ä½ çš„ç‰©å“æ çŠ¶æ€é¢æ¿ä¸Šã€‚");
Database.addText("zh.wishingWellNoPossibleEnchantment", "æ²¡æœ‰å¯ç”¨çš„é™„é­”");
Database.addText("zh.wishingWellChooseEnchantment", "é€‰æ‹©é™„é­”");
Database.addText("zh.wishingWellEnchantButton", "é™„é­”");
Database.addText("zh.wishingWellEnchantmentDoneSpeech", "æžå®šï¼ä½ çš„ç‰©å“å·²ç»é™„é­”å®Œæ¯•ã€‚");
Database.addText("zh.pierLighthouseButton", "ä¹˜èˆ¹å‰å¾€ç¯å¡”");
Database.addText("zh.pierTheSeaButton", "è·³å…¥æµ·ä¸­");
Database.addText("zh.lonelyHouseOpenBox", "æ‰“å¼€ç›’å­");
Database.addText("zh.lonelyHouseShakeBox", "æ‘‡æ™ƒç›’å­");
Database.addText("zh.lonelyHouseBreakLock", "æš´åŠ›å¼€é”");
Database.addText("zh.lonelyHouseKickBox", "è¸¢æ‰“ç›’å­");
Database.addText("zh.lonelyHouseAskTheBoxToOpenItself", "è¯·æ±‚ç›’å­æ‰“å¼€è‡ªå·±");
Database.addText("zh.lonelyHouseLureTheBoxWithACandy", "ç”¨ä¸€é¢—ç³–å¼•è¯±ç›’å­");
Database.addText("zh.lonelyHouseTakeTheBox", "æŠŠç›’å­éšèº«æºå¸¦ï¼Œä½†ä½ å¯èƒ½éœ€è¦ä¸€æŠŠé’¥åŒ™æ‰èƒ½æ‰“å¼€å®ƒã€‚");
Database.addText("zh.lonelyHouseOpenBoxResult", "ç›’å­è¢«é”ä½äº†");
Database.addText("zh.lonelyHouseShakeBoxResult", "ä»€ä¹ˆäº‹éƒ½æ²¡å‘ç”Ÿ");
Database.addText("zh.lonelyHouseBreakLockResult", "é”é€šè¿‡äº†è±å…æ£€å®š");
Database.addText("zh.lonelyHouseKickBoxResult", "ä½ çš„è„šå—äº†è½»ä¼¤ï¼Œä½†ç›’å­ä¸ä¸ºæ‰€åŠ¨");
Database.addText("zh.lonelyHouseAskTheBoxToOpenItselfResult", "â€¦â€¦ä½ æ˜¯åœ¨å¯¹ä¸€ä¸ªç›’å­è¯´è¯ï¼Œä½ æ™“å¾—å—ï¼Ÿ");
Database.addText("zh.lonelyHouseLureTheBoxWithACandyResult", "ç›’å­ä¼¼ä¹Žå¹¶ä¸åœ¨ä¹Ž");
Database.addText("zh.lonelyHouseTakeTheBoxResult", "candy boxä¸­å¯èƒ½ä¼šæœ‰ä»€ä¹ˆæœ‰è¶£çš„ä¸œè¥¿ã€‚");
Database.addText("zh.lollipopFarmConstructMill", "å»ºä¸€åº§ç£¨åŠï¼ˆ10 000æ ¹æ£’æ£’ç³–ï¼‰");
Database.addText("zh.lollipopFarmFeedMill", "æ‰©å»ºç£¨åŠ");
Database.addText("zh.lollipopFarmCurrentCandiesProduction", "å½“å‰ç³–æžœäº§é‡");
Database.addText("zh.lollipopFarmDigPond", "æŒ–ä¸€ä¸ªæ± å¡˜ï¼ˆ100 000æ ¹æ£’æ£’ç³–ï¼‰");
Database.addText("zh.lollipopFarmBuyLolligator", "ä¹°ä¸€æ¡æ£’æ£’ç³–é³„ï¼ˆ1200é¢—ç³–æžœï¼‰");
Database.addText("zh.lollipopFarmLolligatorsConversionText", "ç³–æžœ->æ£’æ£’ç³–è½¬æ¢å·²è¢«æ¿€æ´»");
Database.addText("zh.lighthouseAskButton", "è¯¢é—®");
Database.addText("zh.lighthouseQuestionWho", "ä½ æ˜¯è°ï¼Ÿ");
Database.addText("zh.lighthouseQuestionWhoSpeech", "æˆ‘æ˜¯éžå¸¸å¤è€çš„ç‹¬çœ¼å·¨äººã€‚");
Database.addText("zh.lighthouseQuestionWhat", "ä½ åœ¨è¿™é‡Œåšä»€ä¹ˆï¼Ÿ");
Database.addText("zh.lighthouseQuestionWhatSpeech", "æˆ‘æ•´å¤©éƒ½ç”Ÿæ´»åœ¨è¿™é‡Œï¼Œç­‰å¾…ä¸€è‰˜èˆ¹é©¶è¿‡æ¥ã€‚æˆ‘å·²ç»å¾ˆä¹…æ²¡è§è¿‡èˆ¹äº†ï¼Œä½†æˆ‘å¿…é¡»å‘†åœ¨è¿™å„¿ï¼Œæœ›ç€å¤§æµ·ï¼Œå› ä¸ºæ€»ä¼šæœ‰è‰˜èˆ¹é©¶è¿‡æ¥ã€‚");
Database.addText("zh.lighthouseQuestionWhyEatCandies", "æˆ‘ä¸ºä»€ä¹ˆè¦åƒç³–æžœï¼Ÿ");
Database.addText("zh.lighthouseQuestionWhyEatCandiesSpeech", "å› ä¸ºç³–æžœå¯¹ä½ çš„ç”Ÿå‘½æœ‰å¥½å¤„ï¼");
Database.addText("zh.lighthouseQuestionCandyBox", "candy boxæ˜¯ä»€ä¹ˆï¼Ÿ");
Database.addText("zh.lighthouseQuestionCandyBoxSpeech", "é‚£æ˜¯ä¸€ä¸ªéžå¸¸å¤è€çš„ç›’å­ï¼Œæ®è¯´è£…ç€ä¸–ç•Œä¸Šæ‰€æœ‰çš„ç³–æžœã€‚ä¼ è¯´æ‰“å¼€å®ƒçš„äººä¼šæ‹¥æœ‰æ— å°½çš„ç³–æžœï¼Œå¹¶ä¸”æ²¡æœ‰è¿™äº›ç³–æžœåšä¸åˆ°çš„äº‹ã€‚");
Database.addText("zh.lighthouseQuestionDragon", "å·¨é¾™å‘Šè¯‰æˆ‘æƒ³è¦ç³–æžœçš„è¯å°±æ¥è¿™é‡Œè§ä½ ã€‚");
Database.addText("zh.lighthouseQuestionDragonSpeech", "å“¦ï¼Œæˆ‘çŸ¥é“äº†â€¦â€¦å¥½å§ï¼Œæˆ‘ä¸èƒ½ç›´æŽ¥ç»™ä½ ç³–æžœï¼Œä½†æˆ‘å¯ä»¥ç»™ä½ ä¸€ä¸ªä¸ºæœ€ç»ˆèŽ·å¾—å¤§é‡ç³–æžœè€Œå¿…ä¸å¯ç¼ºçš„ä¸œè¥¿ã€‚æˆ‘åªéœ€è¦åœ¨æ­¤ä¹‹å‰å¯¹ä½ è¿›è¡Œä¸€ä¸ªæµ‹éªŒã€‚å› ä¸ºè¿™å¹¶ä¸æ˜¯å¯ä»¥éšä¾¿ç»™å‡ºåŽ»çš„ä¸œè¥¿ã€‚è§£å¼€è¿™ä¸ªè°œé¢˜ï¼Œå®ƒå°±å±žäºŽä½ ã€‚");
Database.addText("zh.lighthouseFoundStone", "æ­å–œä½ ï¼ä½ é€šè¿‡äº†æµ‹è¯•ï¼Œå¹¶æ‰¾åˆ°äº†ç¬¦æ–‡çŸ³ã€‚å®ƒéžå¸¸å®è´µï¼Œä½†åªæœ‰åœ¨ä½ æ‰¾åˆ°å¦å¤–ä¸‰æžšä¸Žå…¶ç›¸ä¼¼çš„ç¬¦æ–‡çŸ³åŽæ‰èƒ½æ´¾ä¸Šç”¨åœºã€‚ç¥ä½ å¥½è¿ï¼");
Database.addText("zh.lighthouseFoundStoneAgain", "å¹²å¾—å¥½ï¼Œä½ åˆä¸€æ¬¡è§£å¼€äº†è¿™ä¸ªè°œé¢˜ã€‚ä½ ä¼¼ä¹Žå¾ˆå–œæ¬¢å®ƒå˜›ã€‚");
Database.addText("zh.saveLocalSaveTitle", "æµè§ˆå™¨å­˜æ¡£");
Database.addText("zh.saveLocalSaveWhy", "å¦‚æžœä½ æƒ³åœ¨å½“å‰è®¾å¤‡åŠæµè§ˆå™¨ä¸Šç»§ç»­æ¸¸æˆçš„è¯ï¼Œè¯·é€‰æ‹©æœ¬åœ°å­˜æ¡£ã€‚");
Database.addText("zh.saveLocalSaveWarning0", "ä½ çš„æµè§ˆå™¨ä¼¼ä¹Žå¹¶ä¸æ”¯æŒHTML5");
Database.addText("zh.saveLocalSaveWarning1", "ä½ åº”å½“å‡çº§æµè§ˆå™¨ä»¥ä½¿ç”¨æœ¬åœ°å­˜æ¡£åŠŸèƒ½ã€‚");
Database.addText("zh.saveLocalSaveChooseSlot", "é€‰æ‹©å­˜æ¡£ä½ç½®ï¼š");
Database.addText("zh.saveLocalSaveAutosaveEnabled", "è‡ªåŠ¨å­˜æ¡£å·²å¼€å¯");
Database.addText("zh.saveLocalSaveChooseWhatToDo", "é€‰æ‹©å­˜æ¡£æ–¹å¼");
Database.addText("zh.saveLocalSaveSaveButton", "å­˜æ¡£");
Database.addText("zh.saveLocalSaveAutosaveButton", "æ¯ååˆ†é’Ÿå­˜æ¡£ä¸€æ¬¡");
Database.addText("zh.saveLocalSaveDisableAutosaveButton", "ç¦ç”¨è‡ªåŠ¨å­˜æ¡£");
Database.addText("zh.saveFileSaveTitle", "æ–‡æœ¬å­˜æ¡£");
Database.addText("zh.saveFileSaveWhy0", "å¦‚æžœä½ æœ‰ä»¥ä¸‹éœ€æ±‚ï¼Œè¯·é€‰æ‹©æ–‡æœ¬å­˜æ¡£ï¼š");
Database.addText("zh.saveFileSaveWhy1", "ä½ æƒ³åœ¨å…¶ä»–è®¾å¤‡æˆ–æµè§ˆå™¨ä¸Šç»§ç»­æ¸¸æˆ");
Database.addText("zh.saveFileSaveWhy2", "ä½ æƒ³ä¸Žå…¶ä»–äººåˆ†äº«è‡ªå·±çš„å­˜æ¡£");
Database.addText("zh.saveFileSaveWhy3", "å› ä¸ºæŸäº›åŽŸå› ï¼Œä½ æƒ³æ¸…ç©ºè‡ªå·±çš„æµè§ˆå™¨ç¼“å­˜");
Database.addText("zh.saveFileSaveWhy4", "ï¼ˆæ¸…ç©ºä½ çš„æµè§ˆå™¨ç¼“å­˜ä¼šæ¸…é™¤ä½ çš„æœ¬åœ°å­˜æ¡£ï¼‰");
Database.addText("zh.saveFileSaveButton", "ä»¥æ–‡æœ¬å½¢å¼ä¿å­˜å½“å‰æ¸¸æˆ");
Database.addText("zh.saveFileSaveWarning", "çŽ°åœ¨è¯·æŠŠè¿™æ®µæ–‡æœ¬å¤åˆ¶åˆ°å…¶ä»–åœ°æ–¹ï¼ï¼ˆæ¯”å¦‚è¯´æ”¾åˆ°ä¸€ä¸ªæ–‡æœ¬æ–‡ä»¶é‡Œï¼‰");
Database.addText("zh.saveLocalLoadTitle", "æµè§ˆå™¨è¯»æ¡£");
Database.addText("zh.saveLocalLoadYouCan", "ä½ å¯ä»¥é€šè¿‡ä»¥ä¸‹é“¾æŽ¥è¯»å–æœ¬åœ°å­˜æ¡£ï¼š");
Database.addText("zh.saveLocalLoadThanksTo", "ç”±äºŽHTML5çš„é­”åŠ›ï¼Œå³ä¾¿æ˜¯åœ¨ç¦»çº¿çŠ¶æ€ä¸‹ï¼Œä½ ä»å¯ä½¿ç”¨è¿™äº›é“¾æŽ¥ã€‚");
Database.addText("zh.saveFileLoadTitle", "æ–‡æœ¬è¯»æ¡£");
Database.addText("zh.saveFileLoadPaste", "å°†ä½ çš„å­˜æ¡£ç²˜è´´è‡³ä¸‹æ–¹ï¼Œç„¶åŽç‚¹å‡»â€œè¯»æ¡£â€æŒ‰é’®");
Database.addText("zh.saveFileLoadButton", "è¯»æ¡£");
Database.addText("zh.mountainsText0", "ä½ æ³¨æ„åˆ°ç¾¤å±±ä¹‹é—´æœ‰ä»€ä¹ˆä¸œè¥¿ï¼");
Database.addText("zh.mountainsText1", "å®ƒçœ‹èµ·æ¥å¾ˆæœ‰è¶£ï¼Œä¹Ÿè®¸è¿˜ä¼šå¾ˆæœ‰ç”¨ã€‚");
Database.addText("zh.mountainsTextButton", "çˆ¬ä¸Šå±±ä»¥å¾—åˆ°é‚£ä¸ªä¸œè¥¿");
Database.addText("zh.mountainsTextAfter", "ä½ æ‰¾åˆ°äº†ä¸€æ ¹å¼¹è·³æ£’ï¼çŽ°å·²åŠ å…¥ä½ çš„è±ªåŽç‰©å“æ ã€‚");
Database.addText("zh.secondHouseIntroSpeech", "ä½ å¥½ï¼Œæˆ‘æ˜¯ç³–æžœå•†äººã€‚æˆ‘ä¸ºäº†ç³–æžœå¯ä»¥åšä»»ä½•äº‹æƒ…ã€‚ä½ éœ€è¦ä»€ä¹ˆï¼Ÿ");
Database.addText("zh.secondHouseLollipop1Speech", "è¿™æ˜¯ä¸€æ ¹æŸ æª¬å£å‘³çš„æ£’æ£’ç³–ã€‚æˆ‘æœ€å–œæ¬¢çš„ï¼å®ƒçš„å”®ä»·æ˜¯60é¢—ç³–æžœï¼Œè‚¯å®šå€¼å¾—ä¸Šè¿™ç¬”ä»·ã€‚");
Database.addText("zh.secondHouseLollipop2Speech", "è¿™æ˜¯ä¸€æ ¹è‰èŽ“å£å‘³çš„æ£’æ£’ç³–ã€‚å®ƒéžå¸¸ç¾Žå‘³ã€‚æˆ‘å–œæ¬¢å®ƒçš„çº¢è‰²ã€‚åªå–60é¢—ç³–æžœï¼");
Database.addText("zh.secondHouseLollipop3Speech", "è¿™æ˜¯ä¸€æ ¹å—ç“œå£å‘³çš„æ£’æ£’ç³–ã€‚æˆ‘æ‰“èµŒä½ ç»å¯¹æ²¡å°è¿‡è¿™ç§ï¼ç»™æˆ‘60é¢—ç³–æžœï¼Œå®ƒå°±æ˜¯ä½ çš„äº†ã€‚");
Database.addText("zh.secondHouseLollipopButtonText", "ä¹°ä¸‹è¿™æ ¹æ£’æ£’ç³–ï¼ˆ60é¢—ç³–æžœï¼‰");
Database.addText("zh.secondHouseMerchantHatSpeech", "æˆ‘å¯ä»¥æŠŠè‡ªå·±çš„å¸½å­å–ç»™ä½ ï¼Œä½†ä½ çŸ¥é“ï¼Œå®ƒå¾ˆå®è´µçš„â€¦â€¦ä½ å¾—ç»™æˆ‘å¾ˆå¤šå¾ˆå¤šç³–æžœæ‰èƒ½æ‹¿èµ°å®ƒã€‚æ¯”å¦‚è¯´100ä¸‡é¢—ç³–æžœã€‚å¬èµ·æ¥å¾ˆåˆ’ç®—å¯¹å§ï¼Ÿ");
Database.addText("zh.secondHouseMerchantHatButtonText", "ä¹°ä¸‹è¿™é¡¶å•†äººå¸½ï¼ˆ1 000 000é¢—ç³–æžœï¼‰");
Database.addText("zh.secondHouseTimeRingSpeech", "è¿™æ˜¯ä¸€æžšæ—¶é—´æŒ‡çŽ¯ã€‚å®ƒæœ‰ç€æŸç§é­”åŠ›ï¼Œå½“ä½ é‡åˆ°éº»çƒ¦æ—¶ï¼Œä½ å¯ä»¥é€šè¿‡å®ƒæ¥å‡ç¼“æ—¶é—´çš„æµé€ã€‚");
Database.addText("zh.secondHouseTimeRingButtonText", "ä¹°ä¸‹è¿™æžšæ—¶é—´æŒ‡çŽ¯ï¼ˆ500é¢—ç³–æžœï¼‰");
Database.addText("zh.secondHouseLeatherGlovesSpeech", "è¿™åŒçš®æ‰‹å¥—æ˜¯ä»¥éª†é©¼çš®åˆ¶æˆçš„ï¼Œå“è´¨é«˜æ¡£ã€‚æˆ‘æœ‰å¤§æ‰¹åº“å­˜ï¼Œè¿™å°±æ˜¯å®ƒä»¬å¦‚æ­¤ä¾¿å®œçš„åŽŸå› ï¼šåªå–300é¢—ç³–æžœï¼");
Database.addText("zh.secondHouseLeatherBootsButtonText", "ä¹°ä¸‹è¿™åŒçš®é´ï¼ˆ300é¢—ç³–æžœï¼‰");
Database.addText("zh.secondHouseLeatherBootsSpeech", "è¿™åŒé«˜æ¡£å“è´¨çš„çš®é´æ˜¯ä»¥éª†é©¼çš®åˆ¶æˆçš„ï¼Œå®ƒä»¬å¯ä»¥ä¸ºä½ çš„åŒè„šä¿æš–ã€‚");
Database.addText("zh.secondHouseLeatherGlovesButtonText", "ä¹°ä¸‹è¿™åŒçš®æ‰‹å¥—ï¼ˆ300é¢—ç³–æžœï¼‰");
Database.addText("zh.secondHouseChocolateBarSpeech", "è¿™æ˜¯ä¸€å—å·§å…‹åŠ›ï¼Œæˆ‘ä¸çŸ¥é“å®ƒèƒ½ç”¨æ¥åšä»€ä¹ˆï¼Œä½†è¿™ä¸œè¥¿ä¼¼ä¹Žç›¸å½“ç½•è§ï¼Œè¿™å°±æ˜¯å®ƒèŽ·å¾—è¿™ä¸€å”®ä»·çš„åŽŸå› ï¼šç»™æˆ‘800é¢—ç³–æžœï¼Œå®ƒå°±æ˜¯ä½ çš„äº†ï¼");
Database.addText("zh.secondHouseChocolateBarButtonText", "ä¹°ä¸‹è¿™å—å·§å…‹åŠ›ï¼ˆ800é¢—ç³–æžœï¼‰");
Database.addText("zh.outsideTheHoleButton", "è·³è¿›è¿™ä¸ªæ·±å‘");
Database.addText("zh.theCaveExitText0", "ä½ æ€»ç®—æ˜¯åˆ°è¾¾äº†æ´žç©´çš„å‡ºå£ã€‚");
Database.addText("zh.theCaveExitText1", "ä½ åœ¨æ´žç©´å¤–çœ‹åˆ°äº†ä¸€ç‰‡å¤§æ£®æž—");
Database.addText("zh.theCaveExitButtonText", "ç¦»å¼€æ´žç©´");
Database.addText("zh.theCaveFirstSentenceWentStraight", "ä½ ç…§ç›´å‰è¡Œã€‚");
Database.addText("zh.theCaveFirstSentenceWentLeft", "ä½ é€‰æ‹©äº†å·¦è¾¹çš„è·¯ã€‚");
Database.addText("zh.theCaveFirstSentenceWentRight", "ä½ é€‰æ‹©äº†å³è¾¹çš„è·¯ã€‚");
Database.addText("zh.theCaveFirstSentenceYouAre", "ä½ èº«å¤„ä¸€ä¸ªæ´žç©´ä¹‹ä¸­ï¼Œé¢å‰æœ‰ç€ä¸‰æ¡é“è·¯ã€‚");
Database.addText("zh.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "ä½ åœ¨å‰æ–¹çš„åœ°é¢ä¸Šå‘çŽ°äº†ä¸€ä¸ªå¥‡æ€ªçš„ä¸œè¥¿ã€‚");
Database.addText("zh.theCavePattern_ChocolateBarNowSeeChocolateBar", "ä½ åœ¨å‰æ–¹å‘çŽ°äº†ä¸€å—å·§å…‹åŠ›ã€‚");
Database.addText("zh.theCavePattern_TreasureMapSentence", "ä½ çœ‹åˆ°åœ°é¢ä¸Šçš„å°çŸ³å­è¢«æ‘†æˆäº†å¥‡æ€ªçš„å›¾æ¡ˆã€‚");
Database.addText("zh.theCavePattern_MonkeyWizardSentence", "ä½ å¶ç„¶é­é‡åˆ°äº†ä¸€åªèµ¤èº«è£¸ä½“çš„çŒ´ç‹²æ³•å¸ˆã€‚");
Database.addText("zh.theCavePattern_MonkeyWizardButton", "å‘ä»–å‘èµ·æŒ‘æˆ˜");
Database.addText("zh.theCavePattern_OctopusKingSentence", "ä½ å¶ç„¶é­é‡åˆ°äº†ä¸€åªç« é±¼çŽ‹ï¼Œå®ƒçœ‹ä¸ŠåŽ»ç›¸å½“ä»¤äººä¸å¿«ã€‚");
Database.addText("zh.theCavePattern_OctopusKingButton", "å‘å®ƒå‘èµ·æŒ‘æˆ˜");
Database.addText("zh.fortressInsideText0", "ä½ æ­£èº«å¤„æ²™æ¼ è¦å¡žä¹‹ä¸­ã€‚");
Database.addText("zh.fortressInsideText1", "ä½ å¯ä»¥åœ¨ä¸‰æ‰‡å¤§é—¨ä¸­é€‰æ‹©å‰è¡Œçš„é“è·¯ã€‚");
Database.addText("zh.fortressInsideText2", "æ¯æ‰‡å¤§é—¨éƒ½é€šå¾€ä¸€ä¸ªå®½é˜”çš„æˆ¿é—´ï¼Œæ¯ä¸ªæˆ¿é—´çš„æœ€æ·±å¤„éƒ½æœ‰ä¸€ä¸ªå®ç‰©ã€‚");
Database.addText("zh.fortressInsideEnterRoom1", "è¿›å…¥ç¬¬ä¸€ä¸ªæˆ¿é—´");
Database.addText("zh.fortressInsideEnterRoom2", "è¿›å…¥ç¬¬äºŒä¸ªæˆ¿é—´");
Database.addText("zh.fortressInsideEnterRoom3", "è¿›å…¥ç¬¬ä¸‰ä¸ªæˆ¿é—´");
Database.addText("zh.treasureButtonDig", "æŒ–æŽ˜");
Database.addText("zh.treasureButtonYouFound", "ä½ æŒ–åˆ°äº†ä¸‰å—å·§å…‹åŠ›ï¼");
Database.addText("zh.sorceressHutHello", "ä½ å¥½ï¼Œæˆ‘æ˜¯å¥³å·«ã€‚æˆ‘å¯ä»¥æ•™ä½ ä¸€ä¸¤ä»¶å…³äºŽé­”æ³•çš„äº‹ã€‚æˆ‘è¿˜å¯ä»¥ç»™ä½ ä¸€äº›æœ‰è¶£çš„å°çŽ©æ„ï¼Œæˆ–ä¸ºä½ æ–½æ³•ã€‚ä½†è¿™ä¸€åˆ‡éƒ½æ˜¯æ˜Žç æ ‡ä»·çš„ï¼ä»£ä»·å°±æ˜¯æ£’æ£’ç³–ï¼Œå¾ˆå¤šå¾ˆå¤šçš„æ£’æ£’ç³–ã€‚");
Database.addText("zh.sorceressHutClickedGrimoire", "è¿™æ˜¯ä¸€æœ¬é­”æ³•ä¹¦ï¼Œä¸ºåˆå­¦è€…é‡èº«å®šåˆ¶ã€‚åœ¨æŽ¢ç´¢ä¸­éšèº«æºå¸¦å°±èƒ½å¤Ÿæ–½æ”¾ç®€å•ä¸”å®žç”¨çš„æ³•æœ¯ã€‚ä½ è‚¯å®šéœ€è¦è¿™ä¸ªï¼åªå–5000æ ¹æ£’æ£’ç³–ï¼");
Database.addText("zh.sorceressHutBuyGrimoireButton", "ä¹°ä¸‹è¿™æœ¬é­”æ³•ä¹¦ï¼ˆ5 000æ ¹æ£’æ£’ç³–ï¼‰");
Database.addText("zh.sorceressHutBuyGrimoireSpeech", "è°¢è°¢æƒ é¡¾ï¼ä½ å¯ä»¥é€šè¿‡è¿™æœ¬é­”æ³•ä¹¦æ–½æ”¾ä¸‰ç§æ³•æœ¯ã€‚ç¥ä½ å¥½è¿ï¼");
Database.addText("zh.sorceressHutClickedGrimoire2", "è¿™æ˜¯ä¸€æœ¬é«˜é˜¶é­”æ³•ä¹¦ã€‚åœ¨æŽ¢ç´¢ä¸­éšèº«æºå¸¦å°±èƒ½æ–½æ”¾ä¸¤ç§é«˜é˜¶æ³•æœ¯ã€‚è¿™å¯æ˜¯æˆ‘äº²æ‰‹å†™å°±çš„ï¼Œå¹¶ä¸æ˜¯ä»€ä¹ˆç®€å•çš„æ´»å„¿ã€‚2ä¸‡æ ¹æ£’æ£’ç³–æ˜¯ç›¸å½“å…¬é“çš„ä»·æ ¼ã€‚");
Database.addText("zh.sorceressHutBuyGrimoire2Button", "ä¹°ä¸‹è¿™æœ¬é­”æ³•ä¹¦ï¼ˆ20 000æ ¹æ£’æ£’ç³–ï¼‰");
Database.addText("zh.sorceressHutBuyGrimoire2Speech", "è°¢è°¢æƒ é¡¾ï¼ä½ å¯ä»¥é€šè¿‡è¿™æœ¬é­”æ³•ä¹¦æ–½æ”¾ä¸¤ç§æ³•æœ¯ï¼Œè¯·å¦¥å–„åˆ©ç”¨ï¼");
Database.addText("zh.sorceressHutClickedCauldron", "è¿™æ˜¯æˆ‘çš„ç‚¼è¯é‡œã€‚æˆ‘å¯ä»¥é€šè¿‡å®ƒç‚¼åˆ¶é­”æ³•è¯å‰‚ã€‚æˆ‘å¯ä»¥æŠŠå®ƒå–ç»™ä½ ï¼Œä½†ä»·æ ¼ç›¸å½“æ˜‚è´µâ€¦â€¦ä½ å¾—èŠ±ä¸Š10ä¸‡æ ¹æ£’æ£’ç³–ã€‚");
Database.addText("zh.sorceressHutBuyCauldronButton", "ä¹°ä¸‹è¿™ä¸ªç‚¼è¯é‡œï¼ˆ100 000æ ¹æ£’æ£’ç³–ï¼‰");
Database.addText("zh.sorceressHutBuyCauldronSpeech", "éžå¸¸æ„Ÿè°¢ï¼æˆ‘å¾—åˆ°äº†10ä¸‡æ ¹æ£’æ£’ç³–ï¼æ­¤å¤–ï¼Œæˆ‘è¿˜è¦é€ç»™ä½ ä¸€æœ¬ç‚¼è¯æ‰‹å†Œã€‚å®ƒè‚¯å®šèƒ½æ´¾ä¸Šç”¨åœºã€‚");
Database.addText("zh.sorceressHutClickedHat", "ç¡®å®žï¼Œæˆ‘æœ‰ä¸€é¡¶å¾ˆæ£’çš„å¸½å­ï¼ä½†æˆ‘ä¸èƒ½æŠŠå®ƒå–ç»™ä½ ã€‚å®ƒéžå¸¸éžå¸¸éžå¸¸å®è´µã€‚è¯´çœŸçš„ï¼Œæˆ‘ä¸èƒ½å–ã€‚è¯·åˆ«å†åšæŒè¦ä¹°äº†ã€‚ä¸ï¼Œä¸ä¸ä¸ï¼Œæˆ‘ä¸è¯¥é‚£ä¹ˆè¯´ã€‚å“¦å¥½å§ï¼Œæˆ‘ä¼šå–ç»™ä½ çš„ï¼Œä½†ä»·æ ¼æ˜¯10äº¿æ ¹æ£’æ£’ç³–ã€‚ä½ å¾ˆå¯èƒ½ä¹Ÿä»˜ä¸èµ·è¿™ä¹ˆå¤šç³–å§ã€‚");
Database.addText("zh.sorceressHutBuyHatButton", "ä¹°ä¸‹è¿™é¡¶å¸½å­ï¼ˆ1 000 000 000æ ¹æ£’æ£’ç³–ï¼‰");
Database.addText("zh.sorceressHutBuyHatSpeech", "æˆ‘æˆ‘æˆ‘å¾—åˆ°äº†10äº¿æ ¹æ£’æ£’ç³–ï¼ä½†æˆ‘å†ä¹Ÿæ²¡æœ‰ä»€ä¹ˆå¸½å­äº†â€¦â€¦ä½†è¿™10äº¿æ ¹æ£’æ£’ç³–ï¼Œå“¦ï¼è¿™å¤ªå€¼äº†ã€‚");
Database.addText("zh.cauldronPreviousPageButton", "ä¸Šä¸€é¡µ");
Database.addText("zh.cauldronNextPageButton", "ä¸‹ä¸€é¡µ");
Database.addText("zh.cauldronWhatYouWantToPut", "ä½ æ‰“ç®—æŠŠä»€ä¹ˆæ”¾å…¥ç‚¼è¯é‡œ");
Database.addText("zh.cauldronWhatIsIn", "ç‚¼è¯é‡œä¸­å½“å‰å·²è¢«æ”¾å…¥");
Database.addText("zh.cauldronWhatYouCanDo", "ä½ å¯ä»¥å¯¹ç‚¼è¯é‡œè¿›è¡Œ");
Database.addText("zh.castleBigRoomComment", "å®½æ•žçš„æˆ¿é—´");
Database.addText("zh.castleARoomComment", "åŸŽå ¡æˆ¿é—´");
Database.addText("zh.castleADarkRoomComment", "å°é»‘å±‹");
Database.addText("zh.castleCastleEntranceComment", "åŸŽå ¡å…¥å£");
Database.addText("zh.castleTowerEntranceComment", "å¡”æ¥¼å…¥å£");
Database.addText("zh.castleNougatMonsterComment", "æ”»å‡»å·¨åž‹ç‰›è½§ç³–æ€ª");
Database.addText("zh.castleGuardsComment", "æ”»å‡»å®ˆå«");
Database.addText("zh.castleStairsComment", "æ¥¼æ¢¯");
Database.addText("zh.buttonBackToTheCastle", "è¿”å›žåŸŽå ¡");
Database.addText("zh.castleBigRoomHovenSpeechSad", "ä½ å¥½ï¼æˆ‘æ˜¯å¤è€çš„é¢åŒ…ç‚‰ã€‚æˆ‘æ›¾ç»çƒ¹åˆ¶è¿‡ä¸è®¡å…¶æ•°çš„ç¾Žå‘³ç³•ç‚¹ï¼Œä½†å¦‚ä»Šå·²ç»æ²¡äººå†ä½¿ç”¨æˆ‘äº†ã€‚ä¹Ÿè®¸â€¦â€¦ä¹Ÿè®¸ä½ èƒ½å¤Ÿå¸®æˆ‘ï¼Ÿè¯·å…è®¸æˆ‘ä»Žä½ é‚£é‡Œæ‹¿äº›ç³–æžœï¼åˆ«æ‹…å¿ƒï¼Œä½ ä¸ä¼šåŽæ‚”çš„ï¼ä½ å¯ä»¥ä¿¡ä»»æˆ‘ã€‚");
Database.addText("zh.castleBigRoomHovenNotEnough", "å“¦â€¦â€¦ä½ æ²¡æœ‰è¶³å¤Ÿçš„ç³–æžœï¼Œæˆ‘ä»€ä¹ˆéƒ½åšä¸äº†ã€‚æˆ‘çœŸæ˜¯æ²¡ç”¨ã€‚æˆ‘æ˜¯ä¸ªæ²¡ç”¨çš„é¢åŒ…ç‚‰ï¼Œä½ åº”è¯¥è¿™ä¹ˆç§°å‘¼æˆ‘ã€‚");
Database.addText("zh.castleBigRoomHovenSpeechMadePainAuChocolat", "è€¶ï¼æ„Ÿæ¿€ä¸å°½ï¼æˆ‘ä½¿ç”¨äº†100é¢—ç³–æžœå’Œ1å—å·§å…‹åŠ›ï¼Œå¹¶ä¸”ä¸ºä½ çƒ¹é¥ªå‡ºäº†â€¦â€¦ä¸€ä¸ªå·§å…‹åŠ›é¢åŒ…ï¼è¿™æ˜¯æˆ‘æœ€å–œæ¬¢çš„ç³•ç‚¹ï¼Œæˆ‘å¸Œæœ›ä½ ä¹Ÿä¼šå–œæ¬¢å®ƒï¼");
Database.addText("zh.castleBigRoomHovenSpeechHappy", "å˜¿ï¼å¦‚æžœä½ æƒ³è®©æˆ‘çƒ¹é¥ªå¦ä¸€ä¸ªç³•ç‚¹çš„è¯ï¼Œè¯·éšæ—¶è·Ÿæˆ‘è¯´ï¼æˆ‘éžå¸¸ä¹æ„å¸®ä½ çš„å¿™ã€‚");
Database.addText("zh.castleBigRoomHovenSpeechHappyNotEnough", "å“¦ï¼Œä½ æ²¡æœ‰è¶³å¤Ÿçš„ç³–æžœï¼Œå¤ªé—æ†¾äº†ã€‚æˆ‘éœ€è¦100é¢—ç³–æžœå’Œ1å—å·§å…‹åŠ›ã€‚è¯·åœ¨å¾—åˆ°é‚£äº›ä¹‹åŽå›žæ¥æ‰¾æˆ‘ï¼");
Database.addText("zh.castleBigRoomHovenLetHovenTakeButton", "è®©é¢åŒ…ç‚‰æ‹¿èµ°å®ƒæ‰€éœ€è¦çš„ç³–æžœ");
Database.addText("zh.castleBigRoomHovenThanks", "è°¢è°¢ä½ ï¼Œé¢åŒ…ç‚‰ï¼");
Database.addText("zh.dragonStopTickling", "å˜¿ï¼Œè¯´çš„å°±æ˜¯ä½ ï¼è¯·åˆ«å†ç»™æˆ‘æŒ ç—’äº†ã€‚");
Database.addText("zh.dragonStopTicklingButton", "å•Šå“¦ï¼ŒæŠ±æ­‰ï¼Œæˆ‘è¿˜ä»¥ä¸ºæˆ‘æ˜¯åœ¨æ”»å‡»ä½ å‘¢");
Database.addText("zh.dragonTalking", "æˆ‘æ˜¯ä¸€åªå·¨é¾™ï¼Œè€Œè¿™æ˜¯æˆ‘çš„åŸŽå ¡ã€‚ä½ æ—¢ç„¶èƒ½å¤Ÿè¿›æ¥ï¼Œè‚¯å®šéžå¸¸å‹‡æ•¢â€¦â€¦æˆ‘å¾ˆé«˜å…´èƒ½å¤Ÿå¸®ä¸Šä½ è¿™æ ·çš„å‹‡å£«ã€‚ä½ æ‰€å¯»æ±‚çš„æ˜¯ä»€ä¹ˆï¼Ÿ");
Database.addText("zh.dragonTalkingChallengeButton", "æŒ‘æˆ˜");
Database.addText("zh.dragonTalkingFameButton", "åå£°");
Database.addText("zh.dragonTalkingCandiesButton", "ç³–æžœ");
Database.addText("zh.dragonTalkingChallengeSpeech", "å“¦ï¼Œè¿™ä¹ˆè¯´ä½ æƒ³è¦çš„æ˜¯æŒ‘æˆ˜ï¼Ÿæˆ‘è®¤ä¸ºä½ åº”è¯¥äº²è‡ªå‰å¾€åœ°ç‹±ä¸€è¶Ÿï¼Œé‚£é‡Œçš„é­”é¬¼æ˜¯ä¸ªç›¸å½“ä¸¥å³»çš„æŒ‘æˆ˜ã€‚è·³åˆ°æˆ‘çš„èƒŒä¸Šæ¥ï¼Œæˆ‘ä¼šæŠŠä½ å¸¦åˆ°é‚£å„¿åŽ»çš„ï¼");
Database.addText("zh.dragonTalkingFameSpeech", "æˆåçš„æœ€ä½³æ–¹å¼å°±æ˜¯åŽ»é¢å¯¹å¼€å‘è€…æœ¬äººã€‚æˆ‘çŸ¥é“ä»–ä½åœ¨å“ªå„¿ï¼Œè€Œä¸”å¯ä»¥æŠŠä½ å¸¦åˆ°é‚£å„¿åŽ»ã€‚ä½†ä½ è¦åšå¥½å‡†å¤‡ï¼Œè¿™å¯ä¸æ˜¯ä¸€åœºç®€å•çš„æˆ˜æ–—ã€‚");
Database.addText("zh.dragonTalkingCandiesSpeech", "è¯´åˆ°åº•ï¼Œæˆ‘ä»¬æƒ³è¦çš„éƒ½æ˜¯ç³–æžœï¼Œä¸æ˜¯å—ï¼Ÿæˆ‘è®¤ä¸ºæˆ‘çš„ä¸€ä½è€æœ‹å‹èƒ½å¤Ÿå¸®ä¸Šä½ çš„å¿™ã€‚ä½ åº”è¯¥å¾ˆå®¹æ˜“è®¤å‡ºä»–æ¥ï¼Œä»–åªæœ‰ä¸€åªçœ¼ç›ã€‚åªè¦å‘Šè¯‰ä»–ä½ è®¤è¯†æˆ‘å°±è¡Œäº†ã€‚");
Database.addText("zh.dragonTalkingChallengeAnswer", "é‚£å°±å‡ºå‘å§ï¼");
Database.addText("zh.dragonTalkingFameAnswer", "æˆ‘å·²ç»å‡†å¤‡å¥½äº†ã€‚");
Database.addText("zh.dragonTalkingCandiesAnswer", "å¥½å§ï¼Œå¤šè°¢ï¼");
Database.addText("zh.buttonBackToCastle", "è¿”å›žåŸŽå ¡");
Database.addText("zh.talkingCandySpeechNoBox", "å˜¿ï¼æˆ‘æ˜¯ä¼šè¯´è¯çš„ç³–æžœã€‚ä½ å·²ç»å¿«è¦æ‰“é€šè¿™ä¸ªæ¸¸æˆäº†ã€‚çŽ°åœ¨ä½ åªéœ€è¦æ‰¾åˆ°candy boxã€‚å®ƒå°±åœ¨æ‘åº„å¤–çš„æˆ¿å­é‡Œã€‚è¿™å°±æ˜¯æœ€åŽä¸€æ­¥äº†ï¼");
Database.addText("zh.talkingCandySpeech1", "å˜¿ï¼æˆ‘æ˜¯ä¼šè¯´è¯çš„ç³–æžœã€‚ç¥è´ºä½ ï¼Œä½ å·²ç»é€šå…³äº†æ•´ä¸ªæ¸¸æˆï¼æˆ‘ä¼šä¸ºä½ æ‰“å¼€candy boxï¼Œè¿™å°±æ˜¯ä½ å¾—åˆ°çš„å¥–åŠ±ã€‚çŽ°åœ¨éœ€è¦æˆ‘æ‰“å¼€å®ƒå—ï¼Ÿ");
Database.addText("zh.talkingCandySpeech2", "å¼€å¯ï¼çŽ°åœ¨ä½ å¯ä»¥è¿›å…¥å…¶ä¸­äº†ã€‚å¸Œæœ›ä½ å–œæ¬¢è¿™æ¬¾æ¸¸æˆ ï¼šï¼‰");
Database.addText("zh.talkingCandyButton", "å½“ç„¶ï¼ï¼");
Database.addText("zh.lighthousePuzzleResetButton", "é‡ç½®è°œé¢˜");
Database.addText("cz.mapVillageComment", "Vesnice");
Database.addText("cz.mapFortressComment", "PouÅ¡tnÃ­ chrÃ¡m");
Database.addText("cz.mapATreeComment", "Strom");
Database.addText("cz.mapTheDesertComment", "PouÅ¡Å¥");
Database.addText("cz.mapWishingWellComment", "Studna");
Database.addText("cz.mapLonelyHouseComment", "OsamÄ›lÃ½ barÃ¡k");
Database.addText("cz.mapForestComment", "Les");
Database.addText("cz.mapCastleEntranceComment", "Vstup do hradu");
Database.addText("cz.mapCastleComment", "Hrad");
Database.addText("cz.mapDragonComment", "Drak");
Database.addText("cz.candyBoxEatCandiesButton", "SnÃ­st vÅ¡echny bonbÃ³nky");
Database.addText("cz.candyBoxThrowCandiesButton", "Hodit 10 bonbÃ³nÅ¯ na zem");
Database.addText("cz.mapVillageAHouseComment", "DÅ¯m");
Database.addText("cz.mapVillageForgeComment", "KovÃ¡rna");
Database.addText("cz.buttonBackToTheMap", "ZpÄ›t na mapu");
Database.addText("cz.mapSorceressHutComment", "PernÃ­kovÃ¡ chaloupka");
Database.addText("cz.buttonBackToTheVillage", "ZpÃ¡tky do vesnice");
Database.addText("cz.mapATreeIntroductionSpeech", "Ahoj, jÃ¡ jsem veverka. VÃ­m, Å¾e milujeÅ¡ sladkosti, a mÅ¯Å¾u ti jich dÃ¡t spoustu! Ale v tomhle lese se cÃ­tÃ­m straÅ¡nÄ› sama...");
Database.addText("cz.mapATreeIntroductionButton", "MÅ¯Å¾u ti pomoct?");
Database.addText("cz.mapATreeFirstQuestion", "Budu ti dÃ¡vat hÃ¡danky. Pokud odpovÃ­Å¡ sprÃ¡vnÄ›, dostaneÅ¡ slaÄouÄkou odmÄ›nu! PrvnÃ­ otÃ¡zka: MÃ¡Å¡ opravdu, ale opravdu rÃ¡d bonbÃ³nky? (OdpovÃ­dej v angliÄtinÄ›)");
Database.addText("cz.mapATreeSecondQuestion", "SprÃ¡vnÄ›! Tady mÃ¡Å¡ 20 bonbÃ³nÅ¯. A teÄ schvÃ¡lnÄ›, jak pokraÄuje sÃ©rie pÃ­smen: S, E, I, D, N, A?");
Database.addText("cz.mapATreeThirdQuestion", "C jako CukrovÃ­! Tady mÃ¡Å¡ 100 bonbÃ³nÅ¯. DalÅ¡Ã­ otÃ¡zka: Kolik bonbÃ³nÅ¯ mÃ¡ nejbonbÃ³novatÄ›jÅ¡Ã­ ÄlovÄ›k na svÄ›tÄ›?");
Database.addText("cz.mapATreeFourthQuestion", "Ano! Tady mÃ¡Å¡ 500 bonbÃ³nÅ¯! DalÅ¡Ã­ odmÄ›na bude jeÅ¡tÄ› zajÃ­mavÄ›jÅ¡Ã­. A teÄ hÃ¡danka: Ve starobylÃ©m lese roste velmi starÃ½ strom, na kterÃ©m Å¾ijÃ­ nejchytÅ™ejÅ¡Ã­ zvÃ­Å™ata na svÄ›tÄ›. Å˜Ã­kÃ¡ se, Å¾e onen strom mÃ¡ 60 koÅ™enÅ¯, 360 vÄ›tvÃ­ a 2160 listÅ¯. Kolik mÃ¡ jizev na kmeni?");
Database.addText("cz.mapATreeFifthQuestion", "Gratuluji! Ano, mluvila jsem o svÃ©m stromÄ›. Tady mÃ¡Å¡ 3 lÃ­zÃ¡tka. Dobrou chuÅ¥! DalÅ¡Ã­ hÃ¡danka, poslouchej pozornÄ›: Za ÃºplÅˆku hodÃ­m Å¾lutÃ½ klobouk do rudÃ©ho moÅ™e. Co se stane se Å¾lutÃ½m kloboukem?");
Database.addText("cz.mapATreeTicTacToeIntro", "SprÃ¡vnÄ›! To nebylo tak tÄ›Å¾kÃ©, Å¾e? Tady mÃ¡Å¡ tÅ™i tabulky ÄokolÃ¡dy. Ale teÄ trochu zmÄ›na. Zahrajeme si hru, co Å™Ã­kÃ¡Å¡?");
Database.addText("cz.mapATreeTicTacToeIntroButton", "JasnÄ›, proÄ ne!");
Database.addText("cz.mapATreeTicTacToeLetsPlay", "Zahrajeme si piÅ¡kvorky. HrÃ¡t budeme na mÅ™Ã­Å¾ce o velikosti 3x3. Ty si vezmeÅ¡ kÅ™Ã­Å¾ky, jÃ¡ koleÄka. Budeme se stÅ™Ã­dat v tazÃ­ch a cÃ­lem je mÃ­t tÅ™i znaÄky v Å™adÄ›. NechÃ¡m tÄ› tÃ¡hnout prvnÃ­ho!");
Database.addText("cz.mapATreeTicTacToeNobodyWins", "Tak jsme zaplnili celou hernÃ­ plochu a nikomu z nÃ¡s se nepovedlo vyhrÃ¡t! ChceÅ¡ to zkusit znova?");
Database.addText("cz.mapATreeTicTacToeYouLose", "MÃ¡m tÅ™i, vyhrÃ¡la jsem! ChceÅ¡ to zkusit znova?");
Database.addText("cz.mapATreeTicTacToeTryAgainButton", "Ano, chci!");
Database.addText("cz.mapATreeTicTacToeYouWin", "Ups, takovÃ½ tah jsem teda neÄekala. Ale mÃ¡Å¡ tÅ™i v Å™adÄ›, to nemÅ¯Å¾u popÅ™Ã­t. VyhrÃ¡l jsi! Tady mÃ¡Å¡ odmÄ›nu; OtevÅ™e ti dveÅ™e od jednoho z domÅ¯ ve vesnici.");
Database.addText("cz.mapATreeTicTacToeAnymoreSweet", "DÄ›kuji, veverko! ZnÃ¡Å¡ jeÅ¡tÄ› nÄ›jakÃ© hÃ¡danky?");
Database.addText("cz.mapATreeNoMoreChallenge", "BohuÅ¾el ne, uÅ¾ jsem vyÄerpala celou svoji zÃ¡sobu... Ale byla s tebou sranda, dÄ›kuju moc!");
Database.addText("cz.buttonExitQuestKeeping", "UkonÄit vÃ½pravu (a nechat si, cos naÅ¡el)");
Database.addText("cz.buttonExitQuestNoKeeping", "UkonÄit vÃ½pravu (ale nic nedostaneÅ¡)");
Database.addText("cz.buttonExitQuestNoKeepingBecauseLose", "UkonÄit vÃ½pravu (umÅ™el jsi, takÅ¾e nic nedostaneÅ¡)");
Database.addText("cz.mapVillageLockedHouseComment", "ZamÄenÃ½ dÅ¯m");
Database.addText("cz.mapVillageForgeIntroductionSpeech", "Ahoj! JÃ¡ jsem kovÃ¡Å™. MÅ¯Å¾u ti prodat vÅ¡emoÅ¾nÃ© druhy zbranÃ­ a vÃ½zbroje.");
Database.addText("cz.mapVillageForgeIntroductionSpeechNoMoreToSell", "Ahoj! JÃ¡ jsem kovÃ¡Å™. BohuÅ¾el uÅ¾ nemÃ¡m nic na prodej. Ale kdyÅ¾ se vrÃ¡tÃ­Å¡ pozdÄ›ji, moÅ¾nÃ¡ za tu dobu nÄ›co vyrobÃ­m.");
Database.addText("cz.mapVillageFifthHouseNoWeaponSpeech", "Ahoj. MÅ¯j sklep je plnÃ½ krys, potÅ™ebuju se jich zbavit... Kdyby tu tak byl nÄ›kdo, kdo by se o to mohl postarat...");
Database.addText("cz.mapVillageFifthHouseWeaponSpeech", "Hej, ty! VidÃ­m, Å¾e u sebe mÃ¡Å¡ zbraÅˆ! Mohl bys mÄ› zbavit krys ve sklepÄ›? OdmÄ›nÃ­m se ti!");
Database.addText("cz.mapVillageFifthHouseAgree", "Tak jdeme na to!");
Database.addText("cz.mapVillageFifthHouseCellarDone", "DÄ›kuju, Å¾e jsi mÄ› zbavil tÄ›ch krys! Za odmÄ›nu ti dÃ¡m nÄ›co velmi cennÃ©ho: Mapu svÄ›ta. MyslÃ­m, Å¾e ji vyuÅ¾ijeÅ¡ vÃ­c, neÅ¾ jÃ¡.");
Database.addText("cz.mapVillageTheShopComment", "Obchod");
Database.addText("cz.mapBridgeComment", "Most");
Database.addText("cz.mapFarmComment", "Farma na lÃ­zÃ¡tka");
Database.addText("cz.mapCaveEntranceComment", "Vstup do jeskynÄ›");
Database.addText("cz.mapLighthouseComment", "MajÃ¡k");
Database.addText("cz.mapPierComment", "Molo");
Database.addText("cz.mapTheHoleComment", "DÃ­ra v zemi");
Database.addText("cz.candyBoxRequestStatusBarUnlocked", "PoÅ¾Ã¡dat vÃ½vojÃ¡Å™e o novou funkci (30 bonbÃ³nÅ¯)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedCfg", "PoÅ¾Ã¡dat o dalÅ¡Ã­ (5 bonbÃ³nÅ¯)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedSave", "PoÅ¾Ã¡dat jeÅ¡tÄ› o dalÅ¡Ã­ (5 bonbÃ³nÅ¯)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedHealthBar", "PoÅ¾Ã¡dat o nÄ›co zajÃ­mavÄ›jÅ¡Ã­ho (5 bonbÃ³nÅ¯)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedMap", "PoslednÃ­ Å¾Ã¡dost! Snad to tentokrÃ¡t bude stÃ¡t za to. (10 bonbÃ³nÅ¯)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedComment", "Odemknul jsi stavovÃ½ Å™Ã¡dek! (NahoÅ™e)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedCfgComment1", "TeÄ mÃ¡Å¡ pÅ™Ã­stup k nastavenÃ­.");
Database.addText("cz.candyBoxRequestStatusBarUnlockedCfgComment2", "Jestli chceÅ¡, mÅ¯Å¾eÅ¡ zmÄ›nit jazyk.");
Database.addText("cz.candyBoxRequestStatusBarUnlockedSaveComment", "A teÄ dokonce mÅ¯Å¾eÅ¡ uloÅ¾it!");
Database.addText("cz.candyBoxRequestStatusBarUnlockedHealthBarComment", "Tady mÃ¡Å¡ 100 bodÅ¯ zdravÃ­. Budou se ti hodit.");
Database.addText("cz.cfgChooseLanguage", "VÃ½bÄ›r jazyka:");
Database.addText("cz.cfgInvertColors", "Invertovat barvy?");
Database.addText("cz.gridItemMainMapName", "Mapa");
Database.addText("cz.gridItemMainMapDescription", "Mapa svÄ›ta");
Database.addText("cz.gridItemPogoStickName", "SkÃ¡kacÃ­ tyÄ");
Database.addText("cz.gridItemPogoStickDescription", "Tahle tyÄ ti umoÅ¾nÃ­ skÃ¡kat bÄ›hem vÃ½prav!");
Database.addText("cz.gridItemTimeRingName", "Prsten Äasu");
Database.addText("cz.gridItemTimeRingDescription", "DÃ­ky tomuhle mÅ¯Å¾eÅ¡ bÄ›hem vÃ½prav zpomalit Äas. Pokud je toho na tebe moc, pouÅ¾ij prsten Äasu!");
Database.addText("cz.gridItemThirdHouseKeyName", "KlÃ­Ä od tÅ™etÃ­ho domu");
Database.addText("cz.gridItemThirdHouseKeyDescription", "Tento klÃ­Ä ti umoÅ¾nÃ­ vstoupit do tÅ™etÃ­ho domu ve vesnici. Jak neÄekanÃ©!");
Database.addText("cz.gridItemFeatherName", "SupÃ­ pÃ­rko");
Database.addText("cz.gridItemFeatherDescription", "Tohle kouzelnÃ© pÃ­rko ti umoÅ¾nÃ­ skÃ¡kat vÃ½Å¡, neÅ¾ normÃ¡lnÄ›.");
Database.addText("cz.gridItemFeatherDescriptionNoPogoStick", "NevÃ­Å¡ proÄ, ale mÃ¡Å¡ pocit, Å¾e by se ti tohle pÃ­rko k nÄ›Äemu hodilo, kdybys mÄ›l skÃ¡kacÃ­ tyÄ...");
Database.addText("cz.gridItemSpongeName", "KouzelnÃ¡ houba");
Database.addText("cz.gridItemSpongeDescription", "DÃ­ky tomuhle se mÅ¯Å¾eÅ¡ zmÃ¡Äknout jako houba, takÅ¾e budeÅ¡ menÅ¡Ã­.");
Database.addText("cz.gridItemFortressKeyName", "KlÃ­Ä od pouÅ¡tnÃ­ho chrÃ¡mu");
Database.addText("cz.gridItemFortressKeyDescription", "OdemykÃ¡ brÃ¡ny starobylÃ© pevnosti na severnÃ­m kraji pouÅ¡tÄ›. Kdo vÃ­, co tam najdeÅ¡?");
Database.addText("cz.gridItemHeartPendantName", "SrdcovÃ½ nÃ¡hrdelnÃ­k");
Database.addText("cz.gridItemHeartPendantDescription", "Tento nÃ¡hrdelnÃ­k zvÃ½Å¡Ã­ tvÃ© zdravÃ­, pokud ho nosÃ­Å¡ na krku.");
Database.addText("cz.gridItemHeartPlugName", "SrdeÄnÃ­ Äip");
Database.addText("cz.gridItemHeartPlugDescription", "Tento Äip byl vyroben ze Å¾eleza, pavouÄÃ­ch nohou a speciÃ¡lnÃ­ zÃ¡hadnÃ© tekutiny zapeÄetÄ›nÃ© uvnitÅ™. TvÃ© zdravÃ­ je zvÃ½Å¡enÃ© o 20 procent!");
Database.addText("cz.gridItemBeginnersGrimoireName", "Kniha kouzel pro zaÄÃ¡teÄnÃ­ky");
Database.addText("cz.gridItemBeginnersGrimoireDescription", "Tato kniha tÄ› nauÄÃ­ tÅ™i pomÄ›rnÄ› jednoduchÃ¡ kouzla. PrvnÃ­ je kyselÃ½ dÃ©Å¡Å¥, kterÃ½ ti umoÅ¾nÃ­ vyvolat obrovskÃ© mnoÅ¾stvÃ­ kyselinovÃ½ch kapek. DruhÃ© kouzlo je ohnivÃ¡ koule, kterou mÅ¯Å¾eÅ¡ vypustit pÅ™ed sebe a vÃ¡Å¾nÄ› zranit jednoho nepÅ™Ã­tele. A tÅ™etÃ­ je kouzlo teleportace. DÃ¡vej pozor, nedÃ¡ se odhadnout, kde skonÄÃ­Å¡.");
Database.addText("cz.gridItemAdvancedGrimoireName", "Kniha kouzel pro pokroÄilÃ©");
Database.addText("cz.gridItemAdvancedGrimoireDescription", "Tato kniha tÄ› nauÄÃ­ dvÄ› pokroÄilÃ¡ kouzla: ZniÄenÃ­ magie a ostnatÃ½ Å¡tÃ­t. PrvnÃ­ kouzlo vymaÅ¾e ostatnÃ­ kouzla, aÅ¥ uÅ¾ jsi je vyÄaroval ty, nebo tvÃ­ nepÅ™Ã¡telÃ©. DruhÃ© kouzlo kolem tebe vyvolÃ¡ Å¡tÃ­t z lÃ©tajÃ­cÃ­ch ostnÅ¯, kterÃ© ublÃ­Å¾Ã­ kaÅ¾dÃ©mu, kdo se k tobÄ› pÅ™iblÃ­Å¾Ã­.");
Database.addText("cz.gridItemBlackMagicGrimoireName", "Kniha ÄernÃ© magie");
Database.addText("cz.gridItemBlackMagicGrimoireDescription", "V jeskyni jsi naÅ¡el knihu ÄernÃ© magie. Bylo hodnÄ› tÄ›Å¾kÃ© ji zÃ­skat, a to z dobrÃ©ho dÅ¯vodu. Obsahuje totiÅ¾ dvÄ› nebezpeÄnÃ¡ temnÃ¡ kouzla. PrvnÃ­ pÅ™ed tebou vytvoÅ™Ã­ obÅ™Ã­ zeÄ z obsidiÃ¡novÃ½ch kostek, coÅ¾ mÅ¯Å¾e bÃ½t uÅ¾iteÄnÃ© pro zpomalenÃ­ nepÅ™Ã¡tel. DruhÃ© vyvolÃ¡ dÃ©mony, kteÅ™Ã­ se pokusÃ­ zabÃ­t vÅ¡echno, co se hÃ½be (vÄetnÄ› tebe). BuÄ s nÃ­m opatrnÃ½.");
Database.addText("cz.gridItemUnicornHornName", "Roh jednoroÅ¾ce");
Database.addText("cz.gridItemUnicornHornDescription", "Tento kouzelnÃ½ roh ti pomÅ¯Å¾e svou lÃ©Äivou magiÃ­. Ten jednoroÅ¾ec se prÃ½ jmenoval Charlie.");
Database.addText("cz.gridItemXinopherydonClawName", "DrÃ¡p xinopherydona");
Database.addText("cz.gridItemXinopherydonClawDescription", "Tento hrozivÃ½ drÃ¡p patÅ™il xinopherydonovi, prastarÃ©mu dvouhlavÃ©mu zvÃ­Å™eti, kterÃ© vÅ¡ichni mÄ›li za vyhynulÃ©. TvÃ¡ zbraÅˆ bude dvakrÃ¡t niÄivÄ›jÅ¡Ã­.");
Database.addText("cz.gridItemPitchforkName", "Vidle");
Database.addText("cz.gridItemPitchforkDescription", "Tyto speciÃ¡lnÃ­ vidle ti umoÅ¾nÃ­ prohrÃ¡bnout hlÃ­nu, aniÅ¾ bys naruÅ¡il podzemnÃ­ ekosystÃ©my. Produkce lÃ­zÃ¡tek na tvÃ© farmÄ› je tÅ™ikrÃ¡t vÄ›tÅ¡Ã­.");
Database.addText("cz.gridItemShellPowderName", "PrÃ¡Å¡ek ze Å¡keble");
Database.addText("cz.gridItemShellPowderDescription", "Tento prÃ¡Å¡ek je Äasto pouÅ¾Ã­vÃ¡n lÃ­zÃ¡tkovÃ½mi farmÃ¡Å™i jako hnojivo. Produkce tvÃ© lÃ­zÃ¡tkovÃ© farmy se dÃ­ky nÄ›mu ztrojnÃ¡sobÃ­!");
Database.addText("cz.gridItemPName", "KÃ¡men P");
Database.addText("cz.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("cz.gridItemLName", "KÃ¡men L");
Database.addText("cz.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("cz.gridItemAName", "KÃ¡men A");
Database.addText("cz.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("cz.gridItemYName", "KÃ¡men Y");
Database.addText("cz.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("cz.gridItemRedSharkFinName", "ÄŒervenÃ¡ Å¾raloÄÃ­ ploutev");
Database.addText("cz.gridItemRedSharkFinDescription", "Tato kouzelnÃ¡ ploutev velmi posÃ­lÃ­ ohnivÃ© koule, kterÃ© sesÃ­lÃ¡Å¡. KoneÄnÄ› to kouzlo k nÄ›Äemu bude.");
Database.addText("cz.gridItemGreenSharkFinName", "ZelenÃ¡ Å¾raloÄÃ­ ploutev");
Database.addText("cz.gridItemGreenSharkFinDescription", "Tato kouzelnÃ¡ ploutev seÅ¡le na tvou farmu poÅ¾ehnanÃ­ samotnÃ© Matky PÅ™Ã­rody! TvÃ¡ produkce lÃ­zÃ¡tek je pÄ›tkrÃ¡t vÄ›tÅ¡Ã­.");
Database.addText("cz.gridItemPurpleSharkFinName", "FialovÃ¡ Å¾raloÄÃ­ ploutev");
Database.addText("cz.gridItemPurpleSharkFinDescription", "Tato kouzelnÃ¡ ploutev ti umoÅ¾nÃ­ sesÃ­lat novÃ© temnÃ© kouzlo, kterÃ© mÅ¯Å¾eÅ¡ pouÅ¾Ã­t pouze jedenkrÃ¡t za vÃ½pravu. BuÄ s nÃ­m sakra opatrnÃ½!");
Database.addText("cz.gridItemTalkingCandyName", "MluvÃ­cÃ­ bonbÃ³nek");
Database.addText("cz.gridItemTalkingCandyDescription", "Tento bonbÃ³nek se objevil potÃ©, co jsi na vrchol vÄ›Å¾e donesl vÅ¡echny ÄtyÅ™i kameny. MoÅ¾nÃ¡ ti pomÅ¯Å¾e otevÅ™Ã­t truhlu se sladkostmi...");
Database.addText("cz.inventorySpecialNothingEqItem", "Nic");
Database.addText("cz.eqItemWeaponWoodenSwordName", "DÅ™evÄ›nÃ½ meÄ");
Database.addText("cz.eqItemWeaponWoodenSwordDescription", "JednoduchÃ½ meÄ vyrobenÃ½ ze dÅ™eva");
Database.addText("cz.eqItemWeaponIronAxeName", "Å½eleznÃ¡ sekera");
Database.addText("cz.eqItemWeaponIronAxeDescription", "ProstÃ¡ Å¾eleznÃ¡ sekera, je ale dobÅ™e nabrouÅ¡enÃ¡. Je samozÅ™ejmÄ› ÃºÄinnÄ›jÅ¡Ã­, neÅ¾ dÅ™evÄ›nÃ½ meÄ.");
Database.addText("cz.eqItemWeaponPolishedSilverSwordName", "NaleÅ¡tÄ›nÃ½ stÅ™Ã­brnÃ½ meÄ");
Database.addText("cz.eqItemWeaponPolishedSilverSwordDescription", "Velmi mocnÃ½ meÄ. Na Äepeli mÃ¡ vÃ½hruÅ¾nÄ› vypadajÃ­cÃ­ ostny.");
Database.addText("cz.eqItemWeaponTrollBludgeonName", "TrollÅ¯v kyj");
Database.addText("cz.eqItemWeaponTrollBludgeonDescription", "Tenhle kyj jsi sebral z rukou trolla, kterÃ½ hlÃ­dal most. Je to pomalÃ¡ zbraÅˆ, ale dÃ¡vÃ¡ sluÅ¡nÃ© rÃ¡ny.");
Database.addText("cz.eqItemWeaponTribalSpearName", "DivoÅ¡skÃ© kopÃ­");
Database.addText("cz.eqItemWeaponTribalSpearDescription", "Tohle kopÃ­ jsi sebral mrtvole domorodÃ©ho vÃ¡leÄnÃ­ka, ztracenÃ©ho v hlubinÃ¡ch obÅ™Ã­ dÃ­ry. Je to skvÄ›lÃ¡ zbraÅˆ, kdyÅ¾ si na ni zvykneÅ¡.");
Database.addText("cz.eqItemWeaponSummoningTribalSpearName", "VyvolÃ¡vaÄovo divoÅ¡skÃ© kopÃ­");
Database.addText("cz.eqItemWeaponSummoningTribalSpearDescription", "Tohle kopÃ­ bylo oÄarovÃ¡no. Je o trochu mocnÄ›jÅ¡Ã­, a taky v pravidelnÃ½ch intervalech pÅ™ivolÃ¡vÃ¡ domorodÃ© vÃ¡leÄnÃ­ky, kteÅ™Ã­ ti pomÅ¯Å¾ou na vÃ½pravÃ¡ch.");
Database.addText("cz.eqItemWeaponMonkeyWizardStaffName", "HÅ¯l opiÄÃ­ho mÃ¡ga");
Database.addText("cz.eqItemWeaponMonkeyWizardStaffDescription", "Tato hÅ¯l patÅ™ila nahatÃ©mu opiÄÃ­mu mÃ¡govi. UmÃ­ sama kouzlit, vyrÃ¡bÃ­ navÃ¡dÄ›nÃ© fialovÃ© vÃ½boje.");
Database.addText("cz.eqItemWeaponEnchantedMonkeyWizardStaffName", "OÄarovanÃ¡ hÅ¯l opiÄÃ­ho mÃ¡ga");
Database.addText("cz.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "S touto holÃ­ mÅ¯Å¾eÅ¡ mÃ¡vat o nÄ›co rychleji, a taky zvlÃ¡dne vyÄarovat daleko vÃ­ce vÃ½bojÅ¯.");
Database.addText("cz.eqItemWeaponGiantSpoonName", "ObÅ™Ã­ lÅ¾Ã­ce");
Database.addText("cz.eqItemWeaponGiantSpoonDescription", "Tuto obÅ™Ã­ lÅ¾Ã­ci jsi naÅ¡el v obÅ™Ã­m ÄajnÃ­ku v pouÅ¡tnÃ­m chrÃ¡mu. NenÃ­ jistÃ©, jestli ji nÄ›kdo vÅ¯bec nÄ›kdy pouÅ¾il jako lÅ¾Ã­ci, ale jestli jo, tak musel bÃ½t zatracenÄ› velkÃ½. NÄ›koho takovÃ©ho bys nechtÄ›l potkat.");
Database.addText("cz.eqItemWeaponGiantSpoonOfDoomName", "ObÅ™Ã­ LÅ¾Ã­ce ZkÃ¡zy");
Database.addText("cz.eqItemWeaponGiantSpoonOfDoomDescription", "Tato obÅ™Ã­ lÅ¾Ã­ce je jeÅ¡tÄ› mocnÄ›jÅ¡Ã­, neÅ¾ obyÄejnÃ¡ obÅ™Ã­ lÅ¾Ã­ce, kterou jde najÃ­t napÅ™Ã­klad v obÅ™Ã­m ÄajnÃ­ku. Je ale docela pomalÃ¡.");
Database.addText("cz.eqItemWeaponScytheName", "Kosa");
Database.addText("cz.eqItemWeaponScytheDescription", "Å˜Ã­kÃ¡ se, Å¾e tato kosa patÅ™ila samotnÃ©mu SmrÅ¥ovi. DÃ¡ se s nÃ­ sekat extrÃ©mnÄ› rychle.");
Database.addText("cz.eqItemHatMerchantHatName", "ObchodnÃ­kÅ¯v klobouk");
Database.addText("cz.eqItemHatMerchantHatDescription", "Tento klobouk jsi koupil od obchodnÃ­ka se sladkostmi. ObchodnÃ­k miluje bonbÃ³nky. Pokud mÃ¡Å¡ na sobÄ› tento klobouk, mnoÅ¾stvÃ­ bonbÃ³nÅ¯ nalezenÃ½ch na vÃ½pravÃ¡ch bude vynÃ¡sobeno sedmi!");
Database.addText("cz.eqItemHatSorceressHatName", "Å piÄatÃ½ klobouk");
Database.addText("cz.eqItemHatSorceressHatDescription", "Tento klobouk pÅ¯vodnÄ› patÅ™il ÄarodÄ›jce. VÃ½raznÄ› posÃ­lÃ­ tvÃ¡ kouzla a lektvary.");
Database.addText("cz.eqItemHatOctopusKingCrownName", "Koruna krÃ¡le chobotnic");
Database.addText("cz.eqItemHatOctopusKingCrownDescription", "PÅ™i noÅ¡enÃ­ tÃ©to koruny jsi daleko sebejistÄ›jÅ¡Ã­. PÅ™i vÃ½pravÃ¡ch ti to moc nepomÅ¯Å¾e, ale sebedÅ¯vÄ›ra je pÅ™ece dÅ¯leÅ¾itÃ¡!");
Database.addText("cz.eqItemHatOctopusKingCrownWithJaspersName", "Koruna krÃ¡le chobotnic, zdobenÃ¡ jaspisy");
Database.addText("cz.eqItemHatOctopusKingCrownWithJaspersDescription", "Tato oÄarovanÃ¡ koruna je vyrobena ze zlata a ÄervenÃ½ch jaspisÅ¯. PÅ™i vÃ½pravÃ¡ch bude kolem sebe metat mocnÃ© ohnivÃ© koule. A navÃ­c se nÃ¡dhernÄ› leskne!");
Database.addText("cz.eqItemHatOctopusKingCrownWithObsidianName", "Koruna krÃ¡le chobotnic, zdobenÃ¡ obsidiÃ¡nem");
Database.addText("cz.eqItemHatOctopusKingCrownWithObsidianDescription", "Tato oÄarovanÃ¡ koruna je vyrobena ze zlata a obsidiÃ¡nu. Je to pÅ™Ã­mo skvostnÃ½ umÄ›leckÃ½ vÃ½tvor. PÅ™i vÃ½pravÃ¡ch bude pravidelnÄ› vyvolÃ¡vat KrÃ¡le chobotnic, kterÃ½ ti pomÅ¯Å¾e v boji.");
Database.addText("cz.eqItemGlovesLeatherGlovesName", "KoÅ¾enÃ© rukavice");
Database.addText("cz.eqItemGlovesLeatherGlovesDescription", "Tyhle rukavice v podstatÄ› nic nedÄ›lajÃ­. Ale aspoÅˆ jsou pohodlnÃ© a mÄ›kkÃ©!");
Database.addText("cz.eqItemGlovesRedEnchantedGlovesName", "ÄŒervenÃ© oÄarovanÃ© rukavice");
Database.addText("cz.eqItemGlovesRedEnchantedGlovesDescription", "Tyto oÄarovanÃ© rukavice rudÄ› svÃ­tÃ­ ve tmÄ›. PÅ™i vÃ½pravÃ¡ch budou nÃ¡hodnÄ› vypouÅ¡tÄ›t malÃ© ohnivÃ© koule, coÅ¾ se mÅ¯Å¾e hodit, pokud se na tebe sÃ¡pe nÄ›jakÃ¡ obluda.");
Database.addText("cz.eqItemGlovesPinkEnchantedGlovesName", "RÅ¯Å¾ovÃ© oÄarovanÃ© rukavice");
Database.addText("cz.eqItemGlovesPinkEnchantedGlovesDescription", "Tyto oÄarovanÃ© rukavice nechajÃ­ rÅ¯Å¾ovou stopu na Äemkoliv, Äeho se dotkneÅ¡. Na vÃ½pravÃ¡ch tÄ› budou prÅ¯bÄ›Å¾nÄ› uzdravovat.");
Database.addText("cz.eqItemBootsRocketBootsName", "RaketovÃ© boty");
Database.addText("cz.eqItemBootsRocketBootsDescription", "Tyto ÃºÅ¾asnÃ© raketovÃ© boty ti umoÅ¾nÃ­ skÃ¡kat ve vzduchu, takÅ¾e v podstatÄ› lÃ­tÃ¡Å¡!");
Database.addText("cz.eqItemBootsLeatherBootsName", "KoÅ¾enÃ© boty");
Database.addText("cz.eqItemBootsLeatherBootsDescription", "JednoduchÃ© koÅ¾enÃ© boty. NenÃ­ na nich nic zvlÃ¡Å¡tnÃ­ho.");
Database.addText("cz.eqItemBootsBootsOfIntrospectionName", "Boty meditace");
Database.addText("cz.eqItemBootsBootsOfIntrospectionDescription", "Uvolni se a zhluboka se nadechni. Pokud nosÃ­Å¡ tyto boty, tak se nikdy nebudeÅ¡ hÃ½bat, pokud stojÃ­Å¡ na zemi.");
Database.addText("cz.eqItemBodyArmoursLightweightBodyArmourName", "LehkÃ½ hrudnÃ­ plÃ¡t");
Database.addText("cz.eqItemBodyArmoursLightweightBodyArmourDescription", "Tato zbroj ti nabÃ­dne zÃ¡kladnÃ­ ochranu pÅ™ed nepÅ™Ã¡telskÃ½mi Ãºtoky. BudeÅ¡ o troÅ¡ku odolnÄ›jÅ¡Ã­.");
Database.addText("cz.eqItemBodyArmoursKnightBodyArmourName", "RytÃ­Å™skÃ¡ zbroj");
Database.addText("cz.eqItemBodyArmoursKnightBodyArmourDescription", "Tato silnÃ¡ zbroj tÄ› spolehlivÄ› ochrÃ¡nÃ­ pÅ™ed vÅ¡emi druhy zbranÃ­. TvÃ¡ odolnost proti nepÅ™Ã¡telskÃ½m ÃºtokÅ¯m bude velmi vysokÃ¡.");
Database.addText("cz.eqItemBodyArmoursEnchantedKnightBodyArmourName", "OÄarovanÃ¡ rytÃ­Å™skÃ¡ zbroj");
Database.addText("cz.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Tohle je velmi zvlÃ¡Å¡tnÃ­ druh zbroje. BudeÅ¡ VELMI odolnÃ½ proti nepÅ™Ã¡telskÃ½m ÃºtokÅ¯m, ale tvÃ¡ zbraÅˆ bude mÃ­t poloviÄnÃ­ ÃºÄinek.");
Database.addText("cz.mapVillageForgeBuyWoodenSwordButton", "Koupit dÅ™evÄ›nÃ½ meÄ (150 bonbÃ³nÅ¯)");
Database.addText("cz.mapVillageForgeBuyWoodenSwordSpeech", "DÄ›kuji za koupi! Tenhle meÄ je sice pomÄ›rnÄ› slabÃ½, ale je to zaÄÃ¡tek.");
Database.addText("cz.mapVillageForgeBuyIronAxeButton", "Koupit Å¾eleznou sekyru (400 bonbÃ³nÅ¯)");
Database.addText("cz.mapVillageForgeBuyIronAxeSpeech", "DoufÃ¡m, Å¾e se ti tahle sekyra bude lÃ­bit. Zrovna jsem ji pro tebe nabrousil!");
Database.addText("cz.mapVillageForgeBuyPolishedSilverSwordButton", "Koupit naleÅ¡tÄ›nÃ½ stÅ™Ã­brnÃ½ meÄ (2 000 bonbÃ³nÅ¯)");
Database.addText("cz.mapVillageForgeBuyPolishedSilverSwordSpeech", "VÃ½roba tohohle meÄe mi zabrala docela sluÅ¡nou dobu. UjiÅ¡Å¥uji tÄ›, Å¾e to za tu cenu stojÃ­.");
Database.addText("cz.mapVillageForgeBuyLightweightBodyArmourButton", "Koupit lehkÃ½ hrudnÃ­ plÃ¡t (15 000 bonbÃ³nÅ¯)");
Database.addText("cz.mapVillageForgeBuyLightweightBodyArmourSpeech", "DÃ­ky tÃ©to zbroji budeÅ¡ odolnÄ›jÅ¡Ã­ proti nepÅ™Ã¡telskÃ½m ÃºtokÅ¯m.");
Database.addText("cz.mapVillageForgeBuyScytheButton", "Koupit kosu (5 000 000 bonbÃ³nÅ¯)");
Database.addText("cz.mapVillageForgeBuyScytheSpeech", "Trvalo mi to nÄ›kolik mÄ›sÃ­cÅ¯, neÅ¾ jsem vyrobil tuhle kosu. Tomuhle Å™Ã­kÃ¡m umÄ›nÃ­! Je to asi nejrychlejÅ¡Ã­ zbraÅˆ, kterou kdy najdeÅ¡. HodnÄ› Å¡tÄ›stÃ­!");
Database.addText("cz.wishingWellThrowFirstCandyButton", "Hodit do studny bonbÃ³n");
Database.addText("cz.wishingWellCandyIntroductionSpeech", "VÃ­tej, poutnÃ­ku! Jsem kouzelnÃ¡ studna. VÃ½mÄ›nou za sladkosti ti splnÃ­m tvÃ¡ pÅ™Ã¡nÃ­! KdyÅ¾ do mÄ› hodÃ­Å¡ bonbÃ³ny, vylÃ©ÄÃ­m tvÃ¡ zranÄ›nÃ­.");
Database.addText("cz.wishingWellThrewCandiesSpeech", "TvÃ¡ zranÄ›nÃ­ byla vylÃ©Äena!");
Database.addText("cz.wishingWellNoWoundSpeech", "Ale vÅ¾dyÅ¥ jsi ÃºplnÄ› zdravÃ½!");
Database.addText("cz.wishingWellThrowFirstLollipopButton", "Hodit do studny lÃ­zÃ¡tko");
Database.addText("cz.wishingWellLollipopIntroductionSpeech", "VÃ­tej, poutnÃ­ku! Jsem kouzelnÃ¡ studna. VÃ½mÄ›nou za sladkosti ti splnÃ­m tvÃ¡ pÅ™Ã¡nÃ­! KdyÅ¾ do mÄ› hodÃ­Å¡ lÃ­zÃ¡tka, pÅ™emÄ›nÃ­m je na bonbÃ³ny.");
Database.addText("cz.wishingWellThrewLollipopsSpeech", "TvÃ¡ lÃ­zÃ¡tka byla pÅ™emÄ›nÄ›na na bonbÃ³ny! DvÄ› lÃ­zÃ¡tka za jeden bonbÃ³n.");
Database.addText("cz.wishingWellThrowChocolateBarButton", "Hodit do studny tabulku ÄokolÃ¡dy");
Database.addText("cz.wishingWellChocolateBarIntroductionSpeech", "VÃ­tej, poutnÃ­ku! Jsem kouzelnÃ¡ studna. VÃ½mÄ›nou za sladkosti ti splnÃ­m tvÃ¡ pÅ™Ã¡nÃ­! Miluju ÄokolÃ¡du. Ne, pÅ™Ã­mo ji zboÅ¾Åˆuju! Za kaÅ¾dou tabulku, kterou do mÄ› hodÃ­Å¡, ti oÄaruju jednu vÄ›c. A ta prvnÃ­ se taky poÄÃ­tÃ¡!");
Database.addText("cz.wishingWellThrewChocolateBarSpeech", "Co bys rÃ¡d oÄaroval?");
Database.addText("cz.wishingWellThrowPainAuChocolatButton", "Hodit do studny pain au chocolat");
Database.addText("cz.wishingWellPainAuChocolatIntroductionSpeech", "VÃ­tej, poutnÃ­ku! Jsem kouzelnÃ¡ studna. VÃ½mÄ›nou za sladkosti ti splnÃ­m tvÃ¡ pÅ™Ã¡nÃ­! MÅˆam, co je tohle? Pain au chocolat? Kde jsi to sehnal? ChutnÃ¡ to skvÄ›le! Hmm, za tyhle dobroty ti dÃ¡m jedno ze tÅ™Ã­ velmi unikÃ¡tnÃ­ch poÅ¾ehnÃ¡nÃ­. Vol rozvÃ¡Å¾nÄ›.");
Database.addText("cz.wishingWellThrewPainAuChocolatSpeech", "DÄ›kuju ti za pain au chocolat! TeÄ si mÅ¯Å¾eÅ¡ vybrat poÅ¾ehnÃ¡nÃ­.");
Database.addText("cz.wishingWellChooseGift", "Zvol si poÅ¾ehnÃ¡nÃ­!");
Database.addText("cz.wishingWellChooseGiftButton", "Zvolit");
Database.addText("cz.wishingWellGiftDoneSpeech", "Hotovo! TeÄ jsi zase o nÄ›co mocnÄ›jÅ¡Ã­. MÃ© poÅ¾ehnÃ¡nÃ­ se ti zobrazÃ­ v panelu statistik ve tvÃ©m inventÃ¡Å™i.");
Database.addText("cz.wishingWellNoPossibleEnchantment", "Å½Ã¡dnÃ© moÅ¾nÃ© oÄarovÃ¡nÃ­");
Database.addText("cz.wishingWellChooseEnchantment", "Vyber si oÄarovÃ¡nÃ­");
Database.addText("cz.wishingWellEnchantButton", "OÄarovat");
Database.addText("cz.wishingWellEnchantmentDoneSpeech", "A je to! TvÅ¯j pÅ™edmÄ›t byl oÄarovÃ¡n.");
Database.addText("cz.pierLighthouseButton", "Doplout k majÃ¡ku na lodi");
Database.addText("cz.pierTheSeaButton", "SkoÄit do moÅ™e");
Database.addText("cz.lonelyHouseOpenBox", "OtevÅ™Ã­t truhlu");
Database.addText("cz.lonelyHouseShakeBox", "ZatÅ™Ã¡st truhlou");
Database.addText("cz.lonelyHouseBreakLock", "VypÃ¡Äit zÃ¡mek");
Database.addText("cz.lonelyHouseKickBox", "Kopnout do truhly");
Database.addText("cz.lonelyHouseAskTheBoxToOpenItself", "Poprosit ji, zda by se neotevÅ™ela sama");
Database.addText("cz.lonelyHouseLureTheBoxWithACandy", "NalÃ¡kat truhlu bonbÃ³nem");
Database.addText("cz.lonelyHouseTakeTheBox", "VzÃ­t truhlu s sebou, k jejÃ­mu otevÅ™enÃ­ asi bude potÅ™eba klÃ­Ä");
Database.addText("cz.lonelyHouseOpenBoxResult", "Truhla je zamÄenÃ¡");
Database.addText("cz.lonelyHouseShakeBoxResult", "Nic se nestane");
Database.addText("cz.lonelyHouseBreakLockResult", "ZÃ¡mek nejde vypÃ¡Äit");
Database.addText("cz.lonelyHouseKickBoxResult", "Nic se nestane, akorÃ¡t tÄ› teÄ trochu bolÃ­ noha");
Database.addText("cz.lonelyHouseAskTheBoxToOpenItselfResult", "... mluvÃ­Å¡ na blbou krabici, uvÄ›domujeÅ¡ si to?");
Database.addText("cz.lonelyHouseLureTheBoxWithACandyResult", "Truhlu zÅ™ejmÄ› bonbÃ³ny nezajÃ­majÃ­");
Database.addText("cz.lonelyHouseTakeTheBoxResult", "V tÃ©hle... v tÃ©hle... Candy Box bude urÄitÄ› nÄ›co zajÃ­mavÃ©ho.");
Database.addText("cz.lollipopFarmConstructMill", "Postavit mlÃ½n (10 000 lÃ­zÃ¡tek)");
Database.addText("cz.lollipopFarmFeedMill", "Nasypat lÃ­zÃ¡tka do mlÃ½nice");
Database.addText("cz.lollipopFarmCurrentCandiesProduction", "MomentÃ¡lnÃ­ produkce bonbÃ³nÅ¯");
Database.addText("cz.lollipopFarmDigPond", "Vykopat rybnÃ­k (100 000 lÃ­zÃ¡tek)");
Database.addText("cz.lollipopFarmBuyLolligator", "Koupit lÃ­zogÃ¡tora (1200 bonbÃ³nÅ¯)");
Database.addText("cz.lollipopFarmLolligatorsConversionText", "Konverze z bonbÃ³nÅ¯ na lÃ­zÃ¡tka aktivnÃ­");
Database.addText("cz.lighthouseAskButton", "Zeptat se");
Database.addText("cz.lighthouseQuestionWho", "Kdo jsi?");
Database.addText("cz.lighthouseQuestionWhoSpeech", "Jsem velmi starÃ½ kyklop.");
Database.addText("cz.lighthouseQuestionWhat", "Co tady dÄ›lÃ¡Å¡?");
Database.addText("cz.lighthouseQuestionWhatSpeech", "Å½iju tady roky a roky, a ÄekÃ¡m, aÅ¾ pÅ™ipluje loÄ. UÅ¾ je to dlouho, co jsem vidÄ›l loÄ, ale musÃ­m tady zÅ¯stat a Äekat, protoÅ¾e jednoho dne moÅ¾nÃ¡ pÅ™ipluje.");
Database.addText("cz.lighthouseQuestionWhyEatCandies", "ProÄ bych jedl bonbÃ³ny?");
Database.addText("cz.lighthouseQuestionWhyEatCandiesSpeech", "ProtoÅ¾e jsou dobrÃ© pro tvoje zdravÃ­!");
Database.addText("cz.lighthouseQuestionCandyBox", "Co je  Candy Box?");
Database.addText("cz.lighthouseQuestionCandyBoxSpeech", "Je to velmi starÃ¡ truhla, ve kterÃ© podle legendy jsou vÅ¡echny sladkosti svÄ›ta. Å˜Ã­kÃ¡ se, Å¾e ten, komu se podaÅ™Ã­ ji otevÅ™Ã­t, bude mÃ­t k dispozici tolik bonbÃ³nÅ¯, Å¾e by dokÃ¡zal cokoliv.");
Database.addText("cz.lighthouseQuestionDragon", "Drak mi Å™ekl, abych za tebou pÅ™iÅ¡el, Å¾e mi prÃ½ pomÅ¯Å¾eÅ¡ dostat vÃ­ce bonbÃ³nÅ¯.");
Database.addText("cz.lighthouseQuestionDragonSpeech", "Aha, dobrÃ¡... No, nemÅ¯Å¾u ti dÃ¡t bonbÃ³ny pÅ™Ã­mo, ale mÅ¯Å¾u ti dÃ¡t nÄ›co, co ti pomÅ¯Å¾e dostat tolik bonbÃ³nÅ¯, kolik si jen mÅ¯Å¾eÅ¡ pÅ™Ã¡t. Ale pÅ™edtÃ­m si tÄ› musÃ­m provÄ›Å™it, protoÅ¾e nemÅ¯Å¾u tuhle vÄ›c dÃ¡t jen tak nÄ›komu. VyÅ™eÅ¡ tenhle hlavolam a bude tvoje.");
Database.addText("cz.lighthouseFoundStone", "Gratuluji! ProÅ¡el jsi mÃ½m testem a naÅ¡el jsi kÃ¡men. Je to unikÃ¡t, ale bude uÅ¾iteÄnÃ½ jenom, pokud najdeÅ¡ tÅ™i dalÅ¡Ã­, kterÃ© k nÄ›mu patÅ™Ã­. HodnÄ› Å¡tÄ›stÃ­!");
Database.addText("cz.lighthouseFoundStoneAgain", "Hele, ty jsi ten hlavolam vyÅ™eÅ¡il i podruhÃ©. DobrÃ¡ prÃ¡ce, zdÃ¡ se, Å¾e se ti lÃ­bÃ­.");
Database.addText("cz.saveLocalSaveTitle", "UloÅ¾it lokÃ¡lnÄ›");
Database.addText("cz.saveLocalSaveWhy", "Vyber si lokÃ¡lnÃ­ uloÅ¾enÃ­, pokud chceÅ¡ v budoucnu hrÃ¡t na stejnÃ©m poÄÃ­taÄi a ve stejnÃ©m prohlÃ­Å¾eÄi.");
Database.addText("cz.saveLocalSaveWarning0", "TvÅ¯j prohlÃ­Å¾eÄ zÅ™ejmÄ› nepodporuje HTML5.");
Database.addText("cz.saveLocalSaveWarning1", "Pro uloÅ¾enÃ­ hry bude potÅ™eba aktualizovat prohlÃ­Å¾eÄ.");
Database.addText("cz.saveLocalSaveChooseSlot", "Zvol si pozici, na kterou chceÅ¡ hru uloÅ¾it:");
Database.addText("cz.saveLocalSaveAutosaveEnabled", "AutomatickÃ© uklÃ¡dÃ¡nÃ­ zapnuto");
Database.addText("cz.saveLocalSaveChooseWhatToDo", "Vyber, co chceÅ¡ udÄ›lat:");
Database.addText("cz.saveLocalSaveSaveButton", "UloÅ¾it");
Database.addText("cz.saveLocalSaveAutosaveButton", "UklÃ¡dat kaÅ¾dÃ½ch 10 minut");
Database.addText("cz.saveLocalSaveDisableAutosaveButton", "Vypnout automatickÃ© uklÃ¡dÃ¡nÃ­");
Database.addText("cz.saveFileSaveTitle", "TextovÃ© uklÃ¡dÃ¡nÃ­");
Database.addText("cz.saveFileSaveWhy0", "Zvol textovÃ© uklÃ¡dÃ¡nÃ­, pokud:");
Database.addText("cz.saveFileSaveWhy1", "ChceÅ¡ pokraÄovat ve hÅ™e na jinÃ©m poÄÃ­taÄi nebo v jinÃ©m prohlÃ­Å¾eÄi");
Database.addText("cz.saveFileSaveWhy2", "ChceÅ¡ svou hru sdÃ­let s nÄ›kÃ½m jinÃ½m");
Database.addText("cz.saveFileSaveWhy3", "Z nÄ›jakÃ©ho dÅ¯vodu potÅ™ebujeÅ¡ vymazat cache");
Database.addText("cz.saveFileSaveWhy4", "(ÄÃ­mÅ¾ se vymaÅ¾ou i lokÃ¡lnÄ› uloÅ¾enÃ© hry)");
Database.addText("cz.saveFileSaveButton", "Vygenerovat uklÃ¡dacÃ­ text");
Database.addText("cz.saveFileSaveWarning", "TeÄ ten text nÄ›kam zkopÃ­ruj a uloÅ¾");
Database.addText("cz.saveLocalLoadTitle", "NaÄÃ­st lokÃ¡lnÄ› uloÅ¾enou hru");
Database.addText("cz.saveLocalLoadYouCan", "Pro naÄtenÃ­ mÅ¯Å¾eÅ¡ pouÅ¾Ã­t nÃ¡sledujÃ­cÃ­ odkaz:");
Database.addText("cz.saveLocalLoadThanksTo", "DÃ­ky kouzlÅ¯m, kterÃ½ch je HTML5 schopnÃ½, bys mÄ›l bÃ½t schopnÃ½ naÄÃ­st hru i offline.");
Database.addText("cz.saveFileLoadTitle", "NaÄÃ­st text");
Database.addText("cz.saveFileLoadPaste", "ZkopÃ­ruj sem svÅ¯j vygenerovanÃ½ text a klikni na â€žNaÄÃ­stâ€œ");
Database.addText("cz.saveFileLoadButton", "NaÄÃ­st");
Database.addText("cz.mountainsText0", "Zpozoroval jsi nÄ›co v horÃ¡ch!");
Database.addText("cz.mountainsText1", "VypadÃ¡ to zajÃ­mavÄ›. MoÅ¾nÃ¡ by se to mohlo hodit.");
Database.addText("cz.mountainsTextButton", "JÃ­t do hor a sebrat onu vÄ›c");
Database.addText("cz.mountainsTextAfter", "NaÅ¡el jsi skÃ¡kacÃ­ tyÄ! Byla pÅ™idÃ¡na do tvÃ©ho inventÃ¡Å™e.");
Database.addText("cz.secondHouseIntroSpeech", "Ahoj, jsem obchodnÃ­k s bonbÃ³ny. Pro bonbÃ³ny bych udÄ›lal cokoliv! Co potÅ™ebujeÅ¡?");
Database.addText("cz.secondHouseLollipop1Speech", "Tohle je lÃ­zÃ¡tko s citrÃ³novou pÅ™Ã­chutÃ­. Moje oblÃ­benÃ©! StojÃ­ 60 bonbÃ³nÅ¯, ale stojÃ­ za to.");
Database.addText("cz.secondHouseLollipop2Speech", "Tohle je lÃ­zÃ¡tko s jahodovou pÅ™Ã­chutÃ­. Je to mÅˆamka, a mÃ¡ krÃ¡snou Äervenou barvu! Jenom za 60 bonbÃ³nÅ¯!");
Database.addText("cz.secondHouseLollipop3Speech", "Tohle je lÃ­zÃ¡tko s dÃ½Åˆovou pÅ™Ã­chutÃ­. VsadÃ­m se, Å¾e jsi takovÃ© jeÅ¡tÄ› neochutnal! 60 bonbÃ³nÅ¯ a je tvoje.");
Database.addText("cz.secondHouseLollipopButtonText", "Koupi toto lÃ­zÃ¡tko (60 bonbÃ³nÅ¯)");
Database.addText("cz.secondHouseMerchantHatSpeech", "Mohl bych ti prodat i svÅ¯j klobouk, ale vÃ­Å¡, on je dost vzÃ¡cnÃ½... BudeÅ¡ mi za nÄ›j muset dÃ¡t hodnÄ› bonbÃ³nÅ¯. Tak tÅ™eba jeden milion. To znÃ­ jako fÃ©rovÃ¡ nabÃ­dka, ne?");
Database.addText("cz.secondHouseMerchantHatButtonText", "Koupit obchodnÃ­kÅ¯v klobouk (1 000 000 bonbÃ³nÅ¯)");
Database.addText("cz.secondHouseTimeRingSpeech", "Tohle je prsten Äasu. Je tak trochu kouzelnÃ½, umoÅ¾nÃ­ ti zpomalit Äas, kdyÅ¾ se ocitneÅ¡ v nesnÃ¡zÃ­ch.");
Database.addText("cz.secondHouseTimeRingButtonText", "Koupit prsten Äasu (500 bonbÃ³nÅ¯)");
Database.addText("cz.secondHouseLeatherGlovesSpeech", "Tyto rukavice jsou z prvotÅ™Ã­dnÃ­ velbloudÃ­ kÅ¯Å¾e. MÃ¡m jich na skladÄ› hodnÄ›, proto jsou tak levnÃ©: Jenom 300 bonbÃ³nÅ¯!");
Database.addText("cz.secondHouseLeatherBootsButtonText", "Koupit pÃ¡r koÅ¾enÃ½ch bot (300 bonbÃ³nÅ¯)");
Database.addText("cz.secondHouseLeatherBootsSpeech", "Tyhle kvalitnÃ­ boty z velbloudÃ­ kÅ¯Å¾e udrÅ¾Ã­ tvÃ© nohy v teple.");
Database.addText("cz.secondHouseLeatherGlovesButtonText", "Koupit koÅ¾enÃ© rukavice (300 bonbÃ³nÅ¯)");
Database.addText("cz.secondHouseChocolateBarSpeech", "Tohle je tabulka ÄokolÃ¡dy. NevÃ­m, na co je, ale je pomÄ›rnÄ› dost vzÃ¡cnÃ¡, coÅ¾ vysvÄ›tluje jejÃ­ cenu. 800 bonbÃ³nÅ¯ a je tvoje!");
Database.addText("cz.secondHouseChocolateBarButtonText", "Koupit tabulku ÄokolÃ¡dy (800 bonbÃ³nÅ¯)");
Database.addText("cz.outsideTheHoleButton", "SkoÄit do velkÃ© dÃ­ry v zemi");
Database.addText("cz.theCaveExitText0", "KoneÄnÄ› ses dostal na druhÃ½ konec jeskynÄ›.");
Database.addText("cz.theCaveExitText1", "Venku vidÃ­Å¡ velkÃ½, hustÃ½ les.");
Database.addText("cz.theCaveExitButtonText", "VyjÃ­t ven z jeskynÄ›");
Database.addText("cz.theCaveFirstSentenceWentStraight", "Å el jsi rovnÄ›.");
Database.addText("cz.theCaveFirstSentenceWentLeft", "Zahnul jsi doleva.");
Database.addText("cz.theCaveFirstSentenceWentRight", "Zahnul jsi doprava.");
Database.addText("cz.theCaveFirstSentenceYouAre", "TeÄ jsi v jeskyni. PÅ™ed sebou vidÃ­Å¡ tÅ™i moÅ¾nÃ© cesty.");
Database.addText("cz.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Na zemi leÅ¾Ã­ jakÃ¡si podivnÃ¡ vÄ›c.");
Database.addText("cz.theCavePattern_ChocolateBarNowSeeChocolateBar", "PÅ™ed tebou leÅ¾Ã­ tabulka ÄokolÃ¡dy.");
Database.addText("cz.theCavePattern_TreasureMapSentence", "Na zemi vidÃ­Å¡ jakÃ½si podivnÃ½ shluk kamenÅ¯.");
Database.addText("cz.theCavePattern_MonkeyWizardSentence", "Narazil jsi na nahatÃ©ho opiÄÃ­ho mÃ¡ga.");
Database.addText("cz.theCavePattern_MonkeyWizardButton", "Vyzvat ho na souboj");
Database.addText("cz.theCavePattern_OctopusKingSentence", "Narazil jsi na oÅ¡klivÃ©ho KrÃ¡le Chobotnic. VypadÃ¡ hrozivÄ›.");
Database.addText("cz.theCavePattern_OctopusKingButton", "Vyzvat... to na souboj");
Database.addText("cz.fortressInsideText0", "Jsi uvnitÅ™ pouÅ¡tnÃ­ho chrÃ¡mu.");
Database.addText("cz.fortressInsideText1", "MÅ¯Å¾eÅ¡ si vybrat jedny ze tÅ™Ã­ dveÅ™Ã­.");
Database.addText("cz.fortressInsideText2", "KaÅ¾dÃ© z nich vedou do mÃ­stnosti s velkÃ½m pokladem.");
Database.addText("cz.fortressInsideEnterRoom1", "Vstoupit do prvnÃ­ mÃ­stnosti");
Database.addText("cz.fortressInsideEnterRoom2", "Vstoupit do druhÃ© mÃ­stnosti");
Database.addText("cz.fortressInsideEnterRoom3", "Vstoupit do tÅ™etÃ­ mÃ­stnosti");
Database.addText("cz.treasureButtonDig", "Vykopat dÃ­ru");
Database.addText("cz.treasureButtonYouFound", "NaÅ¡el jsi tÅ™i tabulky ÄokolÃ¡dy!");
Database.addText("cz.sorceressHutHello", "Ahoj, jÃ¡ jsem ÄarodÄ›jka. MÅ¯Å¾u tÄ› nauÄit nÄ›co o magii. Taky ti mÅ¯Å¾u prodat pÃ¡r zajÃ­mavÃ½ch vÄ›cÃ­, nebo pro tebe nÄ›co vykouzlit. Ale nic nenÃ­ zadarmo! Budu po tobÄ› chtÃ­t lÃ­zÃ¡tka. HodnÄ› lÃ­zÃ¡tek.");
Database.addText("cz.sorceressHutClickedGrimoire", "Tohle je kouzelnÃ¡ kniha urÄenÃ¡ pro zaÄÃ¡teÄnÃ­ky. Na vÃ½pravÃ¡ch budeÅ¡ moci vyvolat pÃ¡r jednoduchÃ½ch, ale uÅ¾iteÄnÃ½ch kouzel. StoprocentnÄ› se ti budou hodit! Za pouhÃ½ch 5 000 lÃ­zÃ¡tek je ta kniha tvoje.");
Database.addText("cz.sorceressHutBuyGrimoireButton", "Koupit tuto knihu (5 000 lÃ­zÃ¡tek)");
Database.addText("cz.sorceressHutBuyGrimoireSpeech", "DÄ›kuji! TeÄ  budeÅ¡ moci pouÅ¾Ã­vat tÅ™i jednoduchÃ¡ kouzla. HodnÄ› Å¡tÄ›stÃ­ na vÃ½pravÃ¡ch!");
Database.addText("cz.sorceressHutClickedGrimoire2", "Tohle je kniha kouzel pro pokroÄilÃ©. DÃ­ky nÃ­ budeÅ¡ moci pouÅ¾Ã­vat dvÄ› sloÅ¾itÃ¡ kouzla. Sepsala jsem ji sama, takÅ¾e funÄnost zaruÄena! MyslÃ­m, Å¾e 20 000 je fÃ©rovÃ¡ cena.");
Database.addText("cz.sorceressHutBuyGrimoire2Button", "Koupit tuto knihu (20 000 lÃ­zÃ¡tek)");
Database.addText("cz.sorceressHutBuyGrimoire2Speech", "DobrÃ½ obchod! Do tvÃ©ho arzenÃ¡lu pÅ™ibyla dalÅ¡Ã­ dvÄ› kouzla, uÅ¾Ã­vej jich moudÅ™e!");
Database.addText("cz.sorceressHutClickedCauldron", "Tohle je mÅ¯j kotlÃ­k. UmoÅ¾Åˆuje mi vaÅ™it kouzelnÃ© lektvary. Mohla bych ti ho prodat, ale je celkem drahÃ½... Bude tÄ› to stÃ¡t 100 000 lÃ­zÃ¡tek.");
Database.addText("cz.sorceressHutBuyCauldronButton", "Koupit kotlÃ­k (100 000 lÃ­zÃ¡tek)");
Database.addText("cz.sorceressHutBuyCauldronSpeech", "DÃ­ky moc! Tady mÃ¡Å¡ kotlÃ­k a nÃ¡vod na vaÅ™enÃ­. A jÃ¡ mÃ¡m dalÅ¡Ã­ch 100 000 lÃ­zÃ¡tek!");
Database.addText("cz.sorceressHutClickedHat", "MÃ¡m pÄ›knÃ½ klobouk, Å¾e? Ale nemÅ¯Å¾u ti ho prodat. Je pÅ™Ã­liÅ¡ vzÃ¡cnÃ½. Ne, opravdu nemÅ¯Å¾u. Netrvej na tom. Ne. Ne ne ne ne, fakt ti ho nemÅ¯Å¾u prodat. Ã‰h, tak dobrÃ¡, ale dÃ¡Å¡ mi za nÄ›j 1 000 000 000 lÃ­zÃ¡tek. Tohle stejnÄ› asi nebudeÅ¡ schopnÃ½ zaplatit.");
Database.addText("cz.sorceressHutBuyHatButton", "Koupit Å¡piÄatÃ½ klobouk (1 000 000 000 lÃ­zÃ¡tek)");
Database.addText("cz.sorceressHutBuyHatSpeech", "Miliarda! Miliarda lÃ­zÃ¡tek, hurÃ¡! Ale... uÅ¾ nemÃ¡m svÅ¯j klobouk... Ale celÃ¡ miliarda lÃ­zÃ¡tek, sakra, tohle za to stÃ¡lo!");
Database.addText("cz.cauldronPreviousPageButton", "PÅ™edchozÃ­ strÃ¡nka");
Database.addText("cz.cauldronNextPageButton", "NÃ¡sledujÃ­cÃ­ strÃ¡nka");
Database.addText("cz.cauldronWhatYouWantToPut", "Co chceÅ¡ dÃ¡t do kotlÃ­ku");
Database.addText("cz.cauldronWhatIsIn", "Co je v kotlÃ­ku");
Database.addText("cz.cauldronWhatYouCanDo", "Co mÅ¯Å¾eÅ¡ udÄ›lat");
Database.addText("cz.castleBigRoomComment", "VelkÃ¡ mÃ­stnost");
Database.addText("cz.castleARoomComment", "MÃ­stnost");
Database.addText("cz.castleADarkRoomComment", "TemnÃ¡ mÃ­stnost");
Database.addText("cz.castleCastleEntranceComment", "Vchod do hradu");
Database.addText("cz.castleTowerEntranceComment", "Vchod do vÄ›Å¾e");
Database.addText("cz.castleNougatMonsterComment", "ZaÃºtoÄit na nugÃ¡tovÃ© monstrum");
Database.addText("cz.castleGuardsComment", "ZaÃºtoÄit na strÃ¡Å¾e");
Database.addText("cz.castleStairsComment", "Schody");
Database.addText("cz.buttonBackToTheCastle", "ZpÃ¡tky do hradu");
Database.addText("cz.castleBigRoomHovenSpeechSad", "Ahoj! Jsem velmi starÃ¡ pec. Kdysi jsem pekla spoustu velmi dobrÃ©ho peÄiva, ale dnes uÅ¾ mÄ› nikdo nepouÅ¾Ã­vÃ¡. MoÅ¾nÃ¡... moÅ¾nÃ¡ bys mi mohl pomoct? MÅ¯Å¾u si od tebe vzÃ­t nÄ›jakÃ© ty sladkosti? Neboj, nebudeÅ¡ litovat! MnÄ› mÅ¯Å¾eÅ¡ vÄ›Å™it.");
Database.addText("cz.castleBigRoomHovenNotEnough", "Oh... nemÃ¡Å¡ dost sladkostÃ­, nemÅ¯Å¾u udÄ›lat nic. Jsem prostÄ› zbyteÄnÃ¡. Od teÄ mi Å™Ã­kej â€žzbyteÄnÃ¡ pecâ€œ.");
Database.addText("cz.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay! DÄ›kuju moc! PouÅ¾ila jsem 100 bonbÃ³nÅ¯ a tabulku ÄokolÃ¡dy, a koukej, co jsem upekla! Pain au chocolat! Je to moje oblÃ­benÃ© peÄivo, doufÃ¡m, Å¾e ti bude taky chutnat!");
Database.addText("cz.castleBigRoomHovenSpeechHappy", "Jestli budeÅ¡ chtÃ­t napÃ©ct vÃ­c, staÄÃ­ Å™Ã­ct! RÃ¡da ti pomÅ¯Å¾u.");
Database.addText("cz.castleBigRoomHovenSpeechHappyNotEnough", "Ajaj, bohuÅ¾el nemÃ¡Å¡ dost sladkostÃ­. PotÅ™ebuju 100 bonbÃ³nÅ¯ a tabulku ÄokolÃ¡dy. UrÄitÄ› se vraÅ¥, aÅ¾ to seÅ¾eneÅ¡!");
Database.addText("cz.castleBigRoomHovenLetHovenTakeButton", "Nechat pec, aÅ¥ si vezme sladkosti, kterÃ© potÅ™ebuje");
Database.addText("cz.castleBigRoomHovenThanks", "DÄ›kuju!");
Database.addText("cz.dragonStopTickling", "Hej ty tam dole! To lechtÃ¡, nech toho!");
Database.addText("cz.dragonStopTicklingButton", "Eh, promiÅˆ, jÃ¡ myslel, Å¾e tÄ› mÃ¡m zabÃ­t");
Database.addText("cz.dragonTalking", "Jsem drak a tenhle hrad patÅ™Ã­ mnÄ›. VidÃ­m, Å¾e ses dostal dovnitÅ™, musÃ­Å¡ bÃ½t velmi stateÄnÃ½... NÄ›komu jako ty milerÃ¡d pomÅ¯Å¾u. Po Äem nejvÃ­ce touÅ¾Ã­Å¡?");
Database.addText("cz.dragonTalkingChallengeButton", "Po vÃ½zvÄ›");
Database.addText("cz.dragonTalkingFameButton", "Po slÃ¡vÄ›");
Database.addText("cz.dragonTalkingCandiesButton", "Po bonbÃ³nech");
Database.addText("cz.dragonTalkingChallengeSpeech", "Aha, takÅ¾e ty chceÅ¡ vÃ½zvu? A co takhle si to rozdat se samotnÃ½m ÄÃ¡blem? SkoÄ mi na zÃ¡da a jÃ¡ tÄ› zanesu do pekla!");
Database.addText("cz.dragonTalkingFameSpeech", "NejlepÅ¡Ã­ zpÅ¯sob, jak se proslavit, je porazit samotnÃ©ho vÃ½vojÃ¡Å™e. VÃ­m, kde bydlÃ­, a klidnÄ› tÄ› tam dovezu. Ale pÅ™iprav se, Å¾e to nebude snadnÃ½ boj.");
Database.addText("cz.dragonTalkingCandiesSpeech", "To je to, po Äem vÅ¡ichni touÅ¾Ã­me. ChceÅ¡ bonbÃ³ny? MÅ¯j starÃ½ kamarÃ¡d by ti s tÃ­m mohl pomoct. PoznÃ¡Å¡ ho snadno, mÃ¡ jenom jedno oko. ProstÄ› mu Å™ekni, Å¾e mÄ› znÃ¡Å¡.");
Database.addText("cz.dragonTalkingChallengeAnswer", "Tak pojÄme!");
Database.addText("cz.dragonTalkingFameAnswer", "Jsem pÅ™ipravenÃ½.");
Database.addText("cz.dragonTalkingCandiesAnswer", "DobrÃ¡, dÃ­ky!");
Database.addText("cz.buttonBackToCastle", "ZpÃ¡tky do hradu");
Database.addText("cz.talkingCandySpeechNoBox", "Ahojky! Jsem mluvÃ­cÃ­ bonbÃ³nek. UÅ¾ jsi skoro vyhrÃ¡l hru. TeÄ uÅ¾ jenom musÃ­Å¡ najÃ­t Candy Box. Je v osamÄ›lÃ©m domku na sever od vesnice. Tohle je poslednÃ­ krok!");
Database.addText("cz.talkingCandySpeech1", "Ahojky! Jsem mluvÃ­cÃ­ bonbÃ³nek. Gratuluji, vyhrÃ¡l jsi hru! TvÃ¡ odmÄ›na je nÃ¡sledujÃ­cÃ­: OtevÅ™u pro tebe Candy Box. MÃ¡m to udÄ›lat?");
Database.addText("cz.talkingCandySpeech2", "Hotovo! TeÄ se mÅ¯Å¾eÅ¡ podÃ­vat dovnitÅ™. DoufÃ¡m, Å¾e se ti hra lÃ­bila :)");
Database.addText("cz.talkingCandyButton", "Ano!!");
Database.addText("cz.lighthousePuzzleResetButton", "Reset");
Database.addText("ï»¿el.mapVillageComment", "ÎˆÎ½Î± Ï‡Ï‰ÏÎ¹ÏŒ");
Database.addText("el.mapFortressComment", "Î¤Î¿ Ï†ÏÎ¿ÏÏÎ¹Î¿ Ï„Î·Ï‚ ÎµÏÎ®Î¼Î¿Ï….");
Database.addText("el.mapATreeComment", "ÎˆÎ½Î± Î´Î­Î½Ï„ÏÎ¿");
Database.addText("el.mapTheDesertComment", "Î— Î­ÏÎ·Î¼Î¿Ï‚");
Database.addText("el.mapWishingWellComment", "Î¤Î¿ Ï€Î·Î³Î¬Î´Î¹ Ï„Ï‰Î½ ÎµÏ…Ï‡ÏŽÎ½");
Database.addText("el.mapLonelyHouseComment", "ÎˆÎ½Î± Î¼Î¿Î½Î±Ï‡Î¹ÎºÏŒ ÏƒÏ€Î¯Ï„Î¹");
Database.addText("el.mapForestComment", "Î¤Î¿ Î´Î¬ÏƒÎ¿Ï‚");
Database.addText("el.mapCastleEntranceComment", "Î— ÎµÎ¯ÏƒÎ¿Î´Î¿Ï‚ Ï„Î¿Ï… ÎºÎ¬ÏƒÏ„ÏÎ¿Ï…");
Database.addText("el.mapCastleComment", "Î¤Î¿ ÎºÎ¬ÏƒÏ„ÏÎ¿");
Database.addText("el.mapDragonComment", "ÎŸ Î´ÏÎ¬ÎºÎ¿Ï‚");
Database.addText("el.candyBoxEatCandiesButton", "Î¦Î¬Îµ ÏŒÎ»Î± Ï„Î± Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬");
Database.addText("el.candyBoxThrowCandiesButton", "Î¡Î¯Î¾Îµ 10 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÏƒÏ„Î¿ Î­Î´Î±Ï†Î¿Ï‚");
Database.addText("el.mapVillageAHouseComment", "ÎˆÎ½Î± ÏƒÏ€Î¯Ï„Î¹");
Database.addText("el.mapVillageForgeComment", "Î¤Î¿ ÏƒÎ¹Î´Î·ÏÎ¿Ï…ÏÎ³Î¯Î¿");
Database.addText("el.buttonBackToTheMap", "Î Î¯ÏƒÏ‰ ÏƒÏ„Î¿ Ï‡Î¬ÏÏ„Î·");
Database.addText("el.mapSorceressHutComment", "Î— ÎºÎ±Î»ÏÎ²Î± Ï„Î¿Ï… Î¼Î¬Î³Î¿Ï…");
Database.addText("el.buttonBackToTheVillage", "Î Î¯ÏƒÏ‰ ÏƒÏ„Î¿ Ï‡Ï‰ÏÎ¹ÏŒ");
Database.addText("el.mapATreeIntroductionSpeech", "Î“ÎµÎ¹Î±, ÎµÎ¯Î¼Î±Î¹ Î¿ Î£ÎºÎ¯Î¿Ï…ÏÎ¿Ï‚. ÎœÏ€Î¿ÏÏŽ Î½Î± ÏƒÎ¿Ï… Ï€ÏÎ¿ÏƒÏ†Î­ÏÏ‰ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÎºÎ±Î¹ Ï€Î¿Î»Î»Î¬ Î¬Î»Î»Î± Ï€ÏÎ¬Î³Î¼Î±Ï„Î±. Î¤Î¿ Î¾Î­ÏÏ‰ ÏŒÏ„Î¹ Î»Î±Ï„ÏÎµÏÎµÎ¹Ï‚ Ï„Î± Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬, Î±Î»Î»Î¬ Î½Î¹ÏŽÎ¸Ï‰ Î¼ÏŒÎ½Î¿Ï‚ ÏƒÎµ Î±Ï…Ï„ÏŒ Ï„Î¿ Î´Î¬ÏƒÎ¿Ï‚.");
Database.addText("el.mapATreeIntroductionButton", "Î ÏŽÏ‚ Î¼Ï€Î¿ÏÏŽ Î½Î± ÏƒÎµ Î²Î¿Î·Î¸Î®ÏƒÏ‰;");
Database.addText("el.mapATreeFirstQuestion", "Î˜Î± ÏƒÎ¿Ï… ÎºÎ¬Î½Ï‰ ÎµÏÏ‰Ï„Î®ÏƒÎµÎ¹Ï‚. Î‘Î½ Î±Ï€Î±Î½Ï„Î®ÎµÎ¹Ï‚ ÏƒÏ‰ÏƒÏ„Î¬ ÏƒÏ„Î¹Ï‚ ÎµÏÏ‰Ï„Î®ÏƒÎµÎ¹Ï‚ Î¸Î± Î±Î½Ï„Î±Î¼ÎµÎ¹Ï†Î¸ÎµÎ¯Ï‚ Î¼Îµ Ï„Î± Ï€Î¹Î¿ Î³Î»Ï…ÎºÎ¬ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î±! Î ÏÏŽÏ„Î· : Î£Î¿Ï… Î±ÏÎ­ÏƒÎ¿Ï…Î½ Ï€ÏÎ±Î³Î¼Î±Ï„Î¹ÎºÎ¬ Ï„Î± Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬;(Î±Ï€Î¬Î½Ï„Î·ÏƒÎ· ÏƒÏ„Î± Î±Î³Î³Î»Î¹ÎºÎ¬)");
Database.addText("el.mapATreeSecondQuestion", "Î£Ï‰ÏƒÏ„Î¬! ÎŸÏÎ¯ÏƒÏ„Îµ 20 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬. Î¤ÏŽÏÎ± ÏƒÏ…Î¼Ï€Î»Î®ÏÏ‰ÏƒÎµ Î±Ï…Ï„Î® Ï„Î·Î½ Î±ÎºÎ¿Î»Î¿Ï…Î¸Î¯Î± Î³ÏÎ¼Î¼Î¬Ï„Ï‰Î½ ÎºÎ±Î¹ Î¸Î± Ï€Î¬ÏÎµÎ¹Ï‚ Î­Î½Î± Î½Î­Î¿ Î²ÏÎ±Î²ÎµÎ¯Î¿ : S, E, I, D, N, A, ?");
Database.addText("el.mapATreeThirdQuestion", "Î–Î±Ï‡Î±ÏÏ‰Ï„Î¬! ÎŸÏÎ¯ÏƒÏ„Îµ, 100 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Î³Î¹Î± ÎµÏƒÎ­Î½Î±. Î•Ï€ÏŒÎ¼ÎµÎ½Î· ÎµÏÏŽÏ„Î·ÏƒÎ· : Ï€ÏŒÏƒÎ±  Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Î­Ï‡ÎµÎ¹ Î¿ Ï€Î¹Î¿ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î­Î½Î¹Î¿Ï‚ Î¬Î½Î¸ÏÏ‰Ï€Î¿Ï‚ ÏƒÏ„Î¿Î½ ÎºÏŒÏƒÎ¼Î¿;");
Database.addText("el.mapATreeFourthQuestion", "ÎÎ± 500 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Î³Î¹Î± ÎµÏƒÎ­Î½Î±! Î¤Î¿ ÎµÏ€ÏŒÎ¼ÎµÎ½Î¿ Î²ÏÎ±Î²ÎµÎ¯Î¿ Î¸Î± ÎµÎ¯Î½Î±Î¹ Î±ÎºÏŒÎ¼Î± Ï€Î¹Î¿ ÎµÎ½Î´Î¹Î±Ï†Î­ÏÎ¿Î½...  ÎÎ± Î¿ Î³ÏÎ¯Ï†Î¿Ï‚ : Î£Îµ Î­Î½Î± Î±ÏÏ‡Î±Î¯Î¿ Î´Î¬ÏƒÎ¿Ï‚,Î¼ÎµÎ³Î±Î»ÏŽÎ½ÎµÎ¹ Î­Î½Î± Ï€Î¿Î»Ï Î³Î­ÏÎ¹ÎºÎ¿ Î´ÎµÎ½Ï„ÏÎ¿ ÏƒÏ„Î¿ Î¿Ï€Î¿Î¯Î¿ Î¶Î¿Ï…Î½ Ï„Î± Ï€Î¹Î¿ ÎµÏ†Ï…Î· Î¶ÏŽÎ± ÏƒÎµ Î±Ï…Ï„ÏŒÎ½ Ï„Î¿Î½ Ï€Î»Î±Î½Î®Ï„Î·. Î›Î­Î½Îµ ÏŒÏ„Î¹ Î±Ï…Ï„ÏŒ Ï„Î¿ Î´Î­Î½Ï„ÏÎ¿ Î­Ï‡ÎµÎ¹ 60 ÏÎ¯Î¶ÎµÏ‚, 360 ÎºÎ»Î±Î´Î¹Î¬ ÎºÎ±Î¹ 2160 Ï†ÏÎ»Î»Î±. Î ÏŒÏƒÎ± ÏƒÎ·Î¼Î¬Î´Î¹Î± Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± Î²ÏÎµÎ¯Ï‚ ÏƒÏ„Î¿Î½ ÎºÎ¿ÏÎ¼ÏŒ Ï„Î¿Ï…;");
Database.addText("el.mapATreeFifthQuestion", "Î£Ï…Î³Ï‡Î±ÏÎ·Ï„Î®ÏÎ¹Î±! ÎœÎ¹Î»Î¿ÏÏƒÎ± Î³Î¹Î± Î±Ï…Ï„ÏŒ Î´ÎµÎ½Ï„ÏÎ¿, Ï€ÏÎ¬Î³Î¼Î±Ï„Î¹. ÎŸÏÎ¯ÏƒÏ„Îµ 3 Î³Î»ÎµÎ¹Ï†Î¹Ï„Î¶Î¿ÏÏÎ¹Î±. Î§ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¯Î·ÏƒÎ­ Ï„Î± ÏƒÏ‰ÏƒÏ„Î¬! Î•Ï€ÏŒÎ¼ÎµÎ½Î¿Ï‚ Î³ÏÎ¯Ï†Î¿Ï‚, Î¬ÎºÎ¿Ï… Ï€ÏÎ¿ÏƒÎµÎºÏ„Î¹ÎºÎ¬ : ÎŒÏ„Î±Î½ ÎµÎ¯Î½Î±Î¹ Ï€Î±Î½ÏƒÎ­Î»Î·Î½Î¿Ï‚, ÏÎ¯Ï‡Î½Ï‰ Î­Î½Î± ÎºÎ¯Ï„ÏÎ¹Î½Î¿ ÎºÎ±Ï€Î­Î»Î¿ ÏƒÏ„Î·Î½ ÎºÏŒÎºÎºÎ¹Î½Î· Î¸Î¬Î»Î±ÏƒÏƒÎ±. Î¤Î¹ ÏƒÏ…Î¼Î²Î±Î¯Î½ÎµÎ¹ ÏƒÏ„Î¿ ÎºÎ¯Ï„ÏÎ¹Î½Î¿ ÎºÎ±Ï€Î­Î»Î¿;");
Database.addText("el.mapATreeTicTacToeIntro", "Î£Ï‰ÏƒÏ„Î® Î±Ï€Î¬Î½Ï„Î·ÏƒÎ·! Î”ÎµÎ½ Î®Ï„Î±Î½ ÎºÎ±Î¹ Ï€Î¿Î»Ï Î´ÏÏƒÎºÎ¿Î»Î¿. ÎÎ± 3 ÏƒÎ¿ÎºÎ¿Î»Î¬Ï„ÎµÏ‚ Î³Î¹Î± ÎµÏƒÎ­Î½Î±! Î“Î¹Î± Ï„Î¿ ÎµÏ€ÏŒÎ¼ÎµÎ½Î¿ Î²ÏÎ±Î²ÎµÎ¯Î¿ Î¸Î± Î±Î»Î»Î¬Î¾Î¿Ï…Î¼Îµ Ï„Î¿Ï…Ï‚ ÎºÎ±Î½ÏŒÎ½ÎµÏ‚ Î»Î¯Î³Î¿. Î˜Î± Ï€ÏÎ­Ï€ÎµÎ¹ Î½Î± Ï€Î±Î¯Î¾ÎµÎ¹Ï‚ Î­Î½Î± Ï€Î±Î¹Ï‡Î½Î¯Î´Î¹ Î¼Î±Î¶Î¯ Î¼Î¿Ï…! Î•Î¯ÏƒÎ±Î¹ Î­Ï„Î¿Î¹Î¼Î¿Ï‚;");
Database.addText("el.mapATreeTicTacToeIntroButton", "Î•Î¯Î¼Î±Î¹!");
Database.addText("el.mapATreeTicTacToeLetsPlay", "Î¤Î¿ Ï€Î±Î¹Ï‡Î½Î¯Î´Î¹ ÎµÎ¯Î½Î±Î¹ Ï„ÏÎ¯Î»Î¹Î¶Î±. Î˜Î± Ï€Î±Î¯Î¾Î¿Ï…Î¼Îµ ÏƒÎµ Î­Î½Î± 3x3 Î´Î¬Ï€ÎµÎ´Î¿. Î˜Î± Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹ÎµÎ¯Ï‚ Ï„Î± ÏƒÎ·Î¼Î¬Î´Î¹Î± Î§, ÎµÎ½ÏŽ ÎµÎ³Ï‰ Ï„Î± ÏƒÎ·Î¼Î¬Î´Î¹Î± ÎŸ. Î¤Î¿Ï€Î¿Î¸ÎµÏ„Î¿ÏÎ¼Îµ Ï„Î± ÏƒÎ·Î¼Î¬Î´Î¹Î± Î¼Î±Ï‚ ÎµÎ½Î±Î»Î»Î¬Î¾ ÎºÎ±Î¹ Î¿ ÏƒÎºÎ¿Ï€ÏŒÏ‚ ÎµÎ¯Î½Î±Î¹ Î½Î± Î²Î¬Î»Î¿Ï…Î¼Îµ 3 ÏƒÎ·Î¼Î¬Î´Î¹Î± ÏƒÏ„Î· ÏƒÎµÎ¹ÏÎ±. Î˜Î± ÏƒÎµ Î±Ï†Î®ÏƒÏ‰ Î½Î± Î¾ÎµÎºÎ¹Î½Î®ÏƒÎµÎ¹Ï‚ Ï€ÏÏŽÏ„Î¿Ï‚!");
Database.addText("el.mapATreeTicTacToeNobodyWins", "Î¤Î¿ Î´Î¬Ï€ÎµÎ´Î¿ Î­Ï‡ÎµÎ¹ Î³ÎµÎ¼Î¯ÏƒÎµÎ¹ ÎºÎ±Î¹ ÎºÎ±Î½Î­Î½Î±Ï‚ Î¼Î±Ï‚ Î´ÎµÎ½ Î­Î²Î±Î»Îµ 3 ÏƒÏ„Î· ÏƒÎµÎ¹ÏÎ¬ : Î´ÎµÎ½ ÎºÎµÏÎ´Î¯Î¶ÎµÎ¹ ÎºÎ±Î½Î­Î½Î±Ï‚! Î˜Î­Î»ÎµÎ¹Ï‚ Î½Î± Î´Î¿ÎºÎ¹Î¼Î¬ÏƒÎµÎ¹Ï‚ Î¾Î±Î½Î¬;");
Database.addText("el.mapATreeTicTacToeYouLose", "ÎˆÎ²Î±Î»Îµ 3 ÏƒÏ„Î· ÏƒÎµÎ¹ÏÎ¬! ÎšÎ­ÏÎ´Î¹ÏƒÎ±. Î˜Î­Î»ÎµÎ¹Ï‚ Î½Î± Î´Î¿ÎºÎ¹Î¼Î¬ÏƒÎµÎ¹Ï‚ Î¾Î±Î½Î¬;");
Database.addText("el.mapATreeTicTacToeTryAgainButton", "ÎÎ±Î¹, Î¸Î­Î»Ï‰!");
Database.addText("el.mapATreeTicTacToeYouWin", "ÎŸÎ¿, Î±Ï…Ï„ÏŒ Î®Ï„Î±Î½ ÎºÎ±Î¹ Î±Î½ Î®Ï„Î±Î½ Î¼Î¹Î± Î±Ï€ÏÏŒÎ²Î»ÎµÏ€Ï„Î· ÎºÎ¯Î½Î·ÏƒÎ·. Î‘Î»Î»Î¬ Î­Î²Î±Î»ÎµÏ‚ 3 ÏƒÏ„Î· ÏƒÎµÎ¹ÏÎ¬, Î´ÎµÎ½ Î¼Ï€Î¿ÏÏŽ Î½Î± Î´Î¹Î±Ï†Î¿Î½Î®ÏƒÏ‰. ÎšÎ­ÏÎ´Î¹ÏƒÎµÏ‚! Î Î¬ÏÎµ Î±Ï…Ï„ÏŒ Ï„Î¿ ÎºÎ»ÎµÎ¹Î´Î¯! Î•Î¯Î½Î±Î¹ Î³Î¹Î± Î­Î½Î± Î±Ï€ÏŒ Ï„Î± ÏƒÏ€Î¯Ï„Î¹Î± ÏƒÏ„Î¿ Ï‡Ï‰ÏÎ¹ÏŒ ÎºÎ¬Ï„Ï‰ Î±Ï€ÏŒ Ï„Î¿ Î´Î¬ÏƒÎ¿Ï‚.");
Database.addText("el.mapATreeTicTacToeAnymoreSweet", "Î•Ï…Ï‡Î±ÏÎ¹ÏƒÏ„ÏŽ ÏƒÎºÎ¯Î¿Ï…ÏÎµ! ÎšÎ±Î¼Î¯Î± Î¬Î»Î»Î· Î´Î¿ÎºÎ¹Î¼Î±ÏƒÎ¯Î±;");
Database.addText("el.mapATreeNoMoreChallenge", "Î”Ï…ÏƒÏ„Î·Ï‡ÏŽÏ‚ ÏŒÏ‡Î¹, Î´ÎµÎ½ Î­Ï‡Ï‰ Î¬Î»Î»ÎµÏ‚ Ï€ÏÎ¿ÎºÎ»Î®ÏƒÎµÎ¹Ï‚ Î³Î¹Î± ÎµÏƒÎ­Î½Î±. Î¤Î¿ Î½Î± Ï€Î±Î¯Î¾Ï‰ Î¼Î±Î¶Î¯ ÏƒÎ¿Ï… ÎµÎ¯Ï‡Îµ Ï€Î¿Î»Ï Ï€Î»Î¬ÎºÎ±, ÎµÏ…Ï‡Î±ÏÎ¹ÏƒÏ„ÏŽ!");
Database.addText("el.buttonExitQuestKeeping", "Î’Î³ÎµÏ‚ Î±Ï€ÏŒ Ï„Î·Î½ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î® (ÎºÎ±Î¹ ÎºÏÎ¬Ï„Î·ÏƒÎµ ÏŒ,Ï„Î¹ Î²ÏÎ®ÎºÎµÏ‚)");
Database.addText("el.buttonExitQuestNoKeeping", "Î’Î³ÎµÏ‚ Î±Ï€ÏŒ Ï„Î·Î½ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î® (Î´ÎµÎ½ Î¸Î± ÎºÏÎ±Ï„Î®ÏƒÎµÎ¹Ï‚ Î±Ï…Ï„Î¬ Ï€Î¿Ï… Î²ÏÎ®ÎºÎµÏ‚)");
Database.addText("el.buttonExitQuestNoKeepingBecauseLose", "Î’Î³ÎµÏ‚ Î±Ï€ÏŒ Ï„Î·Î½ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î® (Î´ÎµÎ½ Î¸Î± ÎºÏÎ±Ï„Î®ÏƒÎµÎ¹Ï‚ Î±Ï…Ï„Î¬ Ï€Î¿Ï… Î²ÏÎ®ÎºÎµÏ‚ ÎµÏ€ÎµÎ¹Î´Î® Î±Ï€Î­Ï„Ï…Ï‡ÎµÏ‚.)");
Database.addText("el.mapVillageLockedHouseComment", "ÎˆÎ½Î± ÎºÎ»ÎµÎ¹Î´Ï‰Î¼Î­Î½Î¿ ÏƒÏ€Î¹Ï„Î¹");
Database.addText("el.mapVillageForgeIntroductionSpeech", "Î“ÎµÎ¹Î¬, ÎµÎ¯Î¼Î±Î¹ Î¿ ÏƒÎ¹Î´Î·ÏÎ¿Ï…ÏÎ³Î¿Ï‚! ÎœÏ€Î¿ÏÏŽ Î½Î± ÏƒÎ¿Ï… Ï€Î¿Ï…Î»Î®ÏƒÏ‰ Î´Î¹Î¬Ï†Î¿ÏÎ± ÏŒÏ€Î»Î± ÎºÎ±Î¹ ÎµÎ¾Î¿Ï€Î»Î¹ÏƒÎ¼ÏŒ.");
Database.addText("el.mapVillageForgeIntroductionSpeechNoMoreToSell", "Î“ÎµÎ¹Î¬, ÎµÎ¯Î¼Î±Î¹ Î¿ ÏƒÎ¹Î´Î·ÏÎ¿Ï…ÏÎ³Î¿Ï‚. Î”Ï…ÏƒÏ„Î·Ï‡ÏŽÏ‚, Î´ÎµÎ½ Î­Ï‡Ï‰ Ï„Î¯Ï€Î¿Ï„Î± Î¬Î»Î»Î¿ Î½Î± Ï€Î¿Ï…Î»Î®ÏƒÏ‰. ÎˆÎ»Î± Î±ÏÎ³ÏŒÏ„ÎµÏÎ± Î¯ÏƒÏ‰Ï‚.");
Database.addText("el.mapVillageFifthHouseNoWeaponSpeech", "Î“ÎµÎ¹Î±. Î¤Î¿ ÎºÎµÎ»Î¬ÏÎ¹ Î¼Î¿Ï… ÎµÎ¯Î½Î±Î¹ Î³ÎµÎ¼Î¬Ï„Î¿ Î±ÏÎ¿Ï…ÏÎ±Î¯Î¿Ï…Ï‚, Ï€ÏÎ­Ï€ÎµÎ¹ Î½Î± Ï„Î¿Ï…Ï‚ Î¾ÎµÏ†Î¿ÏÏ„Ï‰Î¸ÏŽ... Î±Î½ Î¼ÏŒÎ½Î¿ Ï…Ï€Î®ÏÏ‡ÎµÎ¹ ÎºÎ¬Ï€Î¿Î¹Î¿Ï‚ Î¼Îµ Î­Î½Î± ÏŒÏ€Î»Î¿ Î³Î¹Î± Î½Î± Î¼Îµ Î²Î¿Î·Î¸Î®ÏƒÎµÎ¹...");
Database.addText("el.mapVillageFifthHouseWeaponSpeech", "Î•Îµ, ÎµÏƒÏ…! Î’Î»Î­Ï€Ï‰ Ï€Ï‰Ï‚ Î­Ï‡ÎµÎ¹Ï‚ Î­Î½Î± ÏŒÏ€Î»Î¿! Î‘Î½ ÏƒÎºÎ¿Ï„ÏŽÏƒÎµÎ¹Ï‚ Ï„Î¿Ï…Ï‚ Î±ÏÎ¿Ï…ÏÎ±Î¯Î¿Ï…Ï‚ Ï€Î¿Ï… Ï„ÏÎ¹Î³Ï…ÏÎ½Î¿ÏÎ½ Ï„Î¿ ÎºÎµÎ»Î¬ÏÎ¹ Î¸Î± ÏƒÎµ Î±Î½Ï„Î±Î¼ÎµÎ¯ÏˆÏ‰!");
Database.addText("el.mapVillageFifthHouseAgree", "Î Î¬Î¼Îµ Ï„ÏŒÏ„Îµ!");
Database.addText("el.mapVillageFifthHouseCellarDone", "Î£Îµ ÎµÏ…Ï‡Î±ÏÎ¹ÏƒÏ„ÏŽ Ï€Î¿Ï… Ï„Î¿Ï…Ï‚ Î¾ÎµÏ†Î¿ÏÏ„ÏŽÎ¸Î·ÎºÎµÏ‚! ÎŸÏÎ¯ÏƒÏ„Îµ ÎºÎ¬Ï„Î¹ Ï€Î¿Î»Ï Ï€Î¿Î»ÏÏ„Î¹Î¼Î¿ Î³Î¹Î± Î±Î½Ï„Î±Î¼ÎµÎ¹Î²Î® : Î­Î½Î±Ï‚ Ï‡Î¬ÏÏ„Î·Ï‚ Ï„Î¿Ï… ÎºÏŒÏƒÎ¼Î¿Ï…. Î Î¹ÏƒÏ„ÎµÏÏ‰ Ï€Ï‰Ï‚ Î¸Î± Ï„Î¿Î½ Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®ÏƒÎµÎ¹Ï‚ Ï€ÎµÏÎ¹ÏƒÏƒÏŒÏ„ÎµÏÎ¿ Î±Ï€'ÏŒÏ„Î¹ ÎµÎ³ÏŽ.");
Database.addText("el.mapVillageTheShopComment", "Î¤Î¿ Î¼Î±Î³Î±Î¶Î¯");
Database.addText("el.mapBridgeComment", "Î— Î³Î­Ï†Ï…ÏÎ±");
Database.addText("el.mapFarmComment", "Î— Ï†Î¬ÏÎ¼Î± Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿Ï…ÏÎ¹ÏŽÎ½");
Database.addText("el.mapCaveEntranceComment", "Î— ÎµÎ¯ÏƒÎ¿Î´Î¿Ï‚ Ï„Î·Ï‚ ÏƒÏ€Ï…Î»Î¹Î¬Ï‚");
Database.addText("el.mapLighthouseComment", "ÎŸ Ï†Î¬ÏÎ¿Ï‚");
Database.addText("el.mapPierComment", "Î¤Î¿ Î»Î¹Î¼Î¬Î½Î¹");
Database.addText("el.mapTheHoleComment", "Î— Î¤ÏÏÏ€Î±");
Database.addText("el.candyBoxRequestStatusBarUnlocked", "Î–Î®Ï„Î·ÏƒÎµ Î­Î½Î± Î½Î­Î¿ Ï‡Î±ÏÎ±ÎºÏ„Î·ÏÎ¹ÏƒÏ„Î¹ÎºÏŒ Î±Ï€ÏŒ Ï„Î¿Î½ Î´Î·Î¼Î¹Î¿Ï…ÏÎ³ÏŒ (30 candies)");
Database.addText("el.candyBoxRequestStatusBarUnlockedCfg", "Î–Î®Ï„Î·ÏƒÎµ Î±ÎºÏŒÎ¼Î± Î­Î½Î± (5 candies)");
Database.addText("el.candyBoxRequestStatusBarUnlockedSave", "Î–Î®Ï„Î± Î³Î¹Î± Î±ÎºÏŒÎ¼Î± Î¼Î¹Î± Ï†Î¿ÏÎ¬(5 candies)");
Database.addText("el.candyBoxRequestStatusBarUnlockedHealthBar", "Î–Î®Ï„Î± ÎºÎ¬Ï„Î¹ Ï€Î¹Î¿ ÏƒÏ…Î½Î±ÏÏ€Î±ÏƒÏ„Î¹ÎºÏŒ (5 candies)");
Database.addText("el.candyBoxRequestStatusBarUnlockedMap", "Î¤ÎµÎ»ÎµÏ…Ï„Î±Î¯Î¿ Î±Î¯Ï„Î·Î¼Î±! Î‘Ï…Ï„ÏŒ Ï€ÏÎ­Ï€ÎµÎ¹ Î½Î± ÎºÎ¿ÏƒÏ„Î¯Î¶ÎµÎ¹ Ï€Î¿Î»Î»Î¬ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬. (10 candies)");
Database.addText("el.candyBoxRequestStatusBarUnlockedComment", "ÎžÎµÎºÎ»ÎµÎ¯Î´Ï‰ÏƒÎµÏ‚ Î¼Î¹Î± Î¼Ï€Î¬ÏÎ± ÎºÎ±Ï„Î¬ÏƒÏ„Î±ÏƒÎ·Ï‚! (Î±Ï€ÏŒ Ï€Î¬Î½Ï‰)");
Database.addText("el.candyBoxRequestStatusBarUnlockedCfgComment1", "Î¤ÏŽÏÎ± Î­Ï‡ÎµÎ¹Ï‚ Ï€ÏÏŒÏƒÎ²Î±ÏƒÎ· ÏƒÏ„Î· ÎºÎ±ÏÏ„Î­Î»Î± ÏÏ…Î¸Î¼Î¯ÏƒÎµÏ‰Î½");
Database.addText("el.candyBoxRequestStatusBarUnlockedCfgComment2", "ÎœÏ€Î¿ÏÎµÎ¯Ï‚ Î½Î± Î±Î»Î»Î¬Î¾ÎµÎ¹Ï‚ Ï„Î· Î³Î»ÏŽÏƒÏƒÎ±, Î±Î½ Î¸Î­Î»ÎµÎ¹Ï‚.");
Database.addText("el.candyBoxRequestStatusBarUnlockedSaveComment", "ÎœÎ¯Î± Î¬Î³ÏÎ¹Î± ÎºÎ±ÏÏ„Î­Î»Î± Î±Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ·Ï‚ ÎµÎ¼Ï†Î±Î½Î¯ÏƒÏ„Î·ÎºÎµ!");
Database.addText("el.candyBoxRequestStatusBarUnlockedHealthBarComment", "ÎŸÏÎ¯ÏƒÏ„Îµ 100 Ï€ÏŒÎ½Ï„Î¿Î¹ Î¶Ï‰Î®Ï‚. Î˜Î± ÎµÎ¹Î½Î±Î¹ Ï‡ÏÎ®ÏƒÎ¹Î¼Î¿Î¹.");
Database.addText("el.cfgChooseLanguage", "Î”Î¹Î¬Î»ÎµÎ¾Îµ Î³Î»ÏŽÏƒÏƒÎ± :");
Database.addText("el.cfgInvertColors", "Î‘Î½Ï„Î¹ÏƒÏ„ÏÎ¿Ï†Î® Ï‡ÏÏ‰Î¼Î¬Ï„Ï‰Î½;");
Database.addText("el.gridItemMainMapName", "ÎŸ Î§Î¬ÏÏ„Î·Ï‚");
Database.addText("el.gridItemMainMapDescription", "Î§Î¬ÏÏ„Î·Ï‚ Ï„Î¿Ï… ÎºÏŒÏƒÎ¼Î¿Ï…");
Database.addText("el.gridItemPogoStickName", "ÎšÎ±Î»Î¬Î¼Î¹ Ï€Î·Î´Î®Î¼Î±Ï„Î¿Ï‚");
Database.addText("el.gridItemPogoStickDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î±Î½Ï„Î¹ÎºÎµÎ¯Î¼ÎµÎ½Î¿Ï… ÏƒÎ¿Ï… ÎµÏ€Î¹Ï„ÏÎ­Ï€ÎµÎ¹ Î½Î± Î±Î½Î±Ï€Î·Î´Î¬Ï‚ ÏƒÏ„Î¹Ï‚ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î­Ï‚!");
Database.addText("el.gridItemTimeRingName", "ÎˆÎ½Î± Î´Î±Ï‡Ï„Î·Î»Î¯Î´Î¹ Ï‡ÏÏŒÎ½Î¿Ï…");
Database.addText("el.gridItemTimeRingDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î±Î½Ï„Î¹ÎºÎµÎ¯Î¼ÎµÎ½Î¿ ÏƒÎ¿Ï… Î´Î¯Î½ÎµÎ¹ Î¼Î¹Î± Î½Î­Î± Î´Ï…Î½Î±Ï„ÏŒÏ„Î·Ï„Î± ÏƒÏ„Î¹Ï‚ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î­Ï‚ : Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± ÎµÏ€Î¹Î²ÏÎ±Î´ÏÎ½ÎµÎ¹Ï‚ Ï„Î¿ Ï‡ÏÏŒÎ½Î¿. Î‘Î½ Ï„Î± Ï€ÏÎ¬Î³Î¼Î±Ï„Î± ÏƒÏ…Î¼Î²Î±Î¯Î½Î¿Ï…Î½ Ï…Ï€ÎµÏÎ²Î¿Î»Î¹ÎºÎ¬ Î³ÏÎ®Î³Î¿ÏÎ± Î³Î¹Î± ÎµÏƒÎ­Î½Î±, Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¯Î·ÏƒÎµ Ï„Î¿ Î´Î±Ï‡Ï„Ï…Î»Î¯Î´Î¹ Ï‡ÏÏŒÎ½Î¿Ï… ÏƒÎ¿Ï…!");
Database.addText("el.gridItemThirdHouseKeyName", "Î¤Î¿ Ï„ÏÎ¯Ï„Î¿ ÎºÎ»ÎµÎ¹Î´Î¯ ÏƒÏ€Î¹Ï„Î¹Î¿Ï");
Database.addText("el.gridItemThirdHouseKeyDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ ÎºÎ»ÎµÎ¹Î´Î¯ ÏƒÎ¿Ï… ÎµÏ€Î¹Ï„ÏÎ­Ï€ÎµÎ¹ Î½Î± Î¼Ï€ÎµÎ¯Ï‚ ÏƒÏ„Î¿ Ï„ÏÎ¯Ï„Î¿ ÏƒÏ€Î¯Ï„Î¹ Ï„Î¿Ï… Ï‡Ï‰ÏÎ¹Î¿Ï.");
Database.addText("el.gridItemFeatherName", "ÎˆÎ½Î± Ï†ÏÎµÏÏŒ Ï€Î¿Ï…Î»Î¹Î¿Ï Ï„Î·Ï‚ ÎµÏÎ®Î¼Î¿Ï…");
Database.addText("el.gridItemFeatherDescription", "Î¤Î¿ Î¼Î±Î³Î¹ÎºÏŒ Ï†Ï„ÎµÏÏŒ ÏƒÎ¿Ï… ÎµÏ€Î¹Ï„ÏÎ­Ï€ÎµÎ¹ Î½Î± Î±Î½Î±Î¼Î·Î´Î¬Ï‚ ÏˆÎ·Î»ÏŒÏ„ÎµÏÎ± ÏŒÏ„Î±Î½ Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹ÎµÎ¯Ï‚ Ï„Î¿ ÎšÎ±Î»Î¬Î¼Î¹ Î Î·Î´Î®Î¼Î±Ï„Î¿Ï‚!");
Database.addText("el.gridItemFeatherDescriptionNoPogoStick", "Î“Î¹Î± Î­Î½Î±Î½ Î±Î½ÎµÎ¾Î®Î³Î·Ï„Î¿ Î»ÏŒÎ³Î¿, Î½Î¹ÏŽÎ¸ÎµÎ¹Ï‚ ÏŒÏ„Î¹ Î±Ï…Ï„ÏŒ Ï„Î¿ Ï†Ï„ÎµÏÏŒ Î¸Î± Î®Ï„Î±Î½ Ï‡ÏÎ®ÏƒÎ¹Î¼Î¿ Î¬Î¼Î± ÎµÎ¯Ï‡ÎµÏ‚ Î­Î½Î± ÎºÎ±Î»Î¬Î¼Î¹ Ï€Î·Î´Î®Î¼Î±Ï„Î¿Ï‚...");
Database.addText("el.gridItemSpongeName", "ÎˆÎ½Î± Î¼Î±Î³Î¹ÎºÏŒ ÏƒÏ†Î¿Ï…Î³Î³Î¬ÏÎ¹");
Database.addText("el.gridItemSpongeDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î¼Î±Î³Î¹ÎºÏŒ ÏƒÏ†Î¿Ï…Î³Î³Î¬ÏÎ¹ ÏƒÎ¿Ï… ÎµÏ€Î¹Ï„ÏÎ­Ï€ÎµÎ¹ Î½Î± Î¶Î¿Ï…Î»Î¬Ï‚ Ï„Î¿Î½ ÎµÎ±Ï…Ï„ÏŒ ÏƒÎ¿Ï… ÏƒÎ±Î½ ÏƒÏ€ÏŒÎ³ÎºÎ¿ Î­Ï„ÏƒÎ¹ ÏŽÏƒÏ„Îµ Î½Î± Î¼Î¹ÎºÏÎ®Î½ÎµÎ¹ Ï„Î¿ Î¼Î­Î³ÎµÎ¸ÏŒÏ‚ ÏƒÎ¿Ï….");
Database.addText("el.gridItemFortressKeyName", "Î¤Î¿ ÎºÎ»ÎµÎ¹Î´Î¯ Ï„Î¿Ï… ÎºÎ¬ÏƒÏ„ÏÎ¿Ï… Ï„Î·Ï‚ ÎµÏÎ®Î¼Î¿Ï…");
Database.addText("el.gridItemFortressKeyDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ ÎºÎ»ÎµÎ¹Î´Î¯ ÏƒÎ¿Ï… ÎµÏ€Î¹Ï„ÏÎ­Ï€ÎµÎ¹ Î½Î± Î¼Ï€ÎµÎ¹Ï‚ ÏƒÏ„Î¿ Î±ÏÏ‡Î±Î¯Î¿ ÎºÎ¬ÏƒÏ„ÏÎ¿ Ï€Î¬Î½Ï‰ Î±Ï€ÏŒ Ï„Î·Î½ Î­ÏÎ·Î¼Î¿. Î Î¿Î¹ÏŒÏ‚ Î¾Î­ÏÎµÎ¹ Ï„Î¹ Î¸Î± Î¼Ï€Î¿ÏÎ¿ÏÏƒÎµÏ‚ Î½Î± Î²ÏÎµÎ¯Ï‚ ÎµÎºÎµÎ¯;");
Database.addText("el.gridItemHeartPendantName", "ÎˆÎ½Î± ÎºÎ¿Î»Î¹Î­ ÎºÎ±ÏÎ´Î¹Î¬Ï‚");
Database.addText("el.gridItemHeartPendantDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ ÎºÎ¿Î»Î¹Î­ ÎºÎ±ÏÎ´Î¹Î¬Ï‚ Î¸Î± Î±Ï…Î¾Î®ÏƒÎµÎ¹ Ï„Î¿Ï…Ï‚ Ï€ÏŒÎ½Ï„Î¿Ï…Ï‚ Î¶Ï‰Î®Ï‚ ÏƒÎ¿Ï… ÎµÏ†ÏŒÏƒÏ‰Î½ Ï„Î¿ Ï†Î¿ÏÎ¬Ï‚ ÏƒÏ„Î¿ Î»Î±Î¹Î¼ÏŒ ÏƒÎ¿Ï….");
Database.addText("el.gridItemHeartPlugName", "ÎˆÎ½Î± Î²Î®ÏƒÎ¼Î± ÎºÎ±ÏÎ´Î¹Î¬Ï‚");
Database.addText("el.gridItemHeartPlugDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î²Î®ÏƒÎ¼Î± ÎºÎ±ÏÎ´Î¹Î¬Ï‚, Ï†Ï„Î¹Î±Î³Î¼Î­Î½Î¿ Î¼Îµ ÏƒÎ¯Î´ÎµÏÎ¿, Ï€ÏŒÎ´Î¹Î± Î±ÏÎ¬Ï‡Î½Î·Ï‚ ÎºÎ±Î¹ Î­Î½Î± Î¹Î´Î¹Î±Î¯Ï„ÎµÏÎ¿ \"Ï…Î³ÏÏŒ ÎºÎ±ÏÎ´Î¹Î¬Ï‚\" ÎºÎ»ÎµÎ¹ÏƒÎ¼Î­Î½Î¿ ÏƒÏ„Î¿ ÎºÎ­Î½Ï„ÏÎ¿, Î¸Î± Î±Ï…Î¾Î®ÏƒÎµÎ¹ Ï„Î¿Ï…Ï‚ Ï€ÏŒÎ½Ï„Î¿Ï…Ï‚ Î¶Ï‰Î®Ï‚ ÏƒÎ¿Ï… ÎºÎ±Ï„Î¬ 20 Ï„Î¿Î¹Ï‚ ÎµÎºÎ±Ï„ÏŒ!");
Database.addText("el.gridItemBeginnersGrimoireName", "Î¤Î¿ Î¼Î±Î³Î¹ÎºÏŒ Î²Î¹Î²Î»Î¯Î¿ Ï„Î¿Ï… Ï€ÏÏ‰Ï„Î¬ÏÎ·");
Database.addText("el.gridItemBeginnersGrimoireDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î¼Î±Î³Î¹ÎºÏŒ Î²Î¹Î²Î»Î¯Î¿ ÏƒÎ¿Ï… Ï€ÏÎ¿ÏƒÏ†Î­ÏÎµÎ¹ Ï„ÏÎ¯Î± Î¾ÏŒÏÎºÎ¹Î±, ÎµÏÎºÎ¿Î»Î± Î½Î± ÎµÎºÏ„ÎµÎ»ÎµÏƒÏ„Î¿ÏÎ½. Î•Î¯Î½Î±Î¹ Ï€ÏÎ±Î³Î¼Î±Ï„Î¹ÎºÎ¬ Ï†Ï„Î¹Î±Î³Î¼Î­Î½Î¿ Î³Î¹Î± Ï€ÏÏ‰Ï„Î¬ÏÎ·Î´ÎµÏ‚. Î˜Î± Î­Ï‡ÎµÎ¹Ï‚ Ï„Î·Î½ Î´Ï…Î½Î±Ï„ÏŒÏ„Î·Ï„Î± Î½Î± Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®ÏƒÎµÎ¹Ï‚ Ï„Î¿ Î¾ÏŒÏÎºÎ¹ ÏŒÎ¾Î¹Î½Î·Ï‚ Î²ÏÎ¿Ï‡Î®Ï‚ (Î¼Î¹Î± Î¼ÎµÎ³Î¬Î»Î· Ï€Î¿ÏƒÏŒÏ„Î·Ï„Î± Î±Ï€ÏŒ Î¿Î¾Ï… Î¸Î± Ï€Î­ÏƒÎµÎ¹ ÏƒÏ„Î¿Ï…Ï‚ ÎµÏ‡Î¸ÏÎ¿Ï…Ï‚ ÏƒÎ¿Ï…), Ï„Î¿ Î¾ÏŒÏÎºÎ¹ Ï†Î»ÏŒÎ³Î¹Î½Î·Ï‚ Î¼Ï€Î¬Î»Î±Ï‚ (Î¼Î¯Î± Î³Î¹Î³Î¬Î½Ï„Î¹Î± Î¼Î±Î³Î¹ÎºÎ® Î¼Ï€Î¬Î»Î± Ï†Ï„Î¹Î±Î³Î¼Î­Î½Î· Î±Ï€ÏŒ Ï†Ï‰Ï„Î¹Î¬ Î¸Î± Ï€ÎµÏ„Î¬Î¾ÎµÎ¹ Ï€ÏÎ¿Ï‚ Ï„Î¿Ï…Ï‚ ÎµÏ‡Î¸ÏÎ¿ÏÏ‚ ÏƒÎ¿Ï…) ÎºÎ±Î¹ Ï„Î¿ Î¾ÏŒÏÎºÎ¹ Ï„Î·Î»ÎµÎ¼ÎµÏ„Î±Ï†Î¿ÏÎ¬Ï‚ (Ï„Î¿ Î¿Ï€Î¿Î¯Î¿ Î¸Î± ÏƒÎµ Ï„Î·Î»ÎµÎ¼ÎµÏ„Î±Ï†Î­ÏÎµÎ¹ ÏƒÎµ Î¼Î¯Î± Î¼Î· Ï€ÏÎ¿Î²Î»Î­ÏˆÎ¹Î¼Î· Ï„Î¿Ï€Î¿Î¸ÎµÏƒÎ¯Î±)");
Database.addText("el.gridItemAdvancedGrimoireName", "Î¤Î¿ Î±Î½ÏŽÏ„ÎµÏÎ¿ Î¼Î±Î³Î¹ÎºÏŒ Î²Î¹Î²Î»Î¯Î¿");
Database.addText("el.gridItemAdvancedGrimoireDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î±Î½ÏŽÏ„ÎµÏÎ¿ Î¼Î±Î³Î¹ÎºÏŒ Î²Î¹Î²Î»Î¯Î¿ ÏƒÎ¿Ï… Ï€ÏÎ¿ÏƒÏ†Î­ÏÎµÎ¹ Î´ÏÎ¿ Î¾ÏŒÏÎºÎ¹Î± : Ï„Î¿ Î´Î¹Î±Î³ÏÎ±Ï†Î® Î¼Î±Î³ÎµÎ¯Î±Ï‚ Î¾ÏŒÏÎºÎ¹ ÎºÎ±Î¹ Ï„Î¿ Î¾ÏŒÏÎºÎ¹ Î±Î³ÎºÎ±Î¸Ï‰Ï„Î®Ï‚ Î±ÏƒÏ€Î¯Î´Î±Ï‚. Î¤Î¿ Ï€ÏÏŽÏ„Î¿ Î¸Î± Î´Î¹Î±Î³ÏÎ¬ÏˆÎµÎ¹ ÏŒÎ»Î· Ï„Î· Î¼Î±Î³ÎµÎ¯Î± Î±Ï€ÏŒ Î¼Î¯Î± Î±Ï€Î¿ÏƒÏ„Î¿Î»Î® ÏƒÎµ Î¼Î¯Î± Ï†Î¬ÏƒÎ·, ÏƒÏ…Î¼Ï€ÎµÏÎ¹Î»Î±Î¼Î²Î±Î½Î¿Î¼Î­Î½Ï‰Î½ ÏŒÎ»Ï‰Î½ Ï„Ï‰Î½ Î¾ÏŽÏÎºÎ¹Ï‰Î½ Ï€Î¿Ï… ÎµÎºÏ„Î­Î»ÎµÏƒÎµÏ‚ ÎºÎ±Î¹ Ï„Î· Î¼Î±Î³ÎµÎ¯Î± Ï„Ï‰Î½ ÎµÏ‡Î¸ÏÏŽÎ½ ÏƒÎ¿Ï…. Î¤Î¿ Î´ÎµÏÏ„ÎµÏÎ¿ Î¸Î± Î´Î·Î¼Î¹Î¿Ï…ÏÎ³Î®ÏƒÎµÎ¹ Î³ÏÏÏ‰ ÏƒÎ¿Ï… Î¼Î¹Î± Î±ÏƒÏ€Î¯Î´Î± Î±Ï€ÏŒ Î±Î¹Ï‰ÏÎ¿ÏÎ¼ÎµÎ½Î± Î±Î³ÎºÎ¬Î¸Î¹Î± Î· Î¿Ï€Î¿Î¯Î± Î¸Î± Ï€ÏÎ¿ÎºÎ±Î»ÎµÎ¯ Î¶Î·Î¼Î¹Î¬ ÏƒÏ„Î¿Ï…Ï‚ ÎµÏ‡Î¸ÏÎ¿ÏÏ‚ ÏƒÎ¿Ï…, ÏŒÏ„Î±Î½ Î­ÏÏ‡Î¿Î½Ï„Î±Î¹ ÏƒÎµ ÎµÏ€Î±Ï†Î® Î¼Îµ Î±Ï…Ï„Î®Î½.");
Database.addText("el.gridItemBlackMagicGrimoireName", "Î¤Î¿ Î¼Î±ÏÏÎ¿ Î¼Î±Î³Î¹ÎºÏŒ Î²Î¹Î²Î»Î¯Î¿");
Database.addText("el.gridItemBlackMagicGrimoireDescription", "Î’ÏÎ®ÎºÎµÏ‚ Î±Ï…Ï„ÏŒ Ï„Î¿ Î¼Î±Î³Î¹ÎºÏŒ Î²Î¹Î²Î»Î¯Î¿ ÏƒÎµ Î¼Î¯Î± ÏƒÏ€Ï…Î»Î¹Î¬, Î®Ï„Î±Î½ Ï€Î¿Î»Ï Î´ÏÏƒÎºÎ¿Î»Î¿ Î½Î± Ï„Î¿ Ï€Î¬ÏÎµÎ¹Ï‚, Î³Î¹Î± ÎºÎ¬Ï€Î¿Î¹Î¿ Î»ÏŒÎ³Î¿.  Î£Î¿Ï… Ï€ÏÎ¿ÏƒÏ†Î­ÏÎµÎ¹ Î´ÏÎ¿ Î´Ï…Î½Î±Ï„Î¬ Î¾ÏŒÏÎºÎ¹Î± Î¼Î±ÏÏÎ·Ï‚ Î¼Î±Î³ÎµÎ¯Î±Ï‚. Î¤Î¿ Ï€ÏÏŽÏ„Î¿ Î¸Î± Î´Î·Î¼Î¹Î¿Ï…ÏÎ³Î®ÎµÎ¹ Î¼Ï€ÏÎ¿ÏƒÏ„Î¬ ÏƒÎ¿Ï… Î­Î½Î±Î½ Î³Î¹Î³Î¬Î½Ï„Î¹Î¿ Ï„Î¿Î¯Ï‡Î¿ Ï†Ï„Î¹Î±Î³Î¼Î­Î½Î¿ Î±Ï€ÏŒ Ï„Î¿ÏÎ²Î»Î± Î¿ÏˆÎ¹Î´Î¹Î±Î½Î¿Ï, Î¿ Î¿Ï€Î¿Î¯Î¿Ï‚ Î¼Ï€Î¿ÏÎµÎ¯ Î½Î± ÎµÎ¯Î½Î±Î¹ Ï‡ÏÎ®ÏƒÎ¹Î¼Î¿Ï‚ ÏƒÏ„Î¿ Î½Î± ÎºÎ¬Î½ÎµÎ¹Ï‚ Ï„Î¿Ï…Ï‚ Î±Î½Ï„Î¹Ï€Î¬Î»Î¿Ï…Ï‚ ÏƒÎ¿Ï… Ï€Î¹Î¿ Î±ÏÎ³Î¿ÏÏ‚. Î¤Î¿ Î´ÎµÏÏ„ÎµÏÎ¿ Î¸Î± ÎºÎ±Î»Î­ÏƒÎµÎ¹ Î­Î½Î± ÎºÎ¿Ï€Î¬Î´Î¹ Î±Ï€ÏŒ Î´Î±Î¯Î¼Î¿Î½ÎµÏ‚ Î¿Î¹ Î¿Ï€Î¿Î¯Î¿Î¹ Î¸Î± ÎµÏ€Î¹Ï„Î¯Î¸Î¿Î½Ï„Î±Î¹ ÏƒÎµ ÏŒÎ»Î¿Ï…Ï‚ ÏƒÏ„Î·Î½ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î®, ÏƒÏ…Î¼Ï€ÎµÏÎ¹Î»Î±Î¼Î²Î±Î½Î¿Î¼Î­Î½Î¿Ï… ÎºÎ±Î¹ ÎµÏƒÎ­Î½Î±. ÎÎ± ÎµÎ¯ÏƒÎ±Î¹ Ï€ÏÎ¿ÏƒÎµÏ‡Ï„Î¹ÎºÏŒÏ‚ Î¼Îµ Î±Ï…Ï„ÏŒ.");
Database.addText("el.gridItemUnicornHornName", "ÎˆÎ½Î± ÎºÎ­ÏÎ±Ï„Î¿ Î¼Î¿Î½ÏŒÎºÎµÏÎ¿Ï…");
Database.addText("el.gridItemUnicornHornDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î¼Î±Î³Î¹ÎºÏŒ ÎºÎ­ÏÎ±Ï„Î¿ Î¬Î½Î·ÎºÎµ ÏƒÎµ Î­Î½Î±Î½ Î¼Î¿Î½ÏŒÎºÎµÏÎ¿.  ÎŸÎ¹ Î´Ï…Î½Î±Ï„Î­Ï‚ Î¸ÎµÏÎ±Ï€ÎµÏ…Ï„Î¹ÎºÎ­Ï‚ Î´Ï…Î½Î¬Î¼ÎµÎ¹Ï‚ Ï„Î¿Ï…, Î¸Î± ÏƒÎµ Î²Î¿Î·Î¸Î®ÏƒÎ¿Ï…Î½ Ï€Î¿Î»Ï. Î†ÎºÎ¿Ï…ÏƒÎµÏ‚ Ï€Ï‰Ï‚ Î¿ Î¼Î¿Î½ÏŒÎºÎµÏÎ¿Ï‚ Î¿Î½Î¿Î¼Î±Î¶ÏŒÏ„Î±Î½ Charlie.");
Database.addText("el.gridItemXinopherydonClawName", "ÎœÎ¯Î± Î´Î±Î³ÎºÎ¬Î½Î± xinopherydon");
Database.addText("el.gridItemXinopherydonClawDescription", "Î‘Ï…Ï„Î® Î· Î´Î±Î³ÎºÎ¬Î½Î± Î¬Î½Î·ÎºÎµ ÏƒÎµ Î­Î½Î± xinopherydon, Î­Î½Î± Î±ÏÏ‡Î±Î¯Î¿ Î´Î¹ÎºÎ­Ï†Î±Î»Î¿ Î¶ÏŽÎ¿ Ï€Î¿Ï… ÏŒÎ»Î¿Î¹ Ï€Î¹ÏƒÏ„ÎµÏÎ¿Ï…Î½ Ï€Ï‰Ï‚ Î­Ï‡ÎµÎ¹ ÎµÎ¾Î±Ï†Î±Î½Î¹ÏƒÏ„ÎµÎ¯. Î˜Î± Î´Î¹Ï€Î»Î±ÏƒÎ¹Î¬ÏƒÎµÎ¹ Ï„Î·Î½ Î¶Î·Î¼Î¹Î¬ Ï€Î¿Ï… Î±ÏƒÎ»ÎµÎ¯ Ï„Î¿ ÏŒÏ€Î»Î¿ Ï€Î¿Ï… Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹ÎµÎ¯Ï‚.");
Database.addText("el.gridItemPitchforkName", "ÎˆÎ½Î± Î´Î¯ÎºÏÎ±Î½Î¿");
Database.addText("el.gridItemPitchforkDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î¹Î´Î¹Î±Î¯Ï„ÎµÏÎ¿ Î´Î¯ÎºÏÎ±Î½Î¿ ÏƒÎ¿Ï… ÎµÏ€Î¹Ï„ÏÎ­Ï€ÎµÎ¹ Î½Î± Î»Ï…Î¬Î½ÎµÎ¹Ï‚ Ï„Î¿ Ï‡ÏŽÎ¼Î± Ï‡Ï‰ÏÎ¯Ï‚ Î½Î± Ï‡ÏÎµÎ¹Î¬Î¶ÎµÏ„Î±Î¹ Î½Î± Ï„Î¿ Î±Î½Î±Ï€Î¿Î´Î¿Î³Î·ÏÎ®ÏƒÎµÎ¹Ï‚, Ï‰Ï‚ ÎµÎº Ï„Î¿ÏÏ„Î¿Ï…, Î´Î¹Î±Ï„Î·ÏÎµÎ¯Ï‚ Ï…Ï€ÏŒÎ³ÎµÎ¹Î± Î¿Î¹ÎºÏƒÏ…ÏƒÏ„Î®Î¼Î±Ï„Î± Ï‡ÏŽÎ¼Î±Ï„Î¿Ï‚. Î˜Î± Ï„ÏÎ¹Ï€Î»Î±ÏƒÎ¹Î¬ÏƒÎµÎ¹ Ï„Î·Î½ Ï€Î±ÏÎ±Î³Ï‰Î³Î® Î³Î»Ï…Ï†ÎµÎ¹Ï„Î¶Î¿Ï…ÏÎ¹ÏŽÎ½ ÏƒÎ¿Ï….");
Database.addText("el.gridItemShellPowderName", "Î£ÎºÏŒÎ½Î· ÎºÎ¿Ï‡Ï…Î»Î¹Î¿Ï");
Database.addText("el.gridItemShellPowderDescription", "Î— ÏƒÎºÏŒÎ½Î· ÎºÎ¿Ï‡Ï…Î»Î¹Î¿Ï ÏƒÏ…Ï‡Î½Î¬ Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®Ï„Îµ Î±Ï€ÏŒ Î±Î³ÏÏŒÏ„ÎµÏ‚ Î³Î¹Î± Î½Î± Î²ÎµÎ»Ï„Î¹ÏŽÏƒÎµÎ¹ Ï„Î·Î½ Î±Î½Î¬Ï€Ï„Ï…Î¾Î· Ï„Ï‰Î½ Î³Î»Ï…Ï†ÎµÎ¹Ï„Î¶Î¿Ï…ÏÎ¹ÏŽÎ½ Ï„Î¿Ï…Ï‚. Î‘Ï…Ï„Î® Î· ÏƒÎºÏŒÎ½Î· Î¸Î± Ï€Î¿Î»Î»Î±Ï€Î»Î±ÏƒÎ¹Î¬ÏƒÎµÎ¹ Ï„Î·Î½ Ï€Î±ÏÎ±Î³Ï‰Î³Î® Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿Ï…ÏÎ¹ÏŽÎ½ ÏƒÎ¿Ï… ÎºÎ±Ï„Î¬ Ï„ÏÎ¯Î±!");
Database.addText("el.gridItemPName", "Î— Ï€Î­Ï„ÏÎ± P");
Database.addText("el.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("el.gridItemLName", "Î— Ï€Î­Ï„ÏÎ± L");
Database.addText("el.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("el.gridItemAName", "Î— Ï€Î­Ï„ÏÎ± Î‘");
Database.addText("el.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("el.gridItemYName", "Î— Ï€Î­Ï„ÏÎ± Î¥");
Database.addText("el.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("el.gridItemRedSharkFinName", "ÎˆÎ½Î± Î¼Î±Î³Î¹ÎºÏŒ ÎºÏŒÎºÎºÎ¹Î½Î¿ Ï€Ï„ÎµÏÏÎ³Î¹Î¿ ÎºÎ±ÏÏ‡Î±ÏÎ¯Î±");
Database.addText("el.gridItemRedSharkFinDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î¼Î±Î³Î¹ÎºÏŒ Ï€Ï„ÎµÏÏÎ³Î¹Î¿ Î¸Î± Î±Ï…Î¾Î®ÏƒÎµÎ¹ ÏƒÎµ Î¼ÎµÎ³Î¬Î»Î¿ Î²Î±Î¸Î¼ÏŒ Ï„Î·Î½ Î¶Î·Î¼Î¹Î¬ Ï€Î¿Ï… Î±ÏƒÎºÎµÎ¯ Ï„Î¿ Î¾ÏŒÏÎºÎ¹ Ï†Î»ÏŒÎ³Î¹Î½Î·Ï‚ ÏƒÏ†Î±Î¯ÏÎ±Ï‚ ÏƒÎ¿Ï…. Î•Ï€Î¹Ï„Î­Î»Î¿Ï…Ï‚, Î±Ï…Ï„Î® Î· Ï†Î»ÏŒÎ³Î¹Î½Î· ÏƒÏ†Î±Î¯ÏÎ± Î¸Î± Î³Î¯Î½ÎµÎ¹ Ï‡ÏÎ®ÏƒÎ¹Î¼Î·.");
Database.addText("el.gridItemGreenSharkFinName", "ÎˆÎ½Î± Î¼Î±Î³Î¹ÎºÏŒ Ï€ÏÎ¬ÏƒÎ¹Î½Î¿ Ï€Ï„ÎµÏÏÎ³Î¹Î¿ ÎºÎ±ÏÏ‡Î±ÏÎ¯Î±");
Database.addText("el.gridItemGreenSharkFinDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î¼Î±Î³Î¹ÎºÏŒ Ï€Ï„ÎµÏÏÎ³Î¹Î¿ Î¸Î± Ï†Î­ÏÎµÎ¹ Ï„Î· Î´ÏÎ½Î±Î¼Î· Ï„Î·Ï‚ Ï†ÏÏƒÎµÏ‰Ï‚ ÏƒÏ„Î· Ï†Î¬ÏÎ¼Î± Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿Ï…ÏÎ¹ÏŽÎ½ ÏƒÎ¿Ï…! Î— Ï€Î±ÏÎ±Î³Ï‰Î³Î¹ÎºÏŒÏ„Î·Ï„Î¬ ÏƒÎ¿Ï… Î¸Î± Ï€Î¿Î»Î»Î±Ï€Î»Î±ÏƒÎ¹Î±ÏƒÏ„ÎµÎ¹ ÎºÎ±Ï„Î¬ 5.");
Database.addText("el.gridItemPurpleSharkFinName", "ÎˆÎ½Î± Î¼Î±Î³Î¹ÎºÏŒ Î¼Ï‰Î² Ï€Ï„ÎµÏÏÎ³Î¹Î¿ ÎºÎ±ÏÏ‡Î±ÏÎ¯Î±");
Database.addText("el.gridItemPurpleSharkFinDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î¼Î±Î³Î¹ÎºÏŒ Ï€Ï„ÎµÏÏÎ³Î¹Î¿ Î¸Î± ÏƒÎ¿Ï… Ï€ÏÎ¿ÏƒÏ†Î­ÏÎµÎ¹ Î­Î½Î± Î½Î­Ï€ Î¾ÏŒÏÎºÎ¹ Î¼Î±ÏÏÎ·Ï‚ Î¼Î±Î³ÎµÎ¯Î±Ï‚. ÎœÏ€Î¿ÏÎµÎ¯Ï‚ Î½Î± Ï„Î¿ Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®ÏƒÎµÎ¹Ï‚ Î¼ÏŒÎ½Î¿ Î¼Î¯Î± Ï†Î¿ÏÎ¬ ÏƒÎµ ÎºÎ¬Î¸Îµ Ï€ÎµÏÎ¹Ï€Î­Ï„ÎµÎ¹Î±. Î ÏÏŒÏƒÎµÏ‡Îµ Î¼Îµ Î±Ï…Ï„Î¿!");
Database.addText("el.gridItemTalkingCandyName", "ÎˆÎ½Î± Î¿Î¼Î¹Î»Î¿ÏÎ½Ï„Î¿ Î¶Î±Ï‡Î±ÏÏ‰Ï„ÏŒ");
Database.addText("el.gridItemTalkingCandyDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î¿Î¼Î¹Î»Î¿ÏÎ½Ï„Î¿ Î¶Î±Ï‡Î±ÏÏ‰Ï„ÏŒ ÎµÎ¼Ï†Î±Î½Î¯ÏƒÏ„Î·ÎºÎµ Î±Ï†Î¿Ï Î­Î²Î±Î»ÎµÏ‚ Ï„Î¹Ï‚ Ï„Î­ÏƒÏƒÎµÏÎ¹Ï‚ Ï€Î­Ï„ÏÎµÏ‚ ÏƒÏ„Î·Î½ ÎºÎ¿ÏÏ…Ï†Î® Ï„Î¿Ï… ÎºÎ¬ÏƒÏ„ÏÎ¿Ï…. ÎœÏ€Î¿ÏÎµÎ¯ Î½Î± ÏƒÎµ Î²Î¿Î·Î¸Î®ÏƒÎµÎ¹ Î½Î± Î±Î½Î¿Î¯Î¾ÎµÎ¹Ï‚ Ï„Î¿ candy box...");
Database.addText("el.inventorySpecialNothingEqItem", "Î¤Î¯Ï€Î¿Ï„Î±");
Database.addText("el.eqItemWeaponWoodenSwordName", "ÎžÏÎ»Î¹Î½Î¿ ÏƒÏ€Î±Î¸Î¯");
Database.addText("el.eqItemWeaponWoodenSwordDescription", "ÎˆÎ½Î± Î±Ï€Î»ÏŒ ÏƒÏ€Î±Î¸Î¯ Ï†Ï„Î¹Î±Î³Î¼Î­Î½Î¿ Î±Ï€ÏŒ Î¾ÏÎ»Î¿");
Database.addText("el.eqItemWeaponIronAxeName", "Î£Î¹Î´ÎµÏÎ­Î½Î¹Î¿ Ï„ÏƒÎµÎºÎ¿ÏÏÎ¹");
Database.addText("el.eqItemWeaponIronAxeDescription", "ÎˆÎ½Î± Î±Ï€Î»ÏŒ ÏƒÎ¹Î´ÎµÏÎ­Î½Î¹Î¿ Ï„ÏƒÎµÎºÎ¿ÏÏÎ¹. ÎšÎ±Î»Î¬ Î±ÎºÎ¿Î½Î¹ÏƒÎ¼Î­Î½Î¿. Î Î¹Î¿ Î´Ï…Î½Î±Ï„ÏŒ Î±Ï€ÏŒ Ï„Î¿ Î¾ÏÎ»Î¹Î½Î¿ ÏƒÏ€Î±Î¸Î¯.");
Database.addText("el.eqItemWeaponPolishedSilverSwordName", "Î“Ï…Î±Î»Î¹ÏƒÎ¼Î­Î½Î¿ Î±ÏƒÎ·Î¼Î­Î½Î¹Î¿ ÏƒÏ€Î±Î¸Î¯");
Database.addText("el.eqItemWeaponPolishedSilverSwordDescription", "ÎˆÎ½Î± Î´Ï…Î½Î±Ï„ÏŒ ÏƒÏ€Î±Î¸Î¯ ÎºÎ±Î»Ï…Î¼Î­Î½Î¿ Î¼Îµ Î±Î³ÎºÎ¬Î¸Î¹Î±.");
Database.addText("el.eqItemWeaponTrollBludgeonName", "Î¤Î¿ ÏÏŒÏ€Î±Î»Î¿ Ï„Î¿Ï… Troll");
Database.addText("el.eqItemWeaponTrollBludgeonDescription", "Î Î®ÏÎµÏ‚ Î±Ï…Ï„ÏŒ Ï„Î¿ ÏÏŒÏ€Î±Î»Î¿ Î±Ï€ÏŒ Ï„Î¿ troll Ï€Î¿Ï… Ï€ÏÎ¿ÏƒÏ„Î¬Ï„ÎµÏ…Îµ Ï„Î· Î³Î­Ï†Ï…ÏÎ±. Î•Î¯Î½Î±Î¹ Î±ÏÎ³ÏŒ, Î±Î»Î»Î¬ Î»Î¹ÏŽÎ½ÎµÎ¹ Ï„Î¿Ï…Ï‚ ÎµÏ‡Î¸ÏÎ¿ÏÏ‚ ÏƒÎ¿Ï… Î±ÏÎºÎµÏ„Î¬ Î±Ï€Î¿Ï„ÎµÎ»ÎµÏƒÎ¼Î±Ï„Î¹ÎºÎ¬.");
Database.addText("el.eqItemWeaponTribalSpearName", "ÎˆÎ½Î± Î´ÏŒÏÎ¹ Ï„Î·Ï‚ Ï†Ï…Î»Î®Ï‚");
Database.addText("el.eqItemWeaponTribalSpearDescription", "Î’ÏÎ®ÎºÎµÏ‚ Î±Ï…Ï„ÏŒ Ï„Î¿ Î´ÏŒÏÎ¹ ÏƒÏ„Î¿ Ï€Ï„ÏŽÎ¼Î± ÎµÎ½ÏŒÏ‚ Î¼Î±Ï‡Î·Ï„Î® Ï„Î·Ï‚ Ï†Ï…Î»Î®Ï‚ Ï€Î¿Ï… Î®Ï„Î±Î½ Ï‡Î±Î¼Î­Î½Î¿Ï‚ ÏƒÎµ Î¼Î¯Î± Î¼ÎµÎ³Î¬Î»Î· Ï„ÏÏÏ€Î± ÏƒÏ„Î¿ Î­Î´Î±Ï†Î¿Ï‚. ÎˆÎ¹Î½Î±Î¹ Î»Î¯Î³Î¿ ÏƒÏÏƒÎºÎ¿Î»Î¿ Î½Î± Ï„Î¿ Ï‡ÎµÎ¹ÏÎ¹ÏƒÏ„ÎµÎ¯Ï‚ ÏƒÏ„Î·Î½ Î±ÏÏ‡Î®, Î±Î»Î»Î¬ Î¼ÏŒÎ»Î¹Ï‚ Ï„Î¿ ÏƒÏ…Î½Î·Î¸Î®ÏƒÎµÎ¹Ï‚, ÎµÎ¯Î½Î±Î¹ Î­Î½Î± ÎºÎ±Î»ÏŒ ÏŒÏ€Î»Î¿.");
Database.addText("el.eqItemWeaponSummoningTribalSpearName", "ÎˆÎ½Î± ÎºÎ»Î·Ï„ÎµÏ…Ï„Î¹ÎºÏŒ Î´ÏŒÏÎ¹ Ï„Î·Ï‚ Ï†Ï…Î»Î®Ï‚");
Database.addText("el.eqItemWeaponSummoningTribalSpearDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î¼Î±Î³Î¹ÎºÏŒ Î´ÏŒÏÎ¹ Ï†Ï…Î»Î®Ï‚, Ï€Î­ÏÎ± Ï„Î¿Ï… ÏŒÏ„Î¹ ÎµÎ¯Î½Î±Î¹ Ï€Î¹Î¿ Î´Ï…Î½Î±Ï„ÏŒ Î±Ï€ÏŒ Ï„Î¿ ÎºÎ±Î½Î¿Î½Î¹ÎºÏŒ Î´ÏŒÏÎ¹ Ï†Ï…Î»Î®Ï‚, Î¸Î± ÎµÎ¼Ï†Î±Î½Î¯Î¶ÎµÎ¹ ÏƒÏ…Ï‡Î½Î¬ Î¼Î±Ï‡Î·Ï„Î­Ï‚ Ï†Ï…Î»Î®Ï‚ Î¿Î¹ Î¿Ï€Î¿Î¯Î¿Î¹ Î¸Î± ÏƒÎµ Î²Î¿Î·Î¸Î®ÏƒÎ¿Ï…Î½ ÎºÎ±Ï„Î¬ Ï„Î· Î´Î¹Î¬ÏÎºÎµÎ¹ Ï„ÏˆÎ½ Î±Ï€Î¿ÏƒÏ„Î¿Î»ÏŽÎ½ ÏƒÎ¿Ï….");
Database.addText("el.eqItemWeaponMonkeyWizardStaffName", "Î¤Î¿ ÏÎ±Î²Î´Î¯ Ï„Î¿Ï… Î²Î±ÏƒÎ¹Î»Î¹Î¬ Î¼Î±ÎªÎ¼Î¿Ï");
Database.addText("el.eqItemWeaponMonkeyWizardStaffDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ ÏÎ±Î²Î´Î¯ Î¬Î½Î·ÎºÎµ ÏƒÏ„Î¿Î½ Î³Ï…Î¼Î½Î¿ Î²Î±ÏƒÎ¹Î»Î¹Î¬ Î¼Î±ÏŠÎ¼Î¿Ï Ï€Î¿Ï… Î²ÏÎ®ÎºÎµÏ‚ ÏƒÏ„Î· ÏƒÏ€Î·Î»Î¹Î¬. Î•ÎºÏ„ÎµÎ»ÎµÎ¯ ÏƒÏ…Ï‡Î½Î¬ Î¾ÏŽÏÎºÎ¹Î± Î¼ÏŒÎ½Î¿ Ï„Î¿Ï…, Î¼Îµ ÏƒÏ„ÏŒÏ‡Î¿ Ï„Î¿Ï…Ï‚ ÎµÏ‡Î¸ÏÎ¿ÏÏ‚ ÏƒÎ¿Ï….");
Database.addText("el.eqItemWeaponEnchantedMonkeyWizardStaffName", "Î¤Î¿ ÏÎ±Î²Î´Î¯ Ï„Î¿Ï… Î²Î±ÏƒÎ¹Î»Î¹Î¬ Î¼Î±ÎªÎ¼Î¿Ï (Î¼Î±Î³ÎµÎ¼Î­Î½Î¿)");
Database.addText("el.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ ÏÎ±Î²Î´Î¯ ÎµÎ¯Î½Î±Î¹ Ï€Î¹Î¿ Î³ÏÎ®Î³Î¿ÏÎ¿ Î±Ï€ÏŒ Ï„Î· Î¼Î·-Î¼Î±Î³ÎµÎ¼Î­Î½Î· ÎµÎºÎ´Î¿Ï‡Î® ÎºÎ±Î¹ ÎµÎºÏ„ÎµÎ»ÎµÎ¯ Ï€Î¹Î¿ Ï€Î¿Î»Î»Î¬ Î¾ÏŒÏÎºÎ¹Î±.");
Database.addText("el.eqItemWeaponGiantSpoonName", "ÎˆÎ½Î± Î³Î¹Î³Î¬Î½Ï„Î¹Î¿ ÎºÎ¿Ï…Ï„Î¬Î»Î¹");
Database.addText("el.eqItemWeaponGiantSpoonDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î³Î¹Î³Î¬Î½Ï„Î¹Î¿ ÎºÎ¿Ï…Ï„Î¬Î»Î¹ Î²ÏÎ¹ÏƒÎºÏŒÏ„Î±Î½ ÏƒÎµ Î¼Î¯Î± Î³Î¹Î³Î¬Î½Ï„Î¹Î± ÎºÎ¿ÏÏ€Î± Ï„ÏƒÎ±Î³Î¹Î¿Ï ÏƒÏ„Î¿ ÎºÎ¬ÏƒÏ„ÏÎ¿ Ï„Î·Ï‚ ÎµÏÎ®Î¼Î¿Ï…. Î”ÎµÎ½ Î¾Î­ÏÎµÎ¹Ï‚ Î±Î½ ÎºÎ¬Ï€Î¿Î¹Î¿Ï‚ Ï„Î¿ Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¯Î·ÏƒÎµ Ï€Î¿Ï„Î­ ÏƒÎ±Î½ ÎºÎ¿Ï…Ï„Î¬Î»Î¹, Î±Î½ Î½Î±Î¹, Ï€ÏÎ­Ï€ÎµÎ¹ Î½Î± Î®Ï„Î±Î½ ÎºÎ¬Ï€Î¿Î¹Î¿Ï‚ Ï€Î¿Î»Ï Î¼ÎµÎ³Î¬Î»Î¿Ï‚. Î”ÎµÎ½ Î¸Î­Î»ÎµÎ¹Ï‚ Î¼Î¬Î»Î»Î¿Î½ Î½Î± Ï„Î¿Î½ Î³Î½Ï‰ÏÎ¯ÏƒÎµÎ¹Ï‚.");
Database.addText("el.eqItemWeaponGiantSpoonOfDoomName", "Î¤Î¿ Î³Î¹Î³Î¬Î½Ï„Î¹Î¿ ÎšÎ¿Ï…Ï„Î¬Î»Î¹ Ï„Î·Ï‚ ÎšÎ±Ï„Î±Î´Î¯ÎºÎ·Ï‚");
Database.addText("el.eqItemWeaponGiantSpoonOfDoomDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ Î³Î¹Î³Î¬Î½Ï„Î¹Î¿ ÎºÎ¿Ï…Ï„Î¬Î»Î¹ ÎµÎ¯Î½Î±Î¹ Î±ÎºÏŒÎ¼Î± Ï€Î¹Î¿ Î´Ï…Î½Î±Ï„ÏŒ Î±Ï€ÏŒ Ï„Î¿ ÎºÎ±Î½Î¿Î½Î¹ÎºÏŒ Î³Î¹Î³Î¬Î½Ï„Î¹Î¿ ÎºÎ¿Ï…Ï„Î¬Î»Î¹ Ï€Î¿Ï… Î¼Ï€Î¿ÏÎµÎ¹Ï‚ Î½Î± Î²ÏÎµÎ¹Ï‚ ÏƒÎµ Î¼Î¯Î± ÎºÎ¿ÏÏ€Î± Ï„ÏƒÎ±Î³Î¹Î¿Ï. Î•Î¯Î½Î±Î¹ Î±ÏÎºÎµÏ„Î¬ Î±ÏÎ³ÏŒ Î²Î­Î²Î±Î¹Î±.");
Database.addText("el.eqItemWeaponScytheName", "ÎˆÎ½Î± Î´ÏÎµÏ€Î¬Î½Î¹");
Database.addText("el.eqItemWeaponScytheDescription", "Î›Î­Î½Îµ Ï€Ï‰Ï‚ Î±Ï…Ï„ÏŒ Ï„Î¿ Î´ÏÎµÏ€Î¬Î½Î¹ Î¬Î½Î·ÎºÎµ ÏƒÏ„Î¿Î½ Î§Î¬ÏÎ¿ Î±Ï…Ï„Î¿Ï€ÏÎ¿ÏƒÏŽÏ€Î¿Ï‚. Î•Î¯Î½Î±Î¹ ÎµÎ¾Î±Î¹ÏÎµÏ„Î¹ÎºÎ¬ Î³ÏÎ®Î³Î¿ÏÎ¿.");
Database.addText("el.eqItemHatMerchantHatName", "Î¤Î¿ ÎºÎ±Ï€Î­Î»Î¿ Ï„Î¿Ï… Ï€Ï‰Î»Î·Ï„Î®");
Database.addText("el.eqItemHatMerchantHatDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ ÎºÎ±Ï€Î­Î»Î¿ ÏƒÎ¿Ï… Ï€Ï‰Î»Î®Î¸Î·ÎºÎµ Î±Ï€ÏŒ Ï„Î¿Î½ Ï€Ï‰Î»Î·Ï„Î® Î¶Î±Ï‡Î±ÏÏ‰Ï„ÏŽÎ½. ÎŸ Ï€Ï‰Î»Î·Ï„Î®Ï‚ Î¶Î±Ï‡Î±ÏÏ‰Ï„ÏŽÎ½ Î»Î±Ï„ÏÎµÏÎµÎ¹ Ï„Î± Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬. Î‘Ï…Ï„ÏŒ Ï„Î¿ ÎºÎ±Ï€Î­Î»Î¿ Î¸Î± Ï€Î¿Î»Î»Î±Ï€Î»Î±ÏƒÎ¹Î¬Î¶ÎµÎ¹ ÎºÎ±Ï„Î¬ 7 Ï„Î± Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Ï€Î¿Ï… Î²ÏÎ¯ÏƒÎºÎµÎ¹Ï‚ ÏƒÏ„Î¹Ï‚ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î­Ï‚!");
Database.addText("el.eqItemHatSorceressHatName", "Î¤Î¿ ÎºÎ±Ï€Î­Î»Î¿ Ï„Î·Ï‚ Î¼Î¬Î³Î¹ÏƒÏƒÎ±Ï‚");
Database.addText("el.eqItemHatSorceressHatDescription", "Î‘Ï…Ï„ÏŒ Ï„Î¿ ÎºÎ±Ï€Î­Î»Î¿ ÏƒÎ¿Ï… Ï€Ï‰Î»Î®Î¸Î·ÎºÎµ Î±Ï€ÏŒ Ï„Î·Î½ Î¼Î¬Î³Î¹ÏƒÏƒÎ±. It will enhance the effects of your spells and potions.");
Database.addText("el.eqItemHatOctopusKingCrownName", "Î— ÎºÎ¿ÏÏŒÎ½Î± Ï„Î¿Ï… Î²Î±ÏƒÎ¹Î»Î¹Î¬ Î§Ï„Î±Ï€Î¿Î´Î¹Î¿Ï");
Database.addText("el.eqItemHatOctopusKingCrownDescription", "ÎŒÏ„Î±Î½ Ï†Î¿ÏÎ¬Ï‚ Î±Ï…Ï„Î® Ï„Î·Î½ ÎºÎ¿ÏÏŒÎ½Î± Î­Ï‡ÎµÎ¹Ï‚ Ï€Î¹Î¿ Ï€Î¿Î»Ï Î±Ï…Ï„Î¿Ï€ÎµÏ€Î¿Î¯Î¸Î·ÏƒÎ·. Î”ÎµÎ½ Î´Î¯Î½ÎµÎ¹ ÎºÎ±Î½Î­Î½Î± Ï€Î»ÎµÎ¿Î½Î­ÎºÏ„Î·Î¼Î± ÏƒÏ„Î¹Ï‚ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î­Ï‚ Î±Î»Î»Î± Î· Î±Ï…Ï„Î¿Ï€ÎµÏ€Î¿Î¯Î¸Î·ÏƒÎ· ÎµÎ¯Î½Î±Î¹ ÏƒÎ·Î¼Î±Î½Ï„Î¹ÎºÎ®. It doesn't give any advantage in quests, but self-confidence is important!");
Database.addText("el.eqItemHatOctopusKingCrownWithJaspersName", "Î— ÎºÎ¿ÏÏŒÎ½Î± Ï„Î¿Ï… Î²Î±ÏƒÎ¹Î»Î¹Î¬ Î§Ï„Î±Ï€Î¿Î´Î¹Î¿Ï Î¼Îµ Ï€Î¿Î»ÏÏ„Î¹Î¼Î¿Ï…Ï‚ Î»Î¯Î¸Î¿Ï…Ï‚");
Database.addText("el.eqItemHatOctopusKingCrownWithJaspersDescription", "Î‘Ï…Ï„Î® Î· Î¼Î±Î³ÎµÎ¼Î­Î½Î· ÎºÎ¿ÏÏŒÎ½Î± ÎµÎ¯Î½Î±Î¹ Ï†Ï„Î¹Î±Î³Î¼Î­Î½Î· Î±Ï€ÏŒ Ï‡ÏÏ…ÏƒÏŒ ÎºÎ±Î¹ ÎºÏŒÎºÎºÎ¹Î½Î¿Ï…Ï‚ Ï€Î¿Î»ÏÏ„Î¹Î¼Î¿Ï…Ï‚ Î»Î¯Î¸Î¿Ï…Ï‚. Î£Îµ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î­Ï‚, Î¸Î± ÎµÎºÏ„Î¿Î¾ÎµÏÎµÎ¹ ÏƒÏ…Ï‡Î½Î¬ Î´Ï…Î½Î±Ï„Î­Ï‚ Î¼Î±Î³Î¹ÎºÎ­Ï‚ Î¼Ï€Î¬Î»ÎµÏ‚ Ï†Ï‰Ï„Î¹Î¬Ï‚ Î³ÏÏÏ‰ ÏƒÎ¿Ï…. ÎšÎ±Î¹ ÎµÏ€Î¯ÏƒÎ·Ï‚, Î»Î¬Î¼Ï€ÎµÎ¹!");
Database.addText("el.eqItemHatOctopusKingCrownWithObsidianName", "Î— ÎºÎ¿ÏÏŒÎ½Î± Ï„Î¿Ï… Î²Î±ÏƒÎ¹Î»Î¹Î¬ Î§Ï„Î±Ï€Î¿Î´Î¹Î¿Ï Î¼Îµ Î¿ÏˆÎ¹Î´Î¹Î±Î½ÏŒ");
Database.addText("el.eqItemHatOctopusKingCrownWithObsidianDescription", "Î‘Ï…Ï„Î® Î· Î¼Î±Î³ÎµÎ¼Î­Î½Î· ÎºÎ¿ÏÏŒÎ½Î± ÎµÎ¯Î½Î±Î¹ Ï†Ï„Î¹Î±Î³Î¼Î­Î½Î· Î±Ï€ÏŒ Ï‡ÏÏ…ÏƒÏŒ ÎºÎ±Î¹ Î¿ÏˆÎ¹Î´Î¹Î±Î½ÏŒ. Î•Î¯Î½Î±Î¹ Ï€Î±Î½Î­Î¼Î¿ÏÏ†Î·. Î£Îµ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î­Ï‚, Î¸Î± ÎµÎ¼Ï†Î±Î½Î¯Î¶ÎµÎ¹ Î­Î½Î± Î’Î±ÏƒÎ¹Î»Î¹Î¬ Î§Ï„Î±Ï€ÏŒÎ´Î¹ Î¿ Î¿Ï€Î¿Î¯Î¿Ï‚ Î¸Î± Î¼Î¬Ï‡ÎµÏ„Î±Î¹ ÏƒÏ„Î¿ Ï€Î»ÎµÏ…ÏÏŒ ÏƒÎ¿Ï… Ï€Î¿Ï…. Î¤Î¹ Ï€Î»Î¿ÎºÎ±Î¼Î¯ÏƒÎ¹Î¿Ï‚ ÏƒÏÎ¼Î¼Î±Ï‡Î¿Ï‚!");
Database.addText("el.eqItemGlovesLeatherGlovesName", "ÎœÎ¬Î»Î»Î¹Î½Î± Î³Î¬Î½Ï„Î¹Î±");
Database.addText("el.eqItemGlovesLeatherGlovesDescription", "Î‘Ï…Ï„Î¬ Ï„Î± Î³Î¬Î½Ï„Î¹Î± Î´ÎµÎ½ ÎºÎ¬Î½Î¿Ï…Î½ Î²Î±ÏƒÎ¹ÎºÎ¬ Ï„Î¯Ï€Î¿Ï„Î±. Î†Î»Î»Î± Ï„Î¿Ï…Î»Î¬Ï‡Î¹ÏƒÏ„Î¿Î½ ÎµÎ¯Î½Î±Î¹ Î¼Î±Î»Î±ÎºÎ¬ ÎºÎ±Î¹ Î¬Î½ÎµÏ„Î±!");
Database.addText("el.eqItemGlovesRedEnchantedGlovesName", "ÎšÏŒÎºÎºÎ¹Î½Î± ÎœÎ±Î³ÎµÎ¼Î­Î½Î± Î“Î¬Î½Ï„Î¹Î±");
Database.addText("el.eqItemGlovesRedEnchantedGlovesDescription", "Î‘Ï…Ï„Î¬ Ï„Î± Î¼Î±Î³ÎµÎ¼Î­Î½Î± Î³Î¬Î½Ï„Î¹Î± Ï€Î±ÏÎ¬Î³Î¿Ï…Î½ Î­Î½Î± Î±Ï€Î±Î»ÏŒ ÎºÏŒÎºÎºÎ¹Î½Î¿ Ï†Ï‰Ï‚ ÏŒÏ„Î±Î½ ÎµÎ¯Î½Î±Î¹ ÏƒÎºÎ¿Ï„ÎµÎ¹Î½Î¬ Î³ÏÏÏ‰ ÏƒÎ¿Ï…. Î£Îµ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î­Ï‚, Ï„Ï…Ï‡Î±Î¯Î± Î¸Î± ÎµÎºÏ„Î¿Î¾ÎµÏÎ¿Ï…Î½ Ï€ÏÏÎ¹Î½ÎµÏ‚ Î¼Ï€Î¬Î»ÎµÏ‚ Ï€ÏÏ‰Ï‚ Ï„Î¿Ï…Ï‚ ÎµÏ‡Î¸ÏÎ¿ÏÏ‚ ÏƒÎ¿Ï…, Ï„Î¿ Î¿Ï€Î¿Î¯Î¿ ÏƒÎ¯Î³Î¿Ï…ÏÎ± Î¸Î± ÎµÎ¯Î½Î±Î¹ Ï‡ÏÎ®ÏƒÎ¹Î¼Î¿.");
Database.addText("el.eqItemGlovesPinkEnchantedGlovesName", "Î¡ÏŒÎ¶ Î¼Î±Î³ÎµÎ¼Î­Î½Î± Î³Î¬Î½Ï„Î¹Î±");
Database.addText("el.eqItemGlovesPinkEnchantedGlovesDescription", "Î‘Ï…Ï„Î¬ Ï„Î± Î¼Î±Î³ÎµÎ¼Î­Î½Î± Î³Î¬Î½Ï„Î¹Î± Î±Ï†Î®Î½Î¿Ï…Î½ Î­Î½Î± ÏÎ¿Î¶ ÏƒÎ·Î¼Î¬Î´Î¹ ÏƒÎµ ÏŒ,Ï„Î¹ Î±Î³ÎºÎ¯Î¶ÎµÎ¹Ï‚. Î£Ï„Î¹Ï‚ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î­Ï‚, Î¸Î± ÏƒÎ¿Ï… Î´Î¯Î½Î¿Ï…Î½ Î¶Ï‰Î® ÏƒÏ…Î½ÎµÏ‡ÏŽÏ‚.");
Database.addText("el.eqItemBootsRocketBootsName", "ÎœÏ€ÏŒÏ„ÎµÏ‚ Î Ï…ÏÎ±ÏÎ»Ï‰Î½");
Database.addText("el.eqItemBootsRocketBootsDescription", "Î‘Ï…Ï„Î­Ï‚ Î¿Î¹ ÎºÎ±Ï„Î±Ï€Î»Î·ÎºÏ„Î¹ÎºÎ­Ï‚ Î¼Ï€ÏŒÏ„ÎµÏ‚ Ï€Ï…ÏÎ±ÏÎ»Ï‰Î½ ÏƒÎ¿Ï… ÎµÏ€Î¹Ï„ÏÎ­Ï€Î¿Ï…Î½ Î½Î± Ï€Î·Î´Î¬Ï‚ ÎµÎ½ÏŽ Î²ÏÎ¯ÏƒÎºÎµÏƒÎ±Î¹ ÏƒÏ„Î¿Î½ Î±Î­ÏÎ±, Î¿Ï€ÏŒÏ„Îµ ÎµÎ¯Î½Î±Î¹ ÏƒÎ±Î½ Î½Î± Ï€ÎµÏ„Î¬Ï‚!");
Database.addText("el.eqItemBootsLeatherBootsName", "ÎœÎ¬Î»Î»Î¹Î½ÎµÏ‚ ÎœÏ€ÏŒÏ„ÎµÏ‚");
Database.addText("el.eqItemBootsLeatherBootsDescription", "Î‘Ï€Î»Î­Ï‚ Î¼Î¬Î»Î»Î¹Î½ÎµÏ‚ Î¼Ï€ÏŒÏ„ÎµÏ‚. Î¤Î¯Ï€Î¿Ï„Î± Î¹Î´Î¹Î±Î¯Ï„ÎµÏÎ¿ ÏƒÏ‡ÎµÏ„Î¹ÎºÎ¬ Î¼Îµ Î±Ï…Ï„Î­Ï‚.");
Database.addText("el.eqItemBootsBootsOfIntrospectionName", "ÎœÏ€ÏŒÏ„ÎµÏ‚ Ï„Î·Ï‚ Î±Ï…Ï„Î¿ÎµÎ¾Î­Ï„Î±ÏƒÎ·Ï‚");
Database.addText("el.eqItemBootsBootsOfIntrospectionDescription", "Î‘Î½Î¬Ï€Î½ÎµÏ…ÏƒÎµ ÎºÎ±Î¹ Î·ÏÎ­Î¼Î·ÏƒÎµ. Î‘Î½ Ï†Î¿ÏÎ¬Ï‚ Î±Ï…Ï„Î­Ï‚ Ï„Î¹Ï‚ Î¼Ï€ÏŒÏ„ÎµÏ‚, Î´ÎµÎ½ Î¸Î± ÎºÎ¹Î½Î®ÏƒÎ±Î¹ Ï€Î¿Ï„Î­ Î±ÏÎºÎµÎ¯ Î½Î± Î±ÎºÎ¿Ï…Î¼Ï€Î¬Ï‚ Ï„Î¿ Ï€Î¬Ï„Î¿Î¼Î±.");
Database.addText("el.eqItemBodyArmoursLightweightBodyArmourName", "ÎœÎ¯Î± ÎµÎ»Î±Ï†ÏÎ¹Î¬ Ï€Î±Î½Î¿Ï€Î»Î¯Î±");
Database.addText("el.eqItemBodyArmoursLightweightBodyArmourDescription", "Î‘Ï…Ï„Î® Î· Ï€Î±Î½Î¿Ï€Î»Î¯Î± Î¸Î± ÏƒÎ¿Ï… Ï€ÏÎ¿ÏƒÏ†Î­ÏÎµÎ¹ Î»Î¯Î³Î· Ï€ÏÎ¿ÏƒÏ„Î±ÏƒÎ¯Î±. Î˜Î± Î±Î½Ï„Î­Ï‡ÎµÎ¹Ï‚ Î»Î¯Î³Î¿ Ï€Î±ÏÎ±Ï€Î¬Î½Ï‰ Î±Ï€Î­Î½Î±Î½Ï„Î¹ ÏƒÎµ ÎµÏ‡Î¸ÏÎ¹ÎºÎ­Ï‚ ÎµÏ€Î¹Î¸Î­ÏƒÎµÎ¹Ï‚.");
Database.addText("el.eqItemBodyArmoursKnightBodyArmourName", "ÎœÎ¯Î± Ï€Î±Î½Î¿Ï€Î»Î¯Î± Î¹Ï€Ï€ÏŒÏ„Î·");
Database.addText("el.eqItemBodyArmoursKnightBodyArmourDescription", "Î‘Ï…Ï„Î® Î· Î´Ï…Î½Î±Ï„Î® Ï€Î±Î½Î¿Ï€Î»Î¯Î± Î¸Î± ÏƒÎµ Ï€ÏÎ¿ÏƒÏ„Î±Ï„Î­ÏˆÎµÎ¹. Î˜Î± Î±Î½Ï„Î­Ï‡ÎµÎ¹Ï‚ Ï€Î±ÏÎ±Ï€Î¬Î½Ï‰ Î±Ï€Î­Î½Î±Î½Ï„Î¹ ÏƒÎµ ÎµÏ‡Î¸ÏÎ¹ÎºÎ­Ï‚ ÎµÏ€Î¹Î¸Î­ÏƒÎµÎ¹Ï‚.");
Database.addText("el.eqItemBodyArmoursEnchantedKnightBodyArmourName", "ÎœÎ¯Î± Î¼Î±Î³ÎµÎ¼Î­Î½Î· Ï€Î±Î½Î¿Ï€Î»Î¯Î± Î¹Ï€Ï€ÏŒÏ„Î·");
Database.addText("el.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Î‘Ï…Ï„Î® Î· Ï€Î±Î½Î¿Ï€Î»Î¯Î± ÎµÎ¯Î½Î±Î¹ Ï€Î¿Î»Ï Î¹Î´Î¹Î±Î¯Ï„ÎµÏÎ·. Î˜Î± Î±Î½Ï„Î­Ï‡ÎµÎ¹Ï‚ Î ÎŸÎ›Î¥ Ï€Î±ÏÎ±Ï€Î±Î½Ï‰ Î±Ï€Î­Î½Î±Î½Ï„Î¹ ÏƒÎµ ÎµÏ‡Î¸ÏÎ¹ÎºÎ­Ï‚ Î±Ï€Î¹Î¸Î­ÏƒÎµÎ¹Ï‚, Î±Î»Î»Î¬ Î· Î¶Î·Î¼Î¹Î¬ Ï€Î¿Ï… ÎºÎ¬Î½ÎµÎ¹ Ï„Î¿ ÏŒÏ€Î»Î¿ ÏƒÎ¿Ï… Î¸Î± Î´Î¹Î±Î¹ÏÎµÎ¸ÎµÎ¯ Î´Î¹Î± Î´ÏÎ¿.");
Database.addText("el.mapVillageForgeBuyWoodenSwordButton", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Î­Î½Î± Î¾ÏÎ»Î¹Î½Î¿ ÏƒÏ€Î±Î¸Î¯ (150 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.mapVillageForgeBuyWoodenSwordSpeech", "Î•Ï…Ï‡Î±ÏÎ¹ÏƒÏ„ÏŽ Î³Î¹Î± Ï„Î·Î½ Î±Î³Î¿ÏÎ¬! Î‘Ï…Ï„ÏŒ Ï„Î¿ Î¾ÏÎ»Î¹Î½Î¿ ÏƒÏ€Î±Î¸Î¯ ÎµÎ¯Î½Î±Î¹ Î±ÏÎºÎµÏ„Î¬ Î±Î´ÏÎ½Î±Î¼Î¿, Î±Î»Î»Î± ÎµÎ¯Î½Î±Î¹ Î¼Î¹Î± Î±ÏÏ‡Î®.");
Database.addText("el.mapVillageForgeBuyIronAxeButton", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Î­Î½Î± ÏƒÎ¹Î´ÎµÏÎ­Î½Î¹Î¿ Ï„ÏƒÎµÎºÎ¿ÏÏÎ¹ (400 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.mapVillageForgeBuyIronAxeSpeech", "Î•Î»Ï€Î¯Î¶Ï‰ Î½Î± ÏƒÎ¿Ï… Î±ÏÎ­ÏƒÎµÎ¹ Î±Ï…Ï„ÏŒ Ï„Î¿ ÏƒÎ¹Î´ÎµÏÎ­Î½Î¹Î¿ Ï„ÏƒÎµÎºÎ¿ÏÏÎ¹. ÎœÏŒÎ»Î¹Ï‚ ÏƒÎ¿Ï… Ï„Î¿ Î±ÎºÏŒÎ½Î¹ÏƒÎ±!");
Database.addText("el.mapVillageForgeBuyPolishedSilverSwordButton", "Î‘Î³ÏŒÏÎ±ÏƒÎµ ÎµÎ½Î± Î±ÎºÎ¿Î½Î¹ÏƒÎ¼Î­Î½Î¿ Î±ÏƒÎ¹Î¼Î­Î½Î¹Î¿ ÏƒÏ€Î±Î¸Î¯ (2 000 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.mapVillageForgeBuyPolishedSilverSwordSpeech", "ÎœÎ¿Ï… Ï€Î®ÏÎµ Ï€Î¿Î»Ï ÎºÎ±Î¹ÏÏŒ Î½Î± Ï†Ï„Î¹Î¬Î¾Ï‰ Î±Ï…Ï„ÏŒ Ï„Î¿ ÏƒÏ€Î±Î¸Î¯It took me a lot of time to create this sword. I assure you that it's worth its price.");
Database.addText("el.mapVillageForgeBuyLightweightBodyArmourButton", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Î¼Î¯Î± ÎµÎ»Î±Ï†ÏÎ¹Î¬ Ï€Î±Î½Î¿Ï€Î»Î¯Î± ÏƒÏŽÎ¼Î±Ï„Î¿Ï‚ (15 000 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.mapVillageForgeBuyLightweightBodyArmourSpeech", "Î‘Ï…Ï„Î® Î· Ï€Î±Î½Î¿Ï€Î»Î¯Î± ÏƒÏŽÎ¼Î±Ï„Î¿Ï‚ Î¸Î± ÏƒÎ¿Ï… Ï€ÏÎ¿ÏƒÏ†Î­ÏÎµÎ¹ Ï€ÏÎ¿ÏƒÏ„Î±ÏƒÎ¯Î± Î±Ï€Î­Î½Î±Î½Ï„Î¹ ÏƒÏ„Î¿Ï…Ï‚ ÎµÏ‡Î¸ÏÎ¿ÏÏ‚ ÏƒÎ¿Ï….");
Database.addText("el.mapVillageForgeBuyScytheButton", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Î­Î½Î± Î´ÏÎµÏ€Î¬Î½Î¹ (5 000 000 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.mapVillageForgeBuyScytheSpeech", "ÎœÎ¿Ï… Ï€Î®ÏÎµ Î±ÏÎºÎµÏ„Î¿ÏÏ‚ Î¼Î®Î½ÎµÏ‚ Î½Î± Ï†Ï„Î¹Î¬Î¾Ï‰ Î±Ï…Ï„ÏŒ Ï„Î¿ Î´ÏÎµÏ€Î¬Î½Î¹. Î•Î¯Î½Î±Î¹ ÎµÎ½Î± Ï€ÏÎ±Î³Î¼Î±Ï„Î¹ÎºÏŒ Î­ÏÎ³Î¿ Ï„Î­Ï‡Î½Î·Ï‚. Î‘Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Î¼Î¬Î»Î»Î¿Î½ Ï„Î¿ Î³ÏÎ·Î³Î¿ÏÏŒÏ„ÎµÏÎ¿ ÏŒÏ€Î»Î¿ Ï€Î¿Ï… Î¸Î± Î¼Ï€Î¿ÏÎ­ÏƒÎµÎ¹Ï‚ Î½Î± Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®ÏƒÎµÎ¹Ï‚. ÎšÎ±Î»Î® Ï„ÏÏ‡Î·!");
Database.addText("el.wishingWellThrowFirstCandyButton", "Î Î­Ï„Î± Î­Î½Î± Î¶Î±Ï‡Î±ÏÏ‰Ï„ÏŒ Î¼Î­ÏƒÎ± ÏƒÏ„Î¿ Ï€Î·Î³Î¬Î´Î¹.");
Database.addText("el.wishingWellCandyIntroductionSpeech", "Î“ÎµÎ¹Î± ÏƒÎ¿Ï…, Ï€ÎµÏÎ¹Ï€Î»Î½ÏŽÎ¼ÎµÎ½Îµ! Î•Î¯Î¼Î±Î¹ Ï„Î¿ Ï€Î·Î³Î¬Î´Î¹ Ï„Ï‰Î½ ÎµÏ…Ï‡ÏŽÎ½. Î˜Î± ÏƒÎ¿Ï… ÎµÎºÏ€Î»Î·ÏÏŽÏƒÏ‰ ÎµÏ…Ï‡Î­Ï‚ Î¼Îµ Î±Î½Ï„Î¬Î»Î±Î³Î¼Î± Î¼ÎµÏÎ¹ÎºÎ¬ Î³Î»Ï…ÎºÎ¬! ÎŒÏ„Î±Î½ Ï€ÎµÏ„Î¬Î¾ÎµÎ¹Ï‚ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Î¼Î­ÏƒÎ± Î¼Î¿Ï… Î¸Î± Î¸ÎµÏÎ±Ï€ÎµÏÏƒÏ‰ Ï„Î± Ï„ÏÎ±ÏÎ¼Î±Ï„Î¬ ÏƒÎ¿Ï….");
Database.addText("el.wishingWellThrewCandiesSpeech", "Î¤Î± Ï„ÏÎ±ÏÎ¼Î±Ï„Î¬ ÏƒÎ¿Ï… Î¸ÎµÏÎ±Ï€ÎµÏÏ„Î·ÎºÎ±Î½!");
Database.addText("el.wishingWellNoWoundSpeech", "Î”ÎµÎ½ Î­Ï‡ÎµÎ¹Ï‚ Ï„ÏÎ±ÏÎ¼Î±Ï„Î± Î³Î¹Î± Î¸ÎµÏÎ±Ï€ÎµÎ¯Î±!");
Database.addText("el.wishingWellThrowFirstLollipopButton", "Î Î­Ï„Î± Î­Î½Î± Î³Î»ÎµÎ¹Ï†Î¹Ï„Î¶Î¿ÏÏÎ¹ ÏƒÏ„Î¿ Ï€Î·Î³Î¬Î´Î¹");
Database.addText("el.wishingWellLollipopIntroductionSpeech", "Î“ÎµÎ¹Î± ÏƒÎ¿Ï…, Ï€ÎµÏÎ¹Ï€Î»Î½ÏŽÎ¼ÎµÎ½Îµ! Î•Î¯Î¼Î±Î¹ Ï„Î¿ Ï€Î·Î³Î¬Î´Î¹ Ï„Ï‰Î½ ÎµÏ…Ï‡ÏŽÎ½. Î˜Î± ÏƒÎ¿Ï… ÎµÎºÏ€Î»Î·ÏÏŽÏƒÏ‰ ÎµÏ…Ï‡Î­Ï‚ Î¼Îµ Î±Î½Ï„Î¬Î»Î±Î³Î¼Î± Î¼ÎµÏÎ¹ÎºÎ¬ Î³Î»Ï…ÎºÎ¬! ÎŒÏ„Î±Î½ Ï€ÎµÏ„Î¬Î¾ÎµÎ¹Ï‚ Î³Î»ÎµÎ¹Ï†Î¹Ï„Î¶Î¿ÏÏÎ¹Î± Î¼Î­ÏƒÎ± Î¼Î¿Ï… Î¸Î± Ï„Î± Î¼ÎµÏ„Î±Ï„ÏÎ­ÏˆÏ‰ ÏƒÎµ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬.");
Database.addText("el.wishingWellThrewLollipopsSpeech", "Î¤Î± Î³Î»ÎµÎ¹Ï†Î¹Ï„Î¶Î¿ÏÏÎ¹Î± ÏƒÎ¿Ï… Î¼ÎµÏ„Î±Ï„ÏÎ¬Ï€Î·ÎºÎ±Î½ ÏƒÎµ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î±! Î”ÏÎ¿ Î³Î»ÎµÎ¹Ï†Î¹Ï„Î¶Î¿ÏÏÎ¹Î± Î³Î¹Î± Î­Î½Î± Î¶Î±Ï‡Î±ÏÏ‰Ï„ÏŒ.");
Database.addText("el.wishingWellThrowChocolateBarButton", "Î Î­Ï„Î± Î¼Î¯Î± Î¼Ï€Î¬ÏÎ± ÏƒÎ¿ÎºÎ¿Î»Î¬Ï„Î±Ï‚ Î¼Î­ÏƒÎ± ÏƒÏ„Î¿ Ï€Î·Î³Î¬Î´Î¹");
Database.addText("el.wishingWellChocolateBarIntroductionSpeech", "Î“ÎµÎ¹Î± ÏƒÎ¿Ï…, Ï€ÎµÏÎ¹Ï€Î»Î½ÏŽÎ¼ÎµÎ½Îµ! Î•Î¯Î¼Î±Î¹ Ï„Î¿ Ï€Î·Î³Î¬Î´Î¹ Ï„Ï‰Î½ ÎµÏ…Ï‡ÏŽÎ½. Î˜Î± ÏƒÎ¿Ï… ÎµÎºÏ€Î»Î·ÏÏŽÏƒÏ‰ ÎµÏ…Ï‡Î­Ï‚ Î¼Îµ Î±Î½Ï„Î¬Î»Î±Î³Î¼Î± Î¼ÎµÏÎ¹ÎºÎ¬ Î³Î»Ï…ÎºÎ¬! Î›Î±Ï„ÏÎµÏÏ‰ Ï„Î¹Ï‚ Î¼Ï€Î¬ÏÎµÏ‚ ÏƒÎ¿ÎºÎ¿Î»Î¬Ï„Î±Ï‚. Î ÏÎ±Î³Î¼Î±Ï„Î¹ÎºÎ¬ Ï„Î¹Ï‚ Î»Î±Ï„ÏÎµÏÏ‰. Î“Î¹Î± ÎºÎ¬Î¸Îµ Î¼Ï€Î¬ÏÎ± ÏƒÎ¿ÎºÎ¿Î»Î¬Ï„Î±Ï‚ Ï€Î¿Ï… ÏÎ¯Ï‡Î½ÎµÎ¹Ï‚ Î¼Î­ÏƒÎ± Î¼Î¿Ï…, ÏƒÏ…Î¼Ï€ÎµÏÎ¹Î»Î±Î¼Î²Î±Î½ÏŒÎ¼ÎµÎ½Î·Ï‚ ÎºÎ±Î¹ Î±Ï…Ï„Î®Ï‚, Î¸Î± ÏƒÎ¿Ï… Ï‡Î±ÏÎ¯ÏƒÏ‰ Î­Î½Î± Î¼Î¬Î³ÎµÎ¼Î± Î³Î¹Î± Î­Î½Î± Î±Î½Ï„Î¹ÎºÎµÎ¯Î¼ÎµÎ½ÏŒ ÏƒÎ¿Ï….");
Database.addText("el.wishingWellThrewChocolateBarSpeech", "Î Î¿Î¹Î¿ Î±Î½Ï„Î¹ÎºÎµÎ¯Î¼ÎµÎ½Î¿ Î¸Î± Î®Î¸ÎµÎ»ÎµÏ‚ Î½Î± Î¼Î±Î³Î­ÏˆÎµÎ¹Ï‚;");
Database.addText("el.wishingWellThrowPainAuChocolatButton", "Î Î­Ï„Î± Î­Î½Î± pain au chocolat ÏƒÏ„Î¿ Ï€Î·Î³Î¬Î´Î¹");
Database.addText("el.wishingWellPainAuChocolatIntroductionSpeech", "Î“ÎµÎ¹Î± ÏƒÎ¿Ï…, Ï€ÎµÏÎ¹Ï€Î»Î½ÏŽÎ¼ÎµÎ½Îµ! Î•Î¯Î¼Î±Î¹ Ï„Î¿ Ï€Î·Î³Î¬Î´Î¹ Ï„Ï‰Î½ ÎµÏ…Ï‡ÏŽÎ½. Î˜Î± ÏƒÎ¿Ï… ÎµÎºÏ€Î»Î·ÏÏŽÏƒÏ‰ ÎµÏ…Ï‡Î­Ï‚ Î¼Îµ Î±Î½Ï„Î¬Î»Î±Î³Î¼Î± Î¼ÎµÏÎ¹ÎºÎ¬ Î³Î»Ï…ÎºÎ¬! ÎŒÏ„Î±Î½ Ï€ÎµÏ„Î¬Î¾ÎµÎ¹Ï‚ Î­Î½Î± pain au schocolat Î¼Î­ÏƒÎ± Î¼Î¿Ï…, Î¸Î± ÏƒÎ¿Ï… Î´Ï‰Î¸ÎµÎ¯ Î­Î½Î± Ï€Î¿Î»Ï Î¹Î´Î¹Î±Î¯Ï„ÎµÏÎ¿ Î´ÏŽÏÎ¿. Î”Î¹Î¬Î»ÎµÎ¾Îµ Ï€ÏÎ¿ÏƒÎµÎºÏ„Î¹ÎºÎ¬.");
Database.addText("el.wishingWellThrewPainAuChocolatSpeech", "Î•Ï…Ï‡Î±ÏÎ¹ÏƒÏ„ÏŽ Î³Î¹Î± Ï„Î¿ pain au chocolat! ÎœÏ€Î¿ÏÎµÎ¯Ï‚ Ï„ÏŽÏÎ± Î½Î± Î´Î¹Î±Î»Î­Î¾ÎµÎ¹Ï‚ Ï„Î¿ Î´ÏŽÏÎ¿ ÏƒÎ¿Ï….");
Database.addText("el.wishingWellChooseGift", "Î”Î¹Î¬Î»ÎµÎ¾Îµ Ï„Î¿ Î´ÏŽÏÎ¿ ÏƒÎ¿Ï…!");
Database.addText("el.wishingWellChooseGiftButton", "Î”Î¹Î¬Î»ÎµÎ¾Îµ");
Database.addText("el.wishingWellGiftDoneSpeech", "ÎˆÏ„Î¿Î¹Î¼Î¿! Î¤ÏŽÏÎ± Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± Î­Ï‡ÎµÎ¹Ï‚ Î­Î½Î± Î½Î­Î¿ Î´ÏŽÏÎ¿. Î˜Î± ÎµÎ¼Ï†Î±Î½Î¹ÏƒÏ„ÎµÎ¯ ÏƒÏ„Î¿Î½ Ï€Î¯Î½Î±ÎºÎ± ÏƒÏ„Î±Ï„Î¹ÏƒÏ„Î¹ÎºÏŽÎ½ ÏƒÏ„Î¹ Î»Î¯ÏƒÏ„Î± Î±Î½Ï„Î¹ÎºÎµÎ¼Î­Î½Ï‰Î½ ÏƒÎ¿Ï….");
Database.addText("el.wishingWellNoPossibleEnchantment", "ÎšÎ±Î½Î­Î½Î± Î´Ï…Î½Î±Ï„ÏŒ Î¼Î¬Î³ÎµÎ¼Î±");
Database.addText("el.wishingWellChooseEnchantment", "Î”Î¹Î¬Î»ÎµÎ¾Îµ Î­Î½Î± Î¼Î¬Î³ÎµÎ¼Î±");
Database.addText("el.wishingWellEnchantButton", "ÎœÎ¬Î³ÎµÏˆÎµ");
Database.addText("el.wishingWellEnchantmentDoneSpeech", "ÎŸÏÎ¯ÏƒÏ„Îµ! Î¤Î¿ Î±Î½Ï„Î¹ÎºÎµÎ¯Î¼ÎµÎ½ÏŒ ÏƒÎ¿Ï… ÎµÎ¯Î½Î±Î¹ Î¼Î±Î³ÎµÎ¼Î­Î½Î¿.");
Database.addText("el.pierLighthouseButton", "Î Î®Î³Î±Î¹Î½Îµ ÏƒÏ„Î¿ Ï†Î¬ÏÎ¿ Î¼Îµ Î²Î¬ÏÎºÎ±");
Database.addText("el.pierTheSeaButton", "Î Î®Î´Î± ÏƒÏ„Î· Î¸Î¬Î»Î±ÏƒÎ±Î±");
Database.addText("el.lonelyHouseOpenBox", "Î†Î½Î¿Î¹Î¾Îµ Ï„Î¿ ÎºÎ¿Ï…Ï„Î¯");
Database.addText("el.lonelyHouseShakeBox", "ÎšÎ¿ÏÎ½Î± Ï„Î¿ ÎºÎ¿Ï…Ï„Î¯");
Database.addText("el.lonelyHouseBreakLock", "Î£Ï€Î¬ÏƒÎµ Ï„Î¿ ÎºÎ¿Ï…Ï„Î¯");
Database.addText("el.lonelyHouseKickBox", "ÎšÎ»ÏŽÏ„ÏƒÎ± Ï„Î¿ ÎºÎ¿Ï…Ï„Î¯");
Database.addText("el.lonelyHouseAskTheBoxToOpenItself", "Î–Î®Ï„Î± Î±Ï€ÏŒ Ï„Î¿ ÎºÎ¿Ï…Ï„Î¯ Î½Î± Î±Î½Î¿Î¹Ï‡Ï„ÎµÎ¯");
Database.addText("el.lonelyHouseLureTheBoxWithACandy", "Î”ÎµÎ»Î­Î±ÏƒÎµ Ï„Î¿ ÎºÎ¿Ï…Ï„Î¯ Î¼Îµ Î­Î½Î± Î¶Î±Ï‡Î±ÏÏ‰Ï„ÏŒ");
Database.addText("el.lonelyHouseTakeTheBox", "Î Î¬ÏÎµ Ï„Î¿ ÎºÎ¿Ï…Ï„Î¯ Î¼Î±Î¶Î¯ ÏƒÎ¿Ï…, Î¼Î¬Î»Î»Î¿Î½ Ï‡ÏÎµÎ¹Î¬Î¶ÎµÏƒÎµ Î­Î½Î± ÎºÎ»ÎµÎ¹Î´Î¯ Î­Ï„ÏƒÎ¹ ÎºÎ¹ Î±Î»Î»Î¹ÏŽÏ‚");
Database.addText("el.lonelyHouseOpenBoxResult", "Î¤Î¿ ÎºÎ¿Ï…Ï„Î¯ ÎµÎ¯Î½Î±Î¹ ÎºÎ»ÎµÎ¹Î´Ï‰Î¼Î­Î½Î¿");
Database.addText("el.lonelyHouseShakeBoxResult", "Î¤Î¯Ï€Î¿Ï„Î± Î´ÎµÎ½ ÏƒÏ…Î¼Î²Î±Î¯Î½ÎµÎ¹");
Database.addText("el.lonelyHouseBreakLockResult", "Î— ÎºÎ»ÎµÎ¹Î´Î±ÏÎ¹Î¬ Î±Î½Ï„Î¹ÏƒÏ„Î­ÎºÎµÏ„Î±Î¹");
Database.addText("el.lonelyHouseKickBoxResult", "Î¤Î¿ Ï€ÏŒÎ´Î¹ ÏƒÎ¿Ï… Ï€Î¿Î½Î¬ÎµÎ¹ Î»Î¯Î³Î¿ Î¬Î»Î»Î± Ï„Î¯Ï€Î¿Ï„Î± Î´ÎµÎ½ ÏƒÏ…Î¼Î²Î±Î¯Î½ÎµÎ¹");
Database.addText("el.lonelyHouseAskTheBoxToOpenItselfResult", "...Ï„Î¿ ÎºÎ±Ï„Î±Î»Î±Î²Î±Î¯Î½ÎµÎ¹Ï‚ ÏŒÏ„Î¹ Î¼Î¹Î»Î±Ï‚ ÏƒÎµ Î­Î½Î± ÎºÎ¿Ï…Ï„Î¹;");
Database.addText("el.lonelyHouseLureTheBoxWithACandyResult", "Î¤Î¿ ÎºÎ¿Ï…Ï„Î¯ Î´ÎµÎ½ Ï†Î±Î¯Î½ÎµÏ„Î±Î¹ Î½Î± ÎµÎ½Î´Î¹Î±Ï†Î­ÏÎµÏ„Î±Î¹");
Database.addText("el.lonelyHouseTakeTheBoxResult", "Î ÏÎ­Ï€ÎµÎ¹ Î½Î± Ï…Ï€Î¬ÏÏ‡ÎµÎ¹ ÎºÎ¬Ï„Î¹ ÎµÎ½Î´Î¹Î±Ï†Î­ÏÎ¿Î½ ÏƒÎµ Î±Ï…Ï„Î¿ Ï„Î¿ candy box.");
Database.addText("el.lollipopFarmConstructMill", "Î§Ï„Î¯ÏƒÎµ Î­Î½Î± Î¼ÏÎ»Î¿ (10 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±)");
Database.addText("el.lollipopFarmFeedMill", "Î¤Î¬Î¹ÏƒÎµ Ï„Î¿ Î¼ÏÎ»Î¿");
Database.addText("el.lollipopFarmCurrentCandiesProduction", "Î¤Ï‰ÏÎ¹Î½Î® Ï€Î±ÏÎ±Î³Ï‰Î³Î® Î¶Î±Ï‡Î±ÏÏ‰Ï„ÏŽÎ½");
Database.addText("el.lollipopFarmDigPond", "Î£ÎºÎ¬ÏˆÎµ Î¼Î¯Î± Î»Î¹Î¼Î½Î¿ÏÎ»Î± (100 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±)");
Database.addText("el.lollipopFarmBuyLolligator", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Î­Î½Î±Î½ Î³Î»ÎµÎ¹Ï†Î¹Î³ÎºÎ¬ÏÎ¿ÏÎ± (1200 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.lollipopFarmLolligatorsConversionText", "ÎœÎµÏ„Î±Ï„ÏÎ¿Ï€Î® Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ -> Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î± ÎµÎ½ÎµÏÎ³Î¿Ï€Î¿Î¹Î·Î¼Î­Î½Î·");
Database.addText("el.lighthouseAskButton", "Î¡ÏŽÏ„Î±");
Database.addText("el.lighthouseQuestionWho", "Î Î¿Î¹Î¿Ï‚ ÎµÎ¯ÏƒÎ±Î¹;");
Database.addText("el.lighthouseQuestionWhoSpeech", "Î•Î¯Î¼Î±Î¹ Î­Î½Î±Ï‚ Î·Î»Î¹ÎºÎ¹Ï‰Î¼Î­Î½Î¿Ï‚ ÎºÏÎºÎ»Ï‰Ï€Î±Ï‚");
Database.addText("el.lighthouseQuestionWhat", "Î¤Î¹ ÎºÎ¬Î½ÎµÎ¹Ï‚ ÎµÎ´ÏŽ;");
Database.addText("el.lighthouseQuestionWhatSpeech", "Î–Ï‰ ÎµÎ´ÏŽ ÏŒÎ»Î· Î¼Î­ÏÎ± Ï€ÎµÏÎ¹Î¼Î­Î½Î¿Î½Ï„Î±Ï‚ Î¼Î¯Î± Î²Î¬ÏÎºÎ± Î½Î± Î­ÏÎ¸ÎµÎ¹. Î•Î¯Î½Î±Î¹ Ï€Î¿Î»ÏÏ‚ ÎºÎ±Î¹ÏÏŒÏ‚ Î±Ï€ÏŒ Ï„ÏŒÏ„Îµ Ï€Î¿Ï… ÎµÎ¯Î´Î± Î¼Î¯Î± Î²Î¬ÏÎºÎ±, Î±Î»Î»Î¬ Ï€ÏÎ­Ï€ÎµÎ¹ Î½Î± Î¼ÎµÎ¯Î½Ï‰ ÎµÎ´ÏŽ, ÎºÎ¿Î¹Ï„ÏŒÎ½Ï„Î±Ï‚ Ï„Î·Î½ Î¸Î¬Î»Î±ÏƒÏƒÎ±, ÎµÏ€ÎµÎ¹Î´Î® Î¼Î¹Î± Î²Î¬ÏÎºÎ± Î¼Ï€Î¿ÏÎµÎ¯ Î½Î± Î­ÏÎ¸ÎµÎ¹.");
Database.addText("el.lighthouseQuestionWhyEatCandies", "Î“Î¹Î±Ï„Î¯ Î½Î± Î­Ï„ÏÏ‰Î³Î± Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬;");
Database.addText("el.lighthouseQuestionWhyEatCandiesSpeech", "Î“Î¹Î±Ï„Î¯ ÎµÎ¯Î½Î±Î¹ ÎºÎ±Î»Î¬ Î³Î¹Î± Ï„Î·Î½ Ï…Î³ÎµÎ¯Î± ÏƒÎ¿Ï…!");
Database.addText("el.lighthouseQuestionCandyBox", "Î¤Î¹ ÎµÎ¯Î½Î±Î¹ Î­Î½Î± candy box;");
Database.addText("el.lighthouseQuestionCandyBoxSpeech", "Î•Î¯Î½Î±Î¹ Î­Î½Î± Ï€Î¿Î»Ï Ï€Î±Î»Î¹ÏŒ ÎºÎ¿Ï…Ï„Î¯ Ï„Î¿ Î¿Ï€Î¿Î¯Î¿ Î»Î­Î½Îµ ÏŒÏ„Î¹ Ï€ÎµÏÎ¹Î­Ï‡ÎµÎ¹ ÏŒÎ»Î± Ï„Î± Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Ï„Î¿Ï… ÎºÏŒÏƒÎ¼Î¿Ï…. ÎŸÎ¹ Î¸ÏÏÎ»Î¿Î¹ Î»Î­Î½Îµ ÏŒÏ„Î¹ ÏŒÏ€Î¿Î¹Î¿Ï‚ ÎºÎ±Ï„Î±Ï†Î­ÏÎµÎ¹ Î½Î± Ï„Î¿ Î±Î½Î¿Î¯Î¾ÎµÎ¹ Î¸Î± ÎµÎ¯Ï‡Îµ Ï„ÏŒÏƒÎ± Ï€Î¿Î»Î»Î¬ Î¶Î±Ï‡Î±ÏÏŽÏ„Î± ÏŒÏ€Î¿Ï… Î¿Ï„Î¹Î´Î®Ï€Î¿Ï„Îµ Î¸Î± Î®Ï„Î±Î½ Î´Ï…Î½Î±Ï„ÏŒÎ½.");
Database.addText("el.lighthouseQuestionDragon", "ÎŸ Î´ÏÎ¬ÎºÎ¿Ï‚ Î¼Î¿Ï… ÎµÎ¯Ï€Îµ Î½Î± Î­ÏÎ¸Ï‰ ÎµÎ´ÏŽ ÎµÏ€ÎµÎ¹Î´Î® Î¸Î­Î»Ï‰ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬.");
Database.addText("el.lighthouseQuestionDragonSpeech", "Î‘Î±, ÎºÎ±Ï„Î¬Î»Î±Î²Î±, Î•Î³ÏŽ Î²Î­Î²Î±Î¹Î± Î´ÎµÎ½ Î¼Ï€Î¿ÏÏŽ Î½Î± ÏƒÎµ Ï€ÏÎ¿Î¼Ï…Î¸ÎµÏÏƒÏ‰ Î¼Îµ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Î±Ï€ÎµÏ…Î¸ÎµÎ¯Î±Ï‚, Î±Î»Î»Î¬ Î¼Ï€Î¿ÏÏŽ Î½Î± ÏƒÎ¿Ï… Î´ÏŽÏƒÏ‰ ÎºÎ¬Ï„Î¹ Ï‡ÏÎ®ÏƒÎ¹Î¼Î¿ Ï„Î¿ Î¿Ï€Î¿Î¯Î¿ Î¸Î± ÏƒÎµ Î²Î¿Î·Î¸Î®ÏƒÎµÎ¹ Î½Î± Î±Ï€Î¿ÎºÏ„Î®ÏƒÎµÎ¹Ï‚ Î ÎŸÎ›Î›Î‘ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬. Î‘Ï€Î»ÏŽÏ‚ Ï€ÏÎ­Ï€ÎµÎ¹ Î½Î± ÏƒÎµ Ï„ÎµÏƒÏ„Î¬ÏÏ‰ Ï€ÏÎ¹Î½ ÏƒÏ„Î¿ Î´ÏŽÏƒÏ‰. Î•Ï€ÎµÎ¹Î´Î® Î±Ï…Ï„ÏŒ Ï€Î¿Ï… Î­Ï‡Ï‰ Î´ÎµÎ½ Î¼Ï€Î¿ÏÎµÎ¯ Î½Î± Î´Ï‰Î¸ÎµÎ¯ ÏƒÏ„Î¿Î½ ÎºÎ±Î¸Î­Î½Î±. Î›ÏÏƒÎµ Î±Ï…Ï„ÏŒÎ½ Ï„Î¿ Î³ÏÏÏ†Î¿ ÎºÎ±Î¹ Î¸Î± ÎµÎ¯Î½Î±Î¹ Î´Î¹ÎºÏŒ ÏƒÎ¿Ï….");
Database.addText("el.lighthouseFoundStone", "Î£Ï…Î³Ï‡Î±ÏÎ·Ï„Î®ÏÎ¹Î±! Î Î­ÏÎ±ÏƒÎµÏ‚ Ï„Î¿ Ï„ÎµÏƒÏ„ ÎºÎ±Î¹ Î²ÏÎ®ÎºÎµÏ‚ Ï„Î·Î½ Ï€Î­Ï„ÏÎ±. Î•Î¯Î½Î±Î¹ Ï€Î¿Î»Ï Ï€Î¿Î»ÏÏ„Î¹Î¼Î·, Î±Î»Î»Î¬ ÎµÎ¯Î½Î±Î¹ Ï‡ÏÎ®ÏƒÎ¹Î¼Î· Î¼ÏŒÎ½Î¿ Î±Î½ Î­Ï‡ÎµÎ¹Ï‚ Ï„ÏÎµÎ¹Ï‚ Î¬Î»Î»ÎµÏ‚ Ï€Î­Ï„ÏÎµÏ‚ ÏƒÎ±Î½ ÎºÎ¹ Î±Ï…Ï„Î®. ÎšÎ±Î»Î® Ï„ÏÏ‡Î·!");
Database.addText("el.lighthouseFoundStoneAgain", "ÎšÎ±Î»Î® Î´Î¿Ï…Î»ÎµÎ¹Î¬, Î­Î»Ï…ÏƒÎµÏ‚ Ï„Î¿ Î³ÏÏÏ†Î¿ ÎºÎ¹'Î¬Î»Î»Î· Ï†ÏŒÏÎ±. Î¦Î±Î¯Î½ÎµÏ„Î±Î¹ Î½Î± ÏƒÎ¿Ï… Î±ÏÎ­ÏƒÎµÎ¹ Î±Ï…Ï„ÏŒ.");
Database.addText("el.saveLocalSaveTitle", "Î‘Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ· Ï†Ï…Î»Î¿Î¼ÎµÏ„ÏÏ…Ï„Î®");
Database.addText("el.saveLocalSaveWhy", "Î”Î¹Î¬Î»ÎµÎ¾Îµ Ï„Î¿Ï€Î¹ÎºÎ® Î±Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ· Î±Î½ Î¸ÎµÏ‚ Î½Î± ÏƒÏ…Î½ÎµÏ‡Î¯Î¶ÎµÎ¹Ï‚ Î½Î± Ï€Î±Î¯Î¶ÎµÎ¹Ï‚ ÏƒÏ„Î·Î½ Ï„Ï‰ÏÎ¹Î½Î® ÏƒÎ¿Ï… ÏƒÏ…ÏƒÎºÎµÏ…Î® Î® Ï†Ï…Î»Î¿Î¼ÎµÏ„ÏÎ·Ï„Î®.");
Database.addText("el.saveLocalSaveWarning0", "ÎŸ Ï†Ï…Î»Î¿Î¼ÎµÏ„ÏÎ·Ï„Î®Ï‚ ÏƒÎ¿Ï… Î´ÎµÎ½ Ï†Î±Î¯Î½ÎµÏ„Î±Î¹ Î½Î± Ï…Ï€Î¿ÏƒÏ„Î·ÏÎ¯Î¶ÎµÎ¹ HTML5.");
Database.addText("el.saveLocalSaveWarning1", "ÎšÎ±Î»ÏÏ„ÎµÏÎ± Î½Î± Î±Î½Î±Î²Î±Î¸Î¼Î¯ÏƒÎµÎ¹Ï‚ Ï„Î¿Î½ Ï†Ï…Î»Î¿Î¼ÎµÏ„ÏÎ·Ï„Î® ÏƒÎ¿Ï… Î³Î¹Î± Î½Î± Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®ÏƒÎµÎ¹Ï‚ Ï„Î· Î´Ï…Î½Î±Ï„ÏŒÏ„Î·Î± Ï„Î¿Ï€Î¹ÎºÎ®Ï‚ Î±Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ·Ï‚.");
Database.addText("el.saveLocalSaveChooseSlot", "Î”Î¹Î¬Î»ÎµÎ¾Îµ Î¼Î¹Î± Ï…Ï€Î¿Î´Î¿Ï‡Î® Î±Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ·Ï‚ :");
Database.addText("el.saveLocalSaveAutosaveEnabled", "Î‘Ï…Ï„ÏŒÎ¼Î±Ï„Î· Î±Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ· ÎµÎ½ÎµÏÎ³Î¿Ï€Î¿Î¹Î·Î¼Î­Î½Î·");
Database.addText("el.saveLocalSaveChooseWhatToDo", "Î”Î¹Î¬Î»ÎµÎ¾Îµ Ï„Î¹ Î½Î± ÎºÎ±Î½ÎµÎ¹Ï‚:");
Database.addText("el.saveLocalSaveSaveButton", "Î‘Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ·");
Database.addText("el.saveLocalSaveAutosaveButton", "Î‘Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ· ÎºÎ¬Î¸Îµ 10 Î»ÎµÏ€Ï„Î¬");
Database.addText("el.saveLocalSaveDisableAutosaveButton", "Î‘Ï…Ï„ÏŒÎ¼Î±Ï„Î· Î±Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ· Î±Ï€ÎµÎ½ÎµÏÎ³Î¿Ï€Î¿Î¹Î·Î¼Î­Î½Î·");
Database.addText("el.saveFileSaveTitle", "Î‘Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ· ÏƒÎµ Î¼Î¿ÏÏ†Î® ÎºÎµÎ¹Î¼Î­Î½Î¿Ï…");
Database.addText("el.saveFileSaveWhy0", "Î”Î¹Î¬Î»ÎµÎ¾Îµ Ï„Î·Î½ Î±Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ· ÏƒÎµ Î¼Î¿ÏÏ†Î® ÎºÎµÎ¹Î¼Î­Î½Î¿Ï… Î±Î½ :");
Database.addText("el.saveFileSaveWhy1", "Î˜Î­Î»ÎµÎ¹Ï‚ Î½Î± ÏƒÏ…Î½ÎµÏ‡Î¯ÏƒÎµÎ¹Ï‚ ÏƒÎµ Î¼Î¯Î± Î´Î¹Î±Ï†Î¿ÏÎµÏ„Î¹ÎºÎ® ÏƒÏ…ÏƒÎºÎµÏ…Î® Î® Ï†Ï…Î»Î¿Î¼ÎµÏ„ÏÎ·Ï„Î®");
Database.addText("el.saveFileSaveWhy2", "Î˜Î­Î»ÎµÎ¹Ï‚ Î½Î± Î¼Î¿Î¹ÏÎ±ÏƒÏ„ÎµÎ¯Ï‚ Ï„Î·Î½ Ï€ÏÏŒÎ¿Î´Î¿ ÏƒÎ¿Ï… ÏƒÏ„Î¿ Ï€Î±Î¹Ï‡Î½Î¯Î´Î¹ Î¼Îµ ÎºÎ¬Ï€Î¿Î¹Î¿Î½ Î¬Î»Î»Î¿Î½");
Database.addText("el.saveFileSaveWhy3", "Î“Î¹Î± ÎºÎ¬Ï€Î¿Î¹Î¿ Î»ÏŒÎ³Î¿ Î¸ÎµÏ‚ Î½Î± Î±Î´ÎµÎ¹Î¬ÏƒÎµÎ¹Ï‚ Ï„Î· Î¼Î½Î®Î¼Î· Ï„Î¿Ï… Ï†Ï…Î»Î¿Î¼ÎµÏ„ÏÎ·Ï„Î® ÏƒÎ¿Ï…");
Database.addText("el.saveFileSaveWhy4", "(ÎºÎ¬Ï„Î¹ Ï„Î¿ Î¿Ï€Î¿Î¯Î± Î¸Î± Î´Î¹Î±Î³ÏÎ¬ÏˆÎµÎ¹ Ï„Î¹Ï‚ Ï„Î¿Ï€Î¹ÎºÎ­Ï‚ Î±Ï€Î¿Î¸Î·ÎºÎµÏÏƒÎµÎ¹Ï‚ ÏƒÎ¿Ï…)");
Database.addText("el.saveFileSaveButton", "Î Î¬ÏÎµ Ï„Î¿ Ï„Ï‰ÏÎ¹Î½ÏŒ Ï€Î±Î¹Ï‡Î½Î¯Î´Î¹ ÏƒÎµ Î¼Î¿ÏÏ†Î® ÎºÎµÎ¹Î¼Î­Î½Î¿Ï…");
Database.addText("el.saveFileSaveWarning", "Î¤ÏŽÏÎ± Î±Î½Ï„Î­Î³ÏÎ±ÏˆÎµ Ï„Î¿ ÎºÎµÎ¯Î¼ÎµÎ½Î¿ Î±Ï…Ï„ÏŒ ÎºÎ¬Ï€Î¿Ï…! (ÏƒÎµ Î­Î½Î± Î±ÏÏ‡ÎµÎ¯Î¿ Î³Î¹Î± Ï€Î±ÏÎ¬Î´ÎµÎ¹Î³Î¼Î±)");
Database.addText("el.saveLocalLoadTitle", "Î¦ÏŒÏÏ„Ï‰ÏƒÎ· Î±Ï€ÏŒ Ï†Ï…Î»Î¿Î¼ÎµÏ„ÏÎ·Ï„Î®");
Database.addText("el.saveLocalLoadYouCan", "ÎœÏ€Î¿ÏÎµÎ¯Ï‚ Î½Î± Ï†Î¿ÏÏ„ÏŽÏƒÎµÎ¹Ï‚ Î¼Î¯Î± Ï„Î¿Ï€Î¹ÎºÎ® Î±Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ· Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹ÏŽÎ½Ï„Î±Ï‚ Î­Î½Î±Î½ Î±Ï€ÏŒ Ï„Î¿Ï…Ï‚ Ï€Î±ÏÎ±ÎºÎ¬Ï„Ï‰ ÏƒÏ…Î½Î´Î­ÏƒÎ¼Î¿Ï…Ï‚ :");
Database.addText("el.saveLocalLoadThanksTo", "Î§Î¬ÏÎ·Ï‚ ÏƒÏ„Î· Î¼Î±Î³ÎµÎ¯Î± Ï„Î¿Ï… HTML5, Î¸Î± Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®ÏƒÎµÎ¹Ï‚ Î±Ï…Ï„Î¿ÏÏ‚ Ï„Î¿Ï…Ï‚ ÏƒÏ…Î½Î´Î­ÏƒÎ¼Î¿Ï…Ï‚ Î±ÎºÏŒÎ¼Î± ÎºÎ±Î¹ Ï‡Ï‰ÏÎ¯Ï‚ ÏƒÏÎ½Î´ÎµÏƒÎ· ÏƒÏ„Î¿ Î¹Î½Ï„ÎµÏÎ½ÎµÏ„.");
Database.addText("el.saveFileLoadTitle", "Î¦ÏŒÏÏ„Ï‰ÏƒÎ· Ï€Î±Î¹Ï‡Î½Î¹Î´Î¹Î¿Ï ÏƒÎµ Î¼Î¿ÏÏ†Î® ÎºÎµÎ¹Î¼Î­Î½Î¿Ï…");
Database.addText("el.saveFileLoadPaste", "Î•Ï€Î¹ÎºÏŒÎ»Î»Î·ÏƒÎµ Ï„Î·Î½ Î±Ï€Î¿Î¸Î®ÎºÎµÏ…ÏƒÎ· ÏƒÎ¿Ï… Ï€Î±ÏÎ±ÎºÎ¬Ï„Ï‰ ÎºÎ±Î¹ ÎºÎ¬Î½Îµ ÎºÎ»Î¹Îº ÏƒÏ„Î¿ ÎºÎ¿Ï…Î¼Î¿Î¯ \"Î¦ÏŒÏÏ„Ï‰ÏƒÎ·\"");
Database.addText("el.saveFileLoadButton", "Î¦ÏŒÏÏ„Ï‰ÏƒÎ·");
Database.addText("el.mountainsText0", "Î”Î¹Î­ÎºÏÎ¹Î½ÎµÏ‚ ÎºÎ¬Ï„Î¹ ÏƒÏ„Î± Î²Î¿Ï…Î½Î¬!");
Database.addText("el.mountainsText1", "Î¦Î±Î¯Î½ÎµÏ„Î±Î¹ ÎµÎ½Î´Î¹Î±Ï†Î­ÏÎ¿Î½. ÎœÏ€Î¿ÏÎµÎ¯ Î½Î± ÎµÎ¯Î½Î±Î¹ Ï‡ÏÎ®ÏƒÎ¹Î¼Î¿.");
Database.addText("el.mountainsTextButton", "Î‘Î½Î­Î²Î± ÏƒÏ„Î± Î²Î¿Ï…Î½Î¬ Î³Î¹Î± Î½Î± Ï€Î¬ÏÎµÎ¹Ï‚ Ï„Î¿ Ï€ÏÎ¬Î³Î¼Î±");
Database.addText("el.mountainsTextAfter", "Î’ÏÎ®ÎºÎµÏ‚ Î­Î½Î± ÎºÎ±Î»Î¬Î¼Î¹ Ï€Î·Î´Î®Î¼Î±Ï„Î¿Ï‚!");
Database.addText("el.secondHouseIntroSpeech", "Î“ÎµÎ¹Î±, ÎµÎ¯Î¼Î±Î¹ Î¿ Î­Î¼Ï€Î¿ÏÎ¿Ï‚ Î¶Î±Ï‡Î±ÏÏ‰Ï„ÏŽÎ½. Î˜Î± Î­ÎºÎ±Î½Î± Ï„Î± Ï€Î¬Î½Ï„Î± Î³Î¹Î± Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬. Î¤Î¹ Ï‡ÏÎµÎ¹Î¬Î¶ÎµÏƒÎ±Î¹;");
Database.addText("el.secondHouseLollipop1Speech", "Î‘Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Î­Î½Î± Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹ Î¼Îµ Î³ÎµÏÏƒÎ· Î»ÎµÎ¼ÏŒÎ½Î¹. Î¤Î¿ Î±Î³Î±Ï€Î·Î¼Î­Î½Î¿ Î¼Î¿Ï…! ÎšÎ¿ÏƒÏ„Î¯Î¶ÎµÎ¹ 60 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬, Î±Î»Î»Î¬ Î±Î¾Î¯Î¶ÎµÎ¹.");
Database.addText("el.secondHouseLollipop2Speech", "Î‘Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Î­Î½Î± Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹ Î¼Îµ Î³ÎµÏÏƒÎ· Ï†ÏÎ¬Î¿Ï…Î»Î±. ÎˆÏ‡ÎµÎ¹ Ï‰ÏÎ±Î¯Î± Î³ÎµÏÏƒÎ·. ÎœÎ¿Ï… Î±ÏÎ­ÏƒÎµÎ¹ Ï„Î¿ ÎºÏŒÎºÎºÎ¹Î½Î¿ Ï‡ÏÏŽÎ¼Î± Ï„Î¿Ï…. ÎœÏŒÎ½Î¿ 60 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬!");
Database.addText("el.secondHouseLollipop3Speech", "Î‘Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Î­Î½Î± Î³Î­Î¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹ Î¼Îµ Î³ÎµÏÏƒÎ· ÎºÎ¿Î»Î¿ÎºÏÎ¸Î±. Î Î¬Ï‰ ÏƒÏ„Î¿Î¹Ï‡Î®Î¼Î± Ï€Ï‰Ï‚ Î´ÎµÎ½ Î­Ï‡ÎµÎ¹Ï‚ Î´Î¿ÎºÎ¹Î¼Î¬ÏƒÎµÎ¹ Ï€Î¿Ï„Î­! 60 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÎºÎ±Î¹ÎµÎ¯Î½Î±Î¹ Î´Î¹ÎºÏŒ ÏƒÎ¿Ï….");
Database.addText("el.secondHouseLollipopButtonText", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Î±Ï…Ï„ÏŒ Ï„Î¿ Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹. (60 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.secondHouseMerchantHatSpeech", "Î˜Î± Î¼Ï€Î¿ÏÎ¿ÏÏƒÎ± Î½Î± ÏƒÎ¿Ï… Ï€Î¿Ï…Î»Î®ÏƒÏ‰ Ï„Î¿ ÎºÎ±Ï€Î­Î»Î¿ Î¼Î¿Ï…, Î±Î»Î»Î¬ ÎµÎ¯Î½Î±Î¹ Ï€Î¿Î»Ï Ï€Î¿Î»ÏÏ„Î¹Î¼Î¿, Î¾Î­ÏÎµÎ¹Ï‚... Î˜Î± Ï€ÏÎ­Ï€ÎµÎ¹ Î½Î± Î¼Î¿Ï… Î´ÏŽÏƒÎµÎ¹Ï‚ Ï€Î¿Î»Î»Î¬ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Î³Î¹Î± Î½Î± Ï„Î¿ Ï€Î¬ÏÎµÎ¹Ï‚. Î‘Ï‚ Ï€Î¿ÏÎ¼Îµ Î­Î½Î± ÎµÎºÎ±Ï„Î¿Î¼ÏÏÎ¹Î¿ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬. Î‘ÎºÎ¿ÏÎ³ÎµÏ„Î±Î¹ Î´Î¯ÎºÎ±Î¹Î¿, Î­Ï„ÏƒÎ¹;");
Database.addText("el.secondHouseMerchantHatButtonText", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Ï„Î¿ ÎºÎ±Ï€Î­Î»Î¿ Ï„Î¿Ï… ÎµÎ¼Ï€ÏŒÏÎ¿Ï…. ( 1 000 000 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.secondHouseTimeRingSpeech", "Î‘Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Ï„Î¿ Î´Î±Ï‡Ï„Ï…Î»Î¯Î´Î¹ Ï„Î¿Ï… Ï‡ÏÏŒÎ½Î¿Ï…. Î•Î¯Î½Î±Î¹ ÎºÎ¬Ï€Ï‰Ï‚ Î¼Î±Î³Î¹ÎºÏŒ. Î£Î¿Ï… ÎµÏ€Î¹Ï„ÏÎ­Ï€ÎµÎ¹ Î½Î± ÎºÎ¬Î½ÎµÎ¹Ï‚ Ï„Î¿ Ï‡ÏÏŒÎ½Î¿ Î½Î± ÎºÏ…Î»Î¬ Ï€Î¹Î¿ Î±ÏÎ³Î¬ ÏŒÏ„Î±Î½ Î²ÏÎ¯ÏƒÎºÎµÏƒÎ±Î¹ ÏƒÎµ ÎºÎ¯Î½Î´Ï…Î½Î¿.");
Database.addText("el.secondHouseTimeRingButtonText", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Ï„Î¿ Î´Î±Ï‡Ï„Ï…Î»Î¯Î´Î¹ Ï„Î¿Ï… Ï‡ÏÏŒÎ½Î¿Ï… (500 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.secondHouseLeatherGlovesSpeech", "Î‘Ï…Ï„Î¬ Ï„Î± Î¼Î¬Î»Î»Î¹Î½Î± Î³Î¬Î½Ï„Î¹Î± ÎµÎ¯Î½Î±Î¹ Ï†Ï„Î¹Î±Î³Î¼Î­Î½Î± Î±Ï€ÏŒ Î´Î­ÏÎ¼Î± ÎºÎ±Î¼Î®Î»Î±Ï‚, Î±Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Ï…ÏˆÏ…Î»Î®Ï‚ Ï€Î¿Î¹ÏŒÏ„Î·Ï„Î±Ï‚. ÎˆÏ‡Ï‰ Ï€Î¿Î»Î»Î¬ ÏƒÎµ Î´Î¹Î±Î¸ÎµÏƒÎ¹Î¼ÏŒÏ„Î·Ï„Î±, Î³Î¹'Î±Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Ï„ÏŒÏƒÎ¿ Ï†Î¸Î·Î½Î¬: Î¼ÏŒÎ½Î¿ 300 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬!");
Database.addText("el.secondHouseLeatherBootsButtonText", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Î­Î½Î± Î¶ÎµÏ…Î³Î¬ÏÎ¹ Î¼Î¬Î»Î»Î¹Î½ÎµÏ‚ Î¼Ï€ÏŒÏ„ÎµÏ‚ (300 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.secondHouseLeatherBootsSpeech", "Î‘Ï…Ï„Î­Ï‚ Î¿Î¹ Ï…ÏˆÏ…Î»Î®Ï‚ Ï€Î¿Î¹ÏŒÏ„Î·Ï„Î±Ï‚ Î¼Î¬Î»Î»Î¹Î½ÎµÏ‚ Î¼Ï€ÏŒÏ„ÎµÏ‚, Ï†Ï„Î¹Î±Î³Î¼Î­Î½ÎµÏ‚ Î±Ï€ÏŒ Î´Î­ÏÎ¼Î± ÎºÎ±Î¼Î®Î»Î±Ï‚, Î¸Î± ÎºÏÎ±Ï„Î®ÏƒÎ¿Ï…Î½ Ï„Î± Ï€ÏŒÎ´Î¹Î± ÏƒÎ¿Ï… Î¶ÎµÏƒÏ„Î¬.");
Database.addText("el.secondHouseLeatherGlovesButtonText", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Î­Î½Î± Î¶ÎµÏ…Î³Î¬ÏÎ¹ Î¼Î¬Î»Î»Î¹Î½Î± Î³Î¬Î½Ï„Î¹Î±. (300 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.secondHouseChocolateBarSpeech", "Î‘Ï…Ï„Î® ÎµÎ¯Î½Î±Î¹ Î¼Î¹Î± Î¼Ï€Î¬ÏÎ± ÏƒÎ¿ÎºÎ¿Î»Î¬Ï„Î±Ï‚. Î”ÎµÎ½ Î¾Î­ÏÏ‰ Î³Î¹Î± Ï„Î¯ Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®Ï„Îµ, Î±Î»Î»Î¬ ÎµÎ¯Î½Î±Î¹ Î±ÏÎºÎµÏ„Î¬ ÏƒÏ€Î¬Î½Î¹Î±, ÎºÎ¬Ï„Î¹ Ï„Î¿ Î¿Ï€Î¿Î¯Î¿ ÎµÎ¾Î·Î³ÎµÎ¯ Ï„Î·Î½ Ï„Î¹Î¼Î®. 800 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÎºÎ±Î¹ ÎµÎ¯Î½Î±Î¹ Î´Î¹ÎºÎ® ÏƒÎ¿Ï…!");
Database.addText("el.secondHouseChocolateBarButtonText", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Ï„Î·Î½ Î¼Ï€Î¬ÏÎ± ÏƒÎ¿ÎºÎ¿Î»Î¬Ï„Î±Ï‚ (800 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬)");
Database.addText("el.outsideTheHoleButton", "Î Î®Î´Î± ÏƒÎµ Î±Ï…Ï„Î®Î½ Ï„Î· Î¼ÎµÎ³Î¬Î»Î· Ï„ÏÏÏ€Î± ÏƒÏ„Î¿ Î­Î´Î±Ï†Î¿Ï‚");
Database.addText("el.theCaveExitText0", "Î¤ÎµÎ»Î¹ÎºÎ¬ Î­Ï†Ï„Î±ÏƒÎµÏ‚ ÏƒÏ„Î·Î½ Î­Î¾Î¿Î´Î¿ Ï„Î·Ï‚ ÏƒÏ€Î·Î»Î¹Î¬Ï‚.");
Database.addText("el.theCaveExitText1", "ÎœÏ€Î¿ÏÎµÎ¯Ï‚ Î½Î± Î´ÎµÎ¹Ï‚ Î­Î½Î± Î¼ÎµÎ³Î¬Î»Î¿ Î´Î¬ÏƒÎ¿Ï‚ Î­Î¾Ï‰ Î±Ï€ÏŒ ÎµÎ´ÏŽ.");
Database.addText("el.theCaveExitButtonText", "Î’Î³Î­Ï‚ Î±Ï€ÏŒ Ï„Î·Î½ ÏƒÏ€Î·Î»Î¹Î¬");
Database.addText("el.theCaveFirstSentenceWentStraight", "Î ÏÎ¿Ï‡ÏŽÏÎ·ÏƒÎµÏ‚ ÎµÏ…Î¸ÎµÎ¯Î± Î¼Ï€ÏÎ¿ÏƒÏ„Î¬.");
Database.addText("el.theCaveFirstSentenceWentLeft", "Î Î­ÏÎ±ÏƒÎµÏ‚ Î±Ï€Î¿ Ï„Î¿ Î±ÏÎ¹ÏƒÏ„ÎµÏÏŒ Ï€Î­ÏÎ±ÏƒÎ¼Î±.");
Database.addText("el.theCaveFirstSentenceWentRight", "Î Î­ÏÎ±ÏƒÎµÏ‚ Î±Ï€Î¿ Ï„Î¿ Î´ÎµÎ¾Î¹ÏŒ Ï€Î­ÏÎ±ÏƒÎ¼Î±.");
Database.addText("el.theCaveFirstSentenceYouAre", "Î•Î¯ÏƒÎ±Î¹ Î¼Î­ÏƒÎ± ÏƒÎµ Î¼Î¯Î± ÏƒÏ€Î·Î»Î¹Î¬. Î¥Ï€Î¬ÏÏ‡Î¿Ï…Î½ Ï„ÏÎ¯Î± Î¼Î¿Î½Î¿Ï€Î¬Ï„Î¹Î± Î¼Ï€ÏÎ¿ÏƒÏ„Î¬ ÏƒÎ¿Ï….");
Database.addText("el.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Î’Î»Î­Ï€ÎµÎ¹Ï‚ Î­Î½Î± Ï€Î±ÏÎ¬Î¾ÎµÎ½Î¿ Ï€ÏÎ¬Î³Î¼Î± ÏƒÏ„Î¿ Î­Î´Î±Ï†Î¿Ï‚ Î¼Ï€ÏÎ¿ÏƒÏ„Î¬ ÏƒÎ¿Ï….");
Database.addText("el.theCavePattern_ChocolateBarNowSeeChocolateBar", "Î’Î»Î­Ï€ÎµÎ¹Ï‚ Î¼Î¯Î± Î¼Ï€Î¬ÏÎ± ÏƒÎ¿ÎºÎ¿Î»Î¬Ï„Î±Ï‚ Î¼Ï€ÏÎ¿ÏƒÏ„Î¬ ÏƒÎ¿Ï….");
Database.addText("el.theCavePattern_TreasureMapSentence", "Î’Î»Î­Ï€ÎµÎ¹Ï‚ Î¼Î¹ÎºÏÎ¿ÏÏ‚ Î²ÏÎ¬Ï‡Î¿Ï…Ï‚ ÏƒÏ„Î·Î¼Î­Î½Î¿Ï…Ï‚ Î¼Îµ Ï€ÎµÏÎ¯ÎµÏÎ³Î¿ Ï„ÏÏŒÏ€Î¿ ÏƒÏ„Î¿ Î­Î´Î±Ï†Î¿Ï‚.");
Database.addText("el.theCavePattern_MonkeyWizardSentence", "Î’Î»Î­Ï€ÎµÎ¹Ï‚ Î­Î½Î±Î½ Î³Ï…Î¼Î½ÏŒ Î¼Î¬Î³Î¿ Î¼Î±ÏŠÎ¼Î¿Ï.");
Database.addText("el.theCavePattern_MonkeyWizardButton", "Î ÏÎ¿ÎºÎ¬Î»ÎµÏƒÎ­ Ï„Î¿Î½");
Database.addText("el.theCavePattern_OctopusKingSentence", "Î’Î»Î­Ï€ÎµÎ¹Ï‚ Ï„Î¿ Î’Î±ÏƒÎ¹Î»Î¹Î¬ Î§Ï„Î±Ï€ÏŒÎ´Î¹. Î¦Î±Î¯Î½ÎµÏ„Î±Î¹ Î±Ï€Î±Î¯ÏƒÎ¹Î¿Ï‚.");
Database.addText("el.theCavePattern_OctopusKingButton", "Î ÏÎ¿ÎºÎ¬Î»ÎµÏƒÎ­ Ï„Î¿Î½");
Database.addText("el.fortressInsideText0", "Î•Î¯ÏƒÎ±Î¹ Î¼Î­ÏƒÎ± ÏƒÏ„Î¿ ÎºÎ¬ÏƒÏ„ÏÎ¿ Ï„Î·Ï‚ Î¬Î¼Î¼Î¿Ï…");
Database.addText("el.fortressInsideText1", "ÎœÏ€Î¿ÏÎµÎ¯Ï‚ Î½Î± Î´Î¹Î±Î»Î­Î¾ÎµÎ¹Ï‚ Î¼ÎµÏ„Î±Î¾Ï Ï„ÏÎ¹ÏŽÎ½ Ï€Î¿ÏÏ„ÏŽÎ½.");
Database.addText("el.fortressInsideText2", "Each of them leads to a big room with a treasure at the end.");
Database.addText("el.fortressInsideEnterRoom1", "ÎœÏ€ÎµÏ‚ ÏƒÏ„Î¿ Ï€ÏÏŽÏ„Î¿ Î´Ï‰Î¼Î¬Ï„Î¹Î¿");
Database.addText("el.fortressInsideEnterRoom2", "ÎœÏ€ÎµÏ‚ ÏƒÏ„Î¿ Î´ÎµÏÏ„ÎµÏÎ¿ Î´Ï‰Î¼Î¬Ï„Î¹Î¿");
Database.addText("el.fortressInsideEnterRoom3", "ÎœÏ€ÎµÏ‚ ÏƒÏ„Î¿ Ï„ÏÎ¯Ï„Î¿ Î´Ï‰Î¼Î¬Ï„Î¹Î¿");
Database.addText("el.treasureButtonDig", "Î£ÎºÎ¬ÏˆÎµ");
Database.addText("el.treasureButtonYouFound", "Î’ÏÎ®ÎºÎµÏ‚ Ï„ÏÎµÎ¹Ï‚ Î¼Ï€Î¬ÏÎµÏ‚ ÏƒÎ¿ÎºÎ¿Î»Î¬Ï„Î±Ï‚!");
Database.addText("el.sorceressHutHello", "Î“ÎµÎ¹Î±, ÎµÎ¯Î¼Î±Î¹ Î· Î¼Î¬Î³Î¹ÏƒÏƒÎ±. Î˜Î± Î¼Ï€Î¿ÏÎ¿ÏÏƒÎ± Î½Î± ÏƒÎ¿Ï… Î¼Î¬Î¸Ï‰ Î­Î½Î±-Î´Ï…Î¿ Ï€ÏÎ¬Î³Î¼Î±Ï„Î± Î³Î¹Î± Ï„Î· Î¼Î±Î³ÎµÎ¯Î±. ÎœÏ€Î¿ÏÏŽ ÎµÏ€Î¯ÏƒÎ·Ï‚ Î½Î± ÏƒÎ¿Ï… Î´ÏŽÏƒÏ‰ Î¼ÎµÏÎ¹ÎºÎ¬ ÎµÎ½Î´Î¹Î±Ï†Î­ÏÎ¿Î½Ï„Î± Ï€ÏÎ¬Î³Î¼Î±Ï„Î±, Î® Î½Î± ÎµÎºÏ„ÎµÎ»Î­ÏƒÏ‰ Î¾ÏŒÏÎºÎ¹Î± Î³Î¹Î± ÏƒÎ­Î½Î±. Î‘Î»Î»Î¬ Ï„Î± Ï€Î¬Î½Ï„Î± Î­Ï‡Î¿Ï…Î½ Î¼Î¯Î± Ï„Î¹Î¼Î®! ÎšÎ±Î¹ Î±Ï…Ï„Î® Î· Ï„Î¹Î¼Î® ÎµÎ¯Î½Î±Î¹ Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±. Î Î¿Î»Î»Î¬ Î±Ï€ÏŒ Î±Ï…Ï„Î¬.");
Database.addText("el.sorceressHutClickedGrimoire", "Î‘Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Î­Î½Î± Î²Î¹Î²Î»Î¯Î¿ Î³Î¹Î± Î¾ÏŒÏÎºÎ¹Î± Ï†Ï„Î¹Î±Î³Î¼Î­Î½Î¿ Î³Î¹Î± Ï€ÏÏ‰Ï„Î¬ÏÎ·Î´ÎµÏ‚. ÎœÎµ Ï„Î¿ Î½Î± Ï„Î¿ ÎºÎ¿Ï…Î²Î±Î»Î¬Ï‚ Î¼Î±Î¶Î¯ ÏƒÎ¿Ï… ÏƒÎµ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î­Ï‚, Î¸Î± Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± ÎµÎºÏ„ÎµÎ»ÎµÎ¯Ï‚ Î±Ï€Î»Î¬ Î±Î»Î»Î¬ Ï‡ÏÎ®ÏƒÎ¹Î¼Î± Î¾ÏŒÏÎºÎ¹Î±. Î¤Î¿ Ï‡ÏÎµÎ¹Î¬Î¶ÎµÏƒÎ±Î¹! ÎœÏŒÎ½Î¿ 5 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±.");
Database.addText("el.sorceressHutBuyGrimoireButton", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Î±Ï…Ï„ÏŒ Ï„Î¿ Î²Î¹Î²Î»Î¯Î¿ Î³Î¹Î± Î¾ÏŒÏÎºÎ¹Î±(5 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±)");
Database.addText("el.sorceressHutBuyGrimoireSpeech", "Î•Ï…Ï‡Î±ÏÎ¹ÏƒÏ„ÏŽ Ï€Î¿Ï… Ï„Î¿ Î±Î³ÏŒÏÎ±ÏƒÎµÏ‚! Î˜Î± Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± ÎµÎºÏ„ÎµÎ»Î­ÏƒÎµÎ¹Ï‚ Ï„ÏÎ¯Î± Î¾ÏŒÏÎºÎ¹Î± Î¼Îµ Î±Ï…Ï„ÏŒ Ï„Î¿ Î²Î¹Î²Î»Î¯Î¿ Î³Î¹Î± Î¾ÏŒÏÎºÎ¹Î±. ÎšÎ±Î»Î® Ï„ÏÏ‡Î·!");
Database.addText("el.sorceressHutClickedGrimoire2", "Î‘Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Î­Î½Î± ÏƒÏÎ½Î¸ÎµÏ„Î¿ Î²Î¹Î²Î»Î¯Î¿ Î³Î¹Î± Î¾ÏŒÏÎºÎ¹Î±. ÎœÎµ Ï„Î¿ Î½Î± Ï„Î¿ ÎºÎ¿Ï…Î²Î±Î»Î¬Ï‚ Î¼Î±Î¶Î¯ ÏƒÎ¿Ï… ÏƒÎµ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î­Ï‚, Î¸Î± Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± ÎµÎºÏ„ÎµÎ»ÎµÎ¯Ï‚ Î´ÏÎ¿ ÏƒÏÎ½Î¸ÎµÏ„Î± Î¾ÏŒÏÎºÎ¹Î±. Î¤Î¿ Î­Î³ÏÎ±ÏˆÎ± Î¼ÏŒÎ½Î· Î¼Î¿Ï…, ÎºÎ¬Ï„Î¹ Ï„Î¿ Î¿Ï€Î¿Î¯Î¿ Î´ÎµÎ½ Î®Ï„Î±Î½ ÎµÏÎºÎ¿Î»Î¿. 20 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î± ÎµÎ¯Î½Î±Î¹ Î¼Î¯Î± Î´Î¯ÎºÎ±Î¹Î± Ï„Î¹Î¼Î®.");
Database.addText("el.sorceressHutBuyGrimoire2Button", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Î±Ï…Ï„ÏŒ Ï„Î¿ Î²Î¹Î²Î»Î¯Î¿ Î³Î¹Î± Î¾ÏŒÏÎºÎ¹Î±(20 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±)");
Database.addText("el.sorceressHutBuyGrimoire2Speech", "Î•Ï…Ï‡Î±ÏÎ¹ÏƒÏ„ÏŽ Î³Î¹Î± Ï„Î·Î½ Î±Î³Î¿ÏÎ¬! Î˜Î± Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± ÎµÎºÏ„ÎµÎ»ÎµÎ¯Ï‚ Î´ÏÎ¿ Î¾ÏŒÏÎºÎ¹Î± Î¼Îµ Î±Ï…Ï„ÏŒ Ï„Î¿ Î²Î¹Î²Î»Î¯Î¿ Î³Î¹Î± Î¾ÏŒÏÎºÎ¹Î±. Î§ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¯Î·ÏƒÎµ Ï„Î± ÏƒÎ¿Ï†Î¬!");
Database.addText("el.sorceressHutClickedCauldron", "Î‘Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Ï„Î¿ ÎºÎ±Î¶Î¬Î½Î¹ Î¼Î¿Ï…. ÎœÎ¿Ï… ÎµÏ€Î¹Ï„ÏÎ­Ï€ÎµÎ¹ Î½Î± Ï†Ï„Î¹Î¬Ï‡Î½Ï‰ Ï†Î¯Î»Ï„ÏÎ±. Î˜Î± Î¼Ï€Î¿ÏÎ¿ÏÏƒÎ± Î½Î± ÏƒÏ„Î¿ Ï€Î¿Ï…Î»Î®ÏƒÏ‰, Î±Î»Î»Î¬ ÎµÎ¯Î½Î±Î¹ Ï€Î¿Î»Ï Ï€Î¿Î»ÏÏ„Î¹Î¼Î¿... Î¸Î± ÏƒÎ¿Ï… ÎºÎ¿ÏƒÏ„Î¯ÏƒÎµÎ¹ 100 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±.");
Database.addText("el.sorceressHutBuyCauldronButton", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Ï„Î¿ ÎºÎ±Î¶Î¬Î½Î¹ (100 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±)");
Database.addText("el.sorceressHutBuyCauldronSpeech", "Î•Ï…Ï‡Î±ÏÎ¹ÏƒÏ„ÏŽ Ï€Î¿Î»Ï! 100 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î± Î³Î¹Î± ÎµÎ¼Î­Î½Î±! Î•Ï€Î¯ÏƒÎ·Ï‚ ÏƒÎ¿Ï… Î­Î´Ï‰ÏƒÎ± Î­Î½Î±Î½ Î¿Î´Î·Î³ÏŒ. Î˜Î± ÎµÎ¯Î½Î±Î¹ Ï‡ÏÎ®ÏƒÎ¹Î¼Î¿Ï‚.");
Database.addText("el.sorceressHutClickedHat", "ÎˆÏ‡Ï‰ Î­Î½Î± Ï‰ÏÎ±Î¯Î¿ ÎºÎ±Ï€Î­Î»Î¿, Ï€ÏÎ¬Î³Î¼Î±Ï„Î¹! Î‘Î»Î»Î¬ Ï€ÏÎ±Î³Î¼Î±Ï„Î¹ÎºÎ¬ Î´ÎµÎ½ Î¼Ï€Î¿ÏÏŽ Î½Î± ÏƒÎ¿Ï… Ï„Î¿ Ï€Î¿Ï…Î»Î®ÏƒÏ‰. Î•Î¯Î½Î±Î¹ Ï…Ï€ÎµÏÎ²Î¿Î»Î¹ÎºÎ¬Î±Î± Ï€Î¿Î»ÏÏ„Î¹Î¼Î¿. Î ÏÎ¬Î³Î¼Î±Ï„Î¹, Î´ÎµÎ½ Î¼Ï€Î¿ÏÏŽ. ÎœÎ·Î½ ÎµÏ€Î¹Î¼Î­Î½ÎµÎ¹Ï‚. ÎŒÏ‡Î¹. ÎŒÏ‡Î¹ ÏŒÏ‡Î¹ ÏŒÏ‡Î¹. Î”ÎµÎ½ Î¸Î± Î­Ï€ÏÎµÏ€Îµ Î½Î± Ï„Î¿ ÎºÎ¬Î½Ï‰. Î• ÏƒÎ¹Î³Î¬, Î¸Î± Ï„Î¿ Î±Î½Ï„Î±Î»Î»Î¬Î¾Ï‰, Î±Î»Î»Î¬ Î³Î¹Î± 1 000 000 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±. ÎœÎ¬Î»Î»Î¿Î½ Î´ÎµÎ½ Î¸Î± Î¼Ï€Î¿ÏÎ­ÏƒÎµÎ¹Ï‚ Î½Î± Ï€Î»Î·ÏÏŽÏƒÎµÎ¹Ï‚ Ï„ÏŒÏƒÎ± Ï€Î¿Î»Î»Î¬ Î­Ï„ÏƒÎ¹ ÎºÎ¹ Î±Î»Î»Î¹ÏŽÏ‚.");
Database.addText("el.sorceressHutBuyHatButton", "Î‘Î³ÏŒÏÎ±ÏƒÎµ Ï„Î¿ ÎºÎ±Ï€Î­Î»Î¿ (1 000 000 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±)");
Database.addText("el.sorceressHutBuyHatSpeech", "ÎˆÎ½Î± Î´Î¹ÏƒÎµÎºÎ±Ï„Î¿Î¼ÏÏÎ¹Î¿ Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î± Î³Î¹Î± ÎµÎ¼Î­ÎµÎµÎµÎµÎ½Î±! Î‘Î»Î»Î¬ Î´ÎµÎ½ Î­Ï‡Ï‰ Î­Î½Î± ÎºÎ±Ï€Î­Î»Î¿ Ï€Î¹Î±.. Î±Î»Î»Î¬ Î­Î½Î± Î´Î¹ÏƒÎµÎºÎ±Ï„Î¿Î¼ÏÏÎ¹Î¿ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬, Î³Î¿Ï…Î¬Î¿Ï…! .. Î†Î¾Î¹Î¶Îµ.");
Database.addText("el.cauldronPreviousPageButton", "Î ÏÎ¿Î·Î³Î¿ÏÎ¼ÎµÎ½Î· ÏƒÎµÎ»Î¯Î´Î±");
Database.addText("el.cauldronNextPageButton", "Î•Ï€ÏŒÎ¼ÎµÎ½Î· ÏƒÎµÎ»Î¯Î´Î±");
Database.addText("el.cauldronWhatYouWantToPut", "Î¤Î¹ Î¸Î­Î»ÎµÎ¹Ï‚ Î½Î± Î²Î±Î»ÎµÎ¹Ï‚ ÏƒÏ„Î¿ ÎºÎ±Î¶Î¬Î½Î¹");
Database.addText("el.cauldronWhatIsIn", "Î¤Î¹ ÎµÎ¯Î½Î±Î¹ Î¼Î­ÏƒÎ± ÏƒÏ„Î¿ ÎºÎ±Î¶Î¬Î½Î¹");
Database.addText("el.cauldronWhatYouCanDo", "Î¤Î¹ Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± ÎºÎ¬Î½ÎµÎ¹Ï‚ Î¼Îµ Î±Ï…Ï„ÏŒ");
Database.addText("el.castleBigRoomComment", "ÎˆÎ½Î± Î¼ÎµÎ³Î¬Î»Î¿ Î´Ï‰Î¼Î¬Ï„Î¹Î¿");
Database.addText("el.castleARoomComment", "ÎˆÎ½Î± Î´Ï‰Î¼Î¬Ï„Î¹Î¿");
Database.addText("el.castleADarkRoomComment", "ÎˆÎ½Î± ÏƒÎºÎ¿Ï„ÎµÎ¹Î½Î¿ Î´Ï‰Î¼Î¬Ï„Î¹Î¿");
Database.addText("el.castleCastleEntranceComment", "Î— ÎµÎ¯ÏƒÎ¿Î´Î¿Ï‚ Ï„Î¿Ï… ÎºÎ¬ÏƒÏ„ÏÎ¿Ï….");
Database.addText("el.castleTowerEntranceComment", "Î— ÎµÎ¯ÏƒÎ¿Î´Î¿Ï‚ Ï„Î¿Ï… Ï€ÏÏÎ³Î¿Ï….");
Database.addText("el.castleNougatMonsterComment", "Attack the giant nougat monster");
Database.addText("el.castleGuardsComment", "Î”ÎµÎ¯ÏÎµ Ï„Î¿Ï…Ï‚ Ï†ÏÎ»Î±ÎºÎµÏ‚");
Database.addText("el.castleStairsComment", "Î£ÎºÎ¬Î»ÎµÏ‚");
Database.addText("el.buttonBackToTheCastle", "Î Î¯ÏƒÏ‰ ÏƒÏ„Î¿ ÎºÎ¬ÏƒÏ„ÏÎ¿");
Database.addText("el.castleBigRoomHovenSpeechSad", "Î“ÎµÎ¹Î±! Î•Î¯Î¼Î±Î¹ Î­Î½Î±Ï‚ Ï€Î¿Î»Ï Ï€Î±Î»Î¹ÏŒÏ‚ Ï†Î¿ÏÏÎ½Î¿Ï‚. Î Î±Î»Î¹Î¬ Î­ÏˆÎ·Î½Î± Ï€Î¬ÏÎ± Ï€Î¿Î»Î»Î¬ Î±ÏÏ„Î¿ÏƒÎºÎµÏ…Î¬ÏƒÎ¼Î±Ï„Î±, Î±Î»Î»Î¬ ÎºÎ±Î½Î­Î½Î±Ï‚ Î´ÎµÎ½ Î¼Îµ Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹ÎµÎ¯ Ï€Î¹Î±. ÎŠÏƒÏ‰Ï‚...Î¯ÏƒÏ‰Ï‚ ÎµÏƒÏ Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± Î¼Îµ Î²Î¿Î·Î¸Î®ÏƒÎµÎ¹Ï‚. Î‘Ï€Î»Î¬ Î±ÏƒÎµ Î½Î± Ï€Î¬ÏÏ‰ Î¼ÎµÏÎ¹ÎºÎ¬ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Î±Ï€ÏŒ ÎµÏƒÎ­Î½Î±! ÎœÎ·Î½ Î±Î½Ï…ÏƒÏ…Ï‡ÎµÎ¯Ï‚, Î´ÎµÎ½ Î¸Î± Ï„Î¿ Î¼ÎµÏ„Î±Î½Î¹ÏŽÏƒÎµÎ¹Ï‚. ÎœÏ€Î¿ÏÎµÎ¯Ï‚ Î½Î± Î¼Îµ ÎµÎ¼Ï€Î¹ÏƒÏ„ÎµÏ…Ï„ÎµÎ¯Ï‚.");
Database.addText("el.castleBigRoomHovenNotEnough", "Î‘... Î´ÎµÎ½ Î­Ï‡ÎµÎ¹Ï‚ Î±ÏÎºÎµÏ„Î¬ Î³Î»Ï…ÎºÎ¬, Î´ÎµÎ½ Î¼Ï€Î¿ÏÏŽ Î½Î± ÎºÎ¬Î½Ï‰ Ï„Î¯Ï€Î¿Ï„Î±. Î•Î¯Î¼Î±Î¹ Î±Ï€Î»ÏŽÏ‚ Î¬Ï‡ÏÎ·ÏƒÏ„Î¿Ï‚. Î•Î¯Î¼Î±Î¹ Î¿ Î¬Ï‡ÏÎ·ÏƒÏ„Î¿Ï‚ Ï†Î¿ÏÏÎ½Î¿Ï‚, Î­Ï„ÏƒÎ¹ Î¸Î± Ï€ÏÎ­Ï€ÎµÎ¹ Î½Î± Î¼Îµ Î»ÎµÏ‚.");
Database.addText("el.castleBigRoomHovenSpeechMadePainAuChocolat", "ÎÎ±Î¹! Î•Ï…Ï‡Î±ÏÎ¹ÏƒÏ„ÏŽ Ï€Î¿Î»Ï. Î§ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¯Î·ÏƒÎ± 100 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÎºÎ±Î¹ Î¼Î¯Î± Î¼Ï€Î¬ÏÎ± ÏƒÎ¿ÎºÎ¿Î»Î¬Ï„Î±Ï‚, ÎºÎ±Î¹ ÏƒÎ¿Ï… Î­Ï†Ï„Î¹Î±Î¾Î± Î¼Î¯Î± pain au chocolat! Î•Î¯Î½Î±Î¹ Ï„Î¿ Î±Î³Î±Ï€Î·Î¼Î­Î½Î¿ Î¼Î¿Ï… Î±ÏÏ„Î¿ÏƒÎºÎµÏÎ±ÏƒÎ¼Î±, ÎµÎ»Ï€Î¯Î¶Ï‰ Î½Î± ÏƒÎ¿Ï… Î±ÏÎ­ÏƒÎµÎ¹ ÎºÎ±Î¹ ÎµÏƒÎ­Î½Î±!");
Database.addText("el.castleBigRoomHovenSpeechHappy", "Î•! Î‘Î½ Î¸ÎµÏ‚ Î½Î± ÏƒÎ¿Ï… Î¼Î±Î³ÎµÎ¹ÏÎ­ÏˆÏ‰ ÎºÎ¹'Î¬Î»Î»Î¿ Î±ÏÏ„Î¿ÏƒÎºÎµÏÎ±ÏƒÎ¼Î±, Î±Ï€Î»ÏŽÏ‚ Ï€ÎµÏ‚ Î¼Î¿Ï…. Î˜Î± Î®Î¸ÎµÎ»Î± Ï€Î¿Î»Ï Î½Î± ÏƒÎµ Î²Î¿Î·Î¸Î®ÏƒÏ‰.");
Database.addText("el.castleBigRoomHovenSpeechHappyNotEnough", "Î‘, Î´ÎµÎ½ Î­Ï‡ÎµÎ¹Ï‚ Î±ÏÎºÎµÏ„Î¬ Î³Î»Ï…ÎºÎ¬, Î´Ï…ÏƒÏ„Ï…Ï‡ÏŽÏ‚. Î§ÏÎµÎ¹Î¬Î¶Î¿Î¼Î±Î¹ 100 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÎºÎ±Î¹ Î¼Î¯Î± Î¼Ï€Î¬ÏÎ± ÏƒÎ¿ÎºÎ¿Î»Î¬Ï„Î±Ï‚. Î“ÏÏÎ½Î± Ï€Î¯ÏƒÏ‰ ÏŒÏ„Î±Î½ Ï„Î± Î­Ï‡ÎµÎ¹Ï‚ Î±Ï…Ï„Î¬!");
Database.addText("el.castleBigRoomHovenLetHovenTakeButton", "Î†ÏƒÎµ Ï„Î¿Î½ Ï†Î¿ÏÏÎ½Î¿ Î½Î± Ï€Î¬ÏÎµÎ¹ ÏŒÏƒÎ± Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Î¸Î­Î»ÎµÎ¹");
Database.addText("el.castleBigRoomHovenThanks", "Î•Ï…Ï‡Î±ÏÎ¹ÏƒÏ„ÏŽ, Ï†Î¿ÏÏÎ½Îµ");
Database.addText("el.dragonStopTickling", "Î•,ÎµÏƒÏ…! Î£Ï„Î±Î¼Î¬Ï„Î± Î½Î± Î¼Îµ Î³Î±ÏÎ³Î±Î»Î¬Ï‚ ÏƒÎµ Ï€Î±ÏÎ±ÎºÎ±Î»Ï‰.");
Database.addText("el.dragonStopTicklingButton", "Î©Ï‡, ÏƒÏ…Î³Î½ÏŽÎ¼Î·, Î½ÏŒÎ¼Î¹Î¶Î± Ï€Ï‰Ï‚ Î­Ï€ÏÎµÏ€Îµ Î½Î± ÏƒÎ¿Ï… ÎµÏ€Î¹Ï„ÎµÎ¸ÏŽ.");
Database.addText("el.dragonTalking", "Î•Î¯Î¼Î±Î¹ Î¿ Î´ÏÎ¬ÎºÎ¿Ï‚ ÎºÎ±Î¹ Î±Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Ï„Î¿ ÎºÎ¬ÏƒÏ„ÏÎ¿ Î¼Î¿Ï…. Î’Î»Î­Ï€Ï‰ ÏŒÏ„Î¹ ÎºÎ±Ï„Î±Ï†ÎµÏÎµÏ‚ Î½Î± Î¼Ï€ÎµÎ¹Ï‚, Ï€ÏÎ­Ï€ÎµÎ¹ Î½Î± ÎµÎ¯ÏƒÎ±Î¹ Ï€Î¿Î»Ï Î³ÎµÎ½Î½Î±Î¯Î¿Ï‚... Î¸Î± Ï„Î¿ Î®Î¸ÎµÎ»Î± Ï€Î¿Î»Ï Î½Î± Î²Î¿Î·Î¸Î®ÏƒÏ‰ ÎºÎ¬Ï€Î¿Î¹Î¸Î¿Î½ ÏƒÎ±Î½ ÎºÎ¹ ÎµÏƒÎ­Î½Î±. Î¤Î¹ Î±ÎºÏÎ¹Î²ÏŽÏ‚ ÏˆÎ¬Ï‡Î½ÎµÎ¹Ï‚;");
Database.addText("el.dragonTalkingChallengeButton", "Î ÏÏŒÎºÎ»Î·ÏƒÎ·");
Database.addText("el.dragonTalkingFameButton", "Î”ÏŒÎ¾Î±");
Database.addText("el.dragonTalkingCandiesButton", "Î–Î±Ï‡Î±ÏÏ‰Ï„Î¬");
Database.addText("el.dragonTalkingChallengeSpeech", "Î‘, Î¿Ï€ÏŒÏ„Îµ Î¸Î­Î»ÎµÎ¹Ï‚ Î¼Î¯Î± Ï€ÏÏŒÎºÎ»ÏƒÎ·; ÎÎ¿Î¼Î¯Î¶Ï‰ ÏŒÏ„Î¹ Ï€ÏÎ­Ï€ÎµÎ¹ Î½Î± Ï€Î±Ï‚ Î¼Î¯Î± Î²ÏŒÎ»Ï„Î± ÏƒÏ„Î·Î½ ÎºÏŒÎ»Î±ÏƒÎ·, Î»Î­Î³ÎµÏ„Î±Î¹ Ï€Ï‰Ï‚ Î¿ Î´Î¹Î¬Î²Î¿Î»Î¿Ï‚ ÎµÎ¯Î½Î±Î¹ Î¬Î¾Î¹Î¿Ï‚ Î±Î½Ï„Î¯Ï€Î±Î»Î¿Ï‚. Î Î®Î´Î± ÏƒÏ„Î·Î½ Ï€Î»Î¬Ï„Î· Î¼Î¿Ï… ÎºÎ±Î¹ Î¸Î± ÏƒÎµ Ï€Î¬Ï‰ ÎµÎºÎµÎ¯!");
Database.addText("el.dragonTalkingFameSpeech", "ÎŸ ÎºÎ±Î»ÏÏ„ÎµÏÎ¿Ï‚ Ï„ÏÏŒÏ€Î¿Ï‚ Î½Î± Î³Î¯Î½ÎµÎ¹Ï‚ Î´Î¹Î¬ÏƒÎ·Î¼Î¿Ï‚ ÎµÎ¯Î½Î±Î¹ Î½Î± Î±Î½Ï„Î¹Ï€ÎµÏ„Ï‰Ï€Î¯ÏƒÎµÎ¹Ï‚ Ï„Î¿Î½ Ï€ÏÎ¿Î³ÏÎ±Î¼Î¼Î±Ï„Î¹ÏƒÏ„Î®. ÎžÎ­ÏÏ‰ Ï€Î¿Ï… Î¼Î­Î½ÎµÎ¹ ÎºÎ±Î¹ Î¸Î± Î¼Ï€Î¿ÏÎ¿ÏÏƒÎ± Î½Î± ÏƒÎµ Ï€Î¬Ï‰ ÎµÎºÎµÎ¯. Î‘Î»Î»Î¬ Î½Î± ÎµÎ¯Î½Î±Î¹ Ï€ÏÎ¿ÎµÏ„Î¿Î¹Î¼Î±ÏƒÎ¼Î­Î½Î¿Ï‚, Î±Ï…Ï„ÏŒ Î´ÎµÎ½ Î¸Î± ÎµÎ¯Î½Î±Î¹ ÎµÏÎºÎ¿Î»Î¿.");
Database.addText("el.dragonTalkingCandiesSpeech", "Î“ÎµÎ½Î¹ÎºÎ¬, Ï„Î¿ Ï€ÏÎ¬Î³Î¼Î± Ï€Î¿Ï… ÏŒÎ»Î¿Î¹ Î¸Î­Î»Î¿Ï…Î¼Îµ ÎµÎ¯Î½Î±Î¹ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬, Î­Ï„ÏƒÎ¹ Î´ÎµÎ½ ÎµÎ¯Î½Î±Î¹; Î Î¹ÏƒÏ„ÎµÏÏ‰ Î­Î½Î±Ï‚ Ï†Î¯Î»Î¿Ï‚ Î¼Î¿Ï… Î¸Î± Î¼Ï€Î¿ÏÎ¿ÏÏƒÎµ Î½Î± ÏƒÎµ Î²Î¿Î·Î¸Î®ÏƒÎµÎ¹ Î¼Îµ Î±Ï…Ï„ÏŒ. Î˜Î± Ï„Î¿Î½ Î±Î½Î±Î³Î½Ï‰ÏÎ¯ÏƒÎµÎ¹Ï‚ ÎµÏÎºÎ¿Î»Î±, Î­Ï‡ÎµÎ¹ Î¼ÏŒÎ½Î¿ Î­Î½Î± Î¼Î¬Ï„Î¹. Î‘Ï€Î»ÏŽÏ‚ Ï€ÎµÏ‚ Ï„Î¿Ï… ÏŒÏ„Î¹ Î¼Îµ Î¾Î­ÏÎµÎ¹Ï‚.");
Database.addText("el.dragonTalkingChallengeAnswer", "Î Î¬Î¼Îµ Ï„ÏŒÏ„Îµ!");
Database.addText("el.dragonTalkingFameAnswer", "Î•Î¯Î¼Î±Î¹ Î­Ï„Î¿Î¹Î¼Î¿Ï‚");
Database.addText("el.dragonTalkingCandiesAnswer", "Î•Î½Ï„Î¬Î¾ÎµÎ¹, ÎµÏ…Ï‡Î±ÏÎ¹ÏƒÏ„ÏŽ!");
Database.addText("el.buttonBackToCastle", "Î Î¯ÏƒÏ‰ ÏƒÏ„Î¿ ÎºÎ¬ÏƒÏ„ÏÎ¿");
Database.addText("el.talkingCandySpeechNoBox", "Î“ÎµÎ¹Î±! Î•Î¯Î¼Î±Î¹ Ï„Î¿ Î¿Î¼Î¹Î»Î¿ÏÎ½Ï„Î¿ Î¶Î±Ï‡Î±ÏÏ‰Ï„ÏŒ. ÎˆÏ‡ÎµÎ¹Ï‚ ÏƒÏ‡ÎµÎ´ÏŒÎ½ Ï„ÎµÏÎ¼Î±Ï„Î¯ÏƒÎµÎ¹ Ï„Î¿ Ï€Î±Î¹Ï‡Î½Î¯Î´Î¹. Î ÏÎ­Ï€ÎµÎ¹ Î±Ï€Î»ÏŽÏ‚ Î½Î± Î²ÏÎµÎ¹Ï‚ Ï„Î¿ candy box. Î•Î¯Î½Î±Î¹ ÏƒÎµ Î­Î½Î± ÏƒÏ€Î¯Ï„Î¹ Î­Î¾Ï‰ Î±Ï€ÏŒ Ï„Î¿ Ï‡Ï‰ÏÎ¹ÏŒ. Î‘Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Ï„Î¿ Ï„ÎµÎ»ÎµÏ…Ï„Î±Î¯Î¿ Î²Î®Î¼Î±!");
Database.addText("el.talkingCandySpeech1", "Î“ÎµÎ¹Î±! Î•Î¯Î¼Î±Î¹ Ï„Î¿ Î¿Î¼Î¹Î»Î¿ÏÎ½Ï„Î¿ Î¶Î±Ï‡Î±ÏÏ‰Ï„ÏŒ. Î£Ï…Î³Ï‡Î±ÏÎ·Ï„Î®ÏÎ¹Î±, ÎºÎ­ÏÎ´Î¹ÏƒÎµÏ‚ Ï„Î¿ Ï€Î±Î¹Ï‡Î¯Î´Î¹! Î˜Î± Î±Î½Î¿Î¯Î¾Ï‰ Ï„Î¿ candy box ÏƒÎ¿Ï…, Î±Ï…Ï„ÏŒ ÎµÎ¯Î½Î±Î¹ Ï„Î¿ Î²ÏÎ±Î²ÎµÎ¯Î¿ ÏƒÎ¿Ï…. ÎÎ± ÏƒÏ…Î½ÎµÏ‡Î¯ÏƒÏ‰;");
Database.addText("el.talkingCandySpeech2", "ÎˆÏ„Î¿Î¹Î¼Î¿! ÎœÏ€Î¿ÏÎµÎ¯Ï‚ Î½Î± Î¼Ï€ÎµÎ¹Ï‚ Ï„ÏŽÏÎ±. Î•Î»Ï€Î¯Î¶Ï‰ Î½Î± ÏƒÎ¿Ï… Î¬ÏÎµÏƒÎµ Ï„Î¿ Ï€Î±Î¹Ï‡Î½Î¯Î´Î¹ :)");
Database.addText("el.talkingCandyButton", "ÎÎ±Î¹!!");
Database.addText("el.lighthousePuzzleResetButton", "Î•Ï€Î±Î½Î±Ï†Î¿ÏÎ¬");
Database.addText("en.mapVillageComment", "The Village");
Database.addText("en.mapFortressComment", "The desert fortress");
Database.addText("en.mapATreeComment", "A tree");
Database.addText("en.mapTheDesertComment", "The desert");
Database.addText("en.mapWishingWellComment", "The wishing well");
Database.addText("en.mapLonelyHouseComment", "A lonely house");
Database.addText("en.mapForestComment", "The forest");
Database.addText("en.mapCastleEntranceComment", "Castle's entrance");
Database.addText("en.mapCastleComment", "The castle");
Database.addText("en.mapDragonComment", "The dragon");
Database.addText("en.candyBoxEatCandiesButton", "Eat all the candies");
Database.addText("en.candyBoxThrowCandiesButton", "Throw 10 candies on the ground");
Database.addText("en.mapVillageAHouseComment", "A house");
Database.addText("en.mapVillageForgeComment", "The forge");
Database.addText("en.buttonBackToTheMap", "Back to the map");
Database.addText("en.mapSorceressHutComment", "Sorceress' hut");
Database.addText("en.buttonBackToTheVillage", "Back to the village");
Database.addText("en.mapATreeIntroductionSpeech", "Hello, I'm The Squirrel. I can provide you candies, and lots of things. I know how much you love candies. But I feel alone in this forest.");
Database.addText("en.mapATreeIntroductionButton", "How can I help you ?");
Database.addText("en.mapATreeFirstQuestion", "I will ask you questions. If you answer correctly, the sweetest sweets will be yours! First one : do you really love candies? (answer in english)");
Database.addText("en.mapATreeSecondQuestion", "That's right! Here's 20 candies for you. Now complete this sequence of letters and you'll get a new reward : S, E, I, D, N, A, ?");
Database.addText("en.mapATreeThirdQuestion", "Candies! Here's 100 candies for you. Next question : how many candies does the candiest person in the world possess?");
Database.addText("en.mapATreeFourthQuestion", "Here's 500 candies for you! Next reward should be even more interesting...  Here's the riddle : In an ancient forest grows a very old tree, on which live the most intelligent animals in this world. It is said that this tree has 60 roots, 360 branches and 2160 leaves. How many marks can you find on its trunk?");
Database.addText("en.mapATreeFifthQuestion", "Congratulations! I was talking about my tree, indeed. Here are 3 lollipops for you. Make good use of them! Next riddle, listen carefully : Under a full moon, I throw a yellow hat into the red sea. What happens to the yellow hat?");
Database.addText("en.mapATreeTicTacToeIntro", "Well answered! That wasn't so hard. Here's three chocolate bars for you! For the next reward, we'll change the rules a little bit. You'll have to play a game with me! Are you ready?");
Database.addText("en.mapATreeTicTacToeIntroButton", "Sure I am!");
Database.addText("en.mapATreeTicTacToeLetsPlay", "The game is Tic-Tac-Toe. We play on a 3 by 3 game board. You will use the X sign while I will use the O sign. We place our signs alternately, and the goal is to get three signs in a row. I'll let you go first!");
Database.addText("en.mapATreeTicTacToeNobodyWins", "The board is filled entirely and we both failed to get three in a row : nobody wins! Do you want to try again?");
Database.addText("en.mapATreeTicTacToeYouLose", "I got three in a row! I won. Do you want to try again?");
Database.addText("en.mapATreeTicTacToeTryAgainButton", "Yes I do!");
Database.addText("en.mapATreeTicTacToeYouWin", "Wow, that's an unexpected move. But you got three in a row, I can't argue. You won! Take this key! It opens one of the houses in the village below the forest.");
Database.addText("en.mapATreeTicTacToeAnymoreSweet", "Thanks, squirrel! Any more challenge?");
Database.addText("en.mapATreeNoMoreChallenge", "Sadly no, I have no more challenge for you... Playing with you was very fun, thank you for that!");
Database.addText("en.buttonExitQuestKeeping", "Exit the quest (and keep what you found)");
Database.addText("en.buttonExitQuestNoKeeping", "Exit the quest (you won't keep what you found)");
Database.addText("en.buttonExitQuestNoKeepingBecauseLose", "Exit the quest (you won't keep what you found because you failed)");
Database.addText("en.mapVillageLockedHouseComment", "A locked house");
Database.addText("en.mapVillageForgeIntroductionSpeech", "Hi! I'm a blacksmith. I can sell you various weapons and pieces of equipment.");
Database.addText("en.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hi! I'm a blacksmith. Sadly, I have nothing more to sell. Come back later, maybe?");
Database.addText("en.mapVillageFifthHouseNoWeaponSpeech", "Hello. My cellar is full of rats, I need to get rid of them... if only someone with a weapon could help me...");
Database.addText("en.mapVillageFifthHouseWeaponSpeech", "Hey, you! I see you carry a weapon! If you kill the rats pestering my cellar, I'll reward you!");
Database.addText("en.mapVillageFifthHouseAgree", "Let's go, then!");
Database.addText("en.mapVillageFifthHouseCellarDone", "Thank you for getting rid of them! Here's something very precious as a reward : a map of the world. I think you will use it more than I do.");
Database.addText("en.mapVillageTheShopComment", "The shop");
Database.addText("en.mapBridgeComment", "The bridge");
Database.addText("en.mapFarmComment", "The lollipop farm");
Database.addText("en.mapCaveEntranceComment", "The cave entrance");
Database.addText("en.mapLighthouseComment", "The lighthouse");
Database.addText("en.mapPierComment", "The pier");
Database.addText("en.mapTheHoleComment", "The Hole");
Database.addText("en.candyBoxRequestStatusBarUnlocked", "Request a new feature to the developer (30 candies)");
Database.addText("en.candyBoxRequestStatusBarUnlockedCfg", "Request another one (5 candies)");
Database.addText("en.candyBoxRequestStatusBarUnlockedSave", "Request once again (5 candies)");
Database.addText("en.candyBoxRequestStatusBarUnlockedHealthBar", "Request for something more exciting (5 candies)");
Database.addText("en.candyBoxRequestStatusBarUnlockedMap", "Final request! This one has to be worth the candies. (10 candies)");
Database.addText("en.candyBoxRequestStatusBarUnlockedComment", "You've unlocked a status bar! (above)");
Database.addText("en.candyBoxRequestStatusBarUnlockedCfgComment1", "You now have access to a configuration tab.");
Database.addText("en.candyBoxRequestStatusBarUnlockedCfgComment2", "You can change the language, if you want to.");
Database.addText("en.candyBoxRequestStatusBarUnlockedSaveComment", "A wild saving tab appears!");
Database.addText("en.candyBoxRequestStatusBarUnlockedHealthBarComment", "Here's 100 health points for you. They're going to be useful.");
Database.addText("en.cfgChooseLanguage", "Choose the language :");
Database.addText("en.cfgInvertColors", "Invert colors?");
Database.addText("en.gridItemMainMapName", "The Map");
Database.addText("en.gridItemMainMapDescription", "Map of the world");
Database.addText("en.gridItemPogoStickName", "Pogo stick");
Database.addText("en.gridItemPogoStickDescription", "This item allows you to jump in quests!");
Database.addText("en.gridItemTimeRingName", "A time ring");
Database.addText("en.gridItemTimeRingDescription", "This item gives you a new ability in quests : you can slow down the time. If things are going too fast for you, use your time ring!");
Database.addText("en.gridItemThirdHouseKeyName", "The third house key");
Database.addText("en.gridItemThirdHouseKeyDescription", "This key allows you to enter the third house in the village.");
Database.addText("en.gridItemFeatherName", "A desert bird feather");
Database.addText("en.gridItemFeatherDescription", "This magic feather allows you to jump higher when you use your pogo stick!");
Database.addText("en.gridItemFeatherDescriptionNoPogoStick", "For an unknown reason, you feel that this feather could be useful if you had a pogo stick...");
Database.addText("en.gridItemSpongeName", "A magical sponge");
Database.addText("en.gridItemSpongeDescription", "This magical sponge allows you to squeeze yourself just like a sponge, therefore reducing your size.");
Database.addText("en.gridItemFortressKeyName", "The desert fortress key");
Database.addText("en.gridItemFortressKeyDescription", "This key allows you to enter the very ancient fortress located above the desert. Who knows what you could find there?");
Database.addText("en.gridItemHeartPendantName", "A heart pendant");
Database.addText("en.gridItemHeartPendantDescription", "This heart pendant will increase your health points as long as you keep it around your neck.");
Database.addText("en.gridItemHeartPlugName", "A heart plug");
Database.addText("en.gridItemHeartPlugDescription", "This heart plug, made from iron, spider legs, and a special \"heart liquor\" sealed in the center, will increase your health points by 20 percent!");
Database.addText("en.gridItemBeginnersGrimoireName", "The beginners' grimoire");
Database.addText("en.gridItemBeginnersGrimoireDescription", "This grimoire provides you three spells, quite easy to cast. It is really made for beginners. You will be able to use the acid rain spell (a large quantity of acid drops will fall on your enemies), the fireball spell (a giant magic ball made of fire will fly towards your enemies), and the teleport spell (which will teleport you to an unpredictable location).");
Database.addText("en.gridItemAdvancedGrimoireName", "The advanced grimoire");
Database.addText("en.gridItemAdvancedGrimoireDescription", "This advanced grimoire provides you two spells : the erase magic spell and the thorns shield spell. The first one will erase all the magic from a quest at some point, including the spells you casted and your enemy's magic. The second one will create a shield of floating thorns around you which will inflict damage to your enemies upon contact.");
Database.addText("en.gridItemBlackMagicGrimoireName", "The black magic grimoire");
Database.addText("en.gridItemBlackMagicGrimoireDescription", "You found this grimoire in a cave, it was very hard to reach, and that was for a reason. It provides you two powerful black magic spells. The first one will create a giant wall made of obsidian bricks in front of you, which can be useful to slow down your enemies. The second one will summon a swarm of demons attacking everyone in the quest, including you. Be careful with this one.");
Database.addText("en.gridItemUnicornHornName", "A unicorn horn");
Database.addText("en.gridItemUnicornHornDescription", "This magical horn belonged to a unicorn. Its powerful healing powers will help you a lot. You heard that this unicorn was named Charlie.");
Database.addText("en.gridItemXinopherydonClawName", "A xinopherydon claw");
Database.addText("en.gridItemXinopherydonClawDescription", "This claw belonged to a xinopherydon, a two-headed ancient animal everyone believed to be extinct. It will double the damage of the weapon you're using.");
Database.addText("en.gridItemPitchforkName", "A pitchfork");
Database.addText("en.gridItemPitchforkDescription", "This special pitchfork allows you to loosen the soil without turning it over, therefore preserving below-ground soil ecosystems. It will triple the production of your lollipop farm.");
Database.addText("en.gridItemShellPowderName", "Shell powder");
Database.addText("en.gridItemShellPowderDescription", "Shell powder is often used by farmers to improve the growth speed of their lollipops. This powder will multiply your lollipop farm production by three!");
Database.addText("en.gridItemPName", "The P stone");
Database.addText("en.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("en.gridItemLName", "The L stone");
Database.addText("en.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("en.gridItemAName", "The A stone");
Database.addText("en.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("en.gridItemYName", "The Y stone");
Database.addText("en.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("en.gridItemRedSharkFinName", "A magical red shark fin");
Database.addText("en.gridItemRedSharkFinDescription", "This magical fin will greatly increase the damage of your fireball spell. Finally this fireball becomes useful.");
Database.addText("en.gridItemGreenSharkFinName", "A magical green shark fin");
Database.addText("en.gridItemGreenSharkFinDescription", "This magical fin will bring the power of nature to your lollipop farm! Your production will be multiplied by 5.");
Database.addText("en.gridItemPurpleSharkFinName", "A magical purple shark fin");
Database.addText("en.gridItemPurpleSharkFinDescription", "This magical fin will provide you a new black magic spell. You can only use it once per quest. Be very careful with this one!");
Database.addText("en.gridItemTalkingCandyName", "A talking candy");
Database.addText("en.gridItemTalkingCandyDescription", "This talking candy appeared after you put the four stones at the top of the castle's tower. He might help you to open the candy box...");
Database.addText("en.inventorySpecialNothingEqItem", "Nothing");
Database.addText("en.eqItemWeaponWoodenSwordName", "Wooden Sword");
Database.addText("en.eqItemWeaponWoodenSwordDescription", "A simple sword made of wood");
Database.addText("en.eqItemWeaponIronAxeName", "Iron axe");
Database.addText("en.eqItemWeaponIronAxeDescription", "A simple iron axe. Well sharpened. More powerful than the wooden sword.");
Database.addText("en.eqItemWeaponPolishedSilverSwordName", "Polished silver sword");
Database.addText("en.eqItemWeaponPolishedSilverSwordDescription", "A powerful sword, covered by spikes.");
Database.addText("en.eqItemWeaponTrollBludgeonName", "The troll's bludgeon");
Database.addText("en.eqItemWeaponTrollBludgeonDescription", "You took this bludgeon from the troll guarding the bridge. It is slow, but smashes your enemies quite efficiently.");
Database.addText("en.eqItemWeaponTribalSpearName", "A tribal spear");
Database.addText("en.eqItemWeaponTribalSpearDescription", "You found this tribal spear on the corpse of a tribe warrior lost in a big hole in the ground. It's a bit hard to handle at first, but once you're used to it, it's a good weapon.");
Database.addText("en.eqItemWeaponSummoningTribalSpearName", "A summoning tribal spear");
Database.addText("en.eqItemWeaponSummoningTribalSpearDescription", "This magical tribal spear, in addition to being slighty more powerful than the normal tribal spear, will frequently summon tribe warriors which will help you during your quests.");
Database.addText("en.eqItemWeaponMonkeyWizardStaffName", "The monkey wizard staff");
Database.addText("en.eqItemWeaponMonkeyWizardStaffDescription", "This staff belonged to the naked monkey wizard you found in the cave. It will frequently cast spells by itself, targeting your enemies.");
Database.addText("en.eqItemWeaponEnchantedMonkeyWizardStaffName", "The monkey wizard staff (enchanted)");
Database.addText("en.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "This staff is faster than the non-enchanted version, and will also cast a lot more spells.");
Database.addText("en.eqItemWeaponGiantSpoonName", "A giant spoon");
Database.addText("en.eqItemWeaponGiantSpoonDescription", "This giant spoon was in a giant teapot in the desert fortress. You don't know if anyone ever used it as a spoon, but if so, it must have been someone really big. You probably don't want to meet him.");
Database.addText("en.eqItemWeaponGiantSpoonOfDoomName", "The giant Spoon of Doom");
Database.addText("en.eqItemWeaponGiantSpoonOfDoomDescription", "This giant spoon is even more powerful than the regular giant spoon you could find, for example, in a teapot. It's quite slow, however.");
Database.addText("en.eqItemWeaponScytheName", "A scythe");
Database.addText("en.eqItemWeaponScytheDescription", "It is said that this scythe belonged to the Death itself. It is extremely fast.");
Database.addText("en.eqItemHatMerchantHatName", "The merchant hat");
Database.addText("en.eqItemHatMerchantHatDescription", "This hat was sold to you by the candy merchant. The candy merchant loves candies. This hat will multiply by 7 the candies you find in quests!");
Database.addText("en.eqItemHatSorceressHatName", "The sorceress hat");
Database.addText("en.eqItemHatSorceressHatDescription", "This hat was sold to you by the sorceress. It will enhance the effects of your spells and potions.");
Database.addText("en.eqItemHatOctopusKingCrownName", "The Octopus King crown");
Database.addText("en.eqItemHatOctopusKingCrownDescription", "When you wear this crown, you feel a lot more confident. It doesn't give any advantage in quests, but self-confidence is important!");
Database.addText("en.eqItemHatOctopusKingCrownWithJaspersName", "The Octopus King crown with jaspers");
Database.addText("en.eqItemHatOctopusKingCrownWithJaspersDescription", "This enchanted crown is made from gold and red jaspers. In quests, it will frequently cast powerful magic fireballs around you. And also, it's shining!");
Database.addText("en.eqItemHatOctopusKingCrownWithObsidianName", "The Octopus King crown with obsidian");
Database.addText("en.eqItemHatOctopusKingCrownWithObsidianDescription", "This enchanted crown is made from gold and obsidian. It is beautiful. In quests, it will summon an Octopus King fighting on your side once in a while. What a tentaculous ally!");
Database.addText("en.eqItemGlovesLeatherGlovesName", "Leather gloves");
Database.addText("en.eqItemGlovesLeatherGlovesDescription", "These gloves basically do nothing. But they're soft and comfortable, at least!");
Database.addText("en.eqItemGlovesRedEnchantedGlovesName", "Red enchanted gloves");
Database.addText("en.eqItemGlovesRedEnchantedGlovesDescription", "These enchanted gloves emit a soft red light when it's dark around you. In quests, they will randomly cast small fireballs towards your enemies, which can definitely be useful.");
Database.addText("en.eqItemGlovesPinkEnchantedGlovesName", "Pink enchanted gloves");
Database.addText("en.eqItemGlovesPinkEnchantedGlovesDescription", "These enchanted gloves leave a pink mark on everything you touch. In quests, they will heal you continuously.");
Database.addText("en.eqItemBootsRocketBootsName", "Rocket boots");
Database.addText("en.eqItemBootsRocketBootsDescription", "These awesome rocket boots allow you to jump in mid-air, so that you're basically flying!");
Database.addText("en.eqItemBootsLeatherBootsName", "Leather boots");
Database.addText("en.eqItemBootsLeatherBootsDescription", "Simple leather boots. Nothing special about them.");
Database.addText("en.eqItemBootsBootsOfIntrospectionName", "Boots of introspection");
Database.addText("en.eqItemBootsBootsOfIntrospectionDescription", "Take the time to breathe and calm down. If you wear these boots, you will never move as long as you touch the ground.");
Database.addText("en.eqItemBodyArmoursLightweightBodyArmourName", "A lightweight body armour");
Database.addText("en.eqItemBodyArmoursLightweightBodyArmourDescription", "This body armour will offer you a weak protection. You will be slighty more resistant to your enemies attacks.");
Database.addText("en.eqItemBodyArmoursKnightBodyArmourName", "A knight body armour");
Database.addText("en.eqItemBodyArmoursKnightBodyArmourDescription", "This strong body armour will protect you. You will be more resistant to your enemies attacks.");
Database.addText("en.eqItemBodyArmoursEnchantedKnightBodyArmourName", "An enchanted knight body armour");
Database.addText("en.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "This armour is very special. You will be a LOT more resistant to your enemies attacks, but the damage of the weapon you are using will be divided by two.");
Database.addText("en.mapVillageForgeBuyWoodenSwordButton", "Buy a wooden sword (150 candies)");
Database.addText("en.mapVillageForgeBuyWoodenSwordSpeech", "Thanks for buying! This wooden sword is quite weak, but it's a start.");
Database.addText("en.mapVillageForgeBuyIronAxeButton", "Buy an iron axe (400 candies)");
Database.addText("en.mapVillageForgeBuyIronAxeSpeech", "I hope you'll like this iron axe. I have just sharpened it for you!");
Database.addText("en.mapVillageForgeBuyPolishedSilverSwordButton", "Buy a polished silver sword (2 000 candies)");
Database.addText("en.mapVillageForgeBuyPolishedSilverSwordSpeech", "It took me a lot of time to create this sword. I assure you that it's worth its price.");
Database.addText("en.mapVillageForgeBuyLightweightBodyArmourButton", "Buy a lightweight body armour (15 000 candies)");
Database.addText("en.mapVillageForgeBuyLightweightBodyArmourSpeech", "This body armour will offer you a protection against your enemies.");
Database.addText("en.mapVillageForgeBuyScytheButton", "Buy a scythe (5 000 000 candies)");
Database.addText("en.mapVillageForgeBuyScytheSpeech", "It took me several months to make this scythe. It's a real piece of art. This is probably the fastest weapon you will ever be able to use. Good luck!");
Database.addText("en.wishingWellThrowFirstCandyButton", "Throw a candy in the well");
Database.addText("en.wishingWellCandyIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! When you'll throw candies into me, I will heal your wounds.");
Database.addText("en.wishingWellThrewCandiesSpeech", "Your wounds are now healed!");
Database.addText("en.wishingWellNoWoundSpeech", "You have no wounds to heal!");
Database.addText("en.wishingWellThrowFirstLollipopButton", "Throw a lollipop in the well");
Database.addText("en.wishingWellLollipopIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! When you'll throw lollipops into me, I will convert them into candies.");
Database.addText("en.wishingWellThrewLollipopsSpeech", "Your lollipops are converted into candies! Two lollipops for one candy.");
Database.addText("en.wishingWellThrowChocolateBarButton", "Throw a chocolate bar in the well");
Database.addText("en.wishingWellChocolateBarIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! I love chocolate bars. I really love them. For each chocolate bar you will throw into me, including this one, you will be granted one magical enchantment.");
Database.addText("en.wishingWellThrewChocolateBarSpeech", "Which object would you like to enchant?");
Database.addText("en.wishingWellThrowPainAuChocolatButton", "Throw a pain au chocolat in the well");
Database.addText("en.wishingWellPainAuChocolatIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! When you throw a pain au chocolat into me, you will be given a very special gift. Choose wisely.");
Database.addText("en.wishingWellThrewPainAuChocolatSpeech", "Thanks for the pain au chocolat! You can now choose your gift.");
Database.addText("en.wishingWellChooseGift", "Choose your gift!");
Database.addText("en.wishingWellChooseGiftButton", "Choose");
Database.addText("en.wishingWellGiftDoneSpeech", "Done! You now have a new gift. It will appear in your inventory stats panel.");
Database.addText("en.wishingWellNoPossibleEnchantment", "No possible enchantment");
Database.addText("en.wishingWellChooseEnchantment", "Choose the enchantment");
Database.addText("en.wishingWellEnchantButton", "Enchant");
Database.addText("en.wishingWellEnchantmentDoneSpeech", "There it is! Your object is enchanted.");
Database.addText("en.pierLighthouseButton", "Go to the lighthouse by boat");
Database.addText("en.pierTheSeaButton", "Jump into the sea");
Database.addText("en.lonelyHouseOpenBox", "Open the box");
Database.addText("en.lonelyHouseShakeBox", "Shake the box");
Database.addText("en.lonelyHouseBreakLock", "Break the lock");
Database.addText("en.lonelyHouseKickBox", "Kick the box");
Database.addText("en.lonelyHouseAskTheBoxToOpenItself", "Ask the box to open itself");
Database.addText("en.lonelyHouseLureTheBoxWithACandy", "Lure the box with a candy");
Database.addText("en.lonelyHouseTakeTheBox", "Take the box with you, you probably need a key to open it anyway");
Database.addText("en.lonelyHouseOpenBoxResult", "The box is locked");
Database.addText("en.lonelyHouseShakeBoxResult", "Nothing happens");
Database.addText("en.lonelyHouseBreakLockResult", "The lock resists");
Database.addText("en.lonelyHouseKickBoxResult", "Your foot hurts a little bit, but nothing happens");
Database.addText("en.lonelyHouseAskTheBoxToOpenItselfResult", "...you're talking to a box, you know that?");
Database.addText("en.lonelyHouseLureTheBoxWithACandyResult", "The box doesn't seem to care");
Database.addText("en.lonelyHouseTakeTheBoxResult", "There's probably something interesting in this candy box.");
Database.addText("en.lollipopFarmConstructMill", "Build a mill (10 000 lollipops)");
Database.addText("en.lollipopFarmFeedMill", "Feed the mill");
Database.addText("en.lollipopFarmCurrentCandiesProduction", "Current candies production");
Database.addText("en.lollipopFarmDigPond", "Dig a pond (100 000 lollipops)");
Database.addText("en.lollipopFarmBuyLolligator", "Buy a lolligator (1200 candies)");
Database.addText("en.lollipopFarmLolligatorsConversionText", "Conversion candies -> lollipops activated");
Database.addText("en.lighthouseAskButton", "Ask");
Database.addText("en.lighthouseQuestionWho", "Who are you?");
Database.addText("en.lighthouseQuestionWhoSpeech", "I'm a very old cyclops.");
Database.addText("en.lighthouseQuestionWhat", "What are you doing here?");
Database.addText("en.lighthouseQuestionWhatSpeech", "I live here all day long, waiting for a boat to come. It's been a long time since I've seen a boat, but I must stay here, staring at the sea, because a boat may come.");
Database.addText("en.lighthouseQuestionWhyEatCandies", "Why would I eat candies?");
Database.addText("en.lighthouseQuestionWhyEatCandiesSpeech", "Because they're good for your health!");
Database.addText("en.lighthouseQuestionCandyBox", "What is a candy box?");
Database.addText("en.lighthouseQuestionCandyBoxSpeech", "It is a very old box that is said to contain all the candies in the world. The legends say that whoever manages to open it would have so much candies that anything could be possible.");
Database.addText("en.lighthouseQuestionDragon", "The dragon told me to come here because I want candies.");
Database.addText("en.lighthouseQuestionDragonSpeech", "Oh, I see... Well, I cannot provide you candies directly, but I can give you something essential for you to ultimately get a LOT of candies. I just need to test you before that. Because what I have can't be given to everyone. Solve this puzzle and it will be yours.");
Database.addText("en.lighthouseFoundStone", "Congratulations! You passed the test and found the stone. It's very precious, but is only useful if you have three other stones like this one. Good luck!");
Database.addText("en.lighthouseFoundStoneAgain", "Good job, you did the puzzle once again. You seem to like that.");
Database.addText("en.saveLocalSaveTitle", "Browser save");
Database.addText("en.saveLocalSaveWhy", "Choose local save if you want to keep playing on your current device and browser.");
Database.addText("en.saveLocalSaveWarning0", "Your browser does not seem to support HTML5.");
Database.addText("en.saveLocalSaveWarning1", "You should update your browser in order to use the local saving feature.");
Database.addText("en.saveLocalSaveChooseSlot", "Choose a save slot :");
Database.addText("en.saveLocalSaveAutosaveEnabled", "Autosave enabled");
Database.addText("en.saveLocalSaveChooseWhatToDo", "Choose what to do :");
Database.addText("en.saveLocalSaveSaveButton", "Save");
Database.addText("en.saveLocalSaveAutosaveButton", "Save every 10 minutes");
Database.addText("en.saveLocalSaveDisableAutosaveButton", "Disable autosave");
Database.addText("en.saveFileSaveTitle", "Text save");
Database.addText("en.saveFileSaveWhy0", "Choose text save if :");
Database.addText("en.saveFileSaveWhy1", "You want to continue playing on another device or browser");
Database.addText("en.saveFileSaveWhy2", "You want to share your save with someone else");
Database.addText("en.saveFileSaveWhy3", "For some reason you want to empty your browser cache");
Database.addText("en.saveFileSaveWhy4", "(which will erase your local saves)");
Database.addText("en.saveFileSaveButton", "Get the current game as text");
Database.addText("en.saveFileSaveWarning", "Now copy this text somewhere! (in a file, for example)");
Database.addText("en.saveLocalLoadTitle", "Browser load");
Database.addText("en.saveLocalLoadYouCan", "You can load a local save by using the following links :");
Database.addText("en.saveLocalLoadThanksTo", "Thanks to HTML5 magic, you should be able to use these links even offline.");
Database.addText("en.saveFileLoadTitle", "Text load");
Database.addText("en.saveFileLoadPaste", "Paste your save below, then click the \"Load\" button");
Database.addText("en.saveFileLoadButton", "Load");
Database.addText("en.mountainsText0", "You spotted something in the mountains!");
Database.addText("en.mountainsText1", "It looks interesting. Maybe it could be useful.");
Database.addText("en.mountainsTextButton", "Climb the mountains to get the thing");
Database.addText("en.mountainsTextAfter", "You found a pogo stick! It has been added to your inventory.");
Database.addText("en.secondHouseIntroSpeech", "Hello, I'm the candy merchant. I would do anything for candies. What do you need?");
Database.addText("en.secondHouseLollipop1Speech", "This is a lemon-flavored lollipop. My favourite! It costs 60 candies, but it's worth it.");
Database.addText("en.secondHouseLollipop2Speech", "This one is a strawberry-flavored lollipop. It tastes good. I like its red color. Only 60 candies!");
Database.addText("en.secondHouseLollipop3Speech", "This is a pumpkin-flavored lollipop. I bet you never tried one! 60 candies and it's yours.");
Database.addText("en.secondHouseLollipopButtonText", "Buy this lollipop (60 candies)");
Database.addText("en.secondHouseMerchantHatSpeech", "I could sell you my hat, but it is very precious, you know... You will have to give me a lot of candies for it. Let's say 1 million candies. It seems fair, right?");
Database.addText("en.secondHouseMerchantHatButtonText", "Buy the merchant's hat (1 000 000 candies)");
Database.addText("en.secondHouseTimeRingSpeech", "This is a time ring. It's kind of magical. It allows you to slow down the time when you're in trouble.");
Database.addText("en.secondHouseTimeRingButtonText", "Buy the time ring (500 candies)");
Database.addText("en.secondHouseLeatherGlovesSpeech", "These leather gloves are made from camel leather, this is high quality. I have a lot of them in stock, that's why they are so cheap : only 300 candies!");
Database.addText("en.secondHouseLeatherBootsButtonText", "Buy a pair of leather boots (300 candies)");
Database.addText("en.secondHouseLeatherBootsSpeech", "These high quality leather boots, made from camel leather, will keep your feet warm.");
Database.addText("en.secondHouseLeatherGlovesButtonText", "Buy a pair of leather gloves (300 candies)");
Database.addText("en.secondHouseChocolateBarSpeech", "This is a chocolate bar. I don't know what it is used for, but it happens to be quite rare, which explains the price. 800 candies and it's yours!");
Database.addText("en.secondHouseChocolateBarButtonText", "Buy the chocolate bar (800 candies)");
Database.addText("en.outsideTheHoleButton", "Jump in this big hole in the ground");
Database.addText("en.theCaveExitText0", "You finally reached the cave's exit.");
Database.addText("en.theCaveExitText1", "You can see a big forest outside of here.");
Database.addText("en.theCaveExitButtonText", "Exit the cave");
Database.addText("en.theCaveFirstSentenceWentStraight", "You went straight on.");
Database.addText("en.theCaveFirstSentenceWentLeft", "You took the left path.");
Database.addText("en.theCaveFirstSentenceWentRight", "You took the right path.");
Database.addText("en.theCaveFirstSentenceYouAre", "You are in a cave. There are three paths ahead of you.");
Database.addText("en.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "You spot a strange thing on the ground in front of you.");
Database.addText("en.theCavePattern_ChocolateBarNowSeeChocolateBar", "You spot a chocolate bar in front of you.");
Database.addText("en.theCavePattern_TreasureMapSentence", "You see small rocks strangely arranged on the floor.");
Database.addText("en.theCavePattern_MonkeyWizardSentence", "You stumble upon a naked monkey wizard.");
Database.addText("en.theCavePattern_MonkeyWizardButton", "Challenge him");
Database.addText("en.theCavePattern_OctopusKingSentence", "You stumble upon the Octopus King. It seems nasty.");
Database.addText("en.theCavePattern_OctopusKingButton", "Challenge it");
Database.addText("en.fortressInsideText0", "You are inside the desert fortress.");
Database.addText("en.fortressInsideText1", "You can choose between three doors.");
Database.addText("en.fortressInsideText2", "Each of them leads to a big room with a treasure at the end.");
Database.addText("en.fortressInsideEnterRoom1", "Enter the first room");
Database.addText("en.fortressInsideEnterRoom2", "Enter the second room");
Database.addText("en.fortressInsideEnterRoom3", "Enter the third room");
Database.addText("en.treasureButtonDig", "Dig");
Database.addText("en.treasureButtonYouFound", "You found three chocolate bars!");
Database.addText("en.sorceressHutHello", "Hello, I'm the sorceress. I could teach you one thing or two about magic. I can also give you some interesting things, or cast spells for you. But everything has a price! And this price will be lollipops. A lot of them.");
Database.addText("en.sorceressHutClickedGrimoire", "This is a grimoire made for beginners. By carrying it with you in quests, you will be able to cast simple but useful spells. You need this! Only 5 000 lollipops.");
Database.addText("en.sorceressHutBuyGrimoireButton", "Buy this grimoire (5 000 lollipops)");
Database.addText("en.sorceressHutBuyGrimoireSpeech", "Thanks for buying! You will be able to cast three spells with this grimoire. Good luck!");
Database.addText("en.sorceressHutClickedGrimoire2", "This is an advanced grimoire. By carrying it with you in quests, you will be able to cast two advanced spells. I wrote it myself, which wasn't easy. 20 000 lollipops is a fair price.");
Database.addText("en.sorceressHutBuyGrimoire2Button", "Buy this grimoire (20 000 lollipops)");
Database.addText("en.sorceressHutBuyGrimoire2Speech", "Thanks for buying! You will be able to cast two spells with this grimoire. Use them wisely!");
Database.addText("en.sorceressHutClickedCauldron", "This is my cauldron. It allows me to brew magic potions. I could sell it to you, but it's very precious... it will cost you 100 000 lollipops.");
Database.addText("en.sorceressHutBuyCauldronButton", "Buy the cauldron (100 000 lollipops)");
Database.addText("en.sorceressHutBuyCauldronSpeech", "Thanks a lot! 100 000 lollipops for me! I also gave you a brewing manual. It's going to be useful.");
Database.addText("en.sorceressHutClickedHat", "I have a nice hat, indeed! But I really can't sell it to you. It is waaaay too precious. Really, I can't. Don't insist. No. No no no I shouldn't do that. Oh well, I'll trade it, but for 1 000 000 000 lollipops. You probably won't be able to pay that anyway.");
Database.addText("en.sorceressHutBuyHatButton", "Buy the hat (1 000 000 000 lollipops)");
Database.addText("en.sorceressHutBuyHatSpeech", "One billion lollipops for meeeeee! But I don't have a hat anymore.. but one billion lollipops, wow! .. It was worth it.");
Database.addText("en.cauldronPreviousPageButton", "Previous page");
Database.addText("en.cauldronNextPageButton", "Next page");
Database.addText("en.cauldronWhatYouWantToPut", "What you want to put in the cauldron");
Database.addText("en.cauldronWhatIsIn", "What is in the cauldron");
Database.addText("en.cauldronWhatYouCanDo", "What you can do with it");
Database.addText("en.castleBigRoomComment", "A big room");
Database.addText("en.castleARoomComment", "A room");
Database.addText("en.castleADarkRoomComment", "A dark room");
Database.addText("en.castleCastleEntranceComment", "The castle's entrance");
Database.addText("en.castleTowerEntranceComment", "The tower's entrance");
Database.addText("en.castleNougatMonsterComment", "Attack the giant nougat monster");
Database.addText("en.castleGuardsComment", "Attack the guards");
Database.addText("en.castleStairsComment", "Stairs");
Database.addText("en.buttonBackToTheCastle", "Back to the castle");
Database.addText("en.castleBigRoomHovenSpeechSad", "Hello! I'm a very old bread oven. I used to cook tons of good pastries, but no one is using me anymore. Maybe... maybe you could help me? Just let me take some sweets from you! Don't worry, you won't regret it! You can trust me.");
Database.addText("en.castleBigRoomHovenNotEnough", "Oh... you don't have enough sweets, I can't do anything. I'm just useless. I'm the useless bread oven, that's how you should call me.");
Database.addText("en.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay! Thanks a lot! I used 100 candies and a chocolate bar, and I made you... a pain au chocolat! It's my favourite pastry, I hope you'll like it too!");
Database.addText("en.castleBigRoomHovenSpeechHappy", "Hey! If you want me to cook another pastry, just tell me! I'd love to help you.");
Database.addText("en.castleBigRoomHovenSpeechHappyNotEnough", "Oh, you don't have enough sweets, sadly. I need 100 candies and a chocolate bar. Come back when you'll have that!");
Database.addText("en.castleBigRoomHovenLetHovenTakeButton", "Let the oven take all the sweets it wants to take");
Database.addText("en.castleBigRoomHovenThanks", "Thanks, oven!");
Database.addText("en.dragonStopTickling", "Hey, you! Stop tickling me, please.");
Database.addText("en.dragonStopTicklingButton", "Uh, oh, sorry, I thought I was supposed to attack you");
Database.addText("en.dragonTalking", "I am the dragon and this is my castle. I see that you managed to enter, you must be very brave... I'd love to help someone like you. What are you looking for?");
Database.addText("en.dragonTalkingChallengeButton", "Challenge");
Database.addText("en.dragonTalkingFameButton", "Fame");
Database.addText("en.dragonTalkingCandiesButton", "Candies");
Database.addText("en.dragonTalkingChallengeSpeech", "Oh, so you want challenge? I think you should make a trip to hell itself, it is known that the devil is a tough challenger. Jump on my back and I'll take you there!");
Database.addText("en.dragonTalkingFameSpeech", "The best way to become famous is to face the developer himself. I know where he lives and I could take you there. But be prepared, this won't be easy.");
Database.addText("en.dragonTalkingCandiesSpeech", "Ultimately, the thing we all want is candies, isn't it? I think a friend of mine could help you with that. You will recognise him easily, he has only one eye. Just tell him that you know me.");
Database.addText("en.dragonTalkingChallengeAnswer", "Let's go then!");
Database.addText("en.dragonTalkingFameAnswer", "I am ready.");
Database.addText("en.dragonTalkingCandiesAnswer", "Okay, thanks!");
Database.addText("en.buttonBackToCastle", "Back to the castle");
Database.addText("en.talkingCandySpeechNoBox", "Hey! I'm the talking candy. You almost won the game. You just need to find the candy box. It's in a house outside the village. This is the last step!");
Database.addText("en.talkingCandySpeech1", "Hey! I'm the talking candy. Congratulations, you won the game! I will open your candy box for you, this is your reward. Should I proceed?");
Database.addText("en.talkingCandySpeech2", "Done! You can now enter it. I hope you liked the game :)");
Database.addText("en.talkingCandyButton", "Yes!!");
Database.addText("en.lighthousePuzzleResetButton", "Reset");
Database.addText("ï»¿nl.mapVillageComment", "Het Dorp");
Database.addText("nl.mapFortressComment", "De woestijnvesting");
Database.addText("nl.mapATreeComment", "Een boom");
Database.addText("nl.mapTheDesertComment", "De woestijn");
Database.addText("nl.mapWishingWellComment", "De wensput");
Database.addText("nl.mapLonelyHouseComment", "Een afgelegen huis");
Database.addText("nl.mapForestComment", "Het bos");
Database.addText("nl.mapCastleEntranceComment", "Kasteelingang");
Database.addText("nl.mapCastleComment", "Het kasteel");
Database.addText("nl.mapDragonComment", "De draak");
Database.addText("nl.candyBoxEatCandiesButton", "Eet alle snoepjes");
Database.addText("nl.candyBoxThrowCandiesButton", "Gooi 10 snoepjes op de grond");
Database.addText("nl.mapVillageAHouseComment", "Een huis");
Database.addText("nl.mapVillageForgeComment", "De smederij");
Database.addText("nl.buttonBackToTheMap", "Terug naar de kaart");
Database.addText("nl.mapSorceressHutComment", "Hut van de tovenaar");
Database.addText("nl.buttonBackToTheVillage", "Terug naar het dorp");
Database.addText("nl.mapATreeIntroductionSpeech", "Hallo, ik ben de eekhoorn. Ik kan je snoepjes en veel meer dingen geven. Ik weet hoeveel jij van snoepjes houdt. Maar ik voel me alleen in dit woud.");
Database.addText("nl.mapATreeIntroductionButton", "Hoe kan ik je helpen ?");
Database.addText("nl.mapATreeFirstQuestion", "Ik ga je een paar vragen stellen. Als je ze goed beantwoord, zijn de zoetste zoetjes van jou! Eerste vraag: Hou je echt van snoepjes? (Beantwoord in Engels)");
Database.addText("nl.mapATreeSecondQuestion", "Dat klopt! Hier zijn 20 snoepjes voor jou. Maak nu deze reeks van letters af en je krijgt een nieuwe prijs: S, E, I, D, N, A, ?");
Database.addText("nl.mapATreeThirdQuestion", "Snoepjes! Hier zijn 100 snoepjes voor jou. Volgende vraag : Hoeveel snoepjes heeft de snoepigste persoon in zijn bezit?");
Database.addText("nl.mapATreeFourthQuestion", "Hier zijn 500 snoepjes voor jou! De volgende prijs zal nog interessanter zijn...  Hier is het raadsel: In een oeroud woud groeit een hele oude boom, Waar de meest intelligente dieren wonen. Er wordt verteld dat hij 60 wortels heeft, 360 takken en 2160 bladeren. Hoeveel markeringen kun je vinden op zijn stam?");
Database.addText("nl.mapATreeFifthQuestion", "Gefeliciteerd! Ik had het over mijn boom, inderdaad. Hier zijn 3 lollies voor jou. Gebruik ze goed! Volgende raadsel, Luister goed : Onder een volle maan gooi ik een gele hoed in de rode zee. Wat gebeurd er met de gele hoed?");
Database.addText("nl.mapATreeTicTacToeIntro", "Goed geantwoord! Dat was niet zo moeilijk. Hier zijn 3 chocoladerepen voor jou! Voor de volgende prijs zullen we de regels een beetje veranderen. Je moet een spel met mij spelen! Ben je er klaar voor?");
Database.addText("nl.mapATreeTicTacToeIntroButton", "Natuurlijk ben ik dat!");
Database.addText("nl.mapATreeTicTacToeLetsPlay", "Het spel is boter kaas en eieren. We spelen het op een 3 bij 3 bord. Jij zult het X teken gebruiken terwijl ik de O gebruik. We plaatsen onze teken(s) omstebeurt en het doel is om 3 tekens op een rij te krijgen. Ik laat jou eerst gaan!");
Database.addText("nl.mapATreeTicTacToeNobodyWins", "Het bord is helemaal opgevuld en we hebben beiden geen 3 op een rij: Niemand wint! Wil je het weer proberen?");
Database.addText("nl.mapATreeTicTacToeYouLose", "Ik heb drie op een rij! Ik win. Wil je het weer proberen?");
Database.addText("nl.mapATreeTicTacToeTryAgainButton", "Ja dat wil ik!");
Database.addText("nl.mapATreeTicTacToeYouWin", "Wow, dat was een onverwachte zet. Maar je hebt drie op een rij, daar kan ik niks over zeggen. Jij wint! Neem deze sleutel! Het opent een van de huizen in het dorp.");
Database.addText("nl.mapATreeTicTacToeAnymoreSweet", "Dankjewel eekhoorn! Zijn er nog meer uitdagingen?");
Database.addText("nl.mapATreeNoMoreChallenge", "Helaas niet, ik heb geen uitdagingen meer voor je... Met jou spelen was heel erg leuk, bedankt daarvoor!");
Database.addText("nl.buttonExitQuestKeeping", "Eindig de zoektocht (En houd wat je gevonden hebt)");
Database.addText("nl.buttonExitQuestNoKeeping", "Eindig de zoektocht (Je houdt niet wat je gevonden hebt)");
Database.addText("nl.buttonExitQuestNoKeepingBecauseLose", "Eindig de zoektocht (Je houdt niet wat je hebt gevonden want je faalde)");
Database.addText("nl.mapVillageLockedHouseComment", "Een gesloten huis");
Database.addText("nl.mapVillageForgeIntroductionSpeech", "Hoi! Ik ben een wapensmid. Ik kan je verschillende wapens en uitrustingen verkopen.");
Database.addText("nl.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hoi! Ik ben een wapensmid. Helaas, Ik heb niks meer om te verkopen. Kom later terug misschien?");
Database.addText("nl.mapVillageFifthHouseNoWeaponSpeech", "Hallo. Mijn kelder zit vol met ratten. Ik moet van ze af zien te komen... Was er maar iemand met een wapen die mij kon helpen...");
Database.addText("nl.mapVillageFifthHouseWeaponSpeech", "He, Jij! Ik zie dat je een wapen draagt! Als jij de ratten in mijn kelder doodt, zal ik je een geschenk geven!");
Database.addText("nl.mapVillageFifthHouseAgree", "We gaan er voor!");
Database.addText("nl.mapVillageFifthHouseCellarDone", "Bedankt voor het opruimen van de ratten! Hier is iets heel kostbaars als geschenk : een kaart van de wereld. Ik denk dat jij het meer zult gebruiken dan ik.");
Database.addText("nl.mapVillageTheShopComment", "De winkel");
Database.addText("nl.mapBridgeComment", "De brug");
Database.addText("nl.mapFarmComment", "De lollieboerderij");
Database.addText("nl.mapCaveEntranceComment", "De ingang van de grot");
Database.addText("nl.mapLighthouseComment", "De vuurtoren");
Database.addText("nl.mapPierComment", "De pier");
Database.addText("nl.mapTheHoleComment", "Het gat");
Database.addText("nl.candyBoxRequestStatusBarUnlocked", "Vraag een nieuwe functie aan bij de ontwikkelaar (30 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedCfg", "Vraag nog eens (5 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedSave", "Vraag nog een keer aan (5 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedHealthBar", "Vraag iets spannends aan (5 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedMap", "Laatste aanvraag! Deze zal de snoepjes wel waard zijn. (10 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedComment", "Je hebt een statusbalk ontgrendeld! (boven)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedCfgComment1", "Je hebt nu toegang tot een configuratietabblad.");
Database.addText("nl.candyBoxRequestStatusBarUnlockedCfgComment2", "Je kan de taal veranderen als je wilt.");
Database.addText("nl.candyBoxRequestStatusBarUnlockedSaveComment", "Een wilde opslaan-tab verschijnt!");
Database.addText("nl.candyBoxRequestStatusBarUnlockedHealthBarComment", "Hier zijn 100 levenspunten voor je. Ze zullen goed van pas komen.");
Database.addText("nl.cfgChooseLanguage", "Kies je taal:");
Database.addText("nl.cfgInvertColors", "Kleuren omkeren?");
Database.addText("nl.gridItemMainMapName", "De kaart");
Database.addText("nl.gridItemMainMapDescription", "Kaart van de wereld");
Database.addText("nl.gridItemPogoStickName", "Pogostick");
Database.addText("nl.gridItemPogoStickDescription", "Hiermee kun je springen in zoektochten!");
Database.addText("nl.gridItemTimeRingName", "Een tijdring");
Database.addText("nl.gridItemTimeRingDescription", "Dit zal je een nieuwe vaardigheid geven in zoektochten: Je kunt de tijd vertragen. Als iets te snel voor je gaat, gebruik je de tijdring!");
Database.addText("nl.gridItemThirdHouseKeyName", "De derde huissleutel");
Database.addText("nl.gridItemThirdHouseKeyDescription", "Met deze sleutel kun je naar het derde huis van het dorp.");
Database.addText("nl.gridItemFeatherName", "Een veer van een woestijnvogel");
Database.addText("nl.gridItemFeatherDescription", "Door deze magische veer kun je hoger springen met je pogostick!");
Database.addText("nl.gridItemFeatherDescriptionNoPogoStick", "Om een of andere reden heb je het gevoel dat deze veer nuttig zou zijn als je een pogostick had...");
Database.addText("nl.gridItemSpongeName", "Een magische spons");
Database.addText("nl.gridItemSpongeDescription", "Door deze magische spons kun je jezelf fijnknijpen als een spons en daardoor dus kleiner worden.");
Database.addText("nl.gridItemFortressKeyName", "De sleutel van de woestijnvesting");
Database.addText("nl.gridItemFortressKeyDescription", "Door deze sleutel kun je naar het eeuwenoude kasteel boven de woestijn. Wie weet wat je daar kunt vinden?");
Database.addText("nl.gridItemHeartPendantName", "Een harten hangertje");
Database.addText("nl.gridItemHeartPendantDescription", "Dit hangertje zal je levenspunten verhogen zolang je het om je nek draagt.");
Database.addText("nl.gridItemHeartPlugName", "Een hartplug");
Database.addText("nl.gridItemHeartPlugDescription", "Deze hartplug, gemaakt met staal, spinnenpoten en een speciaal \"hartdrankje\" opgesloten in het midden, zal je levenspunten verhogen met 20 procent!");
Database.addText("nl.gridItemBeginnersGrimoireName", "De beginnersgrimoire");
Database.addText("nl.gridItemBeginnersGrimoireDescription", "Deze grimoire geeft je drie gemakkelijke spreuken. Het is echt gemaakt voor beginners. Je zult in staat zijn een zure regen-spreuk te gebruiken (Een groote hoeveelheid zuur zal op je vijanden vallen), een vuurbalspreuk (een gigantische bal van vuur zal naar je vijanden vliegen) en een teleporteerspreuk (Die zal je teleporterenn naar een onvoorspelbare locatie).");
Database.addText("nl.gridItemAdvancedGrimoireName", "De geavanceerde grimoire");
Database.addText("nl.gridItemAdvancedGrimoireDescription", "Deze geavanceerde grimoire geeft je twee spreuken: de magie verwijder-spreuk en een stekelschildspreuk. De eerste zal alle eerder uitgevoerde magie van een zoektocht verwijderen, inclusief de magie van jezelf en van je vijanden. De tweede roept een zwevend schild van stekels op rondom je, dat schade zal aanrichten wanneer het in contact met vijanden.");
Database.addText("nl.gridItemBlackMagicGrimoireName", "De zwarte magie grimoire");
Database.addText("nl.gridItemBlackMagicGrimoireDescription", "Je vond deze grimoire in een grot. Het was heel moeilijk te bereiken, en dat was met een reden. Het geeft je twee gevaarlijke zwarte magie spreuken. De eerste zal een gigantische muur van obsidiaan creÃ«ren, dat handig kan zijn om je vijanden tegen te houden. De tweede zal een zwerm van demonen oproepen die alles aanvallen in de zoektocht, inclusief jou. Wees voorzichtig met deze spreuk.");
Database.addText("nl.gridItemUnicornHornName", "Een eenhoornhoorn");
Database.addText("nl.gridItemUnicornHornDescription", "Deze magische hoorn behoorde eerst tot een eenhoorn. Zijn sterke helende krachten kunnen je goed helpen. Je hoorde dat deze eenhoorn Charlie heette.");
Database.addText("nl.gridItemXinopherydonClawName", "Een xinopherydonklauw.");
Database.addText("nl.gridItemXinopherydonClawDescription", "Deze klauw behoorde eerst tot een xinopherydon, een tweehoofdig eeuwenoud beest waarvan men dacht dat zij uitgestorven waren. Het zal de kracht van het wapen dat je gebruikt verdubbelen.");
Database.addText("nl.gridItemPitchforkName", "Een hooivork");
Database.addText("nl.gridItemPitchforkDescription", "Met deze speciale hooivork kun je de grond losser maken zonder het om te keren, waardoor je het ondergrondse eco-systeem niet stoort. Het zal de productie van je lollieboerderij verdriedubbelen.");
Database.addText("nl.gridItemShellPowderName", "Schelppoeder");
Database.addText("nl.gridItemShellPowderDescription", "Schelppoeder wordt vaak gebruikt door boeren om de groei van hun lollies te versnellen. Dit poeder zal je productie verdriedubbelen!");
Database.addText("nl.gridItemPName", "De P steen");
Database.addText("nl.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÃ‚Â° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÃ‚Â°-J (`  /R`yM}  T$`` Ã‚Â°+-|U(\\OL&Y_)T|");
Database.addText("nl.gridItemLName", "De L steen");
Database.addText("nl.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÃ‚Â°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Ã‚Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Ã‚Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("nl.gridItemAName", "De A steen");
Database.addText("nl.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÃ‚Â°#{  Oa$ GM T{Q \"S A-\\ F KmÃ‚Â°& C #Ã‚Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("nl.gridItemYName", "De Y steen");
Database.addText("nl.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Ã‚Â°-  AX Y ` Ã‚Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Ã‚Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÃ‚Â° I &L- /    K");
Database.addText("nl.gridItemRedSharkFinName", "Een magische rode haaienvin");
Database.addText("nl.gridItemRedSharkFinDescription", "Deze magische vin zal de schade van de vuurbalspreuk versterken. Eindelijk wordt deze vuurbal nuttig.");
Database.addText("nl.gridItemGreenSharkFinName", "Een magische groene haaienvin");
Database.addText("nl.gridItemGreenSharkFinDescription", "Deze magische vin zal de kracht van de natuur aan je lollieboerderij geven! Je productie zal zich vervijfvoudigen.");
Database.addText("nl.gridItemPurpleSharkFinName", "Een magische paarse haaienvin");
Database.addText("nl.gridItemPurpleSharkFinDescription", "Deze magische vin zal je een nieuwe zwarte magie spreuk geven. Je kunt het maar een keer per zoektocht gebruiken. Wees erg voorzichtig met deze!");
Database.addText("nl.gridItemTalkingCandyName", "Een pratend snoepje");
Database.addText("nl.gridItemTalkingCandyDescription", "Dit pratende snoepje verscheen nadat je de vier stenen in de top van de kasteeltoren had gezet. Hij kan je misschien helpen met het openen van de candy box...");
Database.addText("nl.inventorySpecialNothingEqItem", "Niks");
Database.addText("nl.eqItemWeaponWoodenSwordName", "Houten Zwaard");
Database.addText("nl.eqItemWeaponWoodenSwordDescription", "Een simpel zwaard, gemaakt van hout");
Database.addText("nl.eqItemWeaponIronAxeName", "Ijzeren bijl");
Database.addText("nl.eqItemWeaponIronAxeDescription", "Een simpele ijzeren bijl. Goed geslepen. Sterker dan het houten zwaard.");
Database.addText("nl.eqItemWeaponPolishedSilverSwordName", "Gepolijst zilveren zwaard");
Database.addText("nl.eqItemWeaponPolishedSilverSwordDescription", "Een sterk zwaard bedekt met stekels.");
Database.addText("nl.eqItemWeaponTrollBludgeonName", "De trollenknuppel.");
Database.addText("nl.eqItemWeaponTrollBludgeonDescription", "Je nam deze knuppel van de trol die de brug verdedigde. Het is sloom, maar slaat je vijanden behoorlijk efficient.");
Database.addText("nl.eqItemWeaponTribalSpearName", "Een stamspeer");
Database.addText("nl.eqItemWeaponTribalSpearDescription", "Je vond deze stamspeer op het karkas van een stamkrijger, verdwaald in een groot gat in de grond. Het is best lastig om te gebruiken in het begin, maar als je er aan gewend bent is het een goed wapen.");
Database.addText("nl.eqItemWeaponSummoningTribalSpearName", "Een oproepende stamspeer");
Database.addText("nl.eqItemWeaponSummoningTribalSpearDescription", "Deze magische stamspeer, naast het feit dat het sterker is dan de normale stamspeer, zal vaak stamkrijgers oproepen tijdens je zoektochten.");
Database.addText("nl.eqItemWeaponMonkeyWizardStaffName", "De apentovenaar zijn staf");
Database.addText("nl.eqItemWeaponMonkeyWizardStaffDescription", "Deze staf behoorde toe aan de naakte apentovenaar die je vond in de grot. Het zal vaak spreuken vanzelf gebruiken, gericht op je vijand.");
Database.addText("nl.eqItemWeaponEnchantedMonkeyWizardStaffName", "De apentovenaar zijn staf (betoverd)");
Database.addText("nl.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Deze staf is sneller dan de niet-betoverde versie en zal ook veel meer spreuken gebruiken.");
Database.addText("nl.eqItemWeaponGiantSpoonName", "Een gigantische lepel");
Database.addText("nl.eqItemWeaponGiantSpoonDescription", "Deze gigantische lepel vond je in een gigantische theepot in de woestijnvesting. Je weet niet of iemand het ooit heeft gebruikt als een lepel, maar als dat wel zo is dan moet het iemand zijn geweest die heel erg groot was.");
Database.addText("nl.eqItemWeaponGiantSpoonOfDoomName", "De gigantische lepel der verdoeming");
Database.addText("nl.eqItemWeaponGiantSpoonOfDoomDescription", "Deze gigantische lepel is nog sterker dan de normale gigantische lepel die je bijvoorbeeld kon vinden in een theepot, maar hij is best sloom.");
Database.addText("nl.eqItemWeaponScytheName", "Een zeis");
Database.addText("nl.eqItemWeaponScytheDescription", "Er word gezegd dat deze zeis toebehoorde aan de dood zelf. Het is extreem snel.");
Database.addText("nl.eqItemHatMerchantHatName", "De handelaarshoed");
Database.addText("nl.eqItemHatMerchantHatDescription", "Deze hoed was verkocht door de snoepjeshandelaar. De snoepjeshandelaar houdt van snoepjes. Deze hoed zal de snoepjes die je vindt in zoektochten vermenigvuldigen met 7.");
Database.addText("nl.eqItemHatSorceressHatName", "De tovenaarshoed");
Database.addText("nl.eqItemHatSorceressHatDescription", "Deze hoed was verkocht door de tovenaar. Het zal het effect van je spreuken en drankjes versterken.");
Database.addText("nl.eqItemHatOctopusKingCrownName", "De kroon van de octopuskoning");
Database.addText("nl.eqItemHatOctopusKingCrownDescription", "Wanneer je deze kroon draagt, voel je veel zelfverzekerder. Het geeft geen voordelen in zoektochten, maar zelfverzekerheid is belangrijk.");
Database.addText("nl.eqItemHatOctopusKingCrownWithJaspersName", "De kroon van de octopuskoning met jaspis");
Database.addText("nl.eqItemHatOctopusKingCrownWithJaspersDescription", "Deze betoverde kroon is belegd met goud en rode jaspis. In zoektochten schiet het vaak machtige vuurballen om je heen. En het schijnt ook!");
Database.addText("nl.eqItemHatOctopusKingCrownWithObsidianName", "De octopus koning kroon met obsidiaan.");
Database.addText("nl.eqItemHatOctopusKingCrownWithObsidianDescription", "Deze betoverde kroon is gemaakt met goud en obsidiaan. Het is schitterend. In zoektochten zal het af en toe een Octopus Koning oproepen die vecht aan jouw zijde. Wat een vasthoudend hulpje!");
Database.addText("nl.eqItemGlovesLeatherGlovesName", "Leren handschoenen");
Database.addText("nl.eqItemGlovesLeatherGlovesDescription", "Deze handschoenen doen in principe niks. Maar ze zijn tenminste zacht en comfortabel!");
Database.addText("nl.eqItemGlovesRedEnchantedGlovesName", "Rode betoverde handschoenen");
Database.addText("nl.eqItemGlovesRedEnchantedGlovesDescription", "Deze betoverde handschoenen schijnen een zacht rood licht als het donker is. In zoektochten zullen ze willekeurig een kleine vuurbal naar je vijanden schieten, wat behoorlijk nuttig kan zijn.");
Database.addText("nl.eqItemGlovesPinkEnchantedGlovesName", "Roze betoverde handschoenen");
Database.addText("nl.eqItemGlovesPinkEnchantedGlovesDescription", "Deze betoverde handschoenen laten een roze vlek achter op alles wat het aanraakt. In zoektochten zullen ze je de hele tijd genezen.");
Database.addText("nl.eqItemBootsRocketBootsName", "Raketschoenen");
Database.addText("nl.eqItemBootsRocketBootsDescription", "Door deze geweldige raketschoenen kun je springen in het midden van de lucht en dus in principe vliegen!");
Database.addText("nl.eqItemBootsLeatherBootsName", "Leren schoenen");
Database.addText("nl.eqItemBootsLeatherBootsDescription", "Simpele leren schoenen. Er is niets bijzonders aan.");
Database.addText("nl.eqItemBootsBootsOfIntrospectionName", "Schoenen der introspectie");
Database.addText("nl.eqItemBootsBootsOfIntrospectionDescription", "Neem de tijd om te ademen en rustig te worden. Als je deze schoenen draagt, zul je niet bewegen zolang je op de grond staat.");
Database.addText("nl.eqItemBodyArmoursLightweightBodyArmourName", "Een lichtgewicht torsopantser");
Database.addText("nl.eqItemBodyArmoursLightweightBodyArmourDescription", "Dit pantser zal je zwakke beveiliging geven. Je zult iets meer bestand zijn tegen de aanvallen van je vijand.");
Database.addText("nl.eqItemBodyArmoursKnightBodyArmourName", "Het pantser van een krijger.");
Database.addText("nl.eqItemBodyArmoursKnightBodyArmourDescription", "Dit sterke pantser zal je beschermen. Je zult meer bestand zijn tegen de aanvallen van je vijand.");
Database.addText("nl.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Het betoverde pantser van een krijger");
Database.addText("nl.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Dit pantser is erg speciaal. Je zult VEEL meer bestand zijn tegen de aanvallen van je vijand, maar de kracht van het wapen dat je gebruikt zal door tweeÃ«n gedeeld zijn.");
Database.addText("nl.mapVillageForgeBuyWoodenSwordButton", "Koop een houten zwaard (150 snoepjes)");
Database.addText("nl.mapVillageForgeBuyWoodenSwordSpeech", "Dankje voor het kopen! Dit houten zwaard is best zwak, maar een goed begin.");
Database.addText("nl.mapVillageForgeBuyIronAxeButton", "Koop een ijzeren bijl (400 snoepjes)");
Database.addText("nl.mapVillageForgeBuyIronAxeSpeech", "Ik hoop dat je blij bent met deze ijzeren bijl. Ik heb het net geslepen voor jou!");
Database.addText("nl.mapVillageForgeBuyPolishedSilverSwordButton", "Een opgepoetst zilveren zwaard (2 snoepjes)");
Database.addText("nl.mapVillageForgeBuyPolishedSilverSwordSpeech", "Het kostte me veel tijd om dit zwaard te maken. Ik kan je garanderen dat het de prijs waard is.");
Database.addText("nl.mapVillageForgeBuyLightweightBodyArmourButton", "Koop een lichtgewicht pantser (15 000 snoepjes)");
Database.addText("nl.mapVillageForgeBuyLightweightBodyArmourSpeech", "Dit pantser zal je bescherming bieden tegen je vijanden.");
Database.addText("nl.mapVillageForgeBuyScytheButton", "Koop een zeis(5 000 000 snoepjes)");
Database.addText("nl.mapVillageForgeBuyScytheSpeech", "Het kostte me een paar maanden om deze zeis te maken. Het is een echt kunststuk. Het is waarschijnlijk het snelste wapen dat je ooit kunt gebruiken. Veel succes!");
Database.addText("nl.wishingWellThrowFirstCandyButton", "Gooi een snoepje in de put");
Database.addText("nl.wishingWellCandyIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Wanneer je snoepjes in mij gooit, zal ik je wonden genezen.");
Database.addText("nl.wishingWellThrewCandiesSpeech", "Je wonden zijn nu genezen!");
Database.addText("nl.wishingWellNoWoundSpeech", "Je hebt geen wonden om te genezen!");
Database.addText("nl.wishingWellThrowFirstLollipopButton", "Gooi een lollie in de put");
Database.addText("nl.wishingWellLollipopIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Wanneer je lollies in mij gooit, zal ik ze veranderen in snoepjes.");
Database.addText("nl.wishingWellThrewLollipopsSpeech", "Je lollies zijn nu veranderd in in snoepjes! Twee lollies voor een snoepje.");
Database.addText("nl.wishingWellThrowChocolateBarButton", "Gooi een chocoladereep in de put");
Database.addText("nl.wishingWellChocolateBarIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Ik ben gek op chocoladerepen. Ik ben er echt gek op. Voor elke chocoladereep die je in mij gooit, inclusief deze, krijg je een magische betovering.");
Database.addText("nl.wishingWellThrewChocolateBarSpeech", "Welk object wil je betoveren?");
Database.addText("nl.wishingWellThrowPainAuChocolatButton", "Gooi een pain au chocolat in de put");
Database.addText("nl.wishingWellPainAuChocolatIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Wanneer je een pain au chocolat in mij gooit krijg je een heel speciaal geschenk. Kies verstandig.");
Database.addText("nl.wishingWellThrewPainAuChocolatSpeech", "Bedankt voor de pain au chocolat! Je kunt nu je geschenk kiezen.");
Database.addText("nl.wishingWellChooseGift", "Kies je geschenk!");
Database.addText("nl.wishingWellChooseGiftButton", "Kies");
Database.addText("nl.wishingWellGiftDoneSpeech", "Klaar! Je hebt nu een nieuw geschenk. Het zal verschijnen in je inventaris statuspaneel.");
Database.addText("nl.wishingWellNoPossibleEnchantment", "Geen mogelijke betoveringen");
Database.addText("nl.wishingWellChooseEnchantment", "Kies de betovering");
Database.addText("nl.wishingWellEnchantButton", "Betover");
Database.addText("nl.wishingWellEnchantmentDoneSpeech", "Daar is het! Je object is betoverd");
Database.addText("nl.pierLighthouseButton", "Ga naar de vuurtoren met de boot");
Database.addText("nl.pierTheSeaButton", "Spring in de zee");
Database.addText("nl.lonelyHouseOpenBox", "Open de doos");
Database.addText("nl.lonelyHouseShakeBox", "Schud de doos");
Database.addText("nl.lonelyHouseBreakLock", "Breek het slot");
Database.addText("nl.lonelyHouseKickBox", "Schop de doos");
Database.addText("nl.lonelyHouseAskTheBoxToOpenItself", "Vraag de doos om zichzelf te openen");
Database.addText("nl.lonelyHouseLureTheBoxWithACandy", "Lok de doos met snoep");
Database.addText("nl.lonelyHouseTakeTheBox", "Neem de doos mee, Je hebt waarschijnlijk toch een sleutel nodig om hem te openen");
Database.addText("nl.lonelyHouseOpenBoxResult", "De doos is op slot");
Database.addText("nl.lonelyHouseShakeBoxResult", "Er gebeurt niks");
Database.addText("nl.lonelyHouseBreakLockResult", "Het slot weigert");
Database.addText("nl.lonelyHouseKickBoxResult", "Je voet doet een beetje zeer, maar er gebeurt niks");
Database.addText("nl.lonelyHouseAskTheBoxToOpenItselfResult", "...je praat tegen een doos, weet je dat?");
Database.addText("nl.lonelyHouseLureTheBoxWithACandyResult", "Het lijkt alsof het de doos niks uitmaakt");
Database.addText("nl.lonelyHouseTakeTheBoxResult", "Er zit waarschijnlijk iets interessants in deze candy box");
Database.addText("nl.lollipopFarmConstructMill", "Bouw een molen(10 000 lollies)");
Database.addText("nl.lollipopFarmFeedMill", "Voed de molen");
Database.addText("nl.lollipopFarmCurrentCandiesProduction", "Huidige snoepjesproductie");
Database.addText("nl.lollipopFarmDigPond", "Graaf een vijver (100 000 lollies)");
Database.addText("nl.lollipopFarmBuyLolligator", "Koop een lolliegator (1200 snoepjes)");
Database.addText("nl.lollipopFarmLolligatorsConversionText", "Snoepjes omkeer -> lollies geactiveerd");
Database.addText("nl.lighthouseAskButton", "Vraag");
Database.addText("nl.lighthouseQuestionWho", "Wie ben jij?");
Database.addText("nl.lighthouseQuestionWhoSpeech", "Ik ben een hele oude cycloop.");
Database.addText("nl.lighthouseQuestionWhat", "Wat doe je hier?");
Database.addText("nl.lighthouseQuestionWhatSpeech", "Ik woon hier de hele dag door, wachtend op een boot. Het is heel lang geleden sinds ik een boot heb gezien, maar ik moet hier blijven, starend naar de zee, omdat er mischien een boot komt.");
Database.addText("nl.lighthouseQuestionWhyEatCandies", "Waarom zou ik snoepjes eten?");
Database.addText("nl.lighthouseQuestionWhyEatCandiesSpeech", "Omdat ze goed voor je gezondheid zijn!");
Database.addText("nl.lighthouseQuestionCandyBox", "Wat is candy box?");
Database.addText("nl.lighthouseQuestionCandyBoxSpeech", "Het is een hele oude doos waarover word gezegd dat het alle snoepjes in de wereld bevat. De legende zegt dat wie het voor elkaar krijgt om het open te maken zoveel snoepjes zou hebben dat alles mogelijk is.");
Database.addText("nl.lighthouseQuestionDragon", "De draak zei dat ik hier moest komen omdat ik snoepjes wil.");
Database.addText("nl.lighthouseQuestionDragonSpeech", "Oh, Op die manier... Nou, ik kan je niet direct snoepjes geven, maar ik kan je iets essensieels geven om in het eind HEEL veel snoepjes  te kunnen krijgen. Maar eerst moet ik je testen, want wat ik heb kan niet gegeven worden aan iedereen. Los deze puzzel op en het zal van jou zijn.");
Database.addText("nl.lighthouseFoundStone", "Gefeliciteerd! Je hebt de test gehaald en vond de steen. Het is heel erg zeldzaam, maar alleen nuttig als je nog drie stenen zoals deze bezit. Veel succes!");
Database.addText("nl.lighthouseFoundStoneAgain", "Goed gedaan, je hebt de puzzel weer opgelost. Je lijkt het leuk te vinden.");
Database.addText("nl.saveLocalSaveTitle", "Browser opslaan");
Database.addText("nl.saveLocalSaveWhy", "Kies lokaal opslaan als je wilt blijven spelen op je huidige toestel en browser.");
Database.addText("nl.saveLocalSaveWarning0", "Je browser blijkt geen HTML5 te steunen.");
Database.addText("nl.saveLocalSaveWarning1", "Je moet je browser updaten om lokale opslag te kunnen gebruiken.");
Database.addText("nl.saveLocalSaveChooseSlot", "Kies een opslag slot :");
Database.addText("nl.saveLocalSaveAutosaveEnabled", "Automatisch opslaan geactiveerd");
Database.addText("nl.saveLocalSaveChooseWhatToDo", "Kies wat te doen:");
Database.addText("nl.saveLocalSaveSaveButton", "Opslaan");
Database.addText("nl.saveLocalSaveAutosaveButton", "Sla elke 10 minuten op");
Database.addText("nl.saveLocalSaveDisableAutosaveButton", "Deactiveer automatisch opslaan");
Database.addText("nl.saveFileSaveTitle", "Tekst opslaan");
Database.addText("nl.saveFileSaveWhy0", "Kies tekst opslaan als :");
Database.addText("nl.saveFileSaveWhy1", "Je wilt blijven spelen op een ander apparaat of browser");
Database.addText("nl.saveFileSaveWhy2", "Je je progressie wilt delen met iemand anders");
Database.addText("nl.saveFileSaveWhy3", "Voor een of andere reden je je browser cache wilt legen");
Database.addText("nl.saveFileSaveWhy4", "(dit zal je lokale opslag verwijderen)");
Database.addText("nl.saveFileSaveButton", "Krijg het huidige spel als tekst");
Database.addText("nl.saveFileSaveWarning", "Plak de tekst nu ergens!(in een bestand, bijvoorbeeld)");
Database.addText("nl.saveLocalLoadTitle", "Browser laden");
Database.addText("nl.saveLocalLoadYouCan", "Je kunt een lokale opslag laden met de volgende links:");
Database.addText("nl.saveLocalLoadThanksTo", "Dankzij HTML5 magie, kun je deze link zelfs gebruiken als je offline bent");
Database.addText("nl.saveFileLoadTitle", "Tekst laden");
Database.addText("nl.saveFileLoadPaste", "Plak je opslagtekst hier onder en klik dan op het \"Laad\" knopje");
Database.addText("nl.saveFileLoadButton", "Laad");
Database.addText("nl.mountainsText0", "Je zag iets in de bergen!");
Database.addText("nl.mountainsText1", "He ziet er interessant uit. Misschien is het nuttig.");
Database.addText("nl.mountainsTextButton", "Beklim de bergen om het ding te krijgen");
Database.addText("nl.mountainsTextAfter", "Je vond een pogostick! Het is toegevoegd aan je inventaris.");
Database.addText("nl.secondHouseIntroSpeech", "Hallo, ik ben de snoepjes handelaar. Ik doe alles voor snoepjes. Wat heb je nodig?");
Database.addText("nl.secondHouseLollipop1Speech", "Dit is een citroenaroma-lollie. Mijn favoriet! Het kost 60 snoepjes, maar het is het waard.");
Database.addText("nl.secondHouseLollipop2Speech", "Dit is een aardbeienaroma-lollie. Het smaakt goed. Ik hou van zijn rode kleur. Maar 60 snoepjes!");
Database.addText("nl.secondHouseLollipop3Speech", "Dit is een pompoenaroma-lollie. Ik wed dat je die nog nooit had geprobeerd! 60 snoepjes en het is van jou.");
Database.addText("nl.secondHouseLollipopButtonText", "Koop deze lollie (60 snoepjes)");
Database.addText("nl.secondHouseMerchantHatSpeech", "Ik kan je mijn hoed verkopen, maar het is heel erg zeldzaam, weet je... Je moet mij er heel veel snoepjes voor in de plaats geven. Laten we zeggen 1 miljoen snoepjes. Lijkt mij eerlijk, toch?");
Database.addText("nl.secondHouseMerchantHatButtonText", "Koop de hoed van de handelaar (1 000 000 snoepjes)");
Database.addText("nl.secondHouseTimeRingSpeech", "Dit is een tijdring. Het is best magisch. Het laat je de tijd vertragen voor wanneer je in de problemen zit.");
Database.addText("nl.secondHouseTimeRingButtonText", "Koop de tijdring (500 snoepjes)");
Database.addText("nl.secondHouseLeatherGlovesSpeech", "Deze leren handschoenen zijn gemaakt met kameelleer van hoge kwaliteit. Ik heb er veel van op voorraad, daarom zijn ze zo goedkoop : maar 300 snoepjes!");
Database.addText("nl.secondHouseLeatherBootsButtonText", "Koop een paar leren laarzen (300 snoepjes)");
Database.addText("nl.secondHouseLeatherBootsSpeech", "Deze hoge kwaliteit leren laarzen, zijn gemaakt met kameel leer, zal je voeten warm houden.");
Database.addText("nl.secondHouseLeatherGlovesButtonText", "Koop een paar handschoenen (300 schoenen)");
Database.addText("nl.secondHouseChocolateBarSpeech", "Dit is een chocladereep. Ik weet niet waar het voor wordt gebruikt, maar het blijkt behoorlijk zeldzaam te zijn, wat de prijs verklaart. 800 snoepjes en het is van jou!");
Database.addText("nl.secondHouseChocolateBarButtonText", "Koop de chocoladereep (800 snoepjes)");
Database.addText("nl.outsideTheHoleButton", "Spring in het grote gat in de grond");
Database.addText("nl.theCaveExitText0", "Je bereikte eindelijk het einde van de grot");
Database.addText("nl.theCaveExitText1", "Je kunt een groot bos zien vanuit hier.");
Database.addText("nl.theCaveExitButtonText", "Ga uit de grot");
Database.addText("nl.theCaveFirstSentenceWentStraight", "Je ging rechtdoor.");
Database.addText("nl.theCaveFirstSentenceWentLeft", "Je nam het pad links van je.");
Database.addText("nl.theCaveFirstSentenceWentRight", "Je nam het pad rechts van je.");
Database.addText("nl.theCaveFirstSentenceYouAre", "Je bent in een grot. Er zijn drie paden voor je.");
Database.addText("nl.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Voor je zie je een vreemd ding op de grond.");
Database.addText("nl.theCavePattern_ChocolateBarNowSeeChocolateBar", "Je ziet een chocoladereep voor je.");
Database.addText("nl.theCavePattern_TreasureMapSentence", "Je ziet kleine stenen in een vreemde manier geordend.");
Database.addText("nl.theCavePattern_MonkeyWizardSentence", "Je stuit op een naakte apentovenaar.");
Database.addText("nl.theCavePattern_MonkeyWizardButton", "Daag het uit");
Database.addText("nl.theCavePattern_OctopusKingSentence", "Je stuit op de octopuskoning. Het ziet er smerig uit.");
Database.addText("nl.theCavePattern_OctopusKingButton", "Daag het uit");
Database.addText("nl.fortressInsideText0", "Je bent in de woestijnvesting.");
Database.addText("nl.fortressInsideText1", "Je kunt kiezen tussen drie deuren.");
Database.addText("nl.fortressInsideText2", "Elk van hun leidt naar een grote kamer met een schat.");
Database.addText("nl.fortressInsideEnterRoom1", "Ga in de eerste kamer");
Database.addText("nl.fortressInsideEnterRoom2", "Ga in de tweede kamer");
Database.addText("nl.fortressInsideEnterRoom3", "Ga in de derde kamer");
Database.addText("nl.treasureButtonDig", "Graaf");
Database.addText("nl.treasureButtonYouFound", "Je vond drie chocolade repen!");
Database.addText("nl.sorceressHutHello", "Hallo, ik ben de tovenaar. Ik kan je het een en ander leren over magie. Ik kan je ook interessante dingen geven, of spreuken gebruiken. Maar alles heeft een prijs! En deze prijs zullen lollies zijn. Heel veel.");
Database.addText("nl.sorceressHutClickedGrimoire", "Dit is een grimoire voor beginners. Door dit mee te nemen in je zoektochten kun je simpele maar handige spreuken gebruiken. Je hebt dit nodig! Maar 5 000 lollies.");
Database.addText("nl.sorceressHutBuyGrimoireButton", "Koop deze grimoire (5 000 lollies)");
Database.addText("nl.sorceressHutBuyGrimoireSpeech", "Bedankt voor het kopen! Je kunt nu drie spreuken gebruiken met deze grimoire. Veel succes!");
Database.addText("nl.sorceressHutClickedGrimoire2", "Dit is een geavanceerde grimoire. Door dit mee te nemen in je zoektochten, kun je twee geavanceerde spreuken gebruiken. Ik schreef ze zelf, en dat was niet makkelijk. 20 000 lollies is een eerlijke prijs.");
Database.addText("nl.sorceressHutBuyGrimoire2Button", "Koop deze grimoire (20 000 lollies)");
Database.addText("nl.sorceressHutBuyGrimoire2Speech", "Bedankt voor het kopen! Je kunt nu twee spreuken gebruiken met deze grimoire. Gebruik ze verstandig!");
Database.addText("nl.sorceressHutClickedCauldron", "Dit is mijn ketel. Hiermee kan ik magische drankjes brouwen. Ik kan het aan je verkopen, maar het is heel erg kostbaar... het zal je 100 000 lollies kosten.");
Database.addText("nl.sorceressHutBuyCauldronButton", "Koop de ketel (100 000 lollies)");
Database.addText("nl.sorceressHutBuyCauldronSpeech", "Heel erg bedankt! 100 000 lollies voor mij! Ik gaf je ook een brouwhandleiding. Die zal erg handig zijn.");
Database.addText("nl.sorceressHutClickedHat", "Ik heb een mooie hoed, inderdaad! Maar ik kan hem helaas niet aan je verkopen. Het is veeeel te kostbaar. Echt, Ik kan het niet. Niet aandringen. Nee. Nee nee nee ik moet het niet doen. Nou ja, ik verkoop het, maar voor 1 000 000 000 lollies. Je kunt dat waarschijnlijk toch niet betalen.");
Database.addText("nl.sorceressHutBuyHatButton", "Koop de hoed (1 000 000 000 lollies)");
Database.addText("nl.sorceressHutBuyHatSpeech", "Een miljard lollies voor miiiiiiij! Maar ik heb geen hoed meer.. maar een miljard lollies, wow! .. het was het waard.");
Database.addText("nl.cauldronPreviousPageButton", "Vorige pagina");
Database.addText("nl.cauldronNextPageButton", "Volgende pagina");
Database.addText("nl.cauldronWhatYouWantToPut", "Wat je in de ketel wil doen");
Database.addText("nl.cauldronWhatIsIn", "Wat zit er in de ketel");
Database.addText("nl.cauldronWhatYouCanDo", "Wat je er mee kunt doen");
Database.addText("nl.castleBigRoomComment", "Een grote kamer");
Database.addText("nl.castleARoomComment", "Een kamer");
Database.addText("nl.castleADarkRoomComment", "Een donkere kamer");
Database.addText("nl.castleCastleEntranceComment", "De ingang van het kasteel");
Database.addText("nl.castleTowerEntranceComment", "De ingang van de toren");
Database.addText("nl.castleNougatMonsterComment", "Val de gigantische noga aan");
Database.addText("nl.castleGuardsComment", "Val de bewakers aan");
Database.addText("nl.castleStairsComment", "Trap");
Database.addText("nl.buttonBackToTheCastle", "Terug naar het kasteel");
Database.addText("nl.castleBigRoomHovenSpeechSad", "Hallo, Ik been een hele oude broodoven. Ik bakte vroeger heel veel lekker banket, maar niemand gebruikt mij meer. Misschien... misschien kun jij me helpen? Laat me een paar snoepjes van je gebruiken! Maak je geen zorgen, je zult er geen spijt van krijgen! Je kunt me vertrouwen.");
Database.addText("nl.castleBigRoomHovenNotEnough", "Oh... je hebt niet genoeg snoepjes, ik kan niks doen. Ik ben gewoon nutteloos. Ik ben de nuttelozebrood oven, dat is hoe je mij zou moeten noemen.");
Database.addText("nl.castleBigRoomHovenSpeechMadePainAuChocolat", "Jeej! Heel erg bedankt! Ik gebruikte 100 snoepjes en een chocoladereep en maakte voor jou... een pain au chocolat! Het is mijn favoriete banket, ik hoop dat jij het ook lekker vind.");
Database.addText("nl.castleBigRoomHovenSpeechHappy", "Hey! Als je wil dat ik nog een banket bak, laat het me weten! Ik zou je graag helpen.");
Database.addText("nl.castleBigRoomHovenSpeechHappyNotEnough", "Oh, je hebt niet genoeg snoepjes, helaas. Ik heb 100 snoepjes en een chocoladereep nodig. Kom terug als je dat hebt!");
Database.addText("nl.castleBigRoomHovenLetHovenTakeButton", "Laat de oven alle snoepjes pakken dat het wil pakken");
Database.addText("nl.castleBigRoomHovenThanks", "Bedankt, oven!");
Database.addText("nl.dragonStopTickling", "He, jij, stop met kietelen, alsjeblieft");
Database.addText("nl.dragonStopTicklingButton", "Uh, oh, sorry, ik dacht dat ik je moest aanvallen");
Database.addText("nl.dragonTalking", "Ik ben de draak en dit is mijn kasteel. Ik zie dat het je gelukt is om binnen te komen, je zal vast moedig zijn... Ik zou graag iemand helpen zoals jij. Waar zoek je naar?");
Database.addText("nl.dragonTalkingChallengeButton", "Uitdaging");
Database.addText("nl.dragonTalkingFameButton", "Roem");
Database.addText("nl.dragonTalkingCandiesButton", "Snoepjes");
Database.addText("nl.dragonTalkingChallengeSpeech", "Oh, je wilt dus een uitdaging? Ik denk dat je een reis moet maken naar de hel, het is bekend dat de duivel een sterke tegenstander is. Spring op mijn rug en ik breng je er heen!");
Database.addText("nl.dragonTalkingFameSpeech", "De beste manier om beroemd te worden is door de confrontatie aan te gaan met de ontwikkelaar zelf. Ik weet waar hij woont en ik kan je daar brengen. Maar wees voorbereid, dit zal niet makkelijk zijn.");
Database.addText("nl.dragonTalkingCandiesSpeech", "Hetgene wat wij uiteindelijk allemaal willen zijn snoepjes, of niet? Ik denk dat een vriend van mij je daarmee kan helpen. Je kunt hem makkelijk herkennen, hij heeft maar een oog. Vertel hem maar dat je mij kent.");
Database.addText("nl.dragonTalkingChallengeAnswer", "Laten we gaan!");
Database.addText("nl.dragonTalkingFameAnswer", "Ik ben er klaar voor.");
Database.addText("nl.dragonTalkingCandiesAnswer", "Okay, bedankt!");
Database.addText("nl.buttonBackToCastle", "Terug naar het kasteel");
Database.addText("nl.talkingCandySpeechNoBox", "Hey! Ik ben het pratende snoepje. Je hebt het spel bijna gewonnen. Je moet alleen nog de candy box vinden. Het is in een huis buiten het dorp. Dit is de laatste stap!");
Database.addText("nl.talkingCandySpeech1", "He!, Ik ben het pratende snoepje. Je hebt het spel gewonnen! Ik zal je candy box openmaken, dit is je prijs. Zal ik doorgaan?");
Database.addText("nl.talkingCandySpeech2", "Klaar! Je kunt er nu in. Ik hoop dat je het spel leuk vond :)");
Database.addText("nl.talkingCandyButton", "Ja!!");
Database.addText("nl.lighthousePuzzleResetButton", "Reset");
Database.addText("ï»¿de.mapVillageComment", "Das Dorf");
Database.addText("de.mapFortressComment", "Die WÃ¼stenfestung");
Database.addText("de.mapATreeComment", "Ein Baum");
Database.addText("de.mapTheDesertComment", "Die WÃ¼ste");
Database.addText("de.mapWishingWellComment", "Der Wunschbrunnen");
Database.addText("de.mapLonelyHouseComment", "Ein verlassenes Haus");
Database.addText("de.mapForestComment", "Der Wald");
Database.addText("de.mapCastleEntranceComment", "Schlosseingang");
Database.addText("de.mapCastleComment", "Das Schloss");
Database.addText("de.mapDragonComment", "Der Drache");
Database.addText("de.candyBoxEatCandiesButton", "Alle Bonbons aufessen");
Database.addText("de.candyBoxThrowCandiesButton", "10 Bonbons auf den Boden werfen");
Database.addText("de.mapVillageAHouseComment", "Ein Haus");
Database.addText("de.mapVillageForgeComment", "Die Schmiede");
Database.addText("de.buttonBackToTheMap", "ZurÃ¼ck zur Karte");
Database.addText("de.mapSorceressHutComment", "HexenhÃ¼tte");
Database.addText("de.buttonBackToTheVillage", "ZurÃ¼ck zum Dorf");
Database.addText("de.mapATreeIntroductionSpeech", "Hallo, ich bin das EichhÃ¶rnchen. Ich kann dir Bonbons und viele andere Dinge anbieten. Ich weiÃŸ, wie sehr du SÃ¼ÃŸes magst. Aber ich fÃ¼hle mich in diesem Wald einsam.");
Database.addText("de.mapATreeIntroductionButton", "Wie kann ich dir helfen?");
Database.addText("de.mapATreeFirstQuestion", "Ich werde dir Fragen stellen. Wenn du sie korrekt beantwortest, werden die sÃ¼ÃŸesten SÃ¼ÃŸspeisen deine sein. Die erste : Magst du wirklich Bonbons?? (Antworte auf Englisch)");
Database.addText("de.mapATreeSecondQuestion", "Das ist richtig! Hier sind 20 Bonbons fÃ¼r dich. VervollstÃ¤ndige nun diese Aneinandereihung von Buchstaben und du wirst eine neue Belohnung erhalten : S, E, I, D, N, A, ?");
Database.addText("de.mapATreeThirdQuestion", "Candies! Hier hast du 100 Bonbons. NÃ¤chste Frage : Wie viele Bonbons besitzt die grÃ¶ÃŸte Naschkatze auf der ganzen Welt?");
Database.addText("de.mapATreeFourthQuestion", "Hier sind 500 Bonbons! Die nÃ¤chste Belohnung dÃ¼rfte sogar noch interessanter sein... Hier ist das RÃ¤tsel : In einem uralten Wald wÃ¤chst ein sehr alter Baum, auf dem die intelligentesten Tier dieser Welt leben. Es heiÃŸt, dieser Baum habe 60 Wurzeln, 360 Ã„ste und 2160 BlÃ¤tter. Wie viele Markierungen kannst du auf seinem Stamm finden?");
Database.addText("de.mapATreeFifthQuestion", "Gratulation! Ich sprach in der Tat von meinem Baum. Hier sind 3 Lutscher fÃ¼r dich. NÃ¼tze sie wohlÃ¼berlegt! Das nÃ¤chste RÃ¤tsel, hÃ¶r gut zu : Im Vollmond werfe ich einen gelben Hut ins rote Meer. Was geschieht mit diesem gelben Hut?");
Database.addText("de.mapATreeTicTacToeIntro", "Gute Antwort! Das war nicht allzu schwer. Hier sind 3 Schokoriegel fÃ¼r dich. FÃ¼r die nÃ¤chste Belohnung mÃ¼ssen wir die Regeln ein klein wenig Ã¤ndern. Du wirst ein Spiel mit mir spielen mÃ¼ssen! Bist du bereit?");
Database.addText("de.mapATreeTicTacToeIntroButton", "Na klar!");
Database.addText("de.mapATreeTicTacToeLetsPlay", "Dieses Spiel heiÃŸt Tic Tac Toe. Wir spielen auf einem 3Ã—3-Spielbrett. Du wirst das X-Zeichen und ich das O-Zeichen benutzen. Jeder von uns wird seine eigenen Zeichen setzen und das Ziel ist es, 3 gleiche Zeichen in einer Reihe zu haben. Ich werde dich beginnen lassen!");
Database.addText("de.mapATreeTicTacToeNobodyWins", "Das Spielbrett ist komplett gefÃ¼llt und wir haben beide nicht drei in einer Reihe : keiner gewinnt! Willst du es erneut versuchen?");
Database.addText("de.mapATreeTicTacToeYouLose", "Ich habe drei in einer Reihe! Ich habe gewonnen. Willst du es erneut versuchen?");
Database.addText("de.mapATreeTicTacToeTryAgainButton", "NatÃ¼rlich will ich das!");
Database.addText("de.mapATreeTicTacToeYouWin", "Wow, das war ein unerwarteter Zug. Aber du hast drei in einer Reihe, das kann ich nicht bestreiten. Du hast gewonnen! Nimm diesen SchlÃ¼ssel! Er Ã¶ffnet eines der HÃ¤user im Dorf unter dem Wald.");
Database.addText("de.mapATreeTicTacToeAnymoreSweet", "Danke, EichhÃ¶rnchen! Noch mehr Herausforderungen?");
Database.addText("de.mapATreeNoMoreChallenge", "Leider nicht, ich habe keine weiteren Herausforderungen fÃ¼r dich... Mit dir zu Spielen war spaÃŸig, danke dafÃ¼r!");
Database.addText("de.buttonExitQuestKeeping", "Verlasse die Quest (und behalte deine Beute)");
Database.addText("de.buttonExitQuestNoKeeping", "Verlasse die Quest (und verliere deine Beute)");
Database.addText("de.buttonExitQuestNoKeepingBecauseLose", "Verlasse die Quest (und verliere deine Beute, weil du gescheitert bist)");
Database.addText("de.mapVillageLockedHouseComment", "Ein abgeschlossenes Haus");
Database.addText("de.mapVillageForgeIntroductionSpeech", "Hi! Ich bin ein Schmied. Ich kann dir verschiedene Waffen und AusrÃ¼stungsteile verkaufen.");
Database.addText("de.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hi! Ich bin ein Schmied. Leider kann ich gerade nichts zum Verkauf anbieten. MÃ¶chtest du vielleicht spÃ¤ter wiederkommen?");
Database.addText("de.mapVillageFifthHouseNoWeaponSpeech", "Hallo. Mein Keller ist voller Ratten, die ich loswerden muss... wenn mir nur jemand mit einer Waffe helfen kÃ¶nnte...");
Database.addText("de.mapVillageFifthHouseWeaponSpeech", "He, du! Ich sehe, dass du eine Waffe trÃ¤gst. Wenn du die Ratten, die mich in meinem Keller belÃ¤stigen, tÃ¶test, werde ich dich belohnen!");
Database.addText("de.mapVillageFifthHouseAgree", "Dann nichts wie los!");
Database.addText("de.mapVillageFifthHouseCellarDone", "Vielen Dank, dass du sie losgeworden bist. Hier ist etwas sehr Wertvolles als Belohnung : eine Weltkarte. Ich denke, dass du mehr damit anfangen kannst als ich.");
Database.addText("de.mapVillageTheShopComment", "Der Laden");
Database.addText("de.mapBridgeComment", "Die BrÃ¼cke");
Database.addText("de.mapFarmComment", "Die Lutscherfarm");
Database.addText("de.mapCaveEntranceComment", "Der HÃ¶hleneingang");
Database.addText("de.mapLighthouseComment", "Der Leuchtturm");
Database.addText("de.mapPierComment", "Der Pier");
Database.addText("de.mapTheHoleComment", "Der Graben");
Database.addText("de.candyBoxRequestStatusBarUnlocked", "Den Entwickler um eine neue Funktion bitten (30 SÃ¼ÃŸigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedCfg", "Um eine weitere bitten (5 SÃ¼ÃŸigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedSave", "Noch einmal bitten (5 SÃ¼ÃŸigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedHealthBar", "Um etwas Aufregenderes bitten (5 SÃ¼ÃŸigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedMap", "Der letzte Wunsch! Er muss einfach die Bonbons wert sein. (10 SÃ¼ÃŸigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedComment", "Du hast eine Statusleiste freigeschaltet! (siehe oben)");
Database.addText("de.candyBoxRequestStatusBarUnlockedCfgComment1", "Du hast jetzt Zugriff auf den Konfigurations-Tab.");
Database.addText("de.candyBoxRequestStatusBarUnlockedCfgComment2", "Du kannst die Sprache Ã¤ndern, wenn du das mÃ¶chtest.");
Database.addText("de.candyBoxRequestStatusBarUnlockedSaveComment", "Ein wildes Speichern-Tab erscheint!");
Database.addText("de.candyBoxRequestStatusBarUnlockedHealthBarComment", "Hier sind 100 Lebenspunkte fÃ¼r dich. Sie werden nÃ¼tzlich sein.");
Database.addText("de.cfgChooseLanguage", "WÃ¤hle eine Sprache :");
Database.addText("de.cfgInvertColors", "Farben invertieren?");
Database.addText("de.gridItemMainMapName", "Die Karte");
Database.addText("de.gridItemMainMapDescription", "Karte der Welt");
Database.addText("de.gridItemPogoStickName", "Springstock");
Database.addText("de.gridItemPogoStickDescription", "Dieser Gegenstand erlaubt es dir, in Quests zu springen.");
Database.addText("de.gridItemTimeRingName", "Ein Zeitring");
Database.addText("de.gridItemTimeRingDescription", "Dieser Gegenstand gibt dir eine neue FÃ¤higkeit in Quests : Du kannst die Zeit verlangsamen. Benutze deinen Zeitring, wenn es dir zu schnell geht!");
Database.addText("de.gridItemThirdHouseKeyName", "Der dritte HausschlÃ¼ssel");
Database.addText("de.gridItemThirdHouseKeyDescription", "Dieser SchlÃ¼ssel erlaubt es dir, das dritte Haus im Dorf zu betreten.");
Database.addText("de.gridItemFeatherName", "Eine WÃ¼stenvogelfeder");
Database.addText("de.gridItemFeatherDescription", "Diese magische Feder erlaubt es dir, hÃ¶her zu springen, wenn du deinen Springstock benutzt!");
Database.addText("de.gridItemFeatherDescriptionNoPogoStick", "Aus irgendeinem Grund hast du das GefÃ¼hl, dass diese Feder mit einem Springstock nÃ¼tzlich sein kÃ¶nnte...");
Database.addText("de.gridItemSpongeName", "Ein magischer Schwamm");
Database.addText("de.gridItemSpongeDescription", "Dieser magische Schwamm erlaubt es dir, dich wie ein Schwamm zusammenzuziehen und dadurch zu schrumpfen.");
Database.addText("de.gridItemFortressKeyName", "Der WÃ¼stenfestungsschlÃ¼ssel");
Database.addText("de.gridItemFortressKeyDescription", "Dieser SchlÃ¼ssel erlaubt es dir, die antike Festung oberhalb der WÃ¼ste zu betreten. Wer weiÃŸ schon, was man dort entdecken kÃ¶nnte?");
Database.addText("de.gridItemHeartPendantName", "Ein Herzamulett");
Database.addText("de.gridItemHeartPendantDescription", "Dieses Herzamulett wird deine Lebenspunkte erhÃ¶hen, solang du es um deinen Hals trÃ¤gst.");
Database.addText("de.gridItemHeartPlugName", "Ein Herzstecker");
Database.addText("de.gridItemHeartPlugDescription", "Dieser Herzstecker besteht aus Eisen, Spinnenbeinen und einer speziellen \"Herzlauge\", die in der Mitte eingeschlossen ist. Er erhÃ¶ht deine Lebenspunkte um 20 Prozent!");
Database.addText("de.gridItemBeginnersGrimoireName", "Magie fÃ¼r Memmen");
Database.addText("de.gridItemBeginnersGrimoireDescription", "Dieses Buch verleiht dir drei ZaubersprÃ¼che, die sich einfach beschwÃ¶ren lassen. Es scheint in der Tat fÃ¼r AnfÃ¤nger geschrieben worden zu sein. Folgende ZaubersprÃ¼che wirst du benutzen kÃ¶nnen : Saurer Regen (eine groÃŸe Menge an SÃ¤ure fÃ¤llt auf deine Gegner), Feuerball (ein riesiger Magieball aus Feuer fliegt in Richtung deiner Gegner) und Teleport (du wirst an eine zufÃ¤llige Position teleportiert).");
Database.addText("de.gridItemAdvancedGrimoireName", "Zaubern fÃ¼r Fortgeschrittene");
Database.addText("de.gridItemAdvancedGrimoireDescription", "Dieses Buch fÃ¼r Fortgeschrittene verleiht dir zwei ZaubersprÃ¼che : Magie auslÃ¶schen und Dornenschild. Der erste wird jegliche Magie von dir oder deinen Gegnern wÃ¤hrend eines Quests verhindern. Der zweite wird um dich herum einen Schild aus fliegenden Dornen erschaffen, welcher deinen Gegnern bei Kontakt Schaden hinzufÃ¼gt");
Database.addText("de.gridItemBlackMagicGrimoireName", "Buch der schwarzen Magie");
Database.addText("de.gridItemBlackMagicGrimoireDescription", "Du hast dieses Zauberbuch aus einer HÃ¶hle geborgen, was nicht einfach war - und das hat seinen Grund. Es verleiht dir nÃ¤mlich zwei mÃ¤chtige dunkle ZaubersprÃ¼che. Der erste wird vor dir einen riesigen Wall aus Obsidiansteinen erschaffen, was nÃ¼tzlich sein kann, um Gegner zu verlangsamen. Der zweite wird einen Schwarm von DÃ¤monen heraufbeschwÃ¶ren, die jeden wÃ¤hrend eines Quests angreifen werden, auch dich. Sei vorsichtig damit.");
Database.addText("de.gridItemUnicornHornName", "Elfenbein des Einhorns");
Database.addText("de.gridItemUnicornHornDescription", "Dieses magische Horn gehÃ¶rte einst einem Einhorn. Seine mÃ¤chtigen HeilkrÃ¤fte werden dir eine groÃŸe Hilfe sein. Du hast gehÃ¶rt, dass das Einhorn den Namen Charlie hatte.");
Database.addText("de.gridItemXinopherydonClawName", "Klaue eines Xinopherydons");
Database.addText("de.gridItemXinopherydonClawDescription", "Diese Klaue gehÃ¶rte einem Xinopherydon, einer zweikÃ¶pfigen vorzeitlichen Kreatur, die als ausgestorben galt. Sie wird den Schaden deiner ausgerÃ¼steten Waffe verdoppeln.");
Database.addText("de.gridItemPitchforkName", "Eine Heugabel");
Database.addText("de.gridItemPitchforkDescription", "Mit dieser besonderen Heugabel kannst du den Ackerboden auflockern, ohne ihn komplett zu ruinieren. Dadurch wird das unterirdische Ã–kosystem geschÃ¼tzt. Sie wird die Produktion deiner Lutscherfarm verdreifachen.");
Database.addText("de.gridItemShellPowderName", "Muschelpulver");
Database.addText("de.gridItemShellPowderDescription", "Muschelpulver wird hÃ¤ufig von Bauern benutzt, um das Wachstum von Lutschern zu verbessern. Dieses Pulver wird die Produktion deiner Lutscherfarm verdreifachen!");
Database.addText("de.gridItemPName", "Der P-Stein");
Database.addText("de.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("de.gridItemLName", "Der L-Stein");
Database.addText("de.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("de.gridItemAName", "Der A-Stein");
Database.addText("de.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("de.gridItemYName", "Der Y-Stein");
Database.addText("de.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("de.gridItemRedSharkFinName", "Eine rote magische Haiflosse");
Database.addText("de.gridItemRedSharkFinDescription", "Diese magische Flosse wird den Schaden deines Feuerballs stark erhÃ¶hen. Schlussendlich wird Feuerball also doch noch nÃ¼tzlich.");
Database.addText("de.gridItemGreenSharkFinName", "Eine grÃ¼ne magische Haiflosse");
Database.addText("de.gridItemGreenSharkFinDescription", "Diese magische Flosse verleiht deiner Lutscherfarm die Kraft der Natur! Deine Produktion wird sich verfÃ¼nffachen.");
Database.addText("de.gridItemPurpleSharkFinName", "Eine violette magische Haiflosse");
Database.addText("de.gridItemPurpleSharkFinDescription", "Diese magische Flosse wird dir einen neuen Spruch der schwarzen Magie verleihen! Du kannst ihn hÃ¶chsten einmal pro Quest verwenden. Sei vorsichtig damit!");
Database.addText("de.gridItemTalkingCandyName", "Ein sprechendes Bonbon");
Database.addText("de.gridItemTalkingCandyDescription", "Dieses sprechende Bonbon ist aufgetaucht, nachdem du die vier Steine auf die Spitze des Schlossturms gebracht hast. Es hilft dir vielleicht dabei, die Candy Box zu Ã¶ffnen...");
Database.addText("de.inventorySpecialNothingEqItem", "Nichts");
Database.addText("de.eqItemWeaponWoodenSwordName", "HÃ¶lzernes Schwert");
Database.addText("de.eqItemWeaponWoodenSwordDescription", "Ein einfaches Schwert aus Holz");
Database.addText("de.eqItemWeaponIronAxeName", "Eiserne Axt");
Database.addText("de.eqItemWeaponIronAxeDescription", "Eine simple Axt aus Eisen. Gut geschliffen. StÃ¤rker als das hÃ¶lzerne Schwert.");
Database.addText("de.eqItemWeaponPolishedSilverSwordName", "Poliertes Silberschwert");
Database.addText("de.eqItemWeaponPolishedSilverSwordDescription", "Ein mÃ¤chtiges Schwert, mit NÃ¤geln besetzt.");
Database.addText("de.eqItemWeaponTrollBludgeonName", "Keule des Trolls");
Database.addText("de.eqItemWeaponTrollBludgeonDescription", "Du hast diese Keule von dem Troll genommen, der die BrÃ¼cke bewacht hat. Sie ist zwar langsam, aber man kann damit wirkungsvoll Gegner verprÃ¼geln.");
Database.addText("de.eqItemWeaponTribalSpearName", "Stammesspeer");
Database.addText("de.eqItemWeaponTribalSpearDescription", "Du hast diesen Speer neben der Leiche eines Stammeskriegers gefunden, der sich in einem groÃŸen Graben verirrt hat. Es ist schwierig, sich darauf einzulassen, aber sobald du dich daran gewÃ¶hnt hast, ist er sicherlich eine gute Waffe.");
Database.addText("de.eqItemWeaponSummoningTribalSpearName", "BeschwÃ¶rer-Stammesspeer");
Database.addText("de.eqItemWeaponSummoningTribalSpearDescription", "Dieser magische Stammesspeer ist stÃ¤rker als ein gewÃ¶hnlicher Speer und wird wÃ¤hrend Quests immer wieder Stammeskrieger beschwÃ¶ren, die dir helfen werden.");
Database.addText("de.eqItemWeaponMonkeyWizardStaffName", "Stab des Affenmagiers");
Database.addText("de.eqItemWeaponMonkeyWizardStaffDescription", "Dieser Stab gehÃ¶rte einem nackten Affenmagier, dem du in der HÃ¶hle begegnet bist. Er wirft automatisch ZaubersprÃ¼che gegen deine Gegner.");
Database.addText("de.eqItemWeaponEnchantedMonkeyWizardStaffName", "Stab des Affenmagiers (verzaubert)");
Database.addText("de.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Dieser Stab ist schneller als die nicht-verzauberte Variante, er wird also viel mehr SprÃ¼che zaubern.");
Database.addText("de.eqItemWeaponGiantSpoonName", "Ein riesiger LÃ¶ffel");
Database.addText("de.eqItemWeaponGiantSpoonDescription", "Dieser riesige LÃ¶ffel war in einer riesigen Teekanne in der WÃ¼stenfestung. Du kannst nicht sagen, ob er jemals verwendet wurde, aber wenn, dann muss es jemand sehr GroÃŸes gewesen sein. Treffen mÃ¶chtest du ihn eher nicht.");
Database.addText("de.eqItemWeaponGiantSpoonOfDoomName", "Riesiger LÃ¶ffel des Untergangs");
Database.addText("de.eqItemWeaponGiantSpoonOfDoomDescription", "Dieser riesige LÃ¶ffel ist sogar noch stÃ¤rker als ein gewÃ¶hnlicher riesiger LÃ¶ffel, den man beispielsweise in einer riesigen Teekanne finden kÃ¶nnte. Leider ist er ziemlich langsam.");
Database.addText("de.eqItemWeaponScytheName", "Die Sense");
Database.addText("de.eqItemWeaponScytheDescription", "Es wird erzÃ¤hlt, dass diese Sense dem Tod selbst gehÃ¶rt hÃ¤tte. Sie ist extrem schnell.");
Database.addText("de.eqItemHatMerchantHatName", "Hut des HÃ¤ndlers");
Database.addText("de.eqItemHatMerchantHatDescription", "Dieser Hut wurde dir vom Bonbon-VerkÃ¤ufer verkauft. Der Bonbon-VerkÃ¤ufer liebt Bonbons. Dieser Hut wird die Zahl deiner in Quests gefundenen Bonbons versiebenfachen!");
Database.addText("de.eqItemHatSorceressHatName", "Der Hexenhut");
Database.addText("de.eqItemHatSorceressHatDescription", "Dieser Hut wurde dir von der Hexe verkauft. Er wird deine ZaubersprÃ¼che und -trÃ¤nke verstÃ¤rken.");
Database.addText("de.eqItemHatOctopusKingCrownName", "Krone des OktopuskÃ¶nigs");
Database.addText("de.eqItemHatOctopusKingCrownDescription", "Du fÃ¼hlst dich selbstbewusster, wenn du diese Krone trÃ¤gst. Sie gibt dir keinerlei Vorteile in Quests, aber Selbstbewusstsein ist wichtig!");
Database.addText("de.eqItemHatOctopusKingCrownWithJaspersName", "Mit Jaspis besetzte Krone des OktopuskÃ¶nigs");
Database.addText("de.eqItemHatOctopusKingCrownWithJaspersDescription", "Diese verzauberte Krone wurde aus Gold gefertigt und mit Jaspisperlen besetzt. In Quests wirst du mit ihr mÃ¤chtige FeuerbÃ¤lle werfen kÃ¶nnen. AuÃŸerdem funkelt sie so schÃ¶n!");
Database.addText("de.eqItemHatOctopusKingCrownWithObsidianName", "Mit Obsidian besetzte Krone des OktopuskÃ¶nigs");
Database.addText("de.eqItemHatOctopusKingCrownWithObsidianDescription", "Diese verzauberte Krone ist aus Gold und Obsidian gefertigt. Sie ist wunderschÃ¶n. In Quests wird sie den OktopuskÃ¶nig beschwÃ¶ren, der fÃ¼r kurze Zeit an deiner Seite kÃ¤mpfen wird. Welch ein tentakulÃ¶ser VerbÃ¼ndeter!");
Database.addText("de.eqItemGlovesLeatherGlovesName", "Lederhandschuhe");
Database.addText("de.eqItemGlovesLeatherGlovesDescription", "Diese Handschuhe bringen eigentlich gar nichts. Aber sie sind immerhin weich und bequem!");
Database.addText("de.eqItemGlovesRedEnchantedGlovesName", "Rote verzauberte Handschuhe");
Database.addText("de.eqItemGlovesRedEnchantedGlovesDescription", "Diese verzauberten Handschuhe strahlen ein rÃ¶tliches Licht aus, wenn du dich im Dunklen befindest. In Quests werden sie hin und wieder kleinere FeuerbÃ¤lle gegen deine Gegner werfen, was definitiv hilfreich sein kann.");
Database.addText("de.eqItemGlovesPinkEnchantedGlovesName", "Pinkfarbene verzauberte Handschuhe");
Database.addText("de.eqItemGlovesPinkEnchantedGlovesDescription", "Diese verzauberten Handschuhe hinterlassen eine pinkfarbene Markierung auf allem, was du berÃ¼hrst. In Quests heilen sie dich durchgehend.");
Database.addText("de.eqItemBootsRocketBootsName", "Raketenstiefel");
Database.addText("de.eqItemBootsRocketBootsDescription", "Diese fantastischen Raketenstiefel erlauben es dir, in der Luft zu springen, sodass du im Prinzip fliegst.");
Database.addText("de.eqItemBootsLeatherBootsName", "Lederstiefel");
Database.addText("de.eqItemBootsLeatherBootsDescription", "Einfache Lederstiefel. Nichts besonderes.");
Database.addText("de.eqItemBootsBootsOfIntrospectionName", "Stiefel der SelbstprÃ¼fung");
Database.addText("de.eqItemBootsBootsOfIntrospectionDescription", "Nimm dir Zeit, atme durch und beruhige dich. Wenn du diese Stiefel trÃ¤gst, wirst du dich nicht bewegen, wÃ¤hrend du den Boden berÃ¼hrst.");
Database.addText("de.eqItemBodyArmoursLightweightBodyArmourName", "Leichter Brustharnisch");
Database.addText("de.eqItemBodyArmoursLightweightBodyArmourDescription", "Dieser Brustharnisch wird dir ein wenig Schutz bieten. Du wirst den Attacken deiner Feinde etwas einfacher standhalten kÃ¶nnen.");
Database.addText("de.eqItemBodyArmoursKnightBodyArmourName", "Brustpanzer des Ritters");
Database.addText("de.eqItemBodyArmoursKnightBodyArmourDescription", "Dieser starke Brustpanzer wird dich beschÃ¼tzen. Die Angriffe deiner Feinde werden dir weniger anhaben kÃ¶nnen.");
Database.addText("de.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Verzauberter Brustpanzer des Ritters");
Database.addText("de.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Diese RÃ¼stung ist etwas ganz Besonderes. Du wirst kaum noch Schaden nehmen, aber die StÃ¤rke deiner aktiven Waffe wird um die HÃ¤lfte reduziert.");
Database.addText("de.mapVillageForgeBuyWoodenSwordButton", "Ein hÃ¶lzernes Schwert kaufen (150 Bonbons)");
Database.addText("de.mapVillageForgeBuyWoodenSwordSpeech", "Danke fÃ¼r deinen Kauf! Dieses hÃ¶lzerne Schwert ist relativ schwach, aber fÃ¼r den Anfang reicht es.");
Database.addText("de.mapVillageForgeBuyIronAxeButton", "Eine eiserne Axt kaufen (400 Bonbons)");
Database.addText("de.mapVillageForgeBuyIronAxeSpeech", "Ich hoffe, dass dir diese eiseren Axt gefallen wird. Ich habe sie extra fÃ¼r dich geschliffen!");
Database.addText("de.mapVillageForgeBuyPolishedSilverSwordButton", "Ein poliertes Silberschwert kaufen (2 000 Bonbons)");
Database.addText("de.mapVillageForgeBuyPolishedSilverSwordSpeech", "Es hat mich viel Zeit gekostet, dieses Schwert herzustellen. Ich kann dir versichern, dass es sein Geld wert ist.");
Database.addText("de.mapVillageForgeBuyLightweightBodyArmourButton", "Einen leichten Brustharnisch kaufen (15 000 Bonbons)");
Database.addText("de.mapVillageForgeBuyLightweightBodyArmourSpeech", "Dieser Brustharnisch wird dir Schutz gegen deine Feinde bieten.");
Database.addText("de.mapVillageForgeBuyScytheButton", "Eine Sense kaufen (5 000 000 Bonbons)");
Database.addText("de.mapVillageForgeBuyScytheSpeech", "Es hat mich mehrere Monate gekostet, um diese Sense herzustellen. Sie ist ein wahres Kunstwerk. Sie ist wahrscheinlich die schnellste Waffe, die du jemals benutzen wirst. Viel GlÃ¼ck!");
Database.addText("de.wishingWellThrowFirstCandyButton", "Wirf ein Bonbon in den Brunnen");
Database.addText("de.wishingWellCandyIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen SÃ¼ÃŸes gewÃ¤hre ich dir WÃ¼nsche! Wenn du Bonbons in mich wirfst, werde ich deine Wunden heilen.");
Database.addText("de.wishingWellThrewCandiesSpeech", "Deine Wunden sind nun geheilt!");
Database.addText("de.wishingWellNoWoundSpeech", "Du hast keine Wunden, die geheilt werden mÃ¼ssen!");
Database.addText("de.wishingWellThrowFirstLollipopButton", "Wirf einen Lutscher in den Brunnen");
Database.addText("de.wishingWellLollipopIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen SÃ¼ÃŸes gewÃ¤hre ich dir WÃ¼nsche! Wenn du Lutscher in mich wirfst, werde ich sie dir in Bonbons umwandeln.");
Database.addText("de.wishingWellThrewLollipopsSpeech", "Deine Lutscher wurden in Bonbons verwandelt! Zwei Lutscher fÃ¼r ein Bonbon.");
Database.addText("de.wishingWellThrowChocolateBarButton", "Wirf einen Schokoriegel in den Brunnen");
Database.addText("de.wishingWellChocolateBarIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen SÃ¼ÃŸes gewÃ¤hre ich dir WÃ¼nsche! Ich liebe Schokoriegel. Das tue ich wirklich. FÃ¼r jeden Schokoriegel, den du in mich wirfst, inklusive diesem, wirst du mit einer magischen Verzauberung entlohnt werden.");
Database.addText("de.wishingWellThrewChocolateBarSpeech", "Welchen Gegenstand mÃ¶chtest du verzaubern?");
Database.addText("de.wishingWellThrowPainAuChocolatButton", "Wirf ein Schokocrossaint in den Brunnen");
Database.addText("de.wishingWellPainAuChocolatIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen SÃ¼ÃŸes gewÃ¤hre ich dir WÃ¼nsche! Wenn du ein Schokocrossaint in mich wirfst, erhÃ¤lst du ein ganz besonderes Geschenk. WÃ¤hle mit Bedacht.");
Database.addText("de.wishingWellThrewPainAuChocolatSpeech", "Danke fÃ¼r das Schokocrossaint! Du darfst nun dein Geschenk auswÃ¤hlen.");
Database.addText("de.wishingWellChooseGift", "WÃ¤hle dein Geschenk!");
Database.addText("de.wishingWellChooseGiftButton", "AuswÃ¤hlen");
Database.addText("de.wishingWellGiftDoneSpeech", "Fertig! Du hast jetzt ein neues Geschenk. Es wird auf dem Statusmonitor deines Inventars erscheinen.");
Database.addText("de.wishingWellNoPossibleEnchantment", "Keine Verzauberung mÃ¶glich");
Database.addText("de.wishingWellChooseEnchantment", "WÃ¤hle eine Verzauberung");
Database.addText("de.wishingWellEnchantButton", "Verzaubern");
Database.addText("de.wishingWellEnchantmentDoneSpeech", "Na bitte! Dein Gegenstand wurde verzaubert.");
Database.addText("de.pierLighthouseButton", "Mit dem Boot zum Leuchtturm fahren");
Database.addText("de.pierTheSeaButton", "Ins Meer springen");
Database.addText("de.lonelyHouseOpenBox", "Die Kiste Ã¶ffnen");
Database.addText("de.lonelyHouseShakeBox", "Die Kiste schÃ¼ttern");
Database.addText("de.lonelyHouseBreakLock", "Das Schloss zerbrechen");
Database.addText("de.lonelyHouseKickBox", "Die Kiste treten");
Database.addText("de.lonelyHouseAskTheBoxToOpenItself", "Die Kiste bitten, sich selbst zu Ã¶ffnen");
Database.addText("de.lonelyHouseLureTheBoxWithACandy", "Die Kiste mit SÃ¼ÃŸigkeiten anlocken");
Database.addText("de.lonelyHouseTakeTheBox", "Nimm die Kiste mit, du wirst vermutlich ohnehin einen SchlÃ¼ssel brauchen, um sie zu Ã¶ffnen.");
Database.addText("de.lonelyHouseOpenBoxResult", "Die Kiste ist verschlossen");
Database.addText("de.lonelyHouseShakeBoxResult", "Nichts passiert");
Database.addText("de.lonelyHouseBreakLockResult", "Das Schloss hÃ¤lt stand");
Database.addText("de.lonelyHouseKickBoxResult", "Ihr FuÃŸ schmerzt ein wenig, aber nichts passiert");
Database.addText("de.lonelyHouseAskTheBoxToOpenItselfResult", "...bist du dir darÃ¼ber im Klaren, dass du mit einer Kiste redest?");
Database.addText("de.lonelyHouseLureTheBoxWithACandyResult", "Es scheint die Kiste nicht zu interessieren");
Database.addText("de.lonelyHouseTakeTheBoxResult", "In dieser Candy Box ist wahrscheinlich etwas Interessantes.");
Database.addText("de.lollipopFarmConstructMill", "Eine MÃ¼hle bauen (10 000 Lutscher)");
Database.addText("de.lollipopFarmFeedMill", "Die MÃ¼hle auffÃ¼llen");
Database.addText("de.lollipopFarmCurrentCandiesProduction", "Aktuelle Bonbon-Produktion :");
Database.addText("de.lollipopFarmDigPond", "Einen TÃ¼mpel graben (100 000 Lutscher)");
Database.addText("de.lollipopFarmBuyLolligator", "Einen Lolligator kaufen (1 200 Bonbons)");
Database.addText("de.lollipopFarmLolligatorsConversionText", "Umwandlung Bonbons -> Lutscher aktiviert");
Database.addText("de.lighthouseAskButton", "Fragen");
Database.addText("de.lighthouseQuestionWho", "Wer bist du?");
Database.addText("de.lighthouseQuestionWhoSpeech", "Ich bin ein sehr alter Zyklop.");
Database.addText("de.lighthouseQuestionWhat", "Was tust du hier?");
Database.addText("de.lighthouseQuestionWhatSpeech", "Ich verbringe hier den ganzen Tag und warte darauf, dass ein Boot kommt. Es ist lange her, dass ich zum letzten Mal ein Boot gesehen habe. Aber ich muss hier bleiben und in das Meer blicken, weil ein Boot kommen kÃ¶nnte.");
Database.addText("de.lighthouseQuestionWhyEatCandies", "Weshalb wÃ¼rde ich Bonbons essen wollen?");
Database.addText("de.lighthouseQuestionWhyEatCandiesSpeech", "Weil sie gut fÃ¼r deine Gesundheit sind!");
Database.addText("de.lighthouseQuestionCandyBox", "Was ist eine Candy Box?");
Database.addText("de.lighthouseQuestionCandyBoxSpeech", "Das ist eine sehr alte Kiste, von der behauptet wird, sie enthielte alle SÃ¼ÃŸigkeiten dieser Welt. Der Legende nach solle derjenige, der sie Ã¶ffnen kÃ¶nnte, alle Bonbons bekommen, die er sich vorstellen kÃ¶nne.");
Database.addText("de.lighthouseQuestionDragon", "Der Drache hat mir gesagt, ich solle hier herkommen, wenn ich Bonbons will.");
Database.addText("de.lighthouseQuestionDragonSpeech", "Oh, ich verstehe... Na ja, ich kann dir die Bonbons nicht direkt anbieten, aber ich kann dir etwas geben, mit dem du letztendlich eine MENGE an Bonbons haben wirst. Ich muss dich zuvor lediglich einem Test unterziehen, weil ich nicht jedem das geben kann, was ich besitze. LÃ¶se dieses Puzzle und es wird dein sein.");
Database.addText("de.lighthouseFoundStone", "Herzlichen GlÃ¼ckwunsch! Du hast den Test bestanden und einen Stein gefunden. Er ist sehr wertvoll, aber du benÃ¶tigst drei weitere, um etwas damit anfangen zu kÃ¶nnen. Viel GlÃ¼ck bei der Suche!");
Database.addText("de.lighthouseFoundStoneAgain", "Gut gemacht, du hast das Puzzle erneut gelÃ¶st. Es scheint dir zu gefallen.");
Database.addText("de.saveLocalSaveTitle", "Browser-SpielstÃ¤nde");
Database.addText("de.saveLocalSaveWhy", "WÃ¤hle einen lokalen Spielstand, wenn du mit deinem jetzigen GerÃ¤t oder Browser weiterspielen mÃ¶chten.");
Database.addText("de.saveLocalSaveWarning0", "Dein Browser scheint HTML5 nicht zu unterstÃ¼tzen.");
Database.addText("de.saveLocalSaveWarning1", "Du solltest deinen Browser updaten, um UnterstÃ¼tzung fÃ¼r lokale SpielstÃ¤nde zu erhalten.");
Database.addText("de.saveLocalSaveChooseSlot", "WÃ¤hle einen Spielstand aus :");
Database.addText("de.saveLocalSaveAutosaveEnabled", "Automatisches Speichern aktiviert");
Database.addText("de.saveLocalSaveChooseWhatToDo", "WÃ¤hle aus, was du tun mÃ¶chtest :");
Database.addText("de.saveLocalSaveSaveButton", "Speichern");
Database.addText("de.saveLocalSaveAutosaveButton", "Alle 10 Minuten speichern");
Database.addText("de.saveLocalSaveDisableAutosaveButton", "Automatisches Speichern deaktivieren");
Database.addText("de.saveFileSaveTitle", "Text-SpielstÃ¤nde");
Database.addText("de.saveFileSaveWhy0", "Benutze diese Funktion, wenn :");
Database.addText("de.saveFileSaveWhy1", "Du auf einem anderen GerÃ¤t oder Browser weiterspielen mÃ¶chten");
Database.addText("de.saveFileSaveWhy2", "Du deinen Spielstand mit jemand anderem teilen mÃ¶chten");
Database.addText("de.saveFileSaveWhy3", "Du aus irgendeinem Grund deinen Browser-Cache leeren mÃ¶chten");
Database.addText("de.saveFileSaveWhy4", "(was deine lokalen SpielstÃ¤nde lÃ¶schen wird)");
Database.addText("de.saveFileSaveButton", "Aktuellen Spielstand als Text generieren");
Database.addText("de.saveFileSaveWarning", "Kopiere diesen Text nun irgendwohin! (beispielsweise in eine Datei)");
Database.addText("de.saveLocalLoadTitle", "Browser-SpielstÃ¤nde laden");
Database.addText("de.saveLocalLoadYouCan", "Mithilfe der folgenden Links kannst du einen lokalen Spielstand laden :");
Database.addText("de.saveLocalLoadThanksTo", "Dank HTML5-Magie ist es mÃ¶glich, diese Links auch offline zu benutzen.");
Database.addText("de.saveFileLoadTitle", "Text-SpielstÃ¤nde laden");
Database.addText("de.saveFileLoadPaste", "Kopiere deinen Text-Spielstand in das untere Feld und klicke dann auf den \"Laden\"-Button");
Database.addText("de.saveFileLoadButton", "Laden");
Database.addText("de.mountainsText0", "Du hast etwas in den Bergen erblickt!");
Database.addText("de.mountainsText1", "Das sieht interessant aus. Vielleicht kÃ¶nnte es hilfreich sein.");
Database.addText("de.mountainsTextButton", "Die Berge besteigen, um den Gegenstand zu erlangen");
Database.addText("de.mountainsTextAfter", "Du hast einen Springstock gefunden! Er wurde deinem Inventar hinzugefÃ¼gt.");
Database.addText("de.secondHouseIntroSpeech", "Hallo, ich bin der Bonbon-VerkÃ¤ufer. FÃ¼r Bonbons wÃ¼rde ich alles tun. Was brauchst du?");
Database.addText("de.secondHouseLollipop1Speech", "Dies ist ein Lutscher mit Zitronengeschmack. Mein Lieblingslutscher! Er kostet 60 Bonbons, aber er ist es wert.");
Database.addText("de.secondHouseLollipop2Speech", "Dies ist ein Lutscher mit Erdbeergeschmack. Er schmeckt gut. Ich mag seine rote Farbe. Nur 60 Bonbons!");
Database.addText("de.secondHouseLollipop3Speech", "Dies ist ein Lutscher mit KÃ¼rbisgeschmack. Ich wette, einen solchen hast du noch nie probiert! 60 Bonbons und es ist deiner.");
Database.addText("de.secondHouseLollipopButtonText", "Diesen Lutscher kaufen (60 Bonbons)");
Database.addText("de.secondHouseMerchantHatSpeech", "Ich kÃ¶nnte dir meinen Hut verkaufen, aber es ist sehr wertvoll, weiÃŸt du... Du wirst mir eine Menge Bonbons dafÃ¼r geben mÃ¼ssen. Sagen wir 1 Million Bonbons. Das erscheint fair, nicht wahr?");
Database.addText("de.secondHouseMerchantHatButtonText", "Hut des HÃ¤ndlers kaufen (1 000 000 Bonbons)");
Database.addText("de.secondHouseTimeRingSpeech", "Dies ist ein Zeitring. Er ist irgendwie magisch. Er erlaubt es dir, die Zeit zu verlangsamen, wenn du dich in Gefahr befindest.");
Database.addText("de.secondHouseTimeRingButtonText", "Zeitring kaufen (500 Bonbons)");
Database.addText("de.secondHouseLeatherGlovesSpeech", "Diese Handschuhe wurden aus Kamelleder gefertigt, sie haben eine hohe QualitÃ¤t. Ich habe viele von ihnen auf Lager, deshalb sind sie so gÃ¼nstig : nur 300 Bonbons!");
Database.addText("de.secondHouseLeatherBootsButtonText", "Lederstiefel kaufen (300 Bonbons)");
Database.addText("de.secondHouseLeatherBootsSpeech", "Diese hochwertigen Stiefel wurden aus Kamelleder gefertigt und werden deine FÃ¼ÃŸe warmhalten.");
Database.addText("de.secondHouseLeatherGlovesButtonText", "Lederhandschuhe kaufen (300 Bonbons)");
Database.addText("de.secondHouseChocolateBarSpeech", "Dies ist ein Schokoriegel. Ich weiÃŸ nicht, wofÃ¼r er benutzt wird, aber er scheint relativ selten zu sein, was auch den Preis erklÃ¤rt. 800 Bonbons und er ist deiner.");
Database.addText("de.secondHouseChocolateBarButtonText", "Schokoriegel kaufen (800 candies)");
Database.addText("de.outsideTheHoleButton", "Jump in this big hole in the ground");
Database.addText("de.theCaveExitText0", "Du hast endlich den Ausgang der HÃ¶hle erreicht.");
Database.addText("de.theCaveExitText1", "DrauÃŸen kannst du einen dichten Wald erkennen.");
Database.addText("de.theCaveExitButtonText", "HÃ¶hle verlassen");
Database.addText("de.theCaveFirstSentenceWentStraight", "Du bist geradeaus gegangen.");
Database.addText("de.theCaveFirstSentenceWentLeft", "Du hast den linken Weg genommen.");
Database.addText("de.theCaveFirstSentenceWentRight", "Du hast den rechten Weg genommen.");
Database.addText("de.theCaveFirstSentenceYouAre", "Du bist in einer HÃ¶hle. Vor dir erstrecken sich drei Wege.");
Database.addText("de.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Du hast einen merkwÃ¼rdigen Gegenstand vor dir auf dem Boden erspÃ¤ht.");
Database.addText("de.theCavePattern_ChocolateBarNowSeeChocolateBar", "Du hast einen Schokoriegel vor dir entdeckt.");
Database.addText("de.theCavePattern_TreasureMapSentence", "Du siehst kleine Steine, die auf dem Boden ungewÃ¶hnlich platziert wurden.");
Database.addText("de.theCavePattern_MonkeyWizardSentence", "Du stÃ¶ÃŸt zufÃ¤llig auf einen nackten Affenmagier.");
Database.addText("de.theCavePattern_MonkeyWizardButton", "Fordere ihn heraus");
Database.addText("de.theCavePattern_OctopusKingSentence", "Du stÃ¶ÃŸt zufÃ¤llig auf den OktopuskÃ¶nig. Er wirkt ekelerregend.");
Database.addText("de.theCavePattern_OctopusKingButton", "Fordere ihn heraus");
Database.addText("de.fortressInsideText0", "Du bist in der WÃ¼stenfestung");
Database.addText("de.fortressInsideText1", "Du kannst zwischen drei TÃ¼ren wÃ¤hlen.");
Database.addText("de.fortressInsideText2", "Jede von ihnen fÃ¼hrt in einen groÃŸen Raum mit einem Schatz am Ende.");
Database.addText("de.fortressInsideEnterRoom1", "Ersten Raum betreten");
Database.addText("de.fortressInsideEnterRoom2", "Zweiten Raum betreten");
Database.addText("de.fortressInsideEnterRoom3", "Dritten Raum betreten");
Database.addText("de.treasureButtonDig", "Graben");
Database.addText("de.treasureButtonYouFound", "Du hast drei Schokoriegel gefunden!");
Database.addText("de.sorceressHutHello", "Hallo, ich bin die Hexe. Ich kÃ¶nnte dir ein oder zwei Dinge Ã¼ber die Magie verraten. AuÃŸerdem kann ich dir interessante GegenstÃ¤nde geben oder ZaubersprÃ¼che fÃ¼r dich sprechen. Aber alles hat seinen Preis! Und dieser Preis werden Lutscher sein. Viele von ihnen.");
Database.addText("de.sorceressHutClickedGrimoire", "Dieses Zauberbuch ist fÃ¼r blutige AnfÃ¤nger. Wenn du es in Quests aktiv hast, wirst du eine Reihe einfacher, aber nÃ¼tzlicher SprÃ¼che benutzen kÃ¶nnen. Du wirst es brauchen! Nur 5 000 Lutscher.");
Database.addText("de.sorceressHutBuyGrimoireButton", "Magie fÃ¼r Memmen kaufen (5 000 Lutscher)");
Database.addText("de.sorceressHutBuyGrimoireSpeech", "Danke fÃ¼r den Kauf! Du wirst drei SprÃ¼che mit diesem Zauberbuch sprechen kÃ¶nnen. Viel GlÃ¼ck!");
Database.addText("de.sorceressHutClickedGrimoire2", "Dieses Zauberbuch richtet sich an Fortgeschrittene. Wenn du es in Quests aktiv hast, wirst du zwei SprÃ¼che benutzen kÃ¶nnen. Ich selbst habe es geschrieben, was nicht einfach war. 20 000 Lutscher sind ein fairer Preis.");
Database.addText("de.sorceressHutBuyGrimoire2Button", "Zaubern fÃ¼r Fortgeschrittene kaufen (20 000 Lutscher)");
Database.addText("de.sorceressHutBuyGrimoire2Speech", "Danke fÃ¼r den Kauf! Du wirst zwei SprÃ¼che mit diesem Zauberbuch sprechen kÃ¶nnen. WÃ¤hle sie mit Bedacht!");
Database.addText("de.sorceressHutClickedCauldron", "Dies ist mein Kessel. Er erlaubt es mir, magische ZaubertrÃ¤nke zu brauen. Ich kÃ¶nnte ihn dir verkaufen, aber er ist sehr wertvoll... er wird dich 100 000 Lutscher kosten.");
Database.addText("de.sorceressHutBuyCauldronButton", "Kessel kaufen (100 000 Lutscher)");
Database.addText("de.sorceressHutBuyCauldronSpeech", "Danke vielmals! 100 000 Lutscher fÃ¼r mich! Ich habe dir auÃŸerdem eine Anleitung beigelegt. Sie wird nÃ¼tzlich sein.");
Database.addText("de.sorceressHutClickedHat", "Ich habe in der Tat einen schÃ¶nen Hut. Aber ich kann ihn dir nicht verkaufen, dafÃ¼r ist er vieeeel zu wertvoll. Wirklich, ich kann nicht. Leg es nicht darauf an. Nein. Nein nein nein, ich sollte das nicht tun. Ach na schÃ¶n, ich werde ihn dir verkaufen, aber fÃ¼r 1 000 000 000 Lutscher. Das wirst du vermutlich ohnehin nicht bezahlen kÃ¶nnen.");
Database.addText("de.sorceressHutBuyHatButton", "Hut kaufen (1 000 000 000 Lutscher)");
Database.addText("de.sorceressHutBuyHatSpeech", "Eine Milliarde Lutscher fÃ¼r miiiich! Ich habe den Hut zwar nicht mehr, aber dafÃ¼r eine Milliarde Lutscher, wow! ... Das war es wert.");
Database.addText("de.cauldronPreviousPageButton", "Vorherige Seite");
Database.addText("de.cauldronNextPageButton", "NÃ¤chste Seite");
Database.addText("de.cauldronWhatYouWantToPut", "In den Kessel geben :");
Database.addText("de.cauldronWhatIsIn", "Inhalt des Kessels :");
Database.addText("de.cauldronWhatYouCanDo", "Aktionen :");
Database.addText("de.castleBigRoomComment", "Ein groÃŸer Raum");
Database.addText("de.castleARoomComment", "Ein Raum");
Database.addText("de.castleADarkRoomComment", "Ein dunkler Raum");
Database.addText("de.castleCastleEntranceComment", "Der Schlosseingang");
Database.addText("de.castleTowerEntranceComment", "Der Turmeingang");
Database.addText("de.castleNougatMonsterComment", "Das riesige Nougat-Monster angreifen");
Database.addText("de.castleGuardsComment", "Die WÃ¤chter angreifen");
Database.addText("de.castleStairsComment", "Treppen");
Database.addText("de.buttonBackToTheCastle", "ZurÃ¼ck ins Schloss");
Database.addText("de.castleBigRoomHovenSpeechSad", "Hallo! Ich bin ein sehr alter Brotofen! FÃ¼r gewÃ¶hnlich habe ich Tonnen leckerer Teigwaren gebacken, aber es benutzt mich keiner mehr. Vielleicht... vielleicht kÃ¶nntest du mir helfen? Gib mir einfach einige deiner SÃ¼ÃŸigkeiten. Keine Sorge, du wirst es nicht bereuen. Du kannst mir vertrauen.");
Database.addText("de.castleBigRoomHovenNotEnough", "Oh... du hast nicht genÃ¼gend Bonbons, ich kann nichts fÃ¼r dich tun. Ich bin einfach nutzlos. Den nutzlosen Brotofen, so solltest du mich nennen.");
Database.addText("de.castleBigRoomHovenSpeechMadePainAuChocolat", "Juhu! Danke vielmals! Ich habe 100 Bonbons und einen Schokoriegel benutzt, um fÃ¼r dich... ein Schokocroissant gebacken! Das ist mein LieblingsgebÃ¤ck. Ich hoffe, dass auch du es magst.");
Database.addText("de.castleBigRoomHovenSpeechHappy", "Hey! Wenn ich dir weiteres GebÃ¤ck backen soll, sag einfach Bescheid. Ich wÃ¼rde dir gerne helfen.");
Database.addText("de.castleBigRoomHovenSpeechHappyNotEnough", "Oh, leider hast du nicht genÃ¼gend SÃ¼ÃŸigkeiten. Du brauchst 100 Bonbons und einen Schokoriegel. Komm wieder, wenn du das hast.");
Database.addText("de.castleBigRoomHovenLetHovenTakeButton", "Gib dem Ofen alle SÃ¼ÃŸigkeiten, die er verlangt");
Database.addText("de.castleBigRoomHovenThanks", "Danke, Ofen!");
Database.addText("de.dragonStopTickling", "Hey, du! HÃ¶r bitte auf mich zu kitzeln.");
Database.addText("de.dragonStopTicklingButton", "Ã„h, Ã¶hm, Entschuldigung. Ich dachte, ich solle dich angreifen.");
Database.addText("de.dragonTalking", "Ich bin der Drache und dies ist mein Schloss. Du musstest sehr tapfer sein, um es Ã¼berhaupt zu betreten. Jemandem wie dir wÃ¼rde ich gerne helfen. Nach was suchst du?");
Database.addText("de.dragonTalkingChallengeButton", "Herausforderung");
Database.addText("de.dragonTalkingFameButton", "Ruhm");
Database.addText("de.dragonTalkingCandiesButton", "Bonbons");
Database.addText("de.dragonTalkingChallengeSpeech", "Oh, du willst also eine Herausforderung? Dann solltest du die HÃ¶lle besuchen, es ist nÃ¤mlich bekannt, dass der Teufel ein harter Gegner ist. Spring auf meinen RÃ¼cken und ich werde dich dorthin bringen!");
Database.addText("de.dragonTalkingFameSpeech", "Der einfachste Weg, um berÃ¼hmt zu werden, ist es, dem Entwickler selbst entgegenzutreten. Aber gib Acht, das wird nicht einfach sein.");
Database.addText("de.dragonTalkingCandiesSpeech", "Letztendlich sind SÃ¼ÃŸigkeiten das, was wir alle wollen, nicht wahr? Ich denke, ein Freund von mir kÃ¶nnte dir damit helfen. Du wirst ihn leicht erkennen, er hat nÃ¤mlich nur ein Auge. Sag ihm einfach, dass du mich kennst.");
Database.addText("de.dragonTalkingChallengeAnswer", "Auf geht's!");
Database.addText("de.dragonTalkingFameAnswer", "Ich bin bereit.");
Database.addText("de.dragonTalkingCandiesAnswer", "Okay, danke!");
Database.addText("de.buttonBackToCastle", "ZurÃ¼ck ins Schloss");
Database.addText("de.talkingCandySpeechNoBox", "Hallo, ich bin das sprechende Bonbon. Du hast das Spiel fast gewonnen. Du musst nur noch die Candy Box finden. Sie befindet sich in einem Haus auÃŸerhalb des Dorfes. Dies ist der letzte Schritt!");
Database.addText("de.talkingCandySpeech1", "Hallo! Ich bin das sprechende Bonbon. Herzlichen GlÃ¼ckwunsch, du hast das Spiel gewonnen! Ich werde die Candy Box fÃ¼r dich Ã¶ffnen, dies ist deine Belohnung. Soll ich fortfahren?");
Database.addText("de.talkingCandySpeech2", "Fertig! Du steht nun fÃ¼r dich offen. Ich hoffe, dass dir das Spiel gefallen hat :)");
Database.addText("de.talkingCandyButton", "Ja!!");
Database.addText("de.lighthousePuzzleResetButton", "ZurÃ¼cksetzen");
Database.addText("id.mapVillageComment", "Desa");
Database.addText("id.mapFortressComment", "Benteng gurun");
Database.addText("id.mapATreeComment", "Sebuah pohon");
Database.addText("id.mapTheDesertComment", "Gurun pasir");
Database.addText("id.mapWishingWellComment", "Sumur permohonan");
Database.addText("id.mapLonelyHouseComment", "Rumah yang terpencil");
Database.addText("id.mapForestComment", "Hutan");
Database.addText("id.mapCastleEntranceComment", "Pintu masuk istana");
Database.addText("id.mapCastleComment", "Istana");
Database.addText("id.mapDragonComment", "Sang naga");
Database.addText("id.candyBoxEatCandiesButton", "Makan semua permen");
Database.addText("id.candyBoxThrowCandiesButton", "Lempar 10 permen ke tanah");
Database.addText("id.mapVillageAHouseComment", "Sebuah rumah");
Database.addText("id.mapVillageForgeComment", "Bengkel pandai besi");
Database.addText("id.buttonBackToTheMap", "Kembali ke peta");
Database.addText("id.mapSorceressHutComment", "Pondok penyihir wanita");
Database.addText("id.buttonBackToTheVillage", "Kembali ke desa");
Database.addText("id.mapATreeIntroductionSpeech", "Halo, saya adalah si tupai. Saya dapat memberikan kamu permen, dan banyak benda. Saya tau seberapa banyak kamu menyukai permen. Tetapi saya merasa kesepian di hutan ini.");
Database.addText("id.mapATreeIntroductionButton", "Bagaimana saya bisa membantumu?");
Database.addText("id.mapATreeFirstQuestion", "Saya akan memberimu pertanyaan. Jika kamu menjawab dengan benar, penganan termanis akan menjadi milikmu! Pertanyaan pertama : apakah kamu benar-benar menyukai permen? (jawab dalam Bahasa Inggris)");
Database.addText("id.mapATreeSecondQuestion", "Betul! 20 permen ini untukmu. Sekarang lengkapi urutan huruf ini dan kamu akan mendapatkan hadiah baru : S, E, I, D, N, A, ?");
Database.addText("id.mapATreeThirdQuestion", "Candies (permen)! 100 permen ini untukmu. Pertanyaan selanjutnya : berapa banyak permen yang dimiliki oleh orang yang \"paling permen\"?");
Database.addText("id.mapATreeFourthQuestion", "500 permen ini untukmu! hadiah selanjutnya seharusnya menjadi lebih menarik...  Ini teka-tekinya : Di sebuah hutan kuno tumbuhlah sebuah pohon yang sangat tua, diamana binatang-binatang paling pintar di dunia ini tinggal. Katanya pohon ini memiliki 60 akar, 360 cabang dan 2160 daun. Berapa banyak tanda yang dapat kamu temukan di batangnya?");
Database.addText("id.mapATreeFifthQuestion", "Selamat! Memang, saya sedang berbicara tentang pohonku. 3 lollipop ini untukmu. Gunakan emreka sebaik-baiknya! Teka-teki selanjutnya, dengar dengan teliti : Dibawah bulan purnama, Saya melempar sebuah topi kuning kedalam laut merah. Apa yang terjadi dengan topi kuning?");
Database.addText("id.mapATreeTicTacToeIntro", "Terjawab dengan baik! Pertanyaan tadi tidak terlalu susah. 3 batang coklat ini untukmu! Untuk hadiah selanjutnya, kita akan merubah aturannya sedikit. Kamu akan bermain sebuah permainan dengan saya! Siap?");
Database.addText("id.mapATreeTicTacToeIntroButton", "Aku siap!");
Database.addText("id.mapATreeTicTacToeLetsPlay", "Permainannya adalah Tic-Tac-Toe. Kita bermain di papan permainan berukuran 3 kali 3. Kamu akan menggunakan tanda X sementara saya akan menggunakan tanda O. Kita menaruh tanda kita secara bergiliran, dan tujuannya adalah menaruh 3 tanda secara berderet. Saya akan membiarkanmu mulai duluan!");
Database.addText("id.mapATreeTicTacToeNobodyWins", "Papannya sudah penuh dan kita berdua gagal mendapatkan tiga tanda secara berderet : tidak ada yang menang! Apakah kamu ingin mencoba lagi?");
Database.addText("id.mapATreeTicTacToeYouLose", "Saya mendapat tiga tanda secara berderet! Saya menang. Apakah kamu ingin mencoba lagi?");
Database.addText("id.mapATreeTicTacToeTryAgainButton", "Ya, aku mau!");
Database.addText("id.mapATreeTicTacToeYouWin", "Wow, itu adalah langkah yang tidak terduga. Tapi kamu mendapat tiga tanda secara berderet, Saya tidak dapat membantah. Kamu menang! Ambil kunci ini! Kunci ini membuka salah satu rumah di desa yang berada di bawah hutan.");
Database.addText("id.mapATreeTicTacToeAnymoreSweet", "Terimakasih tupai! Ada tantangan yang lain?");
Database.addText("id.mapATreeNoMoreChallenge", "Sayangnya tidak, Saya tidak punya tantangan lagi untukmu... Bermain denganmu itu sangat menyenangkan, terimakasih atas itu!");
Database.addText("id.buttonExitQuestKeeping", "Keluar dari pencarian (quest) (dan simpan apa yang kamu dapatkan)");
Database.addText("id.buttonExitQuestNoKeeping", "Keluar dari pencarian (quest) (kamu tidak akan menyimpan apa yang kamu dapat)");
Database.addText("id.buttonExitQuestNoKeepingBecauseLose", "Keluar dari pencarian (quest) (kamu tidak akan menyimpan apa yang kamu dapat karena kamu gagal)");
Database.addText("id.mapVillageLockedHouseComment", "Sebuah rumah yang terkunci");
Database.addText("id.mapVillageForgeIntroductionSpeech", "Hai! Saya adalah pandai besi. Saya menjual berbagai macam senjata dan peralatan untukmu.");
Database.addText("id.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hai! Saya adalah pandai besi. Sayang, Saya sudah tidak mempunyai apapun untuk dijual. Datang lagi nanti, mungkin?");
Database.addText("id.mapVillageFifthHouseNoWeaponSpeech", "Halo. Gudang bawah tanahku penuh dengan tikus, Saya butuh menyingkirkan mereka... hanya saja seseorang dengan senjata dapat membantu saya...");
Database.addText("id.mapVillageFifthHouseWeaponSpeech", "Hei kamu! Saya melihat kamu membawa sebuah senjata! Jika kamu membunuh tikus-tikus yang mengganggu gudang bawah tanahku, Saya kan memberim uhadiah!");
Database.addText("id.mapVillageFifthHouseAgree", "Ayo pergi!");
Database.addText("id.mapVillageFifthHouseCellarDone", "Terimakasih sudah menyingkirkan mereka! Benda yang sangat berharga ini adalah hadiahnya : sebuah peta dunia. Saya rasa kamu akan menggunakannya lebih banyak dari saya.");
Database.addText("id.mapVillageTheShopComment", "Toko");
Database.addText("id.mapBridgeComment", "Jembatan");
Database.addText("id.mapFarmComment", "Ladang lollipop");
Database.addText("id.mapCaveEntranceComment", "Pintu masuk gua");
Database.addText("id.mapLighthouseComment", "Mercusuar");
Database.addText("id.mapPierComment", "Dermaga");
Database.addText("id.mapTheHoleComment", "Lubang");
Database.addText("id.candyBoxRequestStatusBarUnlocked", "Ajukan fitur baru kepada developer (30 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedCfg", "Ajukan satu lagi (5 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedSave", "Ajukan satu kali lagi (5 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedHealthBar", "Ajukan untuk sesuatu yang lebih menyenangkan (5 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedMap", "Permintaan terakhir! Untuk yang ini permennya harus bermanfaat. (10 candies)");
Database.addText("id.candyBoxRequestStatusBarUnlockedComment", "Kamu mendapatkan status bar! (diatas) #This one is a bit difficult to translate :(");
Database.addText("id.candyBoxRequestStatusBarUnlockedCfgComment1", "Kamu sekarang mempunyai akses ke tab konfigurasi.");
Database.addText("id.candyBoxRequestStatusBarUnlockedCfgComment2", "Kamu dapat mengubah bahasanya, jika kamu mau.");
Database.addText("id.candyBoxRequestStatusBarUnlockedSaveComment", "Tab \"save\" yang liar muncul!");
Database.addText("id.candyBoxRequestStatusBarUnlockedHealthBarComment", "100 poin nyawa ini untukmu. Mereka akan menjadi berguna.");
Database.addText("id.cfgChooseLanguage", "Pilih bahasa :");
Database.addText("id.cfgInvertColors", "Balikkan warna?");
Database.addText("id.gridItemMainMapName", "Peta");
Database.addText("id.gridItemMainMapDescription", "Peta dunia");
Database.addText("id.gridItemPogoStickName", "Tongkat pogo");
Database.addText("id.gridItemPogoStickDescription", "Benda ini membuat kamu dapat melompat didalam pencarian (quest)!");
Database.addText("id.gridItemTimeRingName", "Sebuah cincin waktu");
Database.addText("id.gridItemTimeRingDescription", "Benda ini memberikan kamu kemampuan baru di dalam pencarian (quest) : kamu dapat memperlambat waktu. Jika semuanya terlalu cepat bagi kamu, gunakan cincin waktumu!");
Database.addText("id.gridItemThirdHouseKeyName", "Kunci rumah ketiga");
Database.addText("id.gridItemThirdHouseKeyDescription", "Kunci ini memungkinkan kamu untuk masuk ke rumah ketiga di desa.");
Database.addText("id.gridItemFeatherName", "Bulu burung gurun");
Database.addText("id.gridItemFeatherDescription", "Bulu ajaib ini memungkinkan kamu untuk melompat lebih tinggi ketika kamu menggunakan tongkat pogo!");
Database.addText("id.gridItemFeatherDescriptionNoPogoStick", "Untuk alasan yang tidak diketahui, kamu merasa bulu ini dapat menjadi lebih berguna jika kamu punya tongkat pogo...");
Database.addText("id.gridItemSpongeName", "Spon ajaib");
Database.addText("id.gridItemSpongeDescription", "Spon ajaib ini memungkinkan kamu untuk memeras dirimu seperti spon, oleh karena itu, ukuranmu menjadi lebih kecil.");
Database.addText("id.gridItemFortressKeyName", "Kunci benteng gurun");
Database.addText("id.gridItemFortressKeyDescription", "Kunci ini memungkinkan kamu untuk masuk ke benteng yang sangat kuno yang terletak diatas padang pasir. Siapa tahu apa yang dapat kamu dapatkan disana?");
Database.addText("id.gridItemHeartPendantName", "Sebuah liontin hati");
Database.addText("id.gridItemHeartPendantDescription", "Liontin hati ini akan menambah poin nyawamu selama kamu membiarkannya di dekat lehermu.");
Database.addText("id.gridItemHeartPlugName", "Penyumbat hati");
Database.addText("id.gridItemHeartPlugDescription", "Penyumbat hati ini, dibuat dengan besi, kaki laba-laba, dan sebuah \"cairan hati\" spesial yang tersegel di tengahnya, akan menambah poin nyawamu sebanyak 20 persen!");
Database.addText("id.gridItemBeginnersGrimoireName", "Buku mantera tingkat pemula");
Database.addText("id.gridItemBeginnersGrimoireDescription", "Buku mantera ini memberimu 3 mantera, cukup mudah untuk dilemparkan. Buku ini betul-betul dibuat untuk pemula. Kamu akan bisa menggunakan mantera hujan asam (banyak tetesan cairan asam akan jatuh ke musuhmu), mantera bola api (bola raksasa ajaib yang terbuat dari api yang akan terbang menuju musuhmu), dan mantera 'teleport' (yang akan men-'teleport'mu ke tempat yang tak terduga).");
Database.addText("id.gridItemAdvancedGrimoireName", "Buku mantera tingkat lanjut");
Database.addText("id.gridItemAdvancedGrimoireDescription", "Buku mantera tingkat lanjut ini memberimu dua mantera : mantera penghapus sihir dan mantera perisai duri. Mantera yang pertama akan menghapus semua sihir dari suatu pencarian (quest) pada titik tertentu, termasuk mantera mantera yang kamu keluarkan dan sihir dari musuh. Yang kedua akan membuat perisai dari duri melayang yang akan memberikan serangan (damage) terhadap musuhmu jika disentuh.");
Database.addText("id.gridItemBlackMagicGrimoireName", "Buku mantera ilmu hitam");
Database.addText("id.gridItemBlackMagicGrimoireDescription", "Kamu mendapatkan buku mantera ini di gua, buku mantera ini sangat susah untuk didapatkan, dan itu karena sebuah alasan. Buku mantera ini memberimu dua mantera ilmu hitam yang kuat. Yang pertama akan membuat sebuah tembok raksasa di depanmu yang terbuat dari obsidian, yang sangat berguna untuk memperlambat musuhmu. Yang kedua akan memanggil gerombolan setan menyerang semua dalam pencarian (quest), termasuk kamu. Berhati-hatilah dengan yang satu ini.");
Database.addText("id.gridItemUnicornHornName", "Tanduk unicorn");
Database.addText("id.gridItemUnicornHornDescription", "Tanduk ajaib ini punya sebuah unicorn. Kekuatan menyembuhkan yang kuatnya akan sangat membantumu. Kamu mendengar kalau unicorn ini bernama Charlie.");
Database.addText("id.gridItemXinopherydonClawName", "Cakar xinopherydon");
Database.addText("id.gridItemXinopherydonClawDescription", "Cakar ini milik xinopherydon, binatang kuno berkepala dua yang dipercaya semua orang ada. Cakar ini membuat senjata yang kamu gunakan lebih kuat sebanyak dua kali lipat.");
Database.addText("id.gridItemPitchforkName", "Sebuah garpu rumput");
Database.addText("id.gridItemPitchforkDescription", "Garpu rumput spesial ini memungkinkan kamu untuk melonggarkan tanah without turning it over, therefore preserving below-ground soil ecosystems. Garpu rumput ini akan membuat produksi ladang lollipopmu bertambah sebanyak 3 kali lipat.");
Database.addText("id.gridItemShellPowderName", "Bubuk kerang");
Database.addText("id.gridItemShellPowderDescription", "Bubuk kerang biasa digunakan untuk petani untuk meningkatkan kecepatan pertumbuhan dari lollipop mereka. Bubuk ini akan membuat produksi ladang lollipopmu bertambah sebanyak 3 kali lipat!");
Database.addText("id.gridItemPName", "Batu P");
Database.addText("id.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("id.gridItemLName", "Batu L");
Database.addText("id.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("id.gridItemAName", "Batu A");
Database.addText("id.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("id.gridItemYName", "Batu Y");
Database.addText("id.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("id.gridItemRedSharkFinName", "Sirip ikan hiu merah ajaib");
Database.addText("id.gridItemRedSharkFinDescription", "Sirip ajaib ini akan menambah serangan (damage) dari mantera bola api dengan sangat. Akhirnya bola api ini menjadi berguna.");
Database.addText("id.gridItemGreenSharkFinName", "Sirip ikan hiu hijau ajaib");
Database.addText("id.gridItemGreenSharkFinDescription", "Sirip ajaib ini akan membawa kekuatan alam dari ke ladang lollipopmu! Produksimu akan bertambah 5 kali lipat.");
Database.addText("id.gridItemPurpleSharkFinName", "Sirip ikan hiu ungu ajaib");
Database.addText("id.gridItemPurpleSharkFinDescription", "Sirip ajaib ini akan memberimu sihir ilmu hitam baru. Kamu hanya dapat menggunakannya satu kali dalam setiap pencarian (quest). Sangat berhati-hatilah dengan yang satu ini");
Database.addText("id.gridItemTalkingCandyName", "Permen yang bisa berbicara");
Database.addText("id.gridItemTalkingCandyDescription", "Permen yang bisa berbicara ini muncul setelah kamu meletakkan keempat batu di puncak menara istana. Dia mungkin dapat membantumu untuk membuka candy box...");
Database.addText("id.inventorySpecialNothingEqItem", "Tidak ada");
Database.addText("id.eqItemWeaponWoodenSwordName", "Pedang kayu");
Database.addText("id.eqItemWeaponWoodenSwordDescription", "Sebuah pedang sederhana terbuat dari kayu");
Database.addText("id.eqItemWeaponIronAxeName", "Kapak besi");
Database.addText("id.eqItemWeaponIronAxeDescription", "Sebuah kapak besi sederhana. Diitajamkan dengan baik. Lebih kuat dari pedang kayu.");
Database.addText("id.eqItemWeaponPolishedSilverSwordName", "Pedang perak yang dipoles");
Database.addText("id.eqItemWeaponPolishedSilverSwordDescription", "Sebuah pedang yang kuat, ditutupi oleh duri.");
Database.addText("id.eqItemWeaponTrollBludgeonName", "Gada sang troll");
Database.addText("id.eqItemWeaponTrollBludgeonDescription", "Kamu mengambil gada ini dari sang troll yang menjaga jembatan ini. Gada ini lambat, tapi menghantam musuhmu dengan cukup efektif.");
Database.addText("id.eqItemWeaponTribalSpearName", "Sebuah tombak kesukuan");
Database.addText("id.eqItemWeaponTribalSpearDescription", "Kamu menemukan tombak kesukuan ini di mayat seorang prajurit suku yang tersesat di dalam sebuah lubang besar di tanah. Tombak ini agak susah untuk digunakan pertama kali, tapi sekali kamu sudah terbiasa, ini adalah senjata yang bagus.");
Database.addText("id.eqItemWeaponSummoningTribalSpearName", "Sebuah tombak kesukuan yang memanggil");
Database.addText("id.eqItemWeaponSummoningTribalSpearDescription", "Tombak kesukuan ajaib ini, selain lebih kuat sedikit dari tombak kesukuan yang biasa, akan memanggil prajurit suku dengan sangat sering yang akan membantumu dalam pencarian (quest).");
Database.addText("id.eqItemWeaponMonkeyWizardStaffName", "Tongkat monyet penyihir");
Database.addText("id.eqItemWeaponMonkeyWizardStaffDescription", "Tongkat ini milik monyet penyihir tak berbusana yang kamu temukan di gua. Tongkat ini akan melemparkan mantera dengan sendirinya, dengan musuhmu sebagai targetnya.");
Database.addText("id.eqItemWeaponEnchantedMonkeyWizardStaffName", "Tongkat monyet penyihir (sudah disihir)");
Database.addText("id.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Tongkat ini lebih cepat dari yang belum di berikan sihir, dan juga akan melemparkan lebih banyak mantera.");
Database.addText("id.eqItemWeaponGiantSpoonName", "Sebuah sendok raksasa");
Database.addText("id.eqItemWeaponGiantSpoonDescription", "Sendok raksasa ini ada di dalam teko raksasa di benteng gurun. Kamu tidak tahu jika seseorang pernah menggunakannya sebagai sendok, tapi jika ada, dia pasti seseorang yang sangat besar. Kamu mungkin tidak ingin bertemu dengannya.");
Database.addText("id.eqItemWeaponGiantSpoonOfDoomName", "Sendok raksasa malapetaka");
Database.addText("id.eqItemWeaponGiantSpoonOfDoomDescription", "Sendok raksasa ini lebih kuat dari sendok raksasa biasa yang dapat kamu temukan, misalnya, didalam teko. Namun, sendok ini cukup lama.");
Database.addText("id.eqItemWeaponScytheName", "Sebuah sabit");
Database.addText("id.eqItemWeaponScytheDescription", "Katanya sabit ini dimiliki oleh kematian itu sendiri. Sabit ini sangat cepat");
Database.addText("id.eqItemHatMerchantHatName", "Topi si pedagang");
Database.addText("id.eqItemHatMerchantHatDescription", "Topi ini dijual kepadamu oleh pedagang permen. Si pedagang permen ini menyukai permen. Topi ini akan menambah 7 kali lipat permen yang kamu dapat di dalam pencarian (quest)!");
Database.addText("id.eqItemHatSorceressHatName", "Topi sang penyihir wanita");
Database.addText("id.eqItemHatSorceressHatDescription", "Topi ini dijual kepadamu oleh sang penyihir wanita. Topi ini akan menambah efek dari mantera dan obat (potion) mu.");
Database.addText("id.eqItemHatOctopusKingCrownName", "Mahkota sang raja gurita");
Database.addText("id.eqItemHatOctopusKingCrownDescription", "ketika kamu menggunakan mahkota ini, kamu merasa lebih percaya diri. Mahkota ini tidak memberikan keuntungan apapun dalam pencarian (quest), tapi percaya diri itu penting!");
Database.addText("id.eqItemHatOctopusKingCrownWithJaspersName", "Mahkota sang raja gurita dengan yasper");
Database.addText("id.eqItemHatOctopusKingCrownWithJaspersDescription", "Mahkota yang disihir ini terbuat dari emas dan yasper merah. Dalam pencarian (quest), mahkota ini akan melemparkan bola api ajaib yang kuat disekitarmu dengan sering. Dan juga, mahkota ini berkilau!");
Database.addText("id.eqItemHatOctopusKingCrownWithObsidianName", "Mahkota sang raja gurita dengan obsidian");
Database.addText("id.eqItemHatOctopusKingCrownWithObsidianDescription", "Mahkota yang disihir ini terbuat dari emas dan obsidian. Mahktoa ini indah. Dalam pencarian (quest), mahkota ini akan memanggil sang raja gurita menggantikanmu bertarung selama beberapa saat. Sekutu yang \"tentaculous\"!");
Database.addText("id.eqItemGlovesLeatherGlovesName", "Sarung tangan kulit");
Database.addText("id.eqItemGlovesLeatherGlovesDescription", "Saruang tangan ini pada dasarnya tidak melakukan apapun. Tapi setidaknya mereka halus dan nyaman!");
Database.addText("id.eqItemGlovesRedEnchantedGlovesName", "Sarung tangan yang disihir merah");
Database.addText("id.eqItemGlovesRedEnchantedGlovesDescription", "Sarung tangan yang sudah disihir ini mengeluarkan cahaya merah lembut ketika disekitarmu gelap. Dalam pencarian (quest), mereka akan melemparkan bola api kecil secara acak kepada musuhmu, yang akan menjadi berguna.");
Database.addText("id.eqItemGlovesPinkEnchantedGlovesName", "Sarung tangan yang disihir merah muda");
Database.addText("id.eqItemGlovesPinkEnchantedGlovesDescription", "Sarung tangan yang sudah disihir ini meninggalkan bekas merah muda pada setiap benda yang kamu sentuh. Dalam pencarian (quest), mereka akan menyembuhkan kamu secara terus menerus.");
Database.addText("id.eqItemBootsRocketBootsName", "Sepatu bot roket");
Database.addText("id.eqItemBootsRocketBootsDescription", "Sepatu bot roket yang mengagumkan ini memungkinkan kamu untuk melompat di tengah udara, jadi pada dasarnya kamu melayang!");
Database.addText("id.eqItemBootsLeatherBootsName", "Sepatu bot kulit");
Database.addText("id.eqItemBootsLeatherBootsDescription", "Sepatu bot kulit sederhana. Tidak ada yang spesial dari mereka.");
Database.addText("id.eqItemBootsBootsOfIntrospectionName", "Sepatu bot introspeksi");
Database.addText("id.eqItemBootsBootsOfIntrospectionDescription", "Ambil waktu untuk bernafas dan tenangkan diri. Jika kamu memakai sepatu bot ini, kamu tidak akan pernah bergerak selama kamu menyentuh tanah.");
Database.addText("id.eqItemBodyArmoursLightweightBodyArmourName", "Sebuah baju baja ringan");
Database.addText("id.eqItemBodyArmoursLightweightBodyArmourDescription", "Baju baja ini akan memberikan kamu perlindungan yang lemah. Kamu akan sedikit lebih tahan dari serangan musuhmu.");
Database.addText("id.eqItemBodyArmoursKnightBodyArmourName", "Sebuah baju baja ksatria");
Database.addText("id.eqItemBodyArmoursKnightBodyArmourDescription", "Baju baja yang kuat ini akan melindungimu. Kamu akan lebih tahan terhadap serangan musuhmu.");
Database.addText("id.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Sebuah baju baja ksatria yang sudah disihir");
Database.addText("id.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Baju baja ini sangat spesial. Kamu akan JAUH lebih tahan dari serangan musuhmu, tapi serangan (damage) dari senjata yang kamu gunakan akan dibagi dua.");
Database.addText("id.mapVillageForgeBuyWoodenSwordButton", "Beli sebuah pedang kayu (150 permen)");
Database.addText("id.mapVillageForgeBuyWoodenSwordSpeech", "Terimakasih sudah membeli! Pedang kayu ini cukup lemah, tapi ini adalah awal.");
Database.addText("id.mapVillageForgeBuyIronAxeButton", "Beli sebuah kapak besi (400 permen)");
Database.addText("id.mapVillageForgeBuyIronAxeSpeech", "Saya harap kamu menyukai kapak besi ini. Saya telah menajamkannya untukmu!");
Database.addText("id.mapVillageForgeBuyPolishedSilverSwordButton", "Beli sebuah pedang perak yang dipoles (2 000 permen)");
Database.addText("id.mapVillageForgeBuyPolishedSilverSwordSpeech", "Saya membutuhkan banyak waktu untuk membuat pedang ini. Tapi saya dapat memastikan kalau harganya seimbang.");
Database.addText("id.mapVillageForgeBuyLightweightBodyArmourButton", "Beli sebuah baju baja ringan (15 000 permen)");
Database.addText("id.mapVillageForgeBuyLightweightBodyArmourSpeech", "Baju baja ini akan memberimu pertahanan terhadap musuhmu.");
Database.addText("id.mapVillageForgeBuyScytheButton", "Beli sebuah sabit(5 000 000 candies)");
Database.addText("id.mapVillageForgeBuyScytheSpeech", "Saya membutuhkan beberapa bulan untuk membuat sabit ini. Sabit ini adalah bagian nyata dari seni. Sabit ini mungkin senjata tercepat yang dapat kamu gunakan. Semoga sukses!");
Database.addText("id.wishingWellThrowFirstCandyButton", "Buang sebuah permen kedalam sumur");
Database.addText("id.wishingWellCandyIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Ketika kamu melempar permen ke saya, saya akan mengobati lukamu.");
Database.addText("id.wishingWellThrewCandiesSpeech", "Lukamu sudah disembuhkan!");
Database.addText("id.wishingWellNoWoundSpeech", "Kamu tidak punya luka untuk disembuhkan!");
Database.addText("id.wishingWellThrowFirstLollipopButton", "Buang sebuah lollipop ke sumur");
Database.addText("id.wishingWellLollipopIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Ketika kamu melempar lollipop kepadaku, Saya akan mengubahnya menjadi permen.");
Database.addText("id.wishingWellThrewLollipopsSpeech", "Lollipopmu sudah dibuah menjadi permen! Dua lollipop untuk satu permen.");
Database.addText("id.wishingWellThrowChocolateBarButton", "Buang sebatang coklat ke sumur permohonan");
Database.addText("id.wishingWellChocolateBarIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Saya suka batang coklat. Saya sangat menyukai mereka. Setiap batang coklat yang kamu lempar kepadaku, termasuk yang ini, kamu akan diberikan satu sihir ajaib.");
Database.addText("id.wishingWellThrewChocolateBarSpeech", "Benda apa yang ingin kamu sihir?");
Database.addText("id.wishingWellThrowPainAuChocolatButton", "Buang sebuah pain au chocolat kedalam sumur");
Database.addText("id.wishingWellPainAuChocolatIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Ketika kamu melemparkan pain au chocolat kepadaku, kamu akan diberikan hadiah yang sangat spesial. Pilih dengan bijak.");
Database.addText("id.wishingWellThrewPainAuChocolatSpeech", "Terimakasih atas pain au chocolatnya! Kamu sekarang dapat memilih hadiahmu.");
Database.addText("id.wishingWellChooseGift", "Pilih hadiahmu!");
Database.addText("id.wishingWellChooseGiftButton", "Pilih");
Database.addText("id.wishingWellGiftDoneSpeech", "Selesai! Kamu sekarang mempunyai hadiah baru. Hadiahnya akan muncul di panel stats di inventorymu!.");
Database.addText("id.wishingWellNoPossibleEnchantment", "Tidak ada benda yang bisa disihir");
Database.addText("id.wishingWellChooseEnchantment", "Pilih benda yang akan disihir");
Database.addText("id.wishingWellEnchantButton", "Sihir");
Database.addText("id.wishingWellEnchantmentDoneSpeech", "Ini dia! Bendamu sudah disihir.");
Database.addText("id.pierLighthouseButton", "Pergi ke mercusuar menggunakan perahu");
Database.addText("id.pierTheSeaButton", "Lompat ke laut");
Database.addText("id.lonelyHouseOpenBox", "Buka kotaknya");
Database.addText("id.lonelyHouseShakeBox", "Goncang kotaknya");
Database.addText("id.lonelyHouseBreakLock", "Hancurkan gemboknya");
Database.addText("id.lonelyHouseKickBox", "Tendang kotaknya");
Database.addText("id.lonelyHouseAskTheBoxToOpenItself", "Suruh kotaknya untuk membuka dirinya sendiri");
Database.addText("id.lonelyHouseLureTheBoxWithACandy", "Goda kotaknya dengan sebuah permen");
Database.addText("id.lonelyHouseTakeTheBox", "Ambil kotaknya, bagaimanapun juga kamu mungkin membutuhkan kunci untuk membukanya");
Database.addText("id.lonelyHouseOpenBoxResult", "Kotaknya terkunci");
Database.addText("id.lonelyHouseShakeBoxResult", "Tidak ada yang terjadi");
Database.addText("id.lonelyHouseBreakLockResult", "Gemboknya menolak untuk terbuka");
Database.addText("id.lonelyHouseKickBoxResult", "Kakimu sedikit kesakitan, tapi tidak ada yang terjadi");
Database.addText("id.lonelyHouseAskTheBoxToOpenItselfResult", "...kamu berbicara kepada sebuah kotak, kamu tahu itu?");
Database.addText("id.lonelyHouseLureTheBoxWithACandyResult", "Tampaknya kotaknya tidak peduli");
Database.addText("id.lonelyHouseTakeTheBoxResult", "Mungkin ada sesuatu yang menarik di dalam candy box ini.");
Database.addText("id.lollipopFarmConstructMill", "Banguan sebuah kincir angin (10 000 lollipop)");
Database.addText("id.lollipopFarmFeedMill", "Sediakan makanan untuk kincir angin");
Database.addText("id.lollipopFarmCurrentCandiesProduction", "Produksi permen saat ini");
Database.addText("id.lollipopFarmDigPond", "Gali sebiah kolam (100 000 lollipop)");
Database.addText("id.lollipopFarmBuyLolligator", "Beli sebuah lolligator (1200 permen)");
Database.addText("id.lollipopFarmLolligatorsConversionText", "Pengubahan permen -> lollipop diaktifkan");
Database.addText("id.lighthouseAskButton", "Tanya");
Database.addText("id.lighthouseQuestionWho", "Siapakah kamu?");
Database.addText("id.lighthouseQuestionWhoSpeech", "Saya adalah cyclops yang sangat tua.");
Database.addText("id.lighthouseQuestionWhat", "Apa yang kamu lakukan disini?");
Database.addText("id.lighthouseQuestionWhatSpeech", "Saya tinggal disini sepanjang hari, menunggu sebuah perahu untuk datang. Sudah waktu yang lama sejak saya melihat sebuah perahu, tapi saya harus tinggal disini, melihat ke laut, karena sebuah perahu mungkin datang.");
Database.addText("id.lighthouseQuestionWhyEatCandies", "Mengapa saya makan permen?");
Database.addText("id.lighthouseQuestionWhyEatCandiesSpeech", "Karena mereka bagus untuk kesehatanmu!");
Database.addText("id.lighthouseQuestionCandyBox", "Apa itu candy box?");
Database.addText("id.lighthouseQuestionCandyBoxSpeech", "Itu adalah sebuah kotak yang sangat tua yang katanya mengandung semua permen di dunia. Menurut legenda, siapa yang membuka kotak itu akan mempunyai sangat banyak permen sehingga tidak ada yang tidak mungkin.");
Database.addText("id.lighthouseQuestionDragon", "Sang naga memberitahu aku untuk datang kesini karena saya mau permen.");
Database.addText("id.lighthouseQuestionDragonSpeech", "Oh, begitu.. Baiklah, Saya tidak dapat memberimu permen secara langsung, tapi saya dapat memberimu sesuatu yang penting untukmu untuk akhirnya mendapat BANYAK permen. Saya hanya ingin mengetesmu sebelum itu. Karena apa yang saya punya tidak dapat diberikan kepada semua orang. Selesaikan teka-teki ini dan benda itu akan menjadi milikmu.");
Database.addText("id.lighthouseFoundStone", "Selamat! Kamu lulus tes dan menemukan batu ini. Batu ini sangat berharga, tapi batu ini hanya berguna jika kamu menemukan tiga batu lain yang seperti batu ini. Semoga sukses!");
Database.addText("id.lighthouseFoundStoneAgain", "Pekerjaan yang baik, kamu menyelesaikan teka-tekinya satu kali lagi. Sepertinya kamu menyukainya.");
Database.addText("id.saveLocalSaveTitle", "Penyimpanan Browser");
Database.addText("id.saveLocalSaveWhy", "Pilih penyimapanan lokal jika kamu ingin tetap bermain menggunakan alat (device) dan browser ini.");
Database.addText("id.saveLocalSaveWarning0", "Browsermu tampaknya tidak mendukung HTML5.");
Database.addText("id.saveLocalSaveWarning1", "Kamu harus mengupdate browsermu untuk menggunakan fitur penyimpanan lokal.");
Database.addText("id.saveLocalSaveChooseSlot", "Pilih sebuah slot penyimpanan :");
Database.addText("id.saveLocalSaveAutosaveEnabled", "Penyimpanan otomatis diaktifkan");
Database.addText("id.saveLocalSaveChooseWhatToDo", "Pilih apa yang ingin dilakukan :");
Database.addText("id.saveLocalSaveSaveButton", "Simpan");
Database.addText("id.saveLocalSaveAutosaveButton", "Simpan setiap 10 menit");
Database.addText("id.saveLocalSaveDisableAutosaveButton", "Nonaktifkan penyimpanan otomatis");
Database.addText("id.saveFileSaveTitle", "Penyimpanan teks");
Database.addText("id.saveFileSaveWhy0", "Pilih penyimpanan teks jika :");
Database.addText("id.saveFileSaveWhy1", "Kamu ingin melanjutkan bermain di alat (device) atau browser lain");
Database.addText("id.saveFileSaveWhy2", "Kamu ingin membagikan simpananmu ke seseorang");
Database.addText("id.saveFileSaveWhy3", "Untuk beberapa alasan kamu ingin mengosongkan \"browser cache\"");
Database.addText("id.saveFileSaveWhy4", "(yang akan menghapus penyimpanan lokal)");
Database.addText("id.saveFileSaveButton", "Dapatkan permainan sekarang sebagai teks");
Database.addText("id.saveFileSaveWarning", "Sekarang \"copy\" teks ini di suatu tempat! (di dalam sebuah file, contohnya)");
Database.addText("id.saveLocalLoadTitle", "Memuat menggunakan browser");
Database.addText("id.saveLocalLoadYouCan", "Kamu dapat memuat penyimpanan lokal dengan menggunakan link-link berikut :");
Database.addText("id.saveLocalLoadThanksTo", "Terimakasih kepada keajaiban HTML5, kamu seharusnya dapat membuka link ini bahkan ketika anda tidak terhubung ke internet.");
Database.addText("id.saveFileLoadTitle", "Memuat menggunakan teks");
Database.addText("id.saveFileLoadPaste", "\"Paste\" teks penyimpananmu dibawah, kemudian tekan tombol \"Muat\"");
Database.addText("id.saveFileLoadButton", "Muat");
Database.addText("id.mountainsText0", "Kamu melihat sesuatu di pegunungan!");
Database.addText("id.mountainsText1", "Benda itu tampaknya menarik. Mungkin benda itu berguna.");
Database.addText("id.mountainsTextButton", "Manjat pegunungannya untuk mendapatkan benda itu");
Database.addText("id.mountainsTextAfter", "Kamu menemukan tongkat pogo! Tongkat itu sudah ditambahkan ke inventorymu.");
Database.addText("id.secondHouseIntroSpeech", "Halo, saya adalah si pedagang. Saya akan melakukan semuanya untuk permen. Apa yang kamu butuhkan?");
Database.addText("id.secondHouseLollipop1Speech", "Ini adalah lollipop rasa lemon. Rasa favoritku! Harganya 60 permen, tapi harganya sebanding.");
Database.addText("id.secondHouseLollipop2Speech", "Yang ini adalah lollipop rasa stroberi. Rasanya enak. Saya suka warna merahnya. Hanya 60 permen!");
Database.addText("id.secondHouseLollipop3Speech", "Yang ini adalah lollipop rasa labu. Pasti kamu belum pernah mencoba satu! 60 permen dan lollipop ini milikmu.");
Database.addText("id.secondHouseLollipopButtonText", "Beli lollipop ini (60 permen)");
Database.addText("id.secondHouseMerchantHatSpeech", "Saya dapat menjual topiku kepadamu, tapi topi ini sangat berharga, kamu tahu... Kamu harus memberikan saya banyak permen. Katakan 1 juta permen. Tampaknya adil, kan?");
Database.addText("id.secondHouseMerchantHatButtonText", "Beli topi si pedagang (1 000 000 permen)");
Database.addText("id.secondHouseTimeRingSpeech", "Ini adalah cincin waktu. Cincinnya ajaib. Cincin ini memungkinkan kamu untuk memperlambat waktu ketika kamu berada dalam masalah.");
Database.addText("id.secondHouseTimeRingButtonText", "Beli cincin waktu (500 permen)");
Database.addText("id.secondHouseLeatherGlovesSpeech", "Sarung tangan kulit ini terbuat dari kulit unta, sarung tangan ini tinggi kualitasnya. Saya mempunyai banyak sarung tangan ini, itulah kenapa harganya sangat murah : hanya 300 permen!");
Database.addText("id.secondHouseLeatherBootsButtonText", "Beli sepasang sepatu bot kulit (300 permen)");
Database.addText("id.secondHouseLeatherBootsSpeech", "Sepatu bot kulit berkualitas tinggi ini, dibuat dengan kulit unta, akan membuat kakimu tetap hangat.");
Database.addText("id.secondHouseLeatherGlovesButtonText", "Beli sepasang sarung tangan kulit (300 permen)");
Database.addText("id.secondHouseChocolateBarSpeech", "Ini adalah sebuah batang coklat. Saya tidak tahu apa gunanya, tapi tampaknya benda ini cukup langka, yang menjelaskan harganya. 800 permen dan batang coklat ini menjadi milikmu!");
Database.addText("id.secondHouseChocolateBarButtonText", "Beli sebuah batang coklat (800 permen)");
Database.addText("id.outsideTheHoleButton", "Lompat kedalam lubang besar yang ada di tanah");
Database.addText("id.theCaveExitText0", "Akhirnya kamu mencapai pintu keluar gua.");
Database.addText("id.theCaveExitText1", "Kamu melihat hutan besar diluar sini.");
Database.addText("id.theCaveExitButtonText", "Keluar dari gua");
Database.addText("id.theCaveFirstSentenceWentStraight", "Kamu maju dengan lurus.");
Database.addText("id.theCaveFirstSentenceWentLeft", "Kamu mengambil jalur kiri.");
Database.addText("id.theCaveFirstSentenceWentRight", "Kamu mengambil jalur kanan.");
Database.addText("id.theCaveFirstSentenceYouAre", "Kamu berada di dalam gua. Ada 3 jalur dihadapanmu.");
Database.addText("id.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Kamu melihat sesuatu yang aneh di tanah di depanmu.");
Database.addText("id.theCavePattern_ChocolateBarNowSeeChocolateBar", "Kamu melihat sebuah batang coklat di depanmu.");
Database.addText("id.theCavePattern_TreasureMapSentence", "Kamu melihat batu-batu kecil yang tersusun dengan aneh di lantai.");
Database.addText("id.theCavePattern_MonkeyWizardSentence", "Kamu bertemu seekor monyet penyihir tak berbusana.");
Database.addText("id.theCavePattern_MonkeyWizardButton", "Tantangi dia");
Database.addText("id.theCavePattern_OctopusKingSentence", "Kamu bertemu sang raja gurita. Tampaknya dia menjijikkan.");
Database.addText("id.theCavePattern_OctopusKingButton", "Tantangi dia");
Database.addText("id.fortressInsideText0", "Kamu berada di dalam benteng gurun.");
Database.addText("id.fortressInsideText1", "Kamu dapat memilih diantara tiga pintu.");
Database.addText("id.fortressInsideText2", "Masing-masing dari mereka menuju sebuah ruangan besar dengan sebuah harta di akhirnya.");
Database.addText("id.fortressInsideEnterRoom1", "Masuk ke ruangan pertama");
Database.addText("id.fortressInsideEnterRoom2", "Masuk ke ruangan kedua");
Database.addText("id.fortressInsideEnterRoom3", "Masuk ke ruangan ketiga");
Database.addText("id.treasureButtonDig", "Gali");
Database.addText("id.treasureButtonYouFound", "Kamu menemukan tiga batang coklat!");
Database.addText("id.sorceressHutHello", "Halo, saya adalah sang penyihir wanita. Saya dapat mengajarimu satu atau dua hal tentang sulap. Saya juga dapat memberimu beberapa benda yang menarik, atau melempar mantera untukmu. Tapi semuanya mempunyai harga! Dan harganya akan berupa lollipop. Banyak lollipop.");
Database.addText("id.sorceressHutClickedGrimoire", "Ini adalah buku mantera yang dibuat untuk pemula. Dengan membawanya denganmu di pencarian (quest), kamu dapat melemparkan mantera yang sederhana tapi berguna. Kamu membutuhkan ini! Hanya 5 000 lollipop.");
Database.addText("id.sorceressHutBuyGrimoireButton", "Beli grimore ini (5 000 lollipop)");
Database.addText("id.sorceressHutBuyGrimoireSpeech", "Terimakasih sudah membeli! Kamu dapat melemparkan tiga mantera dengan grimore ini. Semoga sukses!");
Database.addText("id.sorceressHutClickedGrimoire2", "Ini adalah buku mantera tingkat lanjut. Dengan membawanya denganmu dalam pencarian (quest), kamu akan dapat melemparkan dua mantera tingkat lanjut. Saya menulisnya sendiri, yang pastinya tidak mudah. 20 000 lollipop adalah harga yang adil.");
Database.addText("id.sorceressHutBuyGrimoire2Button", "Beli buku mantera ini (20 000 lollipop)");
Database.addText("id.sorceressHutBuyGrimoire2Speech", "Terimakasih sudah membeli! Kamu dapat melemparkan dua mantera dengan grimore ini. Gunakan mereka dengan bijak!");
Database.addText("id.sorceressHutClickedCauldron", "Ini adalha kualiku. Kuali ini memungkinkan saya untuk membuat obat (potion) ajaib. Saya dapat menjualnya kepadamu, tapi kuali ini sangat berharga... harganya 100 000 lollipop.");
Database.addText("id.sorceressHutBuyCauldronButton", "Beli kualinya (100 000 lollipop)");
Database.addText("id.sorceressHutBuyCauldronSpeech", "Terimakasih banyak! 100 000 lollipop untuk saya! Saya juga memberimu buku petunjuknya. Buku petunjuknya akan berguna.");
Database.addText("id.sorceressHutClickedHat", "Memang, saya mempunyai topi yang bagus. Tapi saya benar-benar tidak bisa menjualnya kepadamu. Topinya sangaaaaat berharga. Sungguh, Saya tidak bisa. Jangan memaksa. Tidak. Tidak tidak tidak saya seharusnya tidak melakukannya. Baiklah, Saya akan menukarnya, tapi dengan 1 000 000 000 lollipop. Toh kamu mungkin tidak dapat membayarnya.");
Database.addText("id.sorceressHutBuyHatButton", "Beli topinya (1 000 000 000 lollipop)");
Database.addText("id.sorceressHutBuyHatSpeech", "Satu milyar lollipop untuk kuuuuuuu! Tapi saya sudah tidak mempunyai topi lagi.. tapi satu milyar lollipop, wow! .. Sangat sebanding.");
Database.addText("id.cauldronPreviousPageButton", "Halaman sebelumnya");
Database.addText("id.cauldronNextPageButton", "Halaman selanjutnya");
Database.addText("id.cauldronWhatYouWantToPut", "Apa yang ingin kamu masukkan ke dalam kuali");
Database.addText("id.cauldronWhatIsIn", "Apa yang ada di dalam kuali");
Database.addText("id.cauldronWhatYouCanDo", "Apa yang kamu dapat lakukan dengannya");
Database.addText("id.castleBigRoomComment", "Sebuah ruangan besar");
Database.addText("id.castleARoomComment", "Sebuah ruangan");
Database.addText("id.castleADarkRoomComment", "Sebuah ruangan yang gelap");
Database.addText("id.castleCastleEntranceComment", "Pintu masuk istana");
Database.addText("id.castleTowerEntranceComment", "Pintu masuk menara");
Database.addText("id.castleNougatMonsterComment", "Serang sang monster nougat raksasa");
Database.addText("id.castleGuardsComment", "Serang penjaga-penjaganya");
Database.addText("id.castleStairsComment", "Tangga");
Database.addText("id.buttonBackToTheCastle", "Kembali ke istana");
Database.addText("id.castleBigRoomHovenSpeechSad", "Halo! Saya adalah oven roti yang sangat tua. Dulu saya selalu memasak banyak kue-kue (pastry) yang bagus, tapi sekarang tidak ada yang menggunakan saya. Mungkin... mungkin kamu dapat membantu saya? Biarkan saya mengambil beberapa penganan darimu! Jangan khawatir, kamu tidak akan menyesal! Kamu dapat mempercayaiku.");
Database.addText("id.castleBigRoomHovenNotEnough", "Oh... kamu tidak memiliki penganan yang cukup, Saya tidak dapat melakukan apapun. Saya tidak berguna. Saya oven roti yang tidak berguna, begitu seharusnya kamu memanggilku.");
Database.addText("id.castleBigRoomHovenSpeechMadePainAuChocolat", "Yey! Terimakasih banyak! Saya menggunakan 100 permen dan sebatang coklat, dan saya membuat... sebuah pain au chocolat untukmu! Itu adalah kue (pastry) favoritku, Saya harap kamu menyukainya juga!");
Database.addText("id.castleBigRoomHovenSpeechHappy", "Hei! Jika kamu ingin aku memasak lebih banyak kue-kue (pastry), silahkan beritahu aku! Saya akan senang untuk membantumu.");
Database.addText("id.castleBigRoomHovenSpeechHappyNotEnough", "Oh, kamu tidak mempunyai penganan yang cukup, sayangnya. Saya membutuhan 100 permen dan sebatang coklat. Datang kembali jika kamu mempunyainya!");
Database.addText("id.castleBigRoomHovenLetHovenTakeButton", "Biarkan sang oven mengambil semua penganan yang ingin dia ambil");
Database.addText("id.castleBigRoomHovenThanks", "Terimakasih, oven!");
Database.addText("id.dragonStopTickling", "Hei, kau! Tolong berhenti menggelitik aku.");
Database.addText("id.dragonStopTicklingButton", "Uh, oh, maaf, Saya kira saya seharusnya menyerangmu");
Database.addText("id.dragonTalking", "Saya adalah sang naga dan ini adalah istanaku. Saya melihat kamu bisa masuk, kamu pasti sangat berani... Saya suka membantu seseorang sepertimu. Apa yang kamu cari?");
Database.addText("id.dragonTalkingChallengeButton", "Tantangan");
Database.addText("id.dragonTalkingFameButton", "Terkenal");
Database.addText("id.dragonTalkingCandiesButton", "Permen");
Database.addText("id.dragonTalkingChallengeSpeech", "Oh, jadi kamu ingin tantangan? Saya rasa kamu harus pergi ke neraka, Sudah diketahui kalau sang setan adalah penantang yang kuat. Lompat di punggungku dan saya akan membawamu ke sana!");
Database.addText("id.dragonTalkingFameSpeech", "Cara terbaik untuk menjadi terkenal adalah dengan menghadapi sang developer. Saya tahu dimana dia tinggal dan saya dapat membawamu ke sana. Tapi bersiap-siaplah, ini tidak akan mudah.");
Database.addText("id.dragonTalkingCandiesSpeech", "Benda yang kita semua ingin pasti permen, betul kan? Saya rasa temanku dapat membantumu dengan itu. Kamu akan mengenali dia dengan mudah, dia hanya mempunyai satu mata. Beritahu saja dia kalau kamu mengenalku.");
Database.addText("id.dragonTalkingChallengeAnswer", "Ayo pergi!");
Database.addText("id.dragonTalkingFameAnswer", "Aku siap.");
Database.addText("id.dragonTalkingCandiesAnswer", "Oke, terimakasih!");
Database.addText("id.buttonBackToCastle", "Kembali ke istana");
Database.addText("id.talkingCandySpeechNoBox", "Hei! Saya adalah permen yang bisa bicara. Kamu hampir memenangkan permainan ini. Kamu hanya perlu mencari \"candy box\". Candy boxnya adalah di dalam rumah yang ada diluar desa. Ini adalah langkah terakhir!");
Database.addText("id.talkingCandySpeech1", "Hei! Saya adalah permen yang bisa bicara. Selamat, kamu memenagnkan permainannya! Saya akan membukan candy boxmu untukmu, ini adalah hadiah mu. Haruskah saya meneruskan?");
Database.addText("id.talkingCandySpeech2", "Sudah! Sekarang kamu dapat memasukinya. Saya harap kamu menyukai permainannya :)");
Database.addText("id.talkingCandyButton", "Iya!!");
Database.addText("id.lighthousePuzzleResetButton", "Atur ulang");
Database.addText("es.mapVillageComment", "El Pueblo");
Database.addText("es.mapFortressComment", "La Fortaleza del desierto");
Database.addText("es.mapATreeComment", "Un Ã¡rbol");
Database.addText("es.mapTheDesertComment", "El Desierto");
Database.addText("es.mapWishingWellComment", "El Pozo de los Deseos");
Database.addText("es.mapLonelyHouseComment", "Una casa solitaria");
Database.addText("es.mapForestComment", "El Bosque");
Database.addText("es.mapCastleEntranceComment", "Entrada del Castillo");
Database.addText("es.mapCastleComment", "El Castillo");
Database.addText("es.mapDragonComment", "El DragÃ³n");
Database.addText("es.candyBoxEatCandiesButton", "Comerse los caramelos");
Database.addText("es.candyBoxThrowCandiesButton", "Tirar 10 caramelos al suelo");
Database.addText("es.mapVillageAHouseComment", "Una casa");
Database.addText("es.mapVillageForgeComment", "La HerrerÃ­a");
Database.addText("es.buttonBackToTheMap", "Volver al mapa");
Database.addText("es.mapSorceressHutComment", "La CabaÃ±a de la Hechicera");
Database.addText("es.buttonBackToTheVillage", "Volver al Pueblo");
Database.addText("es.mapATreeIntroductionSpeech", "Hola, soy la Ardilla. Puedo conseguirte caramelos y un montÃ³n de cosas. SÃ© cuÃ¡nto te gustan los caramelos... pero estoy muy sola en este bosque.");
Database.addText("es.mapATreeIntroductionButton", "Â¿En quÃ© puedo ayudarte?");
Database.addText("es.mapATreeFirstQuestion", "Voy a hacerte preguntas. Si respondes correctamente, te darÃ© los mejores caramelos del mundo. Primera pregunta: Â¿de verdad te gustan los caramelos? (Responde en espaÃ±ol y sin tildes)");
Database.addText("es.mapATreeSecondQuestion", "Â¡Correcto! AquÃ­ tienes 20 caramelos. Ahora debes completar esta secuencia de letras para conseguir otra recompensa: S, O, L, E, M, A, R, A, ?");
Database.addText("es.mapATreeThirdQuestion", "Â¡C A R A M E L O S, sÃ­! Toma 100 caramelos. Siguiente pregunta: Â¿cuÃ¡ntos caramelos tiene la persona mÃ¡s caramelada del mundo?");
Database.addText("es.mapATreeFourthQuestion", "Â¡Otros 500 caramelos! QuizÃ¡ la prÃ³xima recompensa sea aÃºn mÃ¡s jugosa... Esta es la adivinanza: En un antiguo bosque crece un Ã¡rbol muy anciano, donde viven los animales mÃ¡s inteligentes del mundo. Dicen que tiene 60 raÃ­ces, 360 ramas y 2160 hojas. Â¿CuÃ¡ntas marcas hay en su tronco?");
Database.addText("es.mapATreeFifthQuestion", "Â¡Felicidades! Por supuesto, estaba hablando de mi Ã¡rbol. Toma 3 piruletas, Â¡Ãºsalas bien! Escucha con atenciÃ³n, que viene otra adivinanza: Bajo la luna llena, lanzo un sombrero amarillo al mar Rojo. Â¿QuÃ© le pasa al sombrero?");
Database.addText("es.mapATreeTicTacToeIntro", "Â¡Respuesta correcta! No era tan difÃ­cil... Toma 3 tabletas de chocolate. Para la recompensa que viene ahora vamos a cambiar las reglas: tienes que jugar conmigo. Â¿EstÃ¡s listo?");
Database.addText("es.mapATreeTicTacToeIntroButton", "Vamos allÃ¡");
Database.addText("es.mapATreeTicTacToeLetsPlay", "El juego es tres en raya. Vamos a jugar en un tablero de 3 por 3, tÃº pones las X y yo los O. Cada vez le toca a uno, y hay que ocupar tres casillas seguidas. Â¡Te dejo empezar!");
Database.addText("es.mapATreeTicTacToeNobodyWins", "Hemos llenado el tablero y ninguno ha hecho tres en raya... Â¡Quedamos en tablas! Â¿Quieres volver a intentarlo?");
Database.addText("es.mapATreeTicTacToeYouLose", "Â¡Tengo tres en raya! He ganado. Â¿Quieres volver a intentarlo?");
Database.addText("es.mapATreeTicTacToeTryAgainButton", "Venga");
Database.addText("es.mapATreeTicTacToeYouWin", "Vaya, eso ha sido un movimiento inesperado. Pero tienes tres en raya, no puedo quejarme. Â¡Has ganado, toma esta llave! Abre una casa del pueblo que estÃ¡ mÃ¡s allÃ¡ del bosque.");
Database.addText("es.mapATreeTicTacToeAnymoreSweet", "Â¡Gracias, Ardilla! Â¿Tienes mÃ¡s pruebas para mÃ­?");
Database.addText("es.mapATreeNoMoreChallenge", "Pues ya no me quedan pruebas... Pero lo he pasado muy bien jugando contigo, gracias :-)");
Database.addText("es.buttonExitQuestKeeping", "Salir de la misiÃ³n (se guardarÃ¡ lo que has encontrado)");
Database.addText("es.buttonExitQuestNoKeeping", "Salir de la misiÃ³n (sin guardar lo que has encontrado)");
Database.addText("es.buttonExitQuestNoKeepingBecauseLose", "Salir de la misiÃ³n (sin guardar, porque has perdido)");
Database.addText("es.mapVillageLockedHouseComment", "Una casa cerrada");
Database.addText("es.mapVillageForgeIntroductionSpeech", "Â¡Hola! Soy el Herrero, vendo armas y equipamiento.");
Database.addText("es.mapVillageForgeIntroductionSpeechNoMoreToSell", "Â¡Hola! Soy el Herrero. Lamentablemente, no puedo venderte nada mÃ¡s. Â¿QuÃ© tal si vuelves luego?");
Database.addText("es.mapVillageFifthHouseNoWeaponSpeech", "Hola. Mi sÃ³tano estÃ¡ lleno de ratas, necesito librarme de ellas... OjalÃ¡ alguien con un arma pudiera ayudarme...");
Database.addText("es.mapVillageFifthHouseWeaponSpeech", "Eh, Â¡pero si tÃº llevas una! Si matas a las que tengo en el sÃ³tano, te recompensarÃ© como es debido.");
Database.addText("es.mapVillageFifthHouseAgree", "Â¡A por ellas!");
Database.addText("es.mapVillageFifthHouseCellarDone", "Â¡Gracias por acabar con las ratas! AquÃ­ tienes una valiosa recompensa: un Mapa del mundo. Seguro que lo usas mÃ¡s que yo.");
Database.addText("es.mapVillageTheShopComment", "La Tienda");
Database.addText("es.mapBridgeComment", "El Puente");
Database.addText("es.mapFarmComment", "La Granja de piruletas");
Database.addText("es.mapCaveEntranceComment", "Entrada de la Cueva");
Database.addText("es.mapLighthouseComment", "El Faro");
Database.addText("es.mapPierComment", "El Puerto");
Database.addText("es.mapTheHoleComment", "El Hoyo");
Database.addText("es.candyBoxRequestStatusBarUnlocked", "Pedir una opciÃ³n nueva al desarrollador (30 caramelos)");
Database.addText("es.candyBoxRequestStatusBarUnlockedCfg", "Pedir otra (5 caramelos)");
Database.addText("es.candyBoxRequestStatusBarUnlockedSave", "Pedir otra mÃ¡s (5 caramelos)");
Database.addText("es.candyBoxRequestStatusBarUnlockedHealthBar", "Pedir algo aÃºn mejor (5 caramelos)");
Database.addText("es.candyBoxRequestStatusBarUnlockedMap", "Â¡Ãšltima peticiÃ³n! Seguro que vale la pena. (10 caramelos)");
Database.addText("es.candyBoxRequestStatusBarUnlockedComment", "Â¡Has desbloqueado la barra de estado! (Mira arriba)");
Database.addText("es.candyBoxRequestStatusBarUnlockedCfgComment1", "Ahora puedes acceder a la configuraciÃ³n.");
Database.addText("es.candyBoxRequestStatusBarUnlockedCfgComment2", "Si quieres, puedes cambiar el idioma.");
Database.addText("es.candyBoxRequestStatusBarUnlockedSaveComment", "Â¡Una pestaÃ±a salvaje apareciÃ³!");
Database.addText("es.candyBoxRequestStatusBarUnlockedHealthBarComment", "Has ganado 100 puntos de vida. Te serÃ¡n Ãºtiles.");
Database.addText("es.cfgChooseLanguage", "Elige el idioma:");
Database.addText("es.cfgInvertColors", "Â¿Invertir colores?");
Database.addText("es.gridItemMainMapName", "El Mapa");
Database.addText("es.gridItemMainMapDescription", "Mapa del mundo");
Database.addText("es.gridItemPogoStickName", "Pogo");
Database.addText("es.gridItemPogoStickDescription", "Este objeto te permite saltar en las misiones.");
Database.addText("es.gridItemTimeRingName", "Anillo del tiempo");
Database.addText("es.gridItemTimeRingDescription", "Con este objeto tendrÃ¡s una nueva habilidad: podrÃ¡s ralentizar el tiempo. Si te parece que el juego va demasiado deprisa, Ãºsalo.");
Database.addText("es.gridItemThirdHouseKeyName", "Llave de la tercera casa");
Database.addText("es.gridItemThirdHouseKeyDescription", "Con esta llave puedes entrar en la tercera casa del Pueblo.");
Database.addText("es.gridItemFeatherName", "Pluma de pÃ¡jaro del desierto");
Database.addText("es.gridItemFeatherDescription", "Esta pluma mÃ¡gica te harÃ¡ saltar mÃ¡s alto cuando uses el Pogo.");
Database.addText("es.gridItemFeatherDescriptionNoPogoStick", "Por alguna razÃ³n, te parece que esta pluma serÃ­a Ãºtil si tuvieras un pogo...");
Database.addText("es.gridItemSpongeName", "Esponja mÃ¡gica");
Database.addText("es.gridItemSpongeDescription", "Con esta esponja mÃ¡gica te escurrirÃ¡s (como una esponja) y reducirÃ¡s tu tamaÃ±o.");
Database.addText("es.gridItemFortressKeyName", "Llave de la Fortaleza del desierto");
Database.addText("es.gridItemFortressKeyDescription", "Esta llave te permite entrar en la remota fortaleza que se encuentra al norte del Desierto. Â¿QuiÃ©n sabe lo que podrÃ­as encontrar allÃ­?");
Database.addText("es.gridItemHeartPendantName", "Colgante corazÃ³n");
Database.addText("es.gridItemHeartPendantDescription", "Este colgante de corazÃ³n aumenta tus puntos de salud mientras lo lleves puesto.");
Database.addText("es.gridItemHeartPlugName", "Sello corazÃ³n");
Database.addText("es.gridItemHeartPlugDescription", "Este sello de hierro, patas de araÃ±a y \\\"cardioesencia\\\" en su nÃºcleo aumentarÃ¡ tus puntos de salud en un 20 %.");
Database.addText("es.gridItemBeginnersGrimoireName", "Grimorio para principiantes");
Database.addText("es.gridItemBeginnersGrimoireDescription", "Este grimorio contiene tres hechizos bastante sencillos; es un libro especialmente pensado para principiantes. Permite usar Lluvia Ã¡cida (una capa de Ã¡cido caerÃ¡ sobre tus enemigos), Bola de fuego (una enorme bola de fuego mÃ¡gica irÃ¡ volando hacia ellos) y Teletransporte (que te transportarÃ¡ a un lugar aleatorio).");
Database.addText("es.gridItemAdvancedGrimoireName", "Grimorio avanzado");
Database.addText("es.gridItemAdvancedGrimoireDescription", "El Grimorio avanzado consta de dos hechizos: Borramagia y Escudo de Espinas. El primero eliminarÃ¡ la magia en una misiÃ³n en el momento en que lo uses, y con ella los hechizos que lanzaste y los poderes mÃ¡gicos de tu adversario; el segundo formarÃ¡ un escudo de espinas flotantes a tu alrededor que daÃ±a a los enemigos que lo toquen.");
Database.addText("es.gridItemBlackMagicGrimoireName", "Grimorio de magia negra");
Database.addText("es.gridItemBlackMagicGrimoireDescription", "Encontraste este grimorio en una cueva, y por algo estÃ¡ tan bien escondido: contiene dos poderosos hechizos de magia negra. El primero levanta un muro gigantesco de bloques de obsidiana entre tÃº y tus enemigos, puedes utilizarlo para ganar tiempo; el segundo invoca a una hueste de demonios que atacarÃ¡ a cualquiera, tambiÃ©n a ti... asÃ­ que piÃ©nsatelo bien.");
Database.addText("es.gridItemUnicornHornName", "Cuerno de unicornio");
Database.addText("es.gridItemUnicornHornDescription", "Este cuerno mÃ¡gico pertenecÃ­a a un unicornio. Su gran poder curativo te serÃ¡ de gran ayuda. Por lo visto, el unicornio se llamaba Charlie :-/");
Database.addText("es.gridItemXinopherydonClawName", "Zarpa de xinopherydon");
Database.addText("es.gridItemXinopherydonClawDescription", "Pertenece a un xinopherydon, animal primitivo de dos cabezas que se creÃ­a extinto. Puede doblar la potencia del arma que utilices.");
Database.addText("es.gridItemPitchforkName", "Horquilla");
Database.addText("es.gridItemPitchforkDescription", "Una horquilla especial para ahuecar la tierra sin necesidad de retirarla, conservando asÃ­ los ecosistemas del subsuelo. Triplica la producciÃ³n de tu granja de piruletas.");
Database.addText("es.gridItemShellPowderName", "Shell powder");
Database.addText("es.gridItemShellPowderDescription", "Los granjeros lo utilizan para acelerar el crecimiento de las piruletas. Â¡MultiplicarÃ¡ tu producciÃ³n por tres!");
Database.addText("es.gridItemPName", "Piedra P");
Database.addText("es.gridItemPDescription", "-\\\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\\\P  FFp(N/X \\\"DÂ° (D ~ -Z DI}I \\\"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\\\OL&Y_)T|");
Database.addText("es.gridItemLName", "Piedra L");
Database.addText("es.gridItemLDescription", "\\\"ED^S~\\\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \\\"\\\\  - }XuX  IFHS Z(V~\\\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \\\" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\\\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("es.gridItemAName", "Piedra A");
Database.addText("es.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \\\"G L+eIN#J(|RE TRL- \\\\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \\\"S A-\\\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\\\M=_VTM\\\\W-e_VEQ  {");
Database.addText("es.gridItemYName", "Piedra Y");
Database.addText("es.gridItemYDescription", "IK  OA#  U   \\\\ }CY!NBX^(  U\\\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\\\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("es.gridItemRedSharkFinName", "Escama mÃ¡gica de tiburÃ³n (roja)");
Database.addText("es.gridItemRedSharkFinDescription", "Aumenta sustancialmente el daÃ±o de Bola de fuego (por fin sirve para algo...)");
Database.addText("es.gridItemGreenSharkFinName", "Escama mÃ¡gica de tiburÃ³n (verde)");
Database.addText("es.gridItemGreenSharkFinDescription", "Siente el poder de la naturaleza con esta escama mÃ¡gica, que multiplica por 5 la producciÃ³n de tu granja de piruletas.");
Database.addText("es.gridItemPurpleSharkFinName", "Escama mÃ¡gica de tiburÃ³n (violeta)");
Database.addText("es.gridItemPurpleSharkFinDescription", "Te proporciona un nuevo hechizo de magia negra que solo puedes usar una vez por misiÃ³n. Â¡Ten mucho cuidado!");
Database.addText("es.gridItemTalkingCandyName", "Caramelo parlante");
Database.addText("es.gridItemTalkingCandyDescription", "ApareciÃ³ cuando colocaste las cuatro piedras en lo alto de la Torre del Castillo. PodrÃ­a ayudarte a abrir la Candy Box...");
Database.addText("es.inventorySpecialNothingEqItem", "Nada");
Database.addText("es.eqItemWeaponWoodenSwordName", "Espada de madera");
Database.addText("es.eqItemWeaponWoodenSwordDescription", "No es mÃ¡s que una espada de madera");
Database.addText("es.eqItemWeaponIronAxeName", "Hacha de hierro");
Database.addText("es.eqItemWeaponIronAxeDescription", "Un hacha de hierro. Bien afilada y mÃ¡s poderosa que la Espada de madera.");
Database.addText("es.eqItemWeaponPolishedSilverSwordName", "Espada pulida de plata");
Database.addText("es.eqItemWeaponPolishedSilverSwordDescription", "Una poderosa espada cubierta de pÃºas.");
Database.addText("es.eqItemWeaponTrollBludgeonName", "Cachiporra del Troll");
Database.addText("es.eqItemWeaponTrollBludgeonDescription", "Se la quitaste al troll que vigilaba el puente. Es lenta, pero aplastarÃ¡ a tus enemigos.");
Database.addText("es.eqItemWeaponTribalSpearName", "Lanza tribal");
Database.addText("es.eqItemWeaponTribalSpearDescription", "La encontraste en el cuerpo sin vida de un guerrero que muriÃ³ en un gran hoyo. Al principio es difÃ­cil manejarla, pero en cuanto te acostumbres serÃ¡ un arma eficaz.");
Database.addText("es.eqItemWeaponSummoningTribalSpearName", "Lanza tribal de invocaciÃ³n");
Database.addText("es.eqItemWeaponSummoningTribalSpearDescription", "AdemÃ¡s de ser un poco mÃ¡s poderosa que la normal, esta lanza tribal permite invocar guerreros de la tribu para que te ayuden en las misiones.");
Database.addText("es.eqItemWeaponMonkeyWizardStaffName", "Cetro del Mono Mago");
Database.addText("es.eqItemWeaponMonkeyWizardStaffDescription", "PertenecÃ­a al mono mago desnudo que encontraste en la Cueva. Por sÃ­ solo, lanza hechizos que alcanzarÃ¡n a tus enemigos.");
Database.addText("es.eqItemWeaponEnchantedMonkeyWizardStaffName", "Centro encantado del Mono Mago");
Database.addText("es.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Es mÃ¡s rÃ¡pido que la versiÃ³n no encantada, y lanza muchos mÃ¡s hechizos.");
Database.addText("es.eqItemWeaponGiantSpoonName", "Cuchara gigante");
Database.addText("es.eqItemWeaponGiantSpoonDescription", "Esta cuchara estaba en una tetera gigante en la Fortaleza del desierto. No sabes si la habrÃ¡n utilizado como tal alguna vez, pero si es asÃ­, debÃ­a tratarse de alguien MUY grande. Y no quieres conocerlo.");
Database.addText("es.eqItemWeaponGiantSpoonOfDoomName", "Cuchara gigante del Destino");
Database.addText("es.eqItemWeaponGiantSpoonOfDoomDescription", "Es aÃºn mÃ¡s poderosa que la cuchara gigante normal. Sin embargo, es bastante lenta.");
Database.addText("es.eqItemWeaponScytheName", "GuadaÃ±a");
Database.addText("es.eqItemWeaponScytheDescription", "Cuentan que esta GuadaÃ±a pertenecÃ­a a la mismÃ­sima Muerte. Es extremadamente rÃ¡pida.");
Database.addText("es.eqItemHatMerchantHatName", "Sombrero del Mercader");
Database.addText("es.eqItemHatMerchantHatDescription", "El Mercader te vendiÃ³ este sombrero. Y como le encanta el dulce, este sombrero multiplica por 7 el nÃºmero de caramelos que consigas en las misiones.");
Database.addText("es.eqItemHatSorceressHatName", "Sombrero de la Hechicera");
Database.addText("es.eqItemHatSorceressHatDescription", "La Hechicera te vendiÃ³ este sombrero. Incrementa el poder de tus hechizos y pociones.");
Database.addText("es.eqItemHatOctopusKingCrownName", "Corona del Rey Pulpo");
Database.addText("es.eqItemHatOctopusKingCrownDescription", "Cuando llevas esta corona, confÃ­as mucho mÃ¡s en tus posibilidades. Puede que no dÃ© ninguna ventaja estratÃ©gica, Â¡pero la confianza en uno mismo es importante!");
Database.addText("es.eqItemHatOctopusKingCrownWithJaspersName", "Corona del Rey Pulpo jaspeada");
Database.addText("es.eqItemHatOctopusKingCrownWithJaspersDescription", "Esta corona encantada estÃ¡ hecha de oro y jaspe rojo. En las misiones, te permite lanzar poderosas bolas de fuego mÃ¡gicas. Â¡Y encima brilla!");
Database.addText("es.eqItemHatOctopusKingCrownWithObsidianName", "Corona del Rey Pulpo de obsidiana");
Database.addText("es.eqItemHatOctopusKingCrownWithObsidianDescription", "Esta corona encantada estÃ¡ hecha de oro y obsidiana, es una belleza. En las misiones, permite invocar al Rey Pulpo cada cierto tiempo para que luche a tu lado. Â¡A mÃ¡s brazos, mÃ¡s espadas!");
Database.addText("es.eqItemGlovesLeatherGlovesName", "Guantes de cuero");
Database.addText("es.eqItemGlovesLeatherGlovesDescription", "No hacen nada especial. Por lo menos son suavitos, y cÃ³modos.");
Database.addText("es.eqItemGlovesRedEnchantedGlovesName", "Guantes rojos encantados");
Database.addText("es.eqItemGlovesRedEnchantedGlovesDescription", "Estos guantes encantados desprenden una suave luz roja en la oscuridad. En las misiones, lanzan pequeÃ±as bolas de fuego a tus enemigos de forma aleatoria, te resultarÃ¡n muy Ãºtiles.");
Database.addText("es.eqItemGlovesPinkEnchantedGlovesName", "Guantes rosas encantados");
Database.addText("es.eqItemGlovesPinkEnchantedGlovesDescription", "Estos guantes encantados dejan una marca roja en todo lo que toques. Durante las misiones, no dejarÃ¡n de curarte.");
Database.addText("es.eqItemBootsRocketBootsName", "Botas-cohete");
Database.addText("es.eqItemBootsRocketBootsDescription", "Estas botas son geniales, porque te permiten saltar en el aire. Â¡PrÃ¡cticamente volarÃ¡s!");
Database.addText("es.eqItemBootsLeatherBootsName", "Botas de cuero");
Database.addText("es.eqItemBootsLeatherBootsDescription", "Unas simples botas de cuero.");
Database.addText("es.eqItemBootsBootsOfIntrospectionName", "Botas de introspecciÃ³n");
Database.addText("es.eqItemBootsBootsOfIntrospectionDescription", "Respira hondo y cÃ¡lmate. Si llevas estas botas, no te moverÃ¡s mientras estÃ©s tocando el suelo.");
Database.addText("es.eqItemBodyArmoursLightweightBodyArmourName", "Armadura ligera");
Database.addText("es.eqItemBodyArmoursLightweightBodyArmourDescription", "Ofrece una protecciÃ³n reducida. SerÃ¡s un poco mÃ¡s resistente a los ataques.");
Database.addText("es.eqItemBodyArmoursKnightBodyArmourName", "Armadura de caballero");
Database.addText("es.eqItemBodyArmoursKnightBodyArmourDescription", "Es una armadura fuerte con la que estarÃ¡s protegido. SerÃ¡s mÃ¡s resistente a los ataques.");
Database.addText("es.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Armadura de caballero encantada");
Database.addText("es.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Esta armadura es muy especial. SerÃ¡s MUCHO mÃ¡s resistente a los ataques de tus rivales, pero la potencia de tu arma se reducirÃ¡ a la mitad.");
Database.addText("es.mapVillageForgeBuyWoodenSwordButton", "Comprar Espada de madera (150 caramelos)");
Database.addText("es.mapVillageForgeBuyWoodenSwordSpeech", "Â¡Gracias por tu compra! Es una espada bastante floja, pero no estÃ¡ mal para empezar.");
Database.addText("es.mapVillageForgeBuyIronAxeButton", "Comprar Hacha de hierro (400 caramelos)");
Database.addText("es.mapVillageForgeBuyIronAxeSpeech", "Espero que te guste esta Hacha de hierro. Â¡La acabo de afilar!");
Database.addText("es.mapVillageForgeBuyPolishedSilverSwordButton", "Comprar Espada pulida de plata (2000 caramelos)");
Database.addText("es.mapVillageForgeBuyPolishedSilverSwordSpeech", "Fabricar esta espada me llevÃ³ mucho tiempo. Te aseguro que vale lo que cuesta.");
Database.addText("es.mapVillageForgeBuyLightweightBodyArmourButton", "Comprar Armadura ligera (15 000 caramelos)");
Database.addText("es.mapVillageForgeBuyLightweightBodyArmourSpeech", "Esta armadura te protegerÃ¡ de los enemigos.");
Database.addText("es.mapVillageForgeBuyScytheButton", "Comprar GuadaÃ±a (5Â 000Â 000 caramelos)");
Database.addText("es.mapVillageForgeBuyScytheSpeech", "He tardado aÃ±os en forjar esta GuadaÃ±a. Es una verdadera obra maestra. Es probablemente el arma mÃ¡s rÃ¡pida que jamÃ¡s podrÃ¡s blandir. Â¡Buena suerte!");
Database.addText("es.wishingWellThrowFirstCandyButton", "Tirar un caramelo al pozo");
Database.addText("es.wishingWellCandyIntroductionSpeech", "Â¡Hola, caminante! Soy el Pozo de los deseos. Â¡Te concederÃ© deseos a cambio de dulces! Cuando tires caramelos dentro de mÃ­, curarÃ© tus heridas.");
Database.addText("es.wishingWellThrewCandiesSpeech", "Â¡Tus heridas estÃ¡n curadas!");
Database.addText("es.wishingWellNoWoundSpeech", "Â¡No tienes heridas que curar!");
Database.addText("es.wishingWellThrowFirstLollipopButton", "Tirar una piruleta al pozo");
Database.addText("es.wishingWellLollipopIntroductionSpeech", "Â¡Hola, caminante! Soy el Pozo de los deseos. Â¡Te concederÃ© deseos a cambio de dulces! Cuando tires piruletas dentro de mÃ­, las convertirÃ© en caramelos.");
Database.addText("es.wishingWellThrewLollipopsSpeech", "Â¡Tus piruletas se convierten en caramelos! Â¡Dos piruletas por caramelo.");
Database.addText("es.wishingWellThrowChocolateBarButton", "Tirar una tableta de chocolate al pozo");
Database.addText("es.wishingWellChocolateBarIntroductionSpeech", "Â¡Hola, caminante! Soy el Pozo de los deseos. Â¡Te concederÃ© deseos a cambio de dulces! Me encantan las tabletas de chocolate. Me pirran. Por cada tableta que tires dentro de mÃ­, incluida esta, te concederÃ© un encantamiento mÃ¡gico.");
Database.addText("es.wishingWellThrewChocolateBarSpeech", "Â¿QuÃ© objeto te gustarÃ­a encantar?");
Database.addText("es.wishingWellThrowPainAuChocolatButton", "Tirar un pain au chocolat al pozo");
Database.addText("es.wishingWellPainAuChocolatIntroductionSpeech", "Â¡Hola, caminante! Soy el Pozo de los deseos. Â¡Te concederÃ© deseos a cambio de dulces! Cuando tires un pain au chocolat dentro de mÃ­, te darÃ© un don muy especial. Elige sabiamente.");
Database.addText("es.wishingWellThrewPainAuChocolatSpeech", "Â¡Gracias por el pain au chocolat! Puedes escoger tu don.");
Database.addText("es.wishingWellChooseGift", "Â¡Escoge tu don!");
Database.addText("es.wishingWellChooseGiftButton", "Escoger");
Database.addText("es.wishingWellGiftDoneSpeech", "Â¡Listo! Ahora tienes un nuevo don. AparecerÃ¡ en el panel de estadÃ­sticas de tu inventario.");
Database.addText("es.wishingWellNoPossibleEnchantment", "No se puede encantar");
Database.addText("es.wishingWellChooseEnchantment", "Elige el encantamiento");
Database.addText("es.wishingWellEnchantButton", "Encantar");
Database.addText("es.wishingWellEnchantmentDoneSpeech", "Â¡Ya estÃ¡! Tu objeto estÃ¡ encantado.");
Database.addText("es.pierLighthouseButton", "Ir al Faro en barca");
Database.addText("es.pierTheSeaButton", "Saltar al mar");
Database.addText("es.lonelyHouseOpenBox", "Abrir la caja");
Database.addText("es.lonelyHouseShakeBox", "Agitar la caja");
Database.addText("es.lonelyHouseBreakLock", "Romper la cerradura");
Database.addText("es.lonelyHouseKickBox", "Pegar una patada a la caja");
Database.addText("es.lonelyHouseAskTheBoxToOpenItself", "Pedir a la caja que se abra sola");
Database.addText("es.lonelyHouseLureTheBoxWithACandy", "Tentar a la caja con un caramelo");
Database.addText("es.lonelyHouseTakeTheBox", "Llevarte la caja, seguramente necesites una llave de todas formas");
Database.addText("es.lonelyHouseOpenBoxResult", "La caja estÃ¡ cerrada con llave");
Database.addText("es.lonelyHouseShakeBoxResult", "No ocurre nada");
Database.addText("es.lonelyHouseBreakLockResult", "La cerradura resiste");
Database.addText("es.lonelyHouseKickBoxResult", "El pie te duele un poco, pero no ocurre nada");
Database.addText("es.lonelyHouseAskTheBoxToOpenItselfResult", "... sabes que estÃ¡s hablando con una caja, Â¿verdad?");
Database.addText("es.lonelyHouseLureTheBoxWithACandyResult", "A la caja parece no importarle");
Database.addText("es.lonelyHouseTakeTheBoxResult", "Probablemente hay algo interesante en esta Candy Box.");
Database.addText("es.lollipopFarmConstructMill", "Construir un molino (10Â 000 piruletas)");
Database.addText("es.lollipopFarmFeedMill", "Surtir al molino");
Database.addText("es.lollipopFarmCurrentCandiesProduction", "ProducciÃ³n de caramelos actual");
Database.addText("es.lollipopFarmDigPond", "Cavar un estanque (100Â 000 piruletas)");
Database.addText("es.lollipopFarmBuyLolligator", "Comprar un piruledrilo (1200 caramelos)");
Database.addText("es.lollipopFarmLolligatorsConversionText", "ConversiÃ³n caramelos -> piruletas activada");
Database.addText("es.lighthouseAskButton", "Preguntar");
Database.addText("es.lighthouseQuestionWho", "Â¿QuiÃ©n eres?");
Database.addText("es.lighthouseQuestionWhoSpeech", "Soy un cÃ­clope muy viejo.");
Database.addText("es.lighthouseQuestionWhat", "Â¿QuÃ© haces aquÃ­?");
Database.addText("es.lighthouseQuestionWhatSpeech", "Siempre vivo aquÃ­, esperando a que un barco venga. Ha pasado mucho tiempo desde que viese un barco, pero debo quedarme aquÃ­, mirando al mar, porque mi barco podrÃ­a llegar.");
Database.addText("es.lighthouseQuestionWhyEatCandies", "Â¿Por quÃ© querrÃ­a comer caramelos?");
Database.addText("es.lighthouseQuestionWhyEatCandiesSpeech", "Â¡Porque son buenos para la salud!");
Database.addText("es.lighthouseQuestionCandyBox", "Â¿QuÃ© es una Candy Box?");
Database.addText("es.lighthouseQuestionCandyBoxSpeech", "Es una caja muy antigua. Dicen que contiene todos los caramelos del mundo. La leyenda cuenta que quien consiga abrirla tendrÃ¡ tantos caramelos que cualquier cosa serÃ­a posible.");
Database.addText("es.lighthouseQuestionDragon", "El Dragon me dijo que viniera aquÃ­ porque quiero caramelos.");
Database.addText("es.lighthouseQuestionDragonSpeech", "Ah, ya veo... Bueno, no puedo darte caramelos de forma directa, pero sÃ­ algo que es esencial para conseguir un MONTÃ“N de caramelos. Pero primero hay que ponerte a prueba. Porque lo que tengo no se le puede dar a cualquiera. Resuelve este puzle y serÃ¡ tuyo.");
Database.addText("es.lighthouseFoundStone", "Â¡Enhorabuena! Has pasado la prueba y encontrado la piedra. Es muy valiosa, pero solo es Ãºtil si tienes las otras tres piedras como esta. Â¡Buena suerte!");
Database.addText("es.lighthouseFoundStoneAgain", "Buen trabajo, has resuelto el puzle de nuevo. Parece que te gusta.");
Database.addText("es.saveLocalSaveTitle", "Guardar por el navegador");
Database.addText("es.saveLocalSaveWhy", "Elige el guardado local si quieres seguir jugando en tu dispositivo y navegador actuales.");
Database.addText("es.saveLocalSaveWarning0", "Parece que tu navegador no soporta HTML5.");
Database.addText("es.saveLocalSaveWarning1", "DeberÃ­as actualizar tu navegador para poder usar la funciÃ³n de guardado local.");
Database.addText("es.saveLocalSaveChooseSlot", "Elige un slot para guardar:");
Database.addText("es.saveLocalSaveAutosaveEnabled", "Autoguardado activado");
Database.addText("es.saveLocalSaveChooseWhatToDo", "Elige quÃ© hacer:");
Database.addText("es.saveLocalSaveSaveButton", "Guardar");
Database.addText("es.saveLocalSaveAutosaveButton", "Guardar cada 10 minutos");
Database.addText("es.saveLocalSaveDisableAutosaveButton", "Desactivar autoguardado");
Database.addText("es.saveFileSaveTitle", "Guardar por texto");
Database.addText("es.saveFileSaveWhy0", "Elige guardado por texto si:");
Database.addText("es.saveFileSaveWhy1", "Quieres seguir jugando en otro dispositivo o navegador");
Database.addText("es.saveFileSaveWhy2", "Si quieres compartir tu partida con alguien");
Database.addText("es.saveFileSaveWhy3", "Por alguna razÃ³n quieres vaciar la cachÃ© de tu navegador");
Database.addText("es.saveFileSaveWhy4", "(borrarÃ¡ tus partidas guardadas locales)");
Database.addText("es.saveFileSaveButton", "Obtener la partida actual en texto");
Database.addText("es.saveFileSaveWarning", "Ahora copia este texto en algÃºn sitio (en un archivo, por ejemplo)");
Database.addText("es.saveLocalLoadTitle", "Cargar por navegador");
Database.addText("es.saveLocalLoadYouCan", "Puedes cargar una partida guardada local usando los enlaces siguientes:");
Database.addText("es.saveLocalLoadThanksTo", "Gracias a la magia de HTML5, deberÃ­as poder usar estos enlaces incluso sin estar conectado.");
Database.addText("es.saveFileLoadTitle", "Cargar por texto");
Database.addText("es.saveFileLoadPaste", "Pega el texto de la partida debajo y pulsa el botÃ³n \\\"Cargar\\\"");
Database.addText("es.saveFileLoadButton", "Cargar");
Database.addText("es.mountainsText0", "Â¡Has visto algo en las montaÃ±as!");
Database.addText("es.mountainsText1", "Parece interesante. PodrÃ­a ser Ãºtil.");
Database.addText("es.mountainsTextButton", "Escalar la montaÃ±a para conseguirlo");
Database.addText("es.mountainsTextAfter", "Â¡Has encontrado un Pogo! Se ha aÃ±adido a tu inventario.");
Database.addText("es.secondHouseIntroSpeech", "Hola, soy el Mercader de caramelos. HarÃ­a cualquier cosa por caramelos. Â¿QuÃ© necesitas?");
Database.addText("es.secondHouseLollipop1Speech", "Esta es una piruleta con sabor a limÃ³n. Â¡Mi favorita! Cuesta 60 caramelos, pero los merece.");
Database.addText("es.secondHouseLollipop2Speech", "Esta es una piruleta con sabor a fresa. EstÃ¡ rica. Me gusta su color rojo. Â¡Solo 60 caramelos!");
Database.addText("es.secondHouseLollipop3Speech", "Esta piruleta sabe a calabaza. Â¡Apuesto a que nunca has probado una! 60 caramelos y es tuya.");
Database.addText("es.secondHouseLollipopButtonText", "Comprar esta piruleta (60 caramelos)");
Database.addText("es.secondHouseMerchantHatSpeech", "PodrÃ­a venderte mi sombrero, pero es bastante valioso, Â¿sabes? TendrÃ¡s que darme un montÃ³n de caramelos por Ã©l. Digamos 1 millÃ³n de caramelos. Parece justo, Â¿no?");
Database.addText("es.secondHouseMerchantHatButtonText", "Comprar el Sombrero del Mercader (1Â 000Â 000 caramelos)");
Database.addText("es.secondHouseTimeRingSpeech", "Este es un Anillo del tiempo. Es mÃ¡gico. Te permite ralentizar el tiempo cuando estÃ¡s en apuros.");
Database.addText("es.secondHouseTimeRingButtonText", "Comprar el Anillo del tiempo (500 caramelos)");
Database.addText("es.secondHouseLeatherGlovesSpeech", "Estos guantes de cuero estÃ¡n hechos de piel de camello, son de buena calidad. Tengo muchas existencias, por eso estÃ¡n tan baratos: Â¡solo 300 caramelos!");
Database.addText("es.secondHouseLeatherBootsButtonText", "Comprar un par de Botas de cuero (300 caramelos)");
Database.addText("es.secondHouseLeatherBootsSpeech", "Estas botas de cuero de buena calidad estÃ¡n hechas de piel de camello. MantendrÃ¡n tus pies calientes.");
Database.addText("es.secondHouseLeatherGlovesButtonText", "Comprar un par de Guantes de cuero (300 caramelos)");
Database.addText("es.secondHouseChocolateBarSpeech", "Esta es una tableta de chocolate. No sÃ© para quÃ© sirve, pero resulta que es bastante rara, lo que explica su precio. Â¡800 caramelos y es tuya!");
Database.addText("es.secondHouseChocolateBarButtonText", "Comprar la tableta de chocolate (800 caramelos)");
Database.addText("es.outsideTheHoleButton", "Saltar en este gran hoyo que hay en el suelo");
Database.addText("es.theCaveExitText0", "Por fin llegaste a la salida de la cueva.");
Database.addText("es.theCaveExitText1", "Se ve un gran bosque desde aquÃ­.");
Database.addText("es.theCaveExitButtonText", "Salir de la cueva");
Database.addText("es.theCaveFirstSentenceWentStraight", "Sigues de frente.");
Database.addText("es.theCaveFirstSentenceWentLeft", "Tomas el camino de la izquierda.");
Database.addText("es.theCaveFirstSentenceWentRight", "Tomas el camino de la derecha.");
Database.addText("es.theCaveFirstSentenceYouAre", "EstÃ¡s en una cueva. Hay tres caminos frente a ti.");
Database.addText("es.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Ves algo raro en el suelo delante de ti.");
Database.addText("es.theCavePattern_ChocolateBarNowSeeChocolateBar", "Ves una tableta de chocolate delante de ti.");
Database.addText("es.theCavePattern_TreasureMapSentence", "Ves pequeÃ±as rocas dispuestas de una forma extraÃ±a.");
Database.addText("es.theCavePattern_MonkeyWizardSentence", "Te topas con un mono mago desnudo.");
Database.addText("es.theCavePattern_MonkeyWizardButton", "Desafiarlo");
Database.addText("es.theCavePattern_OctopusKingSentence", "Te topas con el Rey Pulpo. Parece repugnante.");
Database.addText("es.theCavePattern_OctopusKingButton", "Desafiarlo");
Database.addText("es.fortressInsideText0", "EstÃ¡s dentro de la Fortaleza del desierto.");
Database.addText("es.fortressInsideText1", "Puedes elegir entre tres puertas.");
Database.addText("es.fortressInsideText2", "Cada una de ellas lleva a una gran sala con un tesoro al final.");
Database.addText("es.fortressInsideEnterRoom1", "Entrar en la primera sala");
Database.addText("es.fortressInsideEnterRoom2", "Entrar en la segunda sala");
Database.addText("es.fortressInsideEnterRoom3", "Entrar en la tercera sala");
Database.addText("es.treasureButtonDig", "Cavar");
Database.addText("es.treasureButtonYouFound", "Â¡Has encontrado tres tabletas de chocolate!");
Database.addText("es.sorceressHutHello", "Hola, soy la Hechicera. PodrÃ­a enseÃ±arte un par de cosas de magia. TambiÃ©n te puedo dar algÃºn objeto interesante o lanzar un hechizo para ti. Â¡Pero todo tiene un precio! Y el precio serÃ¡n piruletas. Un montÃ³n de piruletas.");
Database.addText("es.sorceressHutClickedGrimoire", "Este es un Grimorio hecho para principiantes. Si lo llevas en tus misiones, podrÃ¡s lanzar hechizos simples pero Ãºtiles. Â¡Lo necesitas! Solo 5000 piruletas.");
Database.addText("es.sorceressHutBuyGrimoireButton", "Comprar este Grimorio (5Â 000 piruletas)");
Database.addText("es.sorceressHutBuyGrimoireSpeech", "Â¡Gracias por comprarlo! Con este Grimorio podrÃ¡s lanzar tres hechizos. Â¡Mucha suerte!");
Database.addText("es.sorceressHutClickedGrimoire2", "Este es un Grimorio avanzado. Si lo llevas en tus misiones, podrÃ¡s lanzar dos hechizos avanzados. Lo escribÃ­ yo misma y no fue fÃ¡cil. 20Â 000 piruletas es un precio justo.");
Database.addText("es.sorceressHutBuyGrimoire2Button", "Comprar este Grimorio (20Â 000 piruletas)");
Database.addText("es.sorceressHutBuyGrimoire2Speech", "Â¡Gracias por comprarlo! Con este Grimorio podrÃ¡s lanzar dos hechizos. Â¡Ãšsalos sabiamente!");
Database.addText("es.sorceressHutClickedCauldron", "Este es mi caldero. Me permite preparar pociones mÃ¡gicas. PodrÃ­a vendÃ©rtelo, pero es muy valioso... Te costarÃ¡ 100Â 000 piruletas.");
Database.addText("es.sorceressHutBuyCauldronButton", "Comprar el Caldero (100Â 000 piruletas)");
Database.addText("es.sorceressHutBuyCauldronSpeech", "Â¡Muchas gracias! Â¡100Â 000 piruletas para mÃ­! TambiÃ©n te he dado un manual de preparaciÃ³n de pociones. Te serÃ¡ Ãºtil.");
Database.addText("es.sorceressHutClickedHat", "Â¡La verdad es que mi sombrero es muy chulo! Pero no te lo puedo vender. Es muyyyyy valioso. En serio, no puedo. No insistas. No. No, no, no deberÃ­a hacerlo. Venga, te lo cambiarÃ©, pero por 1Â 000Â 000Â 000 piruletas. De todas formas, probablemente no puedas pagar eso.");
Database.addText("es.sorceressHutBuyHatButton", "Comprar el Sombrero de la Hechicera (1Â 000Â 000Â 000 piruletas)");
Database.addText("es.sorceressHutBuyHatSpeech", "Â¡Mil millones de piruletas para mÃ­Ã­Ã­Ã­Ã­! Pero ya no tengo ese sombrero... pero mil millones de piruletas, Â¡guau...! Ha merecido la pena.");
Database.addText("es.cauldronPreviousPageButton", "PÃ¡gina anterior");
Database.addText("es.cauldronNextPageButton", "PÃ¡gina siguiente");
Database.addText("es.cauldronWhatYouWantToPut", "Cosas que quieres meter en el caldero");
Database.addText("es.cauldronWhatIsIn", "Cosas que hay en el caldero");
Database.addText("es.cauldronWhatYouCanDo", "Lo que puedes hacer con ellas");
Database.addText("es.castleBigRoomComment", "Una sala grande");
Database.addText("es.castleARoomComment", "Una sala");
Database.addText("es.castleADarkRoomComment", "Una sala oscura");
Database.addText("es.castleCastleEntranceComment", "La entrada al Castillo");
Database.addText("es.castleTowerEntranceComment", "La entrada a la Torre");
Database.addText("es.castleNougatMonsterComment", "Atacar al Monstruo de guirlache gigante");
Database.addText("es.castleGuardsComment", "Atacar a los guardias");
Database.addText("es.castleStairsComment", "Escaleras");
Database.addText("es.buttonBackToTheCastle", "Volver al Castillo");
Database.addText("es.castleBigRoomHovenSpeechSad", "Â¡Hola! Soy un horno de pan muy viejo. SolÃ­a hornear miles de pasteles muy ricos, pero ya no me usa nadie. QuizÃ¡s... quizÃ¡s puedas ayudarme. Â¡Simplemente dame unos pocos dulces! No te preocupes, Â¡no te arrepentirÃ¡s! Puedes confiar en mÃ­.");
Database.addText("es.castleBigRoomHovenNotEnough", "Vaya... No tienes suficientes dulces, no puedo hacer nada. AsÃ­ soy inÃºtil. Soy el horno de pan inÃºtil, asÃ­ es como deberÃ­as llamarme.");
Database.addText("es.castleBigRoomHovenSpeechMadePainAuChocolat", "Â¡SÃ­! Â¡Muchas gracias! He usado 100 caramelos y una tableta de chocolate, y te he hecho... Â¡un pain au chocolat! Es mi dulce preferido. Â¡Espero que a ti tambien te guste!");
Database.addText("es.castleBigRoomHovenSpeechHappy", "Si quieres que te haga mÃ¡s dulces, Â¡solo dÃ­melo! Me encantarÃ­a ayudarte.");
Database.addText("es.castleBigRoomHovenSpeechHappyNotEnough", "Vaya, es una pena que no tengas suficientes dulces. Necesito 100 caramelos y una Tableta de chocolate. Â¡Vuelve cuando lo tengas!");
Database.addText("es.castleBigRoomHovenLetHovenTakeButton", "Darle al Horno los dulces que quiera");
Database.addText("es.castleBigRoomHovenThanks", "Â¡Gracias, Horno!");
Database.addText("es.dragonStopTickling", "Â¡Eh, tÃº! Por favor, deja de hacerme cosquillas.");
Database.addText("es.dragonStopTicklingButton", "Oh, vaya, perdona. Pensaba que debÃ­a atacarte.");
Database.addText("es.dragonTalking", "Soy el DragÃ³n y este es mi castillo. Veo que has conseguido entrar, debes de ser muy valiente... Me encantarÃ­a ayudar a alguien como tÃº. Â¿QuÃ© estÃ¡s buscando?");
Database.addText("es.dragonTalkingChallengeButton", "DesafÃ­o");
Database.addText("es.dragonTalkingFameButton", "Fama");
Database.addText("es.dragonTalkingCandiesButton", "Caramelos");
Database.addText("es.dragonTalkingChallengeSpeech", "Ah, Â¿asÃ­ que quieres un desafÃ­o? Creo que deberÃ­as viajar al mismo Infierno. Por todos es sabido que el Diablo es un oponente duro. Â¡SÃºbete a mi espalda y te llevarÃ©!");
Database.addText("es.dragonTalkingFameSpeech", "La mejor forma de hacerse famoso es enfrentarse al mismo desarrollador. SÃ© dÃ³nde vive y te puedo llevar allÃ­. Pero prepÃ¡rate, no serÃ¡ fÃ¡cil.");
Database.addText("es.dragonTalkingCandiesSpeech", "Ãšltimamente, todo lo que queremos son caramelos, Â¿no? Creo que un amigo mÃ­o podrÃ­a ayudarte con eso. Lo reconocerÃ¡s fÃ¡cilmente: solo tiene un ojo. Simplemente dile que me conoces.");
Database.addText("es.dragonTalkingChallengeAnswer", "Â¡Entonces vamos!");
Database.addText("es.dragonTalkingFameAnswer", "Estoy listo");
Database.addText("es.dragonTalkingCandiesAnswer", "Â¡Vale, gracias!");
Database.addText("es.buttonBackToCastle", "Volver al Castillo");
Database.addText("es.talkingCandySpeechNoBox", "Â¡Ey! Soy el Caramelo parlante. Casi te pasas el juego. Solo te falta encontrar la Candy Box. EstÃ¡ en una casa fuera del Pueblo. Â¡Este es el Ãºltimo paso!");
Database.addText("es.talkingCandySpeech1", "Â¡Ey! Soy el Caramelo parlante. Enhorabuena, Â¡te has pasado el juego! AbrirÃ© la Candy Box por ti. Este es tu premio. Â¿Quieres que continÃºe?");
Database.addText("es.talkingCandySpeech2", "Â¡Hecho! Ahora puedes entrar en ella. Espero que el juego te haya gustado :)");
Database.addText("es.talkingCandyButton", "Â¡Â¡SÃ­!!");
Database.addText("es.lighthousePuzzleResetButton", "Reiniciar");
Database.addText("hu.mapVillageComment", "A falu");
Database.addText("hu.mapFortressComment", "A sivatagi erÅ‘d");
Database.addText("hu.mapATreeComment", "Egy fa");
Database.addText("hu.mapTheDesertComment", "A sivatag");
Database.addText("hu.mapWishingWellComment", "Egy kÃ­vÃ¡nsÃ¡gkÃºt");
Database.addText("hu.mapLonelyHouseComment", "Egy magÃ¡nyos hÃ¡z");
Database.addText("hu.mapForestComment", "Az erdÅ‘");
Database.addText("hu.mapCastleEntranceComment", "A kastÃ©ly bejÃ¡rata");
Database.addText("hu.mapCastleComment", "A kastÃ©ly");
Database.addText("hu.mapDragonComment", "Egy sÃ¡rkÃ¡ny");
Database.addText("hu.candyBoxEatCandiesButton", "Minden cukrot megesz");
Database.addText("hu.candyBoxThrowCandiesButton", "10 cukrot a fÃ¶ldre dob");
Database.addText("hu.mapVillageAHouseComment", "Egy hÃ¡z");
Database.addText("hu.mapVillageForgeComment", "A kohÃ³");
Database.addText("hu.buttonBackToTheMap", "Vissza a tÃ©rkÃ©pre");
Database.addText("hu.mapSorceressHutComment", "Egy banya kunyhÃ³ja");
Database.addText("hu.buttonBackToTheVillage", "Vissza a faluba");
Database.addText("hu.mapATreeIntroductionSpeech", "Ãœdv, Ã©n vagyok a mÃ³kus. Tudok neked cukorkÃ¡t Ã©s rengeteg egyebet adni. Tudom, hogy mennyire szereted a cukorkÃ¡t. De Ã©n olyan magÃ¡nyos vagyok ebben az erdÅ‘ben.");
Database.addText("hu.mapATreeIntroductionButton", "Hogyan segÃ­thetek neked?");
Database.addText("hu.mapATreeFirstQuestion", "KÃ©rdÃ©seket fogok feltenni neked. Ha helyesen vÃ¡laszolsz, megkapod a legÃ©desebb Ã©dessÃ©geket! Az elsÅ‘ : tÃ©nyleg szereted a cukorkÃ¡kat? (angolul vÃ¡laszolj)");
Database.addText("hu.mapATreeSecondQuestion", "Pontosan! TessÃ©k, itt van 20 cukorka. EgÃ©szÃ­tsd ki ezt a betÅ±sorozatot Ã©s egy Ãºjabb jutalmat kapsz: A, K, R, O, K, U, ?");
Database.addText("hu.mapATreeThirdQuestion", "Cukorka! MÃ¡r kapsz is tÅ‘lem 100 darabot. KÃ¶vetkezÅ‘ kÃ©rdÃ©s : hÃ¡ny cukorkÃ¡ja van a vilÃ¡g legcukrosabb emberÃ©nek?");
Database.addText("hu.mapATreeFourthQuestion", "TessÃ©k, 500 cukorka neked! A kÃ¶vetkezÅ‘ jutalom mÃ©g Ã©rdekesebb lesz... Itt egy rejtvÃ©ny : Egy Å‘si erdÅ‘ben nÅ‘ egy nagyon Ã¶reg fa, amin a vilÃ¡g leginteligensebb Ã¡llatai Ã©lnek. ÃllÃ­tÃ³lag ennek a fÃ¡nak 60 gyÃ¶kere, 360 Ã¡ga Ã©s 2160 levele van. HÃ¡ny jelÃ¶lÃ©s van a fa tÃ¶rzsÃ©n?");
Database.addText("hu.mapATreeFifthQuestion", "GratulÃ¡lok! ValÃ³ban a sajÃ¡t fÃ¡mrÃ³l beszÃ©ltem. Itt van neked 3 nyalÃ³ka. Okosan hasznÃ¡ld fel Å‘ket! Itt a kÃ¶vetkezÅ‘ rejtvÃ©ny : Ha teliholdkor beledobom a sÃ¡rga sapkÃ¡mat a vÃ¶rÃ¶s tengerbe, mi tÃ¶rtÃ©nik a sÃ¡rga sapkÃ¡mmal? (angolul vÃ¡laszolj)");
Database.addText("hu.mapATreeTicTacToeIntro", "Helyes a vÃ¡lasz! Nem is volt annyira nehÃ©z. Adok neked hÃ¡rom csokolÃ¡dÃ© rudat! A kÃ¶vetkezÅ‘ jutalomhoz kissÃ© megvÃ¡ltoztatjuk a szabÃ¡lyokat. JÃ¡tszanod kell velem! KÃ©szen Ã¡llsz?");
Database.addText("hu.mapATreeTicTacToeIntroButton", "NanÃ¡!");
Database.addText("hu.mapATreeTicTacToeLetsPlay", "AmÅ‘bÃ¡zni fogunk, hÃ¡romszor hÃ¡rmas tÃ¡blÃ¡n. Te leszel az X, Ã©s Ã©n leszek a O. FelvÃ¡ltva fogunk jÃ¡tszani, Ã©s a cÃ©l az, hogy hÃ¡rom jelet rakjunk le egymÃ¡s utÃ¡n egy sorba. Te kezdesz elsÅ‘kÃ©nt!");
Database.addText("hu.mapATreeTicTacToeNobodyWins", "Teljesen betelt a tÃ¡bla, Ã©s egyikÃ¼nk se tudott hÃ¡rmat sorba rakni: senki se nyert! Ãšjra akarod prÃ³bÃ¡lni?");
Database.addText("hu.mapATreeTicTacToeYouLose", "HÃ¡rmat raktam egy sorba! Ã‰n gyÅ‘ztem. Ãšjra akarod prÃ³bÃ¡lni?");
Database.addText("hu.mapATreeTicTacToeTryAgainButton", "Igen, akarom!");
Database.addText("hu.mapATreeTicTacToeYouWin", "VÃ¡Ã³, hÃ¡t ez egy nem vÃ¡rt mozdulat volt. De nem ellenkezhetek, hiszen hÃ¡rmat raktÃ¡l egy sorba. GyÅ‘ztÃ©l! Fogd ezt a kulcsot! Ez a falu egyik hÃ¡zÃ¡nak ajtajÃ¡t nyitja.");
Database.addText("hu.mapATreeTicTacToeAnymoreSweet", "KÃ¶szÃ¶nÃ¶m mÃ³kus! Van mÃ©g kihÃ­vÃ¡sod a szÃ¡momra?");
Database.addText("hu.mapATreeNoMoreChallenge", "Sajnos nincs mÃ¡r szÃ¡modra mÃ¡s kihÃ­vÃ¡som... De jÃ³ mÃ³ka volt jÃ¡tszani veled, kÃ¶szÃ¶nÃ¶m!");
Database.addText("hu.buttonExitQuestKeeping", "KilÃ©psz a kÃ¼ldetÃ©sbÅ‘l (Ã©s megtartod amit talÃ¡ltÃ¡l)");
Database.addText("hu.buttonExitQuestNoKeeping", "KilÃ©psz a kÃ¼ldetÃ©sbÅ‘l (Ã©s nem tartod meg amit talÃ¡ltÃ¡l)");
Database.addText("hu.buttonExitQuestNoKeepingBecauseLose", "KilÃ©psz a kÃ¼ldetÃ©sbÅ‘l (Ã©s nem tartod meg amit talÃ¡ltÃ¡l mert elbuktÃ¡l)");
Database.addText("hu.mapVillageLockedHouseComment", "Egy bezÃ¡rt hÃ¡z");
Database.addText("hu.mapVillageForgeIntroductionSpeech", "Ãœdv! Ã‰n egy kovÃ¡cs vagyok. Eladhatok neked pÃ¡r fegyvert Ã©s felszerelÃ©st.");
Database.addText("hu.mapVillageForgeIntroductionSpeechNoMoreToSell", "Ãœdv! Ã‰n egy kovÃ¡cs vagyok. Sajnos nincs mit eladnom a szÃ¡modra. TalÃ¡n gyere vissza kÃ©sÅ‘bb!");
Database.addText("hu.mapVillageFifthHouseNoWeaponSpeech", "Ãœdv. A pincÃ©m tele van patkÃ¡nyokkal, Ã©s el kellene intÃ©znem Å‘ket... bÃ¡rcsak valaki akinÃ©l fegyver van segÃ­thetne nekem...");
Database.addText("hu.mapVillageFifthHouseWeaponSpeech", "HÃ©, te! Ãšgy lÃ¡tom nÃ¡lad van fegyver! Ha megÃ¶lÃ¶d a patkÃ¡nyokat akik a pincÃ©mben Ã³lÃ¡lkodnak, akkor megjutalmazlak!");
Database.addText("hu.mapVillageFifthHouseAgree", "MenjÃ¼nk hÃ¡t!");
Database.addText("hu.mapVillageFifthHouseCellarDone", "KÃ¶szÃ¶nÃ¶m, hogy elintÃ©zted Å‘ket! Itt van egy nagyon Ã©rtÃ©kes jutalom a szÃ¡modra : a vilÃ¡g tÃ©rkÃ©pe. Szerintem te tÃ¶bbet fogod hasznÃ¡lni mint Ã©n.");
Database.addText("hu.mapVillageTheShopComment", "A bolt");
Database.addText("hu.mapBridgeComment", "A hÃ­d");
Database.addText("hu.mapFarmComment", "A nyalÃ³ka farm");
Database.addText("hu.mapCaveEntranceComment", "Egy barlang bejÃ¡rata");
Database.addText("hu.mapLighthouseComment", "A vilÃ¡gÃ­tÃ³torony");
Database.addText("hu.mapPierComment", "A kikÃ¶tÅ‘");
Database.addText("hu.mapTheHoleComment", "A gÃ¶dÃ¶r");
Database.addText("hu.candyBoxRequestStatusBarUnlocked", "KÃ©rj egy Ãºj dolgot a kÃ©szÃ­tÅ‘tÅ‘l (30 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedCfg", "KÃ©rj mÃ©g egyet (5 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedSave", "KÃ©rj Ãºjra egyet (5 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedHealthBar", "KÃ©rj valami sokkal izgalmasabbat (5 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedMap", "Az utolsÃ³ kÃ©rÃ©s! Ez meg fogja Ã©rni a cukorkÃ¡kat. (10 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedComment", "ElÃ©rhetÅ‘ lett a stÃ¡tusz fÃ¼l! (fent)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedCfgComment1", "MostantÃ³l elÃ©red a konfigurÃ¡ciÃ³s fÃ¼let.");
Database.addText("hu.candyBoxRequestStatusBarUnlockedCfgComment2", "MegvÃ¡ltoztathatod a jÃ¡tÃ©k nyelvÃ©t, ha akarod.");
Database.addText("hu.candyBoxRequestStatusBarUnlockedSaveComment", "Hirtelen felbukkant egy mentÃ©s fÃ¼l!");
Database.addText("hu.candyBoxRequestStatusBarUnlockedHealthBarComment", "Itt van 100 Ã©leterÅ‘ pont. Nagyon hasznosak lesznek.");
Database.addText("hu.cfgChooseLanguage", "VÃ¡lassz nyelvet :");
Database.addText("hu.cfgInvertColors", "MegfordÃ­tod a szÃ­neket?");
Database.addText("hu.gridItemMainMapName", "A tÃ©rkÃ©p");
Database.addText("hu.gridItemMainMapDescription", "Egy tÃ©rkÃ©p a vilÃ¡grÃ³l");
Database.addText("hu.gridItemPogoStickName", "Pogo rÃºd");
Database.addText("hu.gridItemPogoStickDescription", "Ezzel a tÃ¡rggyal ugrÃ¡lni tudsz a kÃ¼ldetÃ©seken!");
Database.addText("hu.gridItemTimeRingName", "Egy idÅ‘ gyÅ±rÅ±");
Database.addText("hu.gridItemTimeRingDescription", "Ez a tÃ¡rgy egy Ãºj kÃ©pessÃ©ggel ruhÃ¡z fel a kÃ¼ldetÃ©seken : le tudod lassÃ­tani az idÅ‘t. Ha tÃºl gyors szÃ¡modra az akciÃ³, hasznÃ¡ld az idÅ‘ gyÅ±rÅ±t!");
Database.addText("hu.gridItemThirdHouseKeyName", "A harmadik hÃ¡z kulcsa");
Database.addText("hu.gridItemThirdHouseKeyDescription", "Ezzel a kulccsal bejuthatsz a falu harmadik hÃ¡zÃ¡ba.");
Database.addText("hu.gridItemFeatherName", "Egy sivatagi madÃ¡r tolla");
Database.addText("hu.gridItemFeatherDescription", "hu.ek a varÃ¡zslatos tollnak a segÃ­tsÃ©gÃ©vel magasabbra ugorhatsz a pogo rÃºddal!");
Database.addText("hu.gridItemFeatherDescriptionNoPogoStick", "Valamilyen furcsa oknÃ¡l fogva Ãºgy Ã©rzed, hogy ez a toll nagyon hasznos lehet szÃ¡modra, ha lenne pogo rudad...");
Database.addText("hu.gridItemSpongeName", "Egy varÃ¡zslatos szivacs");
Database.addText("hu.gridItemSpongeDescription", "hu.ek a varÃ¡zslatos szivacsnak a segÃ­tsÃ©gÃ©vel Ã¶sszenyomhatod magadat, akÃ¡rcsak egy szivacs, Ã­gy kisebb leszel.");
Database.addText("hu.gridItemFortressKeyName", "A sivatagi erÅ‘d kulcsa");
Database.addText("hu.gridItemFortressKeyDescription", "Ezzel a kulccsal belÃ©phetsz a nagyon Å‘si erÅ‘dbe, ami a sivatag felett talÃ¡lhatÃ³. Ki tudja, hogy mit talÃ¡lsz ott?");
Database.addText("hu.gridItemHeartPendantName", "Egy szÃ­v alakÃº nyakÃ©k");
Database.addText("hu.gridItemHeartPendantDescription", "Ez a szÃ­v alakÃº nyakÃ©k megnÃ¶veli a maximÃ¡lis Ã©leterÅ‘ pontjaidat amÃ­g hordod.");
Database.addText("hu.gridItemHeartPlugName", "Egy szÃ­v alakÃº dugÃ³");
Database.addText("hu.gridItemHeartPlugDescription", "Ez egy szÃ­v alakÃº dugÃ³, ami vasbÃ³l, pÃ³klÃ¡bakbÃ³l Ã©s speciÃ¡lis \"szÃ­v likÅ‘rbÅ‘l\" kÃ©szÃ¼lt, Ã©s megnÃ¶veli a maximÃ¡lis Ã©leterÅ‘ pontjaidat 20 szÃ¡zalÃ©kkal!");
Database.addText("hu.gridItemBeginnersGrimoireName", "KezdÅ‘k varÃ¡zskÃ¶nyve");
Database.addText("hu.gridItemBeginnersGrimoireDescription", "Ez a varÃ¡zskÃ¶nyv hÃ¡rom varÃ¡zslattal ruhÃ¡z fel tÃ©ged, amiket kÃ¶nnyÅ± varÃ¡zsolni. ValÃ³jÃ¡ban kezdÅ‘knek kÃ©szÃ¼lt. HasznÃ¡lhatod a sav esÅ‘ varÃ¡zslatot (rengeteg savas esÅ‘csepp esik rÃ¡ az ellenfeleidre), a tÅ±zgolyÃ³ varÃ¡zslatot (egy Ã³riÃ¡si tÅ±zgolyÃ³ repÃ¼l az ellenfeleid felÃ©), valamint a teleportÃ¡lÃ¡s varÃ¡zslatot (amivel kiszÃ¡mÃ­thatatlan helyre teleportÃ¡lhatsz).");
Database.addText("hu.gridItemAdvancedGrimoireName", "HaladÃ³k varÃ¡zskÃ¶nyve");
Database.addText("hu.gridItemAdvancedGrimoireDescription", "A haladÃ³k varÃ¡zskÃ¶nyve kÃ©t varÃ¡zslattal ruhÃ¡z fel tÃ©ged : a tÃ¶rlÃ©s mÃ¡giÃ¡val Ã©s a tÃ¼skÃ©s pajzs mÃ¡giÃ¡val. Az elsÅ‘ mindenfÃ©le mÃ¡giÃ¡t eltÃ¶rÃ¶l a kÃ¼ldetÃ©sben, mÃ©g azt is, amit te Ã©s ellenfeled hasznÃ¡lt. A mÃ¡sodik lebegÅ‘ tÃ¼skÃ©s pajzsot alkot kÃ¶rÃ¼lÃ¶tted, amik Ã©rintÃ©sre megsebzik az ellenfeleidet.");
Database.addText("hu.gridItemBlackMagicGrimoireName", "Fekete mÃ¡giÃ¡s varÃ¡zskÃ¶nyv");
Database.addText("hu.gridItemBlackMagicGrimoireDescription", "Ezt a varÃ¡zskÃ¶nyvet egy barlangban talÃ¡ltad, egy nagyon nehezen elÃ©rhetÅ‘ helyen, Ã©s Ã©rthetÅ‘, hogy miÃ©rt. Ez kÃ©t erÅ‘s fekete mÃ¡giÃ¡t tartalmaz. Az elsÅ‘vel elÃ©dvarÃ¡zsol egy Ã³riÃ¡si obszidiÃ¡n falat, ami hasznos lehet ellenfeleid lelassÃ­tÃ¡sÃ¡ra. A mÃ¡sodik egy dÃ©mon rajt idÃ©z meg, akik mindenkit megtÃ¡madnak a kÃ¼ldetÃ©sen belÃ¼l, mÃ©g tÃ©ged is. Ezzel lÃ©gy Ã³vatos.");
Database.addText("hu.gridItemUnicornHornName", "Egy unikornis szarva");
Database.addText("hu.gridItemUnicornHornDescription", "Ez a varÃ¡zslatos szarv valaha egy unikornisÃ© volt. ErÅ‘s gyÃ³gyÃ­tÃ³ hatalma van, ami sokat fog segÃ­teni neked. Ãšgy hallottad, hogy ezt az unikornist valaha Charlienak hÃ­vtÃ¡k.");
Database.addText("hu.gridItemXinopherydonClawName", "Egy xinopherydon karma");
Database.addText("hu.gridItemXinopherydonClawDescription", "Ez a karom valaha egy xinopherydonÃ© volt, ami egy kÃ©tfejÅ± Å‘si Ã¡llat, amire mindenki azt hitte, hogy mÃ¡r kihalt. MegduplÃ¡zza a jelenlegi fegyvered sebzÃ©sÃ©t.");
Database.addText("hu.gridItemPitchforkName", "Egy vasvilla");
Database.addText("hu.gridItemPitchforkDescription", "Ezzel a speciÃ¡lis vasvillÃ¡val Ãºgy is meglazÃ­thatod a talajt, hogy nem forgatod fel, Ã­gy megtartod a fÃ¶ldalatti Ã¶koszisztÃ©mÃ¡t. Ez meghÃ¡romszorozza a nyalÃ³ka farmod termelÃ©sÃ©t.");
Database.addText("hu.gridItemShellPowderName", "KagylÃ³por");
Database.addText("hu.gridItemShellPowderDescription", "A fÃ¶ldmÅ±vesek gyakran hasznÃ¡lnak kagylÃ³port, hogy megnÃ¶veljÃ©k a nyalÃ³ka farmjuk hatÃ©konysÃ¡gÃ¡t. Ez a por meghÃ¡romszorozza a nyalÃ³ka farmod termelÃ©sÃ©t!");
Database.addText("hu.gridItemPName", "A P kÅ‘");
Database.addText("hu.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("hu.gridItemLName", "Az L kÅ‘");
Database.addText("hu.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("hu.gridItemAName", "Az A kÅ‘");
Database.addText("hu.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("hu.gridItemYName", "Az Y kÅ‘");
Database.addText("hu.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("hu.gridItemRedSharkFinName", "Egy varÃ¡zslatos piros cÃ¡pauszony");
Database.addText("hu.gridItemRedSharkFinDescription", "Ez a varÃ¡zslatos uszony nagyban megnÃ¶veli a tÅ±zgolyÃ³ varÃ¡zslatod sebzÃ©sÃ©t. VÃ©gre ez a tÅ±zgolyÃ³ hasznos is lesz.");
Database.addText("hu.gridItemGreenSharkFinName", "Egy varÃ¡zslatos zÃ¶ld cÃ¡pauszony");
Database.addText("hu.gridItemGreenSharkFinDescription", "Ez a varÃ¡zslatos uszony elhozza a termÃ©szet erejÃ©t a nyalÃ³ka farmodra! A termelÃ©sedet megÃ¶tszÃ¶rÃ¶zi.");
Database.addText("hu.gridItemPurpleSharkFinName", "Egy varÃ¡zslatos lila cÃ¡pauszony");
Database.addText("hu.gridItemPurpleSharkFinDescription", "Ez a varÃ¡zslatos uszony egy Ãºj fekete mÃ¡giÃ¡val ruhÃ¡z fel tÃ©ged. Egy kÃ¼ldetÃ©sen belÃ¼l csak egyszer hasznÃ¡lhatod fel. Ezzel lÃ©gy Ã³vatos!");
Database.addText("hu.gridItemTalkingCandyName", "Egy beszÃ©lÅ‘ cukorka");
Database.addText("hu.gridItemTalkingCandyDescription", "Ez a beszÃ©lÅ‘ cukorka akkor jelent meg, mikor beraktÃ¡l nÃ©gy kÃ¶vet a kastÃ©ly tornyÃ¡nak tetejÃ©be. Å talÃ¡n tud segÃ­teni kinyitni a candy box-ot...");
Database.addText("hu.inventorySpecialNothingEqItem", "Semmi");
Database.addText("hu.eqItemWeaponWoodenSwordName", "Fa kard");
Database.addText("hu.eqItemWeaponWoodenSwordDescription", "Egy egyszerÅ±, fÃ¡bÃ³l kÃ©szÃ¼lt kard");
Database.addText("hu.eqItemWeaponIronAxeName", "Vas balta");
Database.addText("hu.eqItemWeaponIronAxeDescription", "Egy egyszerÅ± vas balta. JÃ³l megcsiszolt. ErÅ‘sebb, mint a fa kard.");
Database.addText("hu.eqItemWeaponPolishedSilverSwordName", "Megcsiszolt ezÃ¼st kard");
Database.addText("hu.eqItemWeaponPolishedSilverSwordDescription", "Egy erÅ‘s kard, ami tÃ¼skÃ©kkel van tele.");
Database.addText("hu.eqItemWeaponTrollBludgeonName", "A troll bunkÃ³sbotja");
Database.addText("hu.eqItemWeaponTrollBludgeonDescription", "Ezt a bunkÃ³sbotot a hidat Å‘rzÅ‘ trolltÃ³l vetted el. LassÃº, de elÃ©g hatÃ©konyan lapÃ­tja szÃ©t ellenfeleidet.");
Database.addText("hu.eqItemWeaponTribalSpearName", "Egy tÃ¶rzsi lÃ¡ndzsa");
Database.addText("hu.eqItemWeaponTribalSpearDescription", "Ezt a tÃ¶rzsi lÃ¡ndzsÃ¡t egy nagy gÃ¶dÃ¶rben talÃ¡ltad egy elveszett tÃ¶rzsi harcos hullÃ¡jÃ¡nÃ¡l. ElÅ‘szÃ¶r nehÃ©z kezelni, de amint belejÃ¶ssz jÃ³ fegyver lesz.");
Database.addText("hu.eqItemWeaponSummoningTribalSpearName", "Egy idÃ©zÅ‘s tÃ¶rzsi lÃ¡ndzsa");
Database.addText("hu.eqItemWeaponSummoningTribalSpearDescription", "Ez a varÃ¡zslatos tÃ¶rzsi lÃ¡ndzsa az mellett, hogy kissÃ© erÅ‘sebb mint a normÃ¡l tÃ¶rzsi lÃ¡ndzsa, kÃ©pes megidÃ©zni tÃ¶rzsi harcosokat, akik segÃ­tenek neked a kÃ¼ldetÃ©sek sorÃ¡n.");
Database.addText("hu.eqItemWeaponMonkeyWizardStaffName", "A majom varÃ¡zslÃ³ botja");
Database.addText("hu.eqItemWeaponMonkeyWizardStaffDescription", "Ez a bot valaha a barlangban talÃ¡lhatÃ³ majom varÃ¡zslÃ³Ã© volt. Gyakran idÃ©z meg magÃ¡tÃ³l varÃ¡zslatokat, amik az ellenfeleidet cÃ©lozzÃ¡k meg.");
Database.addText("hu.eqItemWeaponEnchantedMonkeyWizardStaffName", "A majom varÃ¡zslÃ³ botja (elbÅ±vÃ¶lt)");
Database.addText("hu.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Ez a bot gyorsabb, mint a nem elbÅ±vÃ¶lt vÃ¡ltozat, Ã©s sokkalta tÃ¶bbet varÃ¡zsol.");
Database.addText("hu.eqItemWeaponGiantSpoonName", "Egy Ã³riÃ¡si kanÃ¡l");
Database.addText("hu.eqItemWeaponGiantSpoonDescription", "Ez az Ã³riÃ¡si kanÃ¡l a sivatagi erÅ‘dben volt egy nagy teÃ¡skannÃ¡ban. Nem tudsz arrÃ³l, hogy valaki ezt kanÃ¡lkÃ©nt hasznÃ¡lta volna, de ha igen, akkor az nagyon nagy lehetett. ValÃ³szÃ­nÅ±leg nem szeretnÃ©l talÃ¡lkozni vele.");
Database.addText("hu.eqItemWeaponGiantSpoonOfDoomName", "A VÃ©gzet Ã³riÃ¡si kanala");
Database.addText("hu.eqItemWeaponGiantSpoonOfDoomDescription", "Ez az Ã³riÃ¡si kanÃ¡l mÃ©g erÅ‘sebb, mint az Ã¡tlagos vÃ¡ltozat amit talÃ¡lhatsz, mondjuk egy teÃ¡skannÃ¡ban. BÃ¡r ez mellett elÃ©ggÃ© lassÃº.");
Database.addText("hu.eqItemWeaponScytheName", "Egy kasza");
Database.addText("hu.eqItemWeaponScytheDescription", "Azt mondjÃ¡k, hogy ez a kasza valaha magÃ¡hoz a HalÃ¡lhoz tartozott. ExtrÃ©m gyors.");
Database.addText("hu.eqItemHatMerchantHatName", "Az Ã¡rus sapkÃ¡ja");
Database.addText("hu.eqItemHatMerchantHatDescription", "Ezt a sapkÃ¡t a cukorka Ã¡rus adta el neked. A cukorka Ã¡rus imÃ¡dja a cukorkÃ¡kat. Ez a sapka meghÃ©tszerezi a kÃ¼ldetÃ©seken szerzett cukorkÃ¡k mennyisÃ©gÃ©t!");
Database.addText("hu.eqItemHatSorceressHatName", "A banya sapkÃ¡ja");
Database.addText("hu.eqItemHatSorceressHatDescription", "Ezt a sapkÃ¡t a banya adta el neked. Ez megnÃ¶veli a varÃ¡zslataid Ã©s italaid hatÃ¡sÃ¡t.");
Database.addText("hu.eqItemHatOctopusKingCrownName", "A polip kirÃ¡ly koronÃ¡ja");
Database.addText("hu.eqItemHatOctopusKingCrownDescription", "Hogyha ez a korona rajtad van, akkor magabiztosabb vagy. Nem ad semmilyen elÅ‘nyt a kÃ¼ldetÃ©seken, de az Ã¶nbizalom fontos dolog!");
Database.addText("hu.eqItemHatOctopusKingCrownWithJaspersName", "JÃ¡spiskÃ¶ves polip kirÃ¡ly korona");
Database.addText("hu.eqItemHatOctopusKingCrownWithJaspersDescription", "Ez az elbÅ±vÃ¶lt korona aranybÃ³l Ã©s vÃ¶rÃ¶s jÃ¡spisbÃ³l van. A kÃ¼ldetÃ©seken belÃ¼l gyakran varÃ¡zsol tÅ±zgolyÃ³kat kÃ¶rÃ©d. Ã‰s mÃ©g ragyog is!");
Database.addText("hu.eqItemHatOctopusKingCrownWithObsidianName", "ObszidiÃ¡nos polip kirÃ¡ly korona");
Database.addText("hu.eqItemHatOctopusKingCrownWithObsidianDescription", "Ez az elbÅ±volt korona aranybÃ³l Ã©s obszidiÃ¡nbÃ³l van. CsodÃ¡latos. A kÃ¼ldetÃ©seken belÃ¼l megidÃ©z egy polip kirÃ¡lyt, hogy segÃ­tsen neked a harcokban. Micsoda csÃ¡pos tÃ¡rs!");
Database.addText("hu.eqItemGlovesLeatherGlovesName", "BÅ‘r kesztyÅ±");
Database.addText("hu.eqItemGlovesLeatherGlovesDescription", "Ezek a kesztyÅ±k semmit se csinÃ¡lnak. De legalÃ¡bb puhÃ¡k Ã©s kÃ©nyelmesek!");
Database.addText("hu.eqItemGlovesRedEnchantedGlovesName", "VÃ¶rÃ¶s elbÅ±vÃ¶lt kesztyÅ±");
Database.addText("hu.eqItemGlovesRedEnchantedGlovesDescription", "Ezek az elbÅ±vÃ¶lt kesztyÅ±k halvÃ¡ny piros fÃ©nyt Ã¡rasztanak kÃ¶rÃ©d a sÃ¶tÃ©tben. A kÃ¼ldetÃ©seken vÃ©letlenszerÅ± tÅ±zgolyÃ³kat dobÃ¡lnak az ellenfeleid felÃ©, ami biztosan hasznos lehet.");
Database.addText("hu.eqItemGlovesPinkEnchantedGlovesName", "RÃ³zsaszÃ­n elbÅ±vÃ¶lt kesztyÅ±");
Database.addText("hu.eqItemGlovesPinkEnchantedGlovesDescription", "Ezek az elbÅ±vÃ¶lt kesztyÅ±k mindenen amihez hozzÃ¡Ã©rsz rÃ³zsaszÃ­n jelet hagynak. A kÃ¼ldetÃ©seken belÃ¼l folyamatosan gyÃ³gyÃ­tanak tÃ©ged.");
Database.addText("hu.eqItemBootsRocketBootsName", "RakÃ©ta cipÅ‘k");
Database.addText("hu.eqItemBootsRocketBootsDescription", "Ezek a menÅ‘ rakÃ©ta cipÅ‘k engedÃ©lyezik a levegÅ‘ben valÃ³ ugrÃ¡lÃ¡st, szÃ³val ezekkel gyakorlatilag repÃ¼lhetsz!");
Database.addText("hu.eqItemBootsLeatherBootsName", "BÅ‘r cipÅ‘k");
Database.addText("hu.eqItemBootsLeatherBootsDescription", "EgyszerÅ± bÅ‘r cipÅ‘k. Semmi kÃ¼lÃ¶nÃ¶s nincs bennÃ¼k.");
Database.addText("hu.eqItemBootsBootsOfIntrospectionName", "A betekintÃ©s cipÅ‘i");
Database.addText("hu.eqItemBootsBootsOfIntrospectionDescription", "Csak lazulj el egy kicsit Ã©s lÃ©legezz mÃ©lyeket. Hogyha ezek a cipÅ‘k vannak rajtad, akkor addig nem mozdulsz elÅ‘re, amÃ­g a fÃ¶ldet Ã©ri a lÃ¡bad.");
Database.addText("hu.eqItemBodyArmoursLightweightBodyArmourName", "Egy kÃ¶nnyÅ± pÃ¡ncÃ©l");
Database.addText("hu.eqItemBodyArmoursLightweightBodyArmourDescription", "Ez a pÃ¡ncÃ©l gyenge vÃ©delmet nyÃºjt. KissÃ© ellenÃ¡llÃ³bb leszel a tÃ¡madÃ¡sokkal szemben.");
Database.addText("hu.eqItemBodyArmoursKnightBodyArmourName", "Egy lovag pÃ¡ncÃ©lja");
Database.addText("hu.eqItemBodyArmoursKnightBodyArmourDescription", "Ez az erÅ‘s pÃ¡ncÃ©l alaposan megvÃ©d tÃ©ged. EllenÃ¡llÃ³vÃ¡ tesz a tÃ¡madÃ¡sokkal szemben.");
Database.addText("hu.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Egy elbÅ±vÃ¶lt lovagi pÃ¡ncÃ©l");
Database.addText("hu.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Ez a pÃ¡ncÃ©l nagyon kÃ¼lÃ¶nleges. Ez NAGYON ellenÃ¡llÃ³vÃ¡ tesz a tÃ¡madÃ¡sokkal szemben, de ugyanakkor a fegyvered sebzÃ©sÃ©t felezi.");
Database.addText("hu.mapVillageForgeBuyWoodenSwordButton", "Fa kard megvÃ©tele (150 cukorka)");
Database.addText("hu.mapVillageForgeBuyWoodenSwordSpeech", "KÃ¶szÃ¶nÃ¶m, hogy megvetted! Ez a fa kard elÃ©ggÃ© gyenge, de kezdetnek megteszi.");
Database.addText("hu.mapVillageForgeBuyIronAxeButton", "Vas balta megvÃ©tele (400 cukorka)");
Database.addText("hu.mapVillageForgeBuyIronAxeSpeech", "RemÃ©lem, hogy tetszik neked ez a vas balta. MÃ©g meg is csiszoltam neked!");
Database.addText("hu.mapVillageForgeBuyPolishedSilverSwordButton", "Megcsiszolt ezÃ¼st kard megvÃ©tele (2 000 cukorka)");
Database.addText("hu.mapVillageForgeBuyPolishedSilverSwordSpeech", "Rengeteg idÅ‘mbe telt elkÃ©szÃ­teni ezt a kardot. BiztosÃ­thatlak, hogy megÃ©ri az Ã¡rÃ¡t.");
Database.addText("hu.mapVillageForgeBuyLightweightBodyArmourButton", "KÃ¶nnyÅ± pÃ¡ncÃ©l megvÃ©tele (15 000 cukorka)");
Database.addText("hu.mapVillageForgeBuyLightweightBodyArmourSpeech", "Ez a pÃ¡ncÃ©lzat meg fog vÃ©deni tÃ©ged az ellenfeleidtÅ‘l.");
Database.addText("hu.mapVillageForgeBuyScytheButton", "Kasza megvÃ©tele (5 000 000 cukorka)");
Database.addText("hu.mapVillageForgeBuyScytheSpeech", "TÃ¶bb hÃ³napomba telt mire elkÃ©szÃ­tettem ezt a kaszÃ¡t. Igazi mÅ±vÃ©szeti alkotÃ¡s. Ez talÃ¡n a leggyorsabb fegyver, amit valaha is hasznÃ¡lni tudsz majd. Sok sikert!");
Database.addText("hu.wishingWellThrowFirstCandyButton", "Dobj egy cukorkÃ¡t a kÃºtba");
Database.addText("hu.wishingWellCandyIntroductionSpeech", "Ãœdv, vÃ¡ndor! Ã‰n vagyok a kÃ­vÃ¡nsÃ¡gkÃºt. Az Ã©dessÃ©gekÃ©rt cserÃ©be teljesÃ­tem a kÃ­vÃ¡nsÃ¡gaidat! Ha cukorkÃ¡kat dobsz belÃ©m, akkor meggyÃ³gyÃ­tom a sebeidet.");
Database.addText("hu.wishingWellThrewCandiesSpeech", "A sebeid begyÃ³gyultak!");
Database.addText("hu.wishingWellNoWoundSpeech", "Nincsenek meggyÃ³gyÃ­tandÃ³ sebeid!");
Database.addText("hu.wishingWellThrowFirstLollipopButton", "Dobj egy nyalÃ³kÃ¡t a kÃºtba");
Database.addText("hu.wishingWellLollipopIntroductionSpeech", "Ãœdv, vÃ¡ndor! Ã‰n vagyok a kÃ­vÃ¡nsÃ¡gkÃºt. Az Ã©dessÃ©gekÃ©rt cserÃ©be teljesÃ­tem a kÃ­vÃ¡nsÃ¡gaidat! Ha nyalÃ³kÃ¡kat dobsz belÃ©m, akkor azokat cukorkÃ¡kra vÃ¡ltom be.");
Database.addText("hu.wishingWellThrewLollipopsSpeech", "A nyalÃ³kÃ¡idat bevÃ¡ltottam cukorkÃ¡kra! KÃ©t nyalÃ³ka egy cukorkÃ¡Ã©rt.");
Database.addText("hu.wishingWellThrowChocolateBarButton", "Dobj egy csokolÃ¡dÃ© rudat a kÃºtba");
Database.addText("hu.wishingWellChocolateBarIntroductionSpeech", "Ãœdv, vÃ¡ndor! Ã‰n vagyok a kÃ­vÃ¡nsÃ¡gkÃºt. Az Ã©dessÃ©gekÃ©rt cserÃ©be teljesÃ­tem a kÃ­vÃ¡nsÃ¡gaidat! Szeretem a csokolÃ¡dÃ© rudakat. Nagyon szeretem Å‘ket. Minden egy csokolÃ¡dÃ© rÃºdÃ©rt cserÃ©be, mÃ©g ezÃ©rt is, elbÅ±vÃ¶lheted az egyik felszerelÃ©sedet.");
Database.addText("hu.wishingWellThrewChocolateBarSpeech", "Melyik tÃ¡rgyat akarod elbÅ±vÃ¶lni?");
Database.addText("hu.wishingWellThrowPainAuChocolatButton", "Dobj egy pain au chocolatot a kÃºtba");
Database.addText("hu.wishingWellPainAuChocolatIntroductionSpeech", "Ãœdv, vÃ¡ndor! Ã‰n vagyok a kÃ­vÃ¡nsÃ¡gkÃºt. Az Ã©dessÃ©gekÃ©rt cserÃ©be teljesÃ­tem a kÃ­vÃ¡nsÃ¡gaidat! Hogyha egy pain au chocolatot dobsz belÃ©m, akkor egy nagyon speciÃ¡lis ajÃ¡ndÃ©kot kapsz. BÃ¶lcsen dÃ¶nts.");
Database.addText("hu.wishingWellThrewPainAuChocolatSpeech", "KÃ¶szÃ¶nÃ¶m a pain au chocolatot! Most kivÃ¡laszthatod az ajÃ¡ndÃ©kodat.");
Database.addText("hu.wishingWellChooseGift", "VÃ¡laszd ki az ajÃ¡ndÃ©kodat!");
Database.addText("hu.wishingWellChooseGiftButton", "VÃ¡lassz");
Database.addText("hu.wishingWellGiftDoneSpeech", "KÃ©sz! Most megszerezted az Ãºj ajÃ¡ndÃ©kodat. A tÃ¡rgymenÃ¼dben lesz a statisztikÃ¡k rÃ©szlegnÃ©l.");
Database.addText("hu.wishingWellNoPossibleEnchantment", "Nincs elÃ©rhetÅ‘ bÅ±vÃ¶lÃ©s");
Database.addText("hu.wishingWellChooseEnchantment", "VÃ¡lassz bÅ±vÃ¶lÃ©st");
Database.addText("hu.wishingWellEnchantButton", "BÅ±vÃ¶lÃ©s");
Database.addText("hu.wishingWellEnchantmentDoneSpeech", "Ã‰s mÃ¡r kÃ©sz is! A tÃ¡rgyat elbÅ±vÃ¶ltem.");
Database.addText("hu.pierLighthouseButton", "Menj a vilÃ¡gÃ­tÃ³toronyhoz hajÃ³val");
Database.addText("hu.pierTheSeaButton", "Ugorj bele a tengerbe");
Database.addText("hu.lonelyHouseOpenBox", "Nyisd ki a lÃ¡dÃ¡t");
Database.addText("hu.lonelyHouseShakeBox", "RÃ¡zd meg a lÃ¡dÃ¡t");
Database.addText("hu.lonelyHouseBreakLock", "TÃ¶rd szÃ©t a zÃ¡rat");
Database.addText("hu.lonelyHouseKickBox", "RÃºgj bele a lÃ¡dÃ¡ba");
Database.addText("hu.lonelyHouseAskTheBoxToOpenItself", "KÃ©rd meg a lÃ¡dÃ¡t, hogy magÃ¡tÃ³l nyÃ­ljon ki");
Database.addText("hu.lonelyHouseLureTheBoxWithACandy", "Csalogasd a lÃ¡dÃ¡t cukorkÃ¡val");
Database.addText("hu.lonelyHouseTakeTheBox", "Vidd magaddal a lÃ¡dÃ¡t, mert biztos kulcs kell majd a kinyitÃ¡sÃ¡hoz");
Database.addText("hu.lonelyHouseOpenBoxResult", "A lÃ¡da zÃ¡rva van");
Database.addText("hu.lonelyHouseShakeBoxResult", "Semmi se tÃ¶rtÃ©nik");
Database.addText("hu.lonelyHouseBreakLockResult", "A zÃ¡r ellenÃ¡ll");
Database.addText("hu.lonelyHouseKickBoxResult", "A lÃ¡bad megfÃ¡jdult egy kicsit, de semmi mÃ¡s nem tÃ¶rtÃ©nt");
Database.addText("hu.lonelyHouseAskTheBoxToOpenItselfResult", "...ugye tudod, hogy most egy lÃ¡dÃ¡hoz beszÃ©lsz?");
Database.addText("hu.lonelyHouseLureTheBoxWithACandyResult", "Ãšgy tÅ±nik, hogy ez a lÃ¡dÃ¡t nem Ã©rdekli");
Database.addText("hu.lonelyHouseTakeTheBoxResult", "Ãšgy tÅ±nik van valami Ã©rdekes ebben a candy box-ban.");
Database.addText("hu.lollipopFarmConstructMill", "Ã‰pÃ­ts egy malmot (10 000 nyalÃ³ka)");
Database.addText("hu.lollipopFarmFeedMill", "TÃ¶ltsd fel a malmot");
Database.addText("hu.lollipopFarmCurrentCandiesProduction", "Jelenlegi cukorka gyÃ¡rtÃ¡s");
Database.addText("hu.lollipopFarmDigPond", "Ãss egy tavat (100 000 nyalÃ³ka)");
Database.addText("hu.lollipopFarmBuyLolligator", "VegyÃ©l egy lolligÃ¡tort (1200 cukorka)");
Database.addText("hu.lollipopFarmLolligatorsConversionText", "ÃtalakÃ­tÃ¡s cukorkÃ¡bÃ³l -> nyalÃ³kÃ¡ba aktivÃ¡lva");
Database.addText("hu.lighthouseAskButton", "KÃ©rdezz");
Database.addText("hu.lighthouseQuestionWho", "Te meg ki vagy?");
Database.addText("hu.lighthouseQuestionWhoSpeech", "Ã‰n egy nagyon Ã¶reg kÃ¼klopsz vagyok.");
Database.addText("hu.lighthouseQuestionWhat", "Mit keresel itt?");
Database.addText("hu.lighthouseQuestionWhatSpeech", "EgÃ©sz nap itt Ã©lek, Ã©s vÃ¡rok egy hajÃ³ra. RÃ©gÃ³ta lÃ¡ttam mÃ¡r hajÃ³t, de itt kell maradnom Ã©s bÃ¡mulnom a tengert, hÃ¡tha erre jÃ¡r egy hajÃ³.");
Database.addText("hu.lighthouseQuestionWhyEatCandies", "MiÃ©rt ennÃ©k cukorkÃ¡kat?");
Database.addText("hu.lighthouseQuestionWhyEatCandiesSpeech", "Mert jÃ³t tesznek az egÃ©szsÃ©gednek!");
Database.addText("hu.lighthouseQuestionCandyBox", "Mi az a candy box?");
Database.addText("hu.lighthouseQuestionCandyBoxSpeech", "Az egy nagyon Ã¶reg lÃ¡da, amiben Ã¡llÃ­tÃ³lag a vilÃ¡g minden cukorkÃ¡ja megtalÃ¡lhatÃ³. A legenda szerint bÃ¡rki is nyitja ki, annak annyi cukorkÃ¡ja lesz amennyi csak lehetsÃ©ges.");
Database.addText("hu.lighthouseQuestionDragon", "A sÃ¡rkÃ¡ny azt mondta, hogy jÃ¶jjek ide, ha cukorkÃ¡t akarok.");
Database.addText("hu.lighthouseQuestionDragonSpeech", "Ã“, Ã©rtem... Nos, Ã©n nem adhatok neked cukorkÃ¡kat, csak valami fontosat, amivel vÃ©gÃ¼l RENGETEG cukorkÃ¡t szerezhetsz. De elÅ‘szÃ¶r le kell tesztelnelek. Nem adhatom ezt csak Ãºgy oda bÃ¡rkinek. Oldd meg ezt a rejtvÃ©nyt Ã©s a tiÃ©d lehet.");
Database.addText("hu.lighthouseFoundStone", "GratulÃ¡lok! ÃtmentÃ©l a teszten Ã©s megtalÃ¡ltad a kÃ¶vet. Nagyon Ã©rtÃ©kes darab, de csak akkor van szÃ¡modra haszna, ha talÃ¡lsz mÃ©g hÃ¡rom hasonlÃ³ kÃ¶vet. Sok szerencsÃ©t!");
Database.addText("hu.lighthouseFoundStoneAgain", "SzÃ©p munka, ismÃ©t teljesÃ­tetted a rejtvÃ©nyt. Ãšgy lÃ¡tom ez tetszik neked.");
Database.addText("hu.saveLocalSaveTitle", "BÃ¶ngÃ©szÅ‘ mentÃ©s");
Database.addText("hu.saveLocalSaveWhy", "VÃ¡laszd a helyi mentÃ©st, hogyha a jelenlegi eszkÃ¶zÃ¶dÃ¶n Ã©s bÃ¶ngÃ©szÅ‘dben szeretnÃ©l jÃ¡tszani.");
Database.addText("hu.saveLocalSaveWarning0", "Ãšgy tÅ±nik, hogy a bÃ¶ngÃ©szÅ‘d nem tÃ¡mogatja a HTML5-Ã¶t.");
Database.addText("hu.saveLocalSaveWarning1", "FrissÃ­tened kellene a bÃ¶ngÃ©szÅ‘det, hogyha hasznÃ¡lni szeretnÃ©d a helyi mentÃ©s funkciÃ³t.");
Database.addText("hu.saveLocalSaveChooseSlot", "VÃ¡lassz a mentÃ©sednek helyet :");
Database.addText("hu.saveLocalSaveAutosaveEnabled", "AutomentÃ©s bekapcsolva");
Database.addText("hu.saveLocalSaveChooseWhatToDo", "VÃ¡laszd ki, hogy mit akarsz :");
Database.addText("hu.saveLocalSaveSaveButton", "MentÃ©s");
Database.addText("hu.saveLocalSaveAutosaveButton", "MentÃ©s 10 percenkÃ©nt");
Database.addText("hu.saveLocalSaveDisableAutosaveButton", "AutomentÃ©s kikapcsolÃ¡sa");
Database.addText("hu.saveFileSaveTitle", "SzÃ¶veges mentÃ©s");
Database.addText("hu.saveFileSaveWhy0", "VÃ¡laszd a szÃ¶veges mentÃ©st, ha :");
Database.addText("hu.saveFileSaveWhy1", "Egy mÃ¡sik eszkÃ¶zrÅ‘l vagy bÃ¶ngÃ©szÅ‘vel akarod folytatni tovÃ¡bb a jÃ¡tÃ©kot");
Database.addText("hu.saveFileSaveWhy2", "Meg akarod osztani a mentÃ©sedet mÃ¡ssal");
Database.addText("hu.saveFileSaveWhy3", "Valami oknÃ¡l fogva tÃ¶rÃ¶lni akarod a bÃ¶ngÃ©szÅ‘d sÃ¼tijeit");
Database.addText("hu.saveFileSaveWhy4", "(ami tÃ¶rli a helyi mentÃ©seidet)");
Database.addText("hu.saveFileSaveButton", "Szerezd meg a jelenlegi jÃ¡tÃ©kot szÃ¶vegkÃ©nt");
Database.addText("hu.saveFileSaveWarning", "Most mÃ¡sold le ezt a szÃ¶veget valahovÃ¡! (pÃ©ldÃ¡ul egy fÃ¡jlba)");
Database.addText("hu.saveLocalLoadTitle", "BÃ¶ngÃ©szÅ‘ betÃ¶ltÃ©s");
Database.addText("hu.saveLocalLoadYouCan", "BetÃ¶lthetsz egy helyi mentÃ©st az alÃ¡bbi linkekkel :");
Database.addText("hu.saveLocalLoadThanksTo", "HÃ¡la a HTML5 varÃ¡zsÃ¡nak, mostantÃ³l ezeket a linkeket offline is hasznÃ¡lhatod.");
Database.addText("hu.saveFileLoadTitle", "SzÃ¶veges betÃ¶ltÃ©s");
Database.addText("hu.saveFileLoadPaste", "Illeszd be alulra a mentÃ©sedet, majd kattints a \"BetÃ¶ltÃ©s\" gombra");
Database.addText("hu.saveFileLoadButton", "BetÃ¶ltÃ©s");
Database.addText("hu.mountainsText0", "MeglÃ¡ttÃ¡l valamit a hegyekben!");
Database.addText("hu.mountainsText1", "Ã‰rdekesnek tÅ±nik. Lehet, hogy a hasznodra vÃ¡lhat.");
Database.addText("hu.mountainsTextButton", "MÃ¡ssz fel a hegyre, hogy megszerezd a tÃ¡rgyat");
Database.addText("hu.mountainsTextAfter", "TalÃ¡ltÃ¡l egy pogo rudat! BelekerÃ¼lt a tÃ¡rgymenÃ¼dbe.");
Database.addText("hu.secondHouseIntroSpeech", "Ãœdv, Ã©n vagyok a cukorka Ã¡rus. BÃ¡rmit megtennÃ©k a cukorkÃ¡kÃ©rt. Mire van szÃ¼ksÃ©ged?");
Database.addText("hu.secondHouseLollipop1Speech", "Ez egy citrom-Ã­zÅ± nyalÃ³ka. A kedvencem! 60 cukorkÃ¡ba kerÃ¼l, de megÃ©ri az Ã¡rÃ¡t.");
Database.addText("hu.secondHouseLollipop2Speech", "Ez egy eper-Ã­zÅ± nyalÃ³ka. JÃ³ az Ã­ze. Tetszik a piros szÃ­ne. Csak 60 cukorkÃ¡ba kerÃ¼l!");
Database.addText("hu.secondHouseLollipop3Speech", "Ez egy tÃ¶k-Ã­zÅ± nyalÃ³ka. Fogadok, hogy ilyent mÃ©g nem prÃ³bÃ¡ltÃ¡l! 60 cukorkÃ¡Ã©rt a tiÃ©d.");
Database.addText("hu.secondHouseLollipopButtonText", "Vedd meg ezt a nyalÃ³kÃ¡t (60 cukorka)");
Database.addText("hu.secondHouseMerchantHatSpeech", "Eladhatom neked a sapkÃ¡mat, de ez nagyon drÃ¡ga, tudod... Rengeteg cukorkÃ¡t kellene adnod Ã©rte. Mondjuk Ãºgy 1 milliÃ³ cukorkÃ¡t. Ez egy fair Ã¡r, ugye?");
Database.addText("hu.secondHouseMerchantHatButtonText", "Vedd meg az Ã¡rus sapkÃ¡jÃ¡t (1 000 000 cukorka)");
Database.addText("hu.secondHouseTimeRingSpeech", "Ez egy idÅ‘ gyÅ±rÅ±. Olyan varÃ¡zs-fajta. SegÃ­tsÃ©gÃ©vel lelassÃ­thatod az idÅ‘t ha bajban lennÃ©l.");
Database.addText("hu.secondHouseTimeRingButtonText", "Vedd meg az idÅ‘ gyÅ±rÅ±t (500 cukorka)");
Database.addText("hu.secondHouseLeatherGlovesSpeech", "Ezek a bÅ‘r kesztyÅ±k tevebÅ‘rbÅ‘l kÃ©szÃ¼ltek, Ã­gy nagyon jÃ³ a minÅ‘sÃ©gÃ¼k. Rengeteg van belÅ‘le raktÃ¡ron, azÃ©rt ilyen olcsÃ³k : csak 300 cukorka darabja!");
Database.addText("hu.secondHouseLeatherBootsButtonText", "VegyÃ©l egy pÃ¡r bÅ‘r cipÅ‘t (300 cukorka)");
Database.addText("hu.secondHouseLeatherBootsSpeech", "Ezek a jÃ³ minÅ‘sÃ©gÅ± bÅ‘r cipÅ‘k, amik tevebÅ‘rbÅ‘l kÃ©szÃ¼ltek, melegen fogjÃ¡k tartani a lÃ¡baidat.");
Database.addText("hu.secondHouseLeatherGlovesButtonText", "VegyÃ©l egy pÃ¡r bÅ‘r kesztyÅ±t (300 cukorka)");
Database.addText("hu.secondHouseChocolateBarSpeech", "Ez egy csokolÃ¡dÃ© rÃºd. Nem tudom, hogy ezt mire hasznÃ¡ljÃ¡k, de Ãºgy tÅ±nik, hogy ez nagyon ritka dolog, ami megmagyarÃ¡zza az Ã¡rÃ¡t. 800 cukorkÃ¡Ã©rt a tiÃ©d!");
Database.addText("hu.secondHouseChocolateBarButtonText", "VegyÃ©l csokolÃ¡dÃ© rudat (800 cukorka)");
Database.addText("hu.outsideTheHoleButton", "Ugorj bele ebbe a gÃ¶dÃ¶rbe a fÃ¶ldÃ¶n");
Database.addText("hu.theCaveExitText0", "VÃ©gre elÃ©rted a barlang kijÃ¡ratÃ¡t.");
Database.addText("hu.theCaveExitText1", "LÃ¡tsz egy hatalmas erdÅ‘t odakint.");
Database.addText("hu.theCaveExitButtonText", "LÃ©pj ki a barlangbÃ³l");
Database.addText("hu.theCaveFirstSentenceWentStraight", "TovÃ¡bb mentÃ©l egyenesen.");
Database.addText("hu.theCaveFirstSentenceWentLeft", "Balra mentÃ©l.");
Database.addText("hu.theCaveFirstSentenceWentRight", "Jobbra mentÃ©l.");
Database.addText("hu.theCaveFirstSentenceYouAre", "Egy barlangban vagy. HÃ¡rom Ãºt van elÅ‘tted.");
Database.addText("hu.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Valami furcsa dolgot lÃ¡tsz a fÃ¶ldÃ¶n elÅ‘tted.");
Database.addText("hu.theCavePattern_ChocolateBarNowSeeChocolateBar", "Egy csokolÃ¡dÃ© rudat lÃ¡tsz elÅ‘tted.");
Database.addText("hu.theCavePattern_TreasureMapSentence", "Kisebb kÃ¶veket lÃ¡tsz a fÃ¶ldÃ¶n elÅ‘tted.");
Database.addText("hu.theCavePattern_MonkeyWizardSentence", "TalÃ¡lkozol egy meztelen majom varÃ¡zslÃ³val.");
Database.addText("hu.theCavePattern_MonkeyWizardButton", "KÅ±zdj meg vele");
Database.addText("hu.theCavePattern_OctopusKingSentence", "Belebotlasz a Polip KirÃ¡lyba. DurvÃ¡nak tÅ±nik.");
Database.addText("hu.theCavePattern_OctopusKingButton", "KÅ±zdj meg vele");
Database.addText("hu.fortressInsideText0", "Egy sivatagi erÅ‘dben vagy.");
Database.addText("hu.fortressInsideText1", "HÃ¡rom ajtÃ³ kÃ¶zÃ¼l vÃ¡laszthatsz.");
Database.addText("hu.fortressInsideText2", "Mindegyik egy nagy szobÃ¡ba vezet, aminek a vÃ©gÃ©n egy kincs vÃ¡r.");
Database.addText("hu.fortressInsideEnterRoom1", "LÃ©pj be az elsÅ‘ szobÃ¡ba");
Database.addText("hu.fortressInsideEnterRoom2", "LÃ©pj be a mÃ¡sodik szobÃ¡ba");
Database.addText("hu.fortressInsideEnterRoom3", "LÃ©pj be a harmadik szobÃ¡ba");
Database.addText("hu.treasureButtonDig", "Ãss");
Database.addText("hu.treasureButtonYouFound", "HÃ¡rom csokolÃ¡dÃ© rudat talÃ¡ltÃ¡l!");
Database.addText("hu.sorceressHutHello", "Ãœdv, Ã©n egy banya vagyok. TanÃ­thatok egy-kÃ©t dolgot a mÃ¡giÃ¡rÃ³l neked. Adhatok mÃ©g pÃ¡r Ã©rdekessÃ©get is, vagy varÃ¡zsolhatok a szÃ¡modra. De mindennek Ã¡ra van! Ã‰s a fizetÅ‘eszkÃ¶z nyalÃ³ka. JÃ³ sok darab.");
Database.addText("hu.sorceressHutClickedGrimoire", "Ez egy varÃ¡zskÃ¶nyv kezdÅ‘knek. A kÃ¼ldetÃ©sek sorÃ¡n ennek segÃ­tsÃ©gÃ©vel egyszerÅ±, de hasznos varÃ¡zslatokat hasznÃ¡lhatsz. Erre szÃ¼ksÃ©ged van! Csak 5 000 nyalÃ³ka.");
Database.addText("hu.sorceressHutBuyGrimoireButton", "Vedd meg ezt a varÃ¡zskÃ¶nyvet (5 000 nyalÃ³ka)");
Database.addText("hu.sorceressHutBuyGrimoireSpeech", "KÃ¶szÃ¶nÃ¶m a vÃ¡sÃ¡rlÃ¡st! Ezzel a varÃ¡zskÃ¶nyvvel hÃ¡rom varÃ¡zslatot hasznÃ¡lhatsz. Sok szerencsÃ©t!");
Database.addText("hu.sorceressHutClickedGrimoire2", "Ez egy varÃ¡zskÃ¶nyv haladÃ³knak. A kÃ¼ldetÃ©sek sorÃ¡n kÃ©t erÅ‘sebb varÃ¡zslatot hasznÃ¡lhatsz. Ã‰n magam Ã­rtam a kÃ¶nyvet, Ã©s nem volt kÃ¶nnyÅ± dolgom. 20 000 nyalÃ³ka fair Ã¡r Ã©rte.");
Database.addText("hu.sorceressHutBuyGrimoire2Button", "Vedd meg ezt a varÃ¡zskÃ¶nyvet (20 000 nyalÃ³ka)");
Database.addText("hu.sorceressHutBuyGrimoire2Speech", "KÃ¶szÃ¶nÃ¶m a vÃ¡sÃ¡rlÃ¡st! Ezzel a varÃ¡zskÃ¶nyvvel kÃ©t varÃ¡zslatot hasznÃ¡lhatsz. HasznÃ¡ld Å‘ket okosan!");
Database.addText("hu.sorceressHutClickedCauldron", "Ez az Ã¼stÃ¶m. Ezzel kÃ©szÃ­tem a varÃ¡zsitalaimat. Eladhatom neked, de ez tÃºl Ã©rtÃ©kes szÃ¡momra... de 100 000 nyalÃ³kÃ¡Ã©rt a tiÃ©d lehet.");
Database.addText("hu.sorceressHutBuyCauldronButton", "Vedd meg az Ã¼stÃ¶t (100 000 nyalÃ³ka)");
Database.addText("hu.sorceressHutBuyCauldronSpeech", "KÃ¶szÃ¶nÃ¶m! 100 000 nyalÃ³ka az enyÃ©m! Adok mÃ©g neked egy fÅ‘zÃ©si ÃºtmutatÃ³t. JÃ³l fog jÃ¶nni.");
Database.addText("hu.sorceressHutClickedHat", "Igen, tÃ©nyleg szÃ©p a sapkÃ¡m! De tÃ©nyleg nem adhatom el neked. TÃºÃºÃºlsÃ¡gosan Ã©rtÃ©kes szÃ¡momra. Nagyon, Ã­gy nem tehetem. Ne erÅ‘lkÃ¶dj. Nem. Nem nem nem, nem tehetem! Nah, jÃ³l van, eladhatom, de 1 000 000 000 nyalÃ³ka az Ã¡ra. ValÃ³szÃ­nÅ±leg annyit Ãºgyse tudsz fizetni.");
Database.addText("hu.sorceressHutBuyHatButton", "Vedd meg a sapkÃ¡t (1 000 000 000 nyalÃ³ka)");
Database.addText("hu.sorceressHutBuyHatSpeech", "Egy billiÃ³ nyalÃ³ka nekeeeeem! De mÃ¡r nincsen tÃ¶bbÃ© sapkÃ¡m... de egy billiÃ³ nyalÃ³ka, vÃ¡Ã³! ...teljesen megÃ©rte.");
Database.addText("hu.cauldronPreviousPageButton", "ElÅ‘zÅ‘ oldal");
Database.addText("hu.cauldronNextPageButton", "KÃ¶vetkezÅ‘ oldal");
Database.addText("hu.cauldronWhatYouWantToPut", "Mit akarsz belerakni az Ã¼stbe");
Database.addText("hu.cauldronWhatIsIn", "Mi van az Ã¼stben");
Database.addText("hu.cauldronWhatYouCanDo", "Mit csinÃ¡lhatsz vele");
Database.addText("hu.castleBigRoomComment", "Egy nagy szoba");
Database.addText("hu.castleARoomComment", "Egy szoba");
Database.addText("hu.castleADarkRoomComment", "Egy sÃ¶tÃ©t szoba");
Database.addText("hu.castleCastleEntranceComment", "A kastÃ©ly bejÃ¡rata");
Database.addText("hu.castleTowerEntranceComment", "A torony bejÃ¡rata");
Database.addText("hu.castleNougatMonsterComment", "TÃ¡madd meg az Ã³riÃ¡si nugÃ¡t szÃ¶rnyet");
Database.addText("hu.castleGuardsComment", "TÃ¡madd meg az Å‘rÃ¶ket");
Database.addText("hu.castleStairsComment", "LÃ©pcsÅ‘");
Database.addText("hu.buttonBackToTheCastle", "Vissza a kastÃ©lyba");
Database.addText("hu.castleBigRoomHovenSpeechSad", "Ãœdv! Ã‰n egy nagyon Ã¶reg kenyÃ©rsÃ¼tÅ‘ vagyok. RÃ©gen tonnaszÃ¡mra kÃ©szÃ­tettem sÃ¼temÃ©nyeket, de manapsÃ¡g senki se hasznÃ¡l engem. TalÃ¡n... talÃ¡n te segÃ­tenÃ©l nekem? Csak hadd vegyek el pÃ¡r Ã©dessÃ©get tÅ‘led! Ne aggÃ³dj, nem fogod megbÃ¡nni! BÃ­zhatsz bennem.");
Database.addText("hu.castleBigRoomHovenNotEnough", "Ã“h... nincs nÃ¡lad elÃ©g Ã©dessÃ©g, nem tehetek semmit. Haszontalan vagyok. Ã‰n vagyok a haszontalan kenyÃ©rsÃ¼tÅ‘, Ã­gy kellene hÃ­vnod engem.");
Database.addText("hu.castleBigRoomHovenSpeechMadePainAuChocolat", "JupÃ­! KÃ¶szÃ¶nÃ¶m! 100 cukorkÃ¡t Ã©s egy csokolÃ¡dÃ© rudat hasznÃ¡ltam el, Ã©s kÃ©szÃ­tettem neked... egy pain au chocolatot! Ez a kedvenc sÃ¼tim, Ã©s remÃ©lem neked is tetszeni fog!");
Database.addText("hu.castleBigRoomHovenSpeechHappy", "HÃ©! Ha akarod, hogy Ãºjabb sÃ¼temÃ©nyt kÃ©szÃ­tsek, csak szÃ³lj! SzÃ­vesen segÃ­tek neked.");
Database.addText("hu.castleBigRoomHovenSpeechHappyNotEnough", "Ã“h, nincs nÃ¡lad elÃ©g Ã©dessÃ©g, sajnos. 100 cukorka Ã©s egy csokolÃ¡dÃ© rÃºd kellene nekem. Gyere vissza, ha van nÃ¡lad pÃ¡r!");
Database.addText("hu.castleBigRoomHovenLetHovenTakeButton", "Hadd vegye el a sÃ¼tÅ‘ azt az Ã©dessÃ©get amit szeretne");
Database.addText("hu.castleBigRoomHovenThanks", "KÃ¶szÃ¶nÃ¶m, sÃ¼tÅ‘!");
Database.addText("hu.dragonStopTickling", "HÃ©, te! KÃ©rlek ne csikizz tovÃ¡bb.");
Database.addText("hu.dragonStopTicklingButton", "Ã“, jaj, elnÃ©zÃ©st, azt hittem, hogy meg kellene tÃ¡madni tÃ©ged");
Database.addText("hu.dragonTalking", "Ã‰n egy sÃ¡rkÃ¡ny vagyok, Ã©s ez az Ã©n kastÃ©lyom. LÃ¡ttam, hogy sikerÃ¼lt bejutnod, biztosan nagyon bÃ¡tor vagy... szÃ­vesen segÃ­tenÃ©k olyannak, mint amilyen te vagy. Mit keresel?");
Database.addText("hu.dragonTalkingChallengeButton", "KihÃ­vÃ¡st");
Database.addText("hu.dragonTalkingFameButton", "HÃ­rnevet");
Database.addText("hu.dragonTalkingCandiesButton", "CukorkÃ¡kat");
Database.addText("hu.dragonTalkingChallengeSpeech", "Ã“, szÃ³val kihÃ­vÃ¡st akarsz? Akkor azt hiszem el kellene menned a pokolba, mivel az Ã¶rdÃ¶grÅ‘l jÃ³l ismert, hogy nehÃ©z legyÅ‘zni Å‘t. Pattanj a hÃ¡tamra, Ã©s elviszlek oda!");
Database.addText("hu.dragonTalkingFameSpeech", "A leggyorsabb mÃ³don Ãºgy lehetsz hÃ­res, hogyha legyÅ‘zÃ¶d magÃ¡t a fejlesztÅ‘t. Tudom, hogy hol lakik Ã©s elvihetlek hozzÃ¡. De kÃ©szÃ¼lj fel, mert nem lesz kÃ¶nnyÅ± menet.");
Database.addText("hu.dragonTalkingCandiesSpeech", "A legvÃ©gÃ©n mindenki csak cukorkÃ¡t akar, nemde? Azt hiszem az egyik barÃ¡tom tud segÃ­teni neked ebben. ElÃ©g kÃ¶nnyen fel fogod ismerni Å‘t, mivel csak egy szeme van. Csak szÃ³lj neki, hogy ismersz engem.");
Database.addText("hu.dragonTalkingChallengeAnswer", "MenjÃ¼nk hÃ¡t!");
Database.addText("hu.dragonTalkingFameAnswer", "KÃ©szen Ã¡llok.");
Database.addText("hu.dragonTalkingCandiesAnswer", "Rendben, kÃ¶szÃ¶nÃ¶m!");
Database.addText("hu.buttonBackToCastle", "Vissza a kastÃ©lyba");
Database.addText("hu.talkingCandySpeechNoBox", "HÃ©! Ã‰n egy beszÃ©lÅ‘ cukorka vagyok. MÃ¡r majdnem megnyerted a jÃ¡tÃ©kot. Csak meg kell talÃ¡lnod a candy box-ot. Valahol a falun kÃ­vÃ¼l van egy hÃ¡zban. Ez az utolsÃ³ lÃ©pÃ©s!");
Database.addText("hu.talkingCandySpeech1", "HÃ©! Ã‰n vagyok a beszÃ©lÅ‘ cukorka. GratulÃ¡lok, megnyerted a jÃ¡tÃ©kot! Most kinyitom neked a candy box-ot, ez a jutalmad. TovÃ¡bbmehetÃ¼nk?");
Database.addText("hu.talkingCandySpeech2", "KÃ©sz! Most mÃ¡r belÃ©phetsz. RemÃ©lem tetszett a jÃ¡tÃ©k :)");
Database.addText("hu.talkingCandyButton", "Igen!!");
Database.addText("hu.lighthousePuzzleResetButton", "Ãšjrakezd");
Database.addText("uk.mapVillageComment", "Ð¡ÐµÐ»Ð¸Ñ‰Ðµ");
Database.addText("uk.mapFortressComment", "ÐŸÑƒÑÑ‚ÐµÐ»ÑŒÐ½Ð° Ñ„Ð¾Ñ€Ñ‚ÐµÑ†Ñ");
Database.addText("uk.mapATreeComment", "Ð”ÐµÑ€ÐµÐ²Ð¾");
Database.addText("uk.mapTheDesertComment", "ÐŸÑƒÑÑ‚ÐµÐ»Ñ");
Database.addText("uk.mapWishingWellComment", "ÐšÑ€Ð¸Ð½Ð¸Ñ†Ñ Ð±Ð°Ð¶Ð°Ð½ÑŒ");
Database.addText("uk.mapLonelyHouseComment", "Ð¡Ð°Ð¼Ð¾Ñ‚Ð½Ñ–Ð¹ Ð±ÑƒÐ´Ð¸Ð½Ð¾Ðº");
Database.addText("uk.mapForestComment", "Ð›Ñ–Ñ");
Database.addText("uk.mapCastleEntranceComment", "Ð’Ñ…Ñ–Ð´ Ñƒ Ð·Ð°Ð¼Ð¾Ðº");
Database.addText("uk.mapCastleComment", "Ð—Ð°Ð¼Ð¾Ðº");
Database.addText("uk.mapDragonComment", "Ð”Ñ€Ð°ÐºÐ¾Ð½");
Database.addText("uk.candyBoxEatCandiesButton", "Ð—'Ñ—ÑÑ‚Ð¸ ÑƒÑÑ– Ñ†ÑƒÐºÐµÑ€ÐºÐ¸");
Database.addText("uk.candyBoxThrowCandiesButton", "ÐšÐ¸Ð½ÑƒÑ‚Ð¸ 10 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ð½Ð° Ð·ÐµÐ¼Ð»ÑŽ");
Database.addText("uk.mapVillageAHouseComment", "Ð‘ÑƒÐ´Ð¸Ð½Ð¾Ðº");
Database.addText("uk.mapVillageForgeComment", "ÐšÐ¾Ð²Ð°Ð»ÑŒÐ½Ñ");
Database.addText("uk.buttonBackToTheMap", "ÐŸÐ¾Ð²ÐµÑ€Ð½ÑƒÑ‚Ð¸ÑÑ Ð´Ð¾ Ð¼Ð°Ð¿Ð¸");
Database.addText("uk.mapSorceressHutComment", "Ð¥Ð°Ñ‚Ð¸Ð½Ð° Ñ‡Ð°ÐºÐ»ÑƒÐ½ÐºÐ¸");
Database.addText("uk.buttonBackToTheVillage", "ÐŸÐ¾Ð²ÐµÑ€Ð½ÑƒÑ‚Ð¸ÑÑ Ñƒ ÑÐµÐ»Ð¸Ñ‰Ðµ");
Database.addText("uk.mapATreeIntroductionSpeech", "ÐŸÑ€Ð¸Ð²Ñ–Ñ‚, Ñ Ð’Ð¸Ð²Ñ–Ñ€ÐºÐ°. Ð¯ Ð¼Ð¾Ð¶Ñƒ Ð´Ð°Ñ‚Ð¸ Ñ‚Ð¾Ð±Ñ– Ñ†ÑƒÐºÐµÑ€Ð¾Ðº, Ñ‚Ð° Ð¹ Ð±Ð°Ð³Ð°Ñ‚Ð¾ Ñ‰Ðµ Ñ‡Ð¾Ð³Ð¾. Ð¯ Ð·Ð½Ð°ÑŽ ÑÐº ÑÐ¸Ð»ÑŒÐ½Ð¾ Ñ‚Ð¸ Ð»ÑŽÐ±Ð¸Ñˆ Ñ†ÑƒÐºÐµÑ€ÐºÐ¸. ÐÐ»Ðµ Ñ Ð¿Ð¾Ñ‡ÑƒÐ²Ð°ÑŽÑÑŒ ÑÐ°Ð¼Ð¾Ñ‚Ð½ÑŒÐ¾ Ñƒ Ñ†ÑŒÐ¾Ð¼Ñƒ Ð»Ñ–ÑÑ–.");
Database.addText("uk.mapATreeIntroductionButton", "Ð¯Ðº Ñ Ð¼Ð¾Ð¶Ñƒ Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ñ‚Ð¸ Ñ‚Ð¾Ð±Ñ–?");
Database.addText("uk.mapATreeFirstQuestion", "Ð¯ Ð·Ð°Ð´Ð°Ð²Ð°Ñ‚Ð¸Ð¼Ñƒ Ñ‚Ð¾Ð±Ñ– Ð¿Ð¸Ñ‚Ð°Ð½Ð½Ñ. Ð¯ÐºÑ‰Ð¾ Ð²Ñ–Ð´Ð¿Ð¾Ð²Ñ–Ð´Ð°Ñ‚Ð¸Ð¼ÐµÑˆ Ð¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ð¾, Ð½Ð°Ð¹ÑÐ¾Ð»Ð¾Ð´ÑˆÑ– ÑÐ¾Ð»Ð¾Ð´Ð¾Ñ‰Ñ– Ð±ÑƒÐ´ÑƒÑ‚ÑŒ Ñ‚Ð²Ð¾Ñ—Ð¼Ð¸! ÐŸÐµÑ€ÑˆÐµ Ð·Ð°Ð¿Ð¸Ñ‚Ð°Ð½Ð½Ñ : Ñ‚Ð¸ ÑÐ¿Ñ€Ð°Ð²Ð´Ñ– Ð»ÑŽÐ±Ð¸Ñˆ Ñ†ÑƒÐºÐµÑ€ÐºÐ¸? (Ð²Ñ–Ð´Ð¿Ð¾Ð²Ñ–Ð´Ð°Ð¹ Ð°Ð½Ð³Ð»Ñ–Ð¹ÑÑŒÐºÐ¾ÑŽ)");
Database.addText("uk.mapATreeSecondQuestion", "Ð¦Ðµ Ð¿Ñ€Ð°Ð²Ð¸Ð»ÑŒÐ½Ð¾! ÐžÑÑŒ Ñ‚Ð¾Ð±Ñ– 20 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº. Ð¢ÐµÐ¿ÐµÑ€ Ð·Ð°Ð²ÐµÑ€ÑˆÐ¸ Ñ†ÑŽ Ð¿Ð¾ÑÐ»Ñ–Ð´Ð¾Ð²Ð½Ñ–ÑÑ‚ÑŒ Ð»Ñ–Ñ‚ÐµÑ€ Ñ– Ð¾Ñ‚Ñ€Ð¸Ð¼Ð°Ñ”Ñˆ Ð½Ð¾Ð²Ñƒ Ð²Ð¸Ð½Ð°Ð³Ð¾Ñ€Ð¾Ð´Ñƒ: S, E, I, D, N, A, ?");
Database.addText("uk.mapATreeThirdQuestion", "Ð¦ÑƒÐºÐµÑ€ÐºÐ¸! ÐžÑÑŒ 100 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ð´Ð»Ñ Ñ‚ÐµÐ±Ðµ. ÐÐ°ÑÑ‚ÑƒÐ¿Ð½Ðµ Ð·Ð°Ð¿Ð¸Ñ‚Ð°Ð½Ð½Ñ : ÑÐºÑ–Ð»ÑŒÐºÐ¸ Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ñƒ Ð½Ð°Ð¹Ñ†ÑƒÐºÐµÑ€Ð½Ñ–ÑˆÐ¾Ñ— Ð¾ÑÐ¾Ð±Ð¸ Ñƒ ÑÐ²Ñ–Ñ‚Ñ–?");
Database.addText("uk.mapATreeFourthQuestion", "ÐžÑÑŒ Ñ‚Ð¾Ð±Ñ– 500 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº! ÐÐ°ÑÑ‚ÑƒÐ¿Ð½Ð° Ð²Ð¸Ð½Ð°Ð³Ð¾Ñ€Ð¾Ð´Ð° Ð¼Ð°Ñ” Ð±ÑƒÑ‚Ð¸ Ð½Ð°Ð²Ñ–Ñ‚ÑŒ Ñ†Ñ–ÐºÐ°Ð²Ñ–ÑˆÐ¾ÑŽ...  ÐžÑÑŒ Ð·Ð°Ð³Ð°Ð´ÐºÐ°: Ð£ Ð¿Ñ€Ð°Ð´Ð°Ð²Ð½ÑŒÐ¾Ð¼Ñƒ Ð»Ñ–ÑÑ– Ñ€Ð¾ÑÑ‚Ðµ Ð´ÑƒÐ¶Ðµ ÑÑ‚Ð°Ñ€Ðµ Ð´ÐµÑ€ÐµÐ²Ð¾, Ð½Ð° ÑÐºÐ¾Ð¼Ñƒ Ð¶Ð¸Ð²ÑƒÑ‚ÑŒ Ð½Ð°Ð¹Ñ€Ð¾Ð·ÑƒÐ¼Ð½Ñ–ÑˆÑ– Ñƒ ÑÐ²Ñ–Ñ‚Ñ– Ñ‚Ð²Ð°Ñ€Ð¸Ð½Ð¸. ÐœÐ¾Ð²Ð¸Ñ‚ÑŒÑÑ, Ñ‰Ð¾ Ñ†Ðµ Ð´ÐµÑ€ÐµÐ²Ð¾ Ð¼Ð°Ñ” 60 ÐºÐ¾Ñ€ÐµÐ½Ñ–Ð², 360 Ð³Ñ–Ð»Ð¾Ðº Ñ– 2160 Ð»Ð¸ÑÑ‚ÐºÑ–Ð². Ð¡ÐºÑ–Ð»ÑŒÐºÐ¸ Ð¿Ð¾Ð·Ð½Ð°Ñ‡Ð¾Ðº Ð¼Ð¾Ð¶Ð½Ð° Ð·Ð½Ð°Ð¹Ñ‚Ð¸ Ð½Ð° Ð¹Ð¾Ð³Ð¾ ÑÑ‚Ð¾Ð²Ð±ÑƒÑ€Ñ–?");
Database.addText("uk.mapATreeFifthQuestion", "Ð’Ñ–Ñ‚Ð°ÑŽ! Ð¯ ÑÐ¿Ñ€Ð°Ð²Ð´Ñ– Ð³Ð¾Ð²Ð¾Ñ€Ð¸Ð»Ð° Ð¿Ñ€Ð¾ ÑÐ²Ð¾Ñ” Ð´ÐµÑ€ÐµÐ²Ð¾. ÐžÑÑŒ Ñ‚Ð¾Ð±Ñ– 3 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÐ¸. Ð¡Ð¼Ð°Ñ‡Ð½Ð¾Ð³Ð¾! ÐÐ°ÑÑ‚ÑƒÐ¿Ð½Ð° Ð·Ð°Ð³Ð°Ð´ÐºÐ°, ÑÐ»ÑƒÑ…Ð°Ð¹ ÑƒÐ²Ð°Ð¶Ð½Ð¾: ÐŸÑ–Ð´ Ð¼Ñ–ÑÑÑ†ÐµÐ¼ ÑƒÐ¿Ð¾Ð²Ð½Ñ–, Ñ ÐºÐ¸Ð´Ð°ÑŽ Ð¶Ð¾Ð²Ñ‚Ð¾Ð³Ð¾ ÐºÐ°Ð¿ÐµÐ»ÑŽÑ…Ð° Ñƒ Ñ‡ÐµÑ€Ð²Ð¾Ð½Ðµ Ð¼Ð¾Ñ€Ðµ. Ð©Ð¾ ÑÑ‚Ð°Ñ”Ñ‚ÑŒÑÑ Ð· Ð¶Ð¾Ð²Ñ‚Ð¸Ð¼ ÐºÐ°Ð¿ÐµÐ»ÑŽÑ…Ð¾Ð¼?");
Database.addText("uk.mapATreeTicTacToeIntro", "Ð’Ð»ÑƒÑ‡Ð½Ð¾ ÑÐºÐ°Ð·Ð°Ð½Ð¾! Ð¦Ðµ Ð±ÑƒÐ»Ð¾ Ð½Ðµ Ñ‚Ð°Ðº ÑÐºÐ»Ð°Ð´Ð½Ð¾. ÐžÑÑŒ Ñ‚Ð¾Ð±Ñ– Ñ‚Ñ€Ð¸ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ñ– Ð¿Ð»Ð¸Ñ‚ÐºÐ¸! Ð—Ð°Ð´Ð»Ñ Ð½Ð°ÑÑ‚ÑƒÐ¿Ð½Ð¾Ñ— Ð²Ð¸Ð½Ð°Ð³Ð¾Ñ€Ð¾Ð´Ð¸, Ð¼Ð¸ Ñ‚Ñ€Ð¾ÑˆÐµÑ‡ÐºÐ¸ Ð·Ð¼Ñ–Ð½Ð¸Ð¼Ð¾ Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð°. Ð¢Ð¸ Ð¼Ð°Ñ”Ñˆ Ð·Ñ–Ð³Ñ€Ð°Ñ‚Ð¸ Ð·Ñ– Ð¼Ð½Ð¾ÑŽ Ñƒ Ð³Ñ€Ñƒ! Ð“Ð¾Ñ‚Ð¾Ð²Ð¸Ð¹?");
Database.addText("uk.mapATreeTicTacToeIntroButton", "Ð¢Ð°Ðº, Ð·Ð²Ð¸Ñ‡Ð°Ð¹Ð½Ð¾!");
Database.addText("uk.mapATreeTicTacToeLetsPlay", "Ð¦Ñ Ð³Ñ€Ð° â€” Ñ…Ñ€ÐµÑÑ‚Ð¸ÐºÐ¸-Ð½ÑƒÐ»Ð¸ÐºÐ¸. ÐœÐ¸ Ð³Ñ€Ð°Ñ”Ð¼Ð¾ Ð½Ð° Ð¿Ð¾Ð»Ñ– 3 Ð½Ð° 3. Ð¢Ð¸ Ð±ÑƒÐ´ÐµÑˆ ÑÑ‚Ð°Ð²Ð¸Ñ‚Ð¸ X, Ð° Ñ ÑÑ‚Ð°Ð²Ð¸Ñ‚Ð¸Ð¼Ñƒ O. Ð¥Ð¾Ð´Ð¸Ð¼Ð¾ Ð¿Ð¾ Ñ‡ÐµÑ€Ð·Ñ–, Ð¼ÐµÑ‚Ð° Ð³Ñ€Ð¸ â€” Ð²Ð¸ÑÑ‚Ð°Ð²Ð¸Ñ‚Ð¸ Ñ‚Ñ€Ð¸ ÑÐ²Ð¾Ñ—Ñ… Ð·Ð½Ð°ÐºÐ¸ Ñƒ Ñ€ÑÐ´. Ð¯ Ð´Ð¾Ð·Ð²Ð¾Ð»ÑŽ Ñ‚Ð¾Ð±Ñ– Ñ…Ð¾Ð´Ð¸Ñ‚Ð¸ Ð¿ÐµÑ€ÑˆÐ¸Ð¼!");
Database.addText("uk.mapATreeTicTacToeNobodyWins", "ÐŸÐ¾Ð»Ðµ Ñ†Ñ–Ð»ÐºÐ¾Ð¼ Ð·Ð°Ð¿Ð¾Ð²Ð½ÐµÐ½Ðµ Ñ– Ð½Ð°Ð¼ Ð¾Ð±Ð¾Ð¼ Ð½Ðµ Ð²Ð´Ð°Ð»Ð¾ÑÑ Ð¿Ð¾ÑÑ‚Ð°Ð²Ð¸Ñ‚Ð¸ Ñ‚Ñ€Ð¸ Ð·Ð½Ð°ÐºÐ¸ Ð¿Ð¾ÑÐ¿Ñ–Ð»ÑŒ: Ð½Ñ–Ñ…Ñ‚Ð¾ Ð½Ðµ Ð¿ÐµÑ€ÐµÐ¼Ñ–Ð³! Ð¥Ð¾Ñ‡ÐµÑˆ ÑÐ¿Ñ€Ð¾Ð±ÑƒÐ²Ð°Ñ‚Ð¸ Ñ‰Ðµ Ñ€Ð°Ð·?");
Database.addText("uk.mapATreeTicTacToeYouLose", "Ð¯ Ð¿Ð¾ÑÑ‚Ð°Ð²Ð¸Ð² Ñ‚Ñ€Ð¸ Ð¿Ð¾ÑÐ¿Ñ–Ð»ÑŒ! Ð¯ Ð¿ÐµÑ€ÐµÐ¼Ñ–Ð³. Ð¥Ð¾Ñ‡ÐµÑˆ ÑÐ¿Ñ€Ð¾Ð±ÑƒÐ²Ð°Ñ‚Ð¸ Ñ‰Ðµ Ñ€Ð°Ð·?");
Database.addText("uk.mapATreeTicTacToeTryAgainButton", "Ð¢Ð°Ðº, Ñ…Ð¾Ñ‡Ñƒ!");
Database.addText("uk.mapATreeTicTacToeYouWin", "ÐžÐ³Ð¾, Ð½ÐµÑÐ¿Ð¾Ð´Ñ–Ð²Ð°Ð½Ð¸Ð¹ Ñ…Ñ–Ð´. ÐÐ»Ðµ Ñ‚Ð¸ Ð¾Ñ‚Ñ€Ð¸Ð¼Ð°Ð² Ñ‚Ñ€Ð¸ Ñƒ Ñ€ÑÐ´, Ð½Ðµ Ð¼Ð¾Ð¶Ñƒ ÑÐ¿ÐµÑ€ÐµÑ‡Ð°Ñ‚Ð¸ÑÑŒ. Ð¢Ð¸ Ð¿ÐµÑ€ÐµÐ¼Ñ–Ð³! Ð’Ñ–Ð·ÑŒÐ¼Ð¸ Ñ†ÐµÐ¹ ÐºÐ»ÑŽÑ‡! Ð’Ñ–Ð½ Ð²Ñ–Ð´ÐºÑ€Ð¸Ð²Ð°Ñ” Ð¾Ð´Ð¸Ð½ Ñ–Ð· Ð±ÑƒÐ´Ð¸Ð½ÐºÑ–Ð² Ñƒ ÑÐµÐ»ÐµÑ‰Ñ– Ð¿ÐµÑ€ÐµÐ´ Ð»Ñ–ÑÐ¾Ð¼.");
Database.addText("uk.mapATreeTicTacToeAnymoreSweet", "Ð”ÑÐºÑƒÑŽ, Ð²Ð¸Ð²Ñ–Ñ€ÐºÐ¾! Ð„ Ñ‰Ðµ ÑÐºÑ–ÑÑŒ Ð·Ð°Ð³Ð°Ð´ÐºÐ¸?");
Database.addText("uk.mapATreeNoMoreChallenge", "ÐÐ° Ð¶Ð°Ð»ÑŒ, Ð½Ñ–, Ñƒ Ð¼ÐµÐ½Ðµ Ð½ÐµÐ¼Ð° Ð±Ñ–Ð»ÑŒÑˆÐµ Ð·Ð°Ð³Ð°Ð´Ð¾Ðº Ð´Ð»Ñ Ñ‚ÐµÐ±Ðµ... ÐŸÐ¾Ð³Ñ€Ð°Ñ‚Ð¸ Ð· Ñ‚Ð¾Ð±Ð¾ÑŽ Ð±ÑƒÐ»Ð¾ Ð´ÑƒÐ¶Ðµ Ð²ÐµÑÐµÐ»Ð¾, Ð´ÑÐºÑƒÑŽ Ñ‚Ð¾Ð±Ñ– Ð·Ð° Ñ†Ðµ!");
Database.addText("uk.buttonExitQuestKeeping", "ÐŸÐ¾ÐºÐ¸Ð½ÑƒÑ‚Ð¸ Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ñƒ (Ñ– Ð·Ð±ÐµÑ€ÐµÐ³Ñ‚Ð¸ Ð·Ð´Ð¾Ð±ÑƒÑ‚Ðµ)");
Database.addText("uk.buttonExitQuestNoKeeping", "ÐŸÐ¾ÐºÐ¸Ð½ÑƒÑ‚Ð¸ Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ñƒ (Ñ‚Ð¸ Ð½Ðµ Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÑˆ Ð·Ð´Ð¾Ð±ÑƒÑ‚Ðµ)");
Database.addText("uk.buttonExitQuestNoKeepingBecauseLose", "ÐŸÐ¾ÐºÐ¸Ð½ÑƒÑ‚Ð¸ Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ñƒ (Ñ‚Ð¸ Ð½Ðµ Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÑˆ Ð·Ð´Ð¾Ð±ÑƒÑ‚Ðµ, Ð¾ÑÐºÑ–Ð»ÑŒÐºÐ¸ Ð·Ð°Ð·Ð½Ð°Ð² Ð½ÐµÐ²Ð´Ð°Ñ‡Ñ–)");
Database.addText("uk.mapVillageLockedHouseComment", "Ð—Ð°Ð¼ÐºÐ½ÐµÐ½Ð¸Ð¹ Ð±ÑƒÐ´Ð¸Ð½Ð¾Ðº");
Database.addText("uk.mapVillageForgeIntroductionSpeech", "ÐŸÑ€Ð¸Ð²Ñ–Ñ‚! Ð¯ ÐºÐ¾Ð²Ð°Ð»ÑŒ. Ð¯ Ð¼Ð¾Ð¶Ñƒ Ð¿Ñ€Ð¾Ð´Ð°Ñ‚Ð¸ Ñ‚Ð¾Ð±Ñ– Ñ€Ñ–Ð·Ð½Ð¾Ð¼Ð°Ð½Ñ–Ñ‚Ð½Ðµ Ð¾Ð·Ð±Ñ€Ð¾Ñ”Ð½Ð½Ñ Ñ‚Ð° Ð´ÐµÑÐºÐµ ÑÐ¿Ð¾Ñ€ÑÐ´Ð¶ÐµÐ½Ð½Ñ.");
Database.addText("uk.mapVillageForgeIntroductionSpeechNoMoreToSell", "ÐŸÑ€Ð¸Ð²Ñ–Ñ‚! Ð¯ ÐºÐ¾Ð²Ð°Ð»ÑŒ. ÐÐ° Ð¶Ð°Ð»ÑŒ, Ñƒ Ð¼ÐµÐ½Ðµ Ð½ÐµÐ¼Ð°Ñ” Ð±Ñ–Ð»ÑŒÑˆÐµ Ð½Ñ–Ñ‡Ð¾Ð³Ð¾ Ð½Ð° Ð¿Ñ€Ð¾Ð´Ð°Ð¶. ÐœÐ¾Ð¶Ðµ Ð·Ð°Ð¹Ð´ÐµÑˆ Ð¿Ñ–Ð·Ð½Ñ–ÑˆÐµ?");
Database.addText("uk.mapVillageFifthHouseNoWeaponSpeech", "ÐŸÑ€Ð¸Ð²Ñ–Ñ‚. ÐœÑ–Ð¹ Ð»ÑŒÐ¾Ñ… Ð¿Ð¾Ð²ÐµÐ½ Ñ‰ÑƒÑ€Ñ–Ð², Ð¼ÐµÐ½Ñ– Ð½ÐµÐ¾Ð±Ñ…Ñ–Ð´Ð½Ð¾ Ð¿Ð¾Ð·Ð±ÑƒÑ‚Ð¸ÑÑ Ñ—Ñ…... Ð¾Ñ‚ ÑÐºÐ±Ð¸ Ñ…Ñ‚Ð¾ÑÑŒ Ð·Ñ– Ð·Ð±Ñ€Ð¾Ñ”ÑŽ Ð¼Ñ–Ð³ Ð¼ÐµÐ½Ñ– Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ñ‚Ð¸...");
Database.addText("uk.mapVillageFifthHouseWeaponSpeech", "ÐÐ³Ð¾Ð²! Ð¯ Ð±Ð°Ñ‡Ñƒ, Ñ‚Ð¸ Ð½Ð¾ÑÐ¸Ñˆ Ð·Ð±Ñ€Ð¾ÑŽ! Ð¯ÐºÑ‰Ð¾ Ñ‚Ð¸ Ð¿Ð¾Ð²Ð±Ð¸Ð²Ð°Ñ”Ñˆ Ñ‚Ð¸Ñ… Ñ‰ÑƒÑ€Ñ–Ð², Ñ‰Ð¾ ÐºÐ°Ð¿Ð¾ÑÑ‚ÑÑ‚ÑŒ Ñƒ Ð¼Ð¾Ñ”Ð¼Ñƒ Ð»ÑŒÐ¾ÑÑ–, Ñ Ð²Ð¸Ð½Ð°Ð³Ð¾Ñ€Ð¾Ð´Ð¶Ñƒ Ñ‚ÐµÐ±Ðµ!");
Database.addText("uk.mapVillageFifthHouseAgree", "Ð¢Ð¾Ð´Ñ– Ð´Ð¾ ÑÐ¿Ñ€Ð°Ð²Ð¸!");
Database.addText("uk.mapVillageFifthHouseCellarDone", "Ð”ÑÐºÑƒÑŽ, Ñ‰Ð¾ Ð¿Ð¾Ð·Ð±ÑƒÐ²ÑÑ Ñ—Ñ…! ÐžÑÑŒ Ð´ÐµÑ‰Ð¾ Ð´ÑƒÐ¶Ðµ Ñ†Ñ–Ð½Ð½Ðµ, ÑÐº Ð²Ð¸Ð½Ð°Ð³Ð¾Ñ€Ð¾Ð´Ð°: Ð¼Ð°Ð¿Ð° ÑÐ²Ñ–Ñ‚Ñƒ. Ð¯ Ð´ÑƒÐ¼Ð°ÑŽ, Ñ‚Ð¾Ð±Ñ– Ð²Ð¾Ð½Ð° Ð·Ð½Ð°Ð´Ð¾Ð±Ð¸Ñ‚ÑŒÑÑ Ð±Ñ–Ð»ÑŒÑˆÐµ, Ð½Ñ–Ð¶ Ð¼ÐµÐ½Ñ–.");
Database.addText("uk.mapVillageTheShopComment", "ÐšÑ€Ð°Ð¼Ð½Ð¸Ñ†Ñ");
Database.addText("uk.mapBridgeComment", "ÐœÑ–ÑÑ‚");
Database.addText("uk.mapFarmComment", "Ð›ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÐ¾Ð²Ð° Ñ„ÐµÑ€Ð¼Ð°");
Database.addText("uk.mapCaveEntranceComment", "Ð’Ñ…Ñ–Ð´ Ñƒ Ð¿ÐµÑ‡ÐµÑ€Ñƒ");
Database.addText("uk.mapLighthouseComment", "ÐœÐ°ÑÐº");
Database.addText("uk.mapPierComment", "ÐŸÑ€Ð¸ÑÑ‚Ð°Ð½ÑŒ");
Database.addText("uk.mapTheHoleComment", "Ð”Ñ–Ñ€Ð° Ð² Ð·ÐµÐ¼Ð»Ñ–");
Database.addText("uk.candyBoxRequestStatusBarUnlocked", "Ð—Ð°Ð¼Ð¾Ð²Ð¸Ñ‚Ð¸ Ð½Ð¾Ð²Ñƒ Ð¼Ð¾Ð¶Ð»Ð¸Ð²Ñ–ÑÑ‚ÑŒ Ñƒ Ñ€Ð¾Ð·Ñ€Ð¾Ð±Ð½Ð¸ÐºÐ° (30 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedCfg", "Ð—Ð°Ð¼Ð¾Ð²Ð¸Ñ‚Ð¸ Ñ‰Ðµ Ð¾Ð´Ð½Ñƒ (5 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedSave", "Ð—Ð°Ð¼Ð¾Ð²Ð¸Ñ‚Ð¸ Ñ‰Ðµ Ñ€Ð°Ð· (5 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedHealthBar", "Ð—Ð°Ð¼Ð¾Ð²Ð¸Ñ‚Ð¸ Ñ‰Ð¾ÑÑŒ Ð±Ñ–Ð»ÑŒÑˆ Ð²Ñ€Ð°Ð¶Ð°ÑŽÑ‡Ðµ (5 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedMap", "ÐžÑÑ‚Ð°Ð½Ð½Ñ” Ð·Ð°Ð¼Ð¾Ð²Ð»ÐµÐ½Ð½Ñ! Ð¦Ðµ Ð¼ÑƒÑÐ¸Ñ‚ÑŒ Ð²Ð°Ñ€Ñ‚ÑƒÐ²Ð°Ñ‚Ð¸ Ñ†ÑƒÐºÐµÑ€Ð¾Ðº. (10 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedComment", "Ð¢Ð¸ Ñ€Ð¾Ð·Ð±Ð»Ð¾ÐºÑƒÐ²Ð°Ð² Ñ€ÑÐ´Ð¾Ðº ÑÑ‚Ð°Ð½Ñƒ! (Ð²Ð³Ð¾Ñ€Ñ–)");
Database.addText("uk.candyBoxRequestStatusBarUnlockedCfgComment1", "Ð¢ÐµÐ¿ÐµÑ€ Ñ‚Ð¸ Ð¼Ð°Ñ”Ñˆ Ð´Ð¾ÑÑ‚ÑƒÐ¿ Ð´Ð¾ Ð¿Ð°Ð½ÐµÐ»Ñ– Ð½Ð°Ð»Ð°ÑˆÑ‚ÑƒÐ²Ð°Ð½ÑŒ.");
Database.addText("uk.candyBoxRequestStatusBarUnlockedCfgComment2", "Ð¢Ð¸ Ð¼Ð¾Ð¶ÐµÑˆ Ð·Ð¼Ñ–Ð½Ð¸Ñ‚Ð¸ Ð¼Ð¾Ð²Ñƒ, ÑÐºÑ‰Ð¾ Ñ…Ð¾Ñ‡ÐµÑˆ.");
Database.addText("uk.candyBoxRequestStatusBarUnlockedSaveComment", "Ð—'ÑÐ²Ð¸Ð»Ð°ÑÑŒ Ð¿Ð°Ð½ÐµÐ»ÑŒ Ð¿Ñ€Ð¸ÑˆÐµÐ»ÐµÐ¿ÐºÑƒÐ²Ð°Ñ‚Ð¾Ð³Ð¾ Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ!");
Database.addText("uk.candyBoxRequestStatusBarUnlockedHealthBarComment", "ÐžÑÑŒ Ñ‚Ð¾Ð±Ñ– 100 Ð¿ÑƒÐ½ÐºÑ‚Ñ–Ð² Ð·Ð´Ð¾Ñ€Ð¾Ð²'Ñ. Ð’Ð¾Ð½Ð¸ Ð±ÑƒÐ´ÑƒÑ‚ÑŒ ÐºÐ¾Ñ€Ð¸ÑÐ½Ð¸Ð¼Ð¸.");
Database.addText("uk.cfgChooseLanguage", "ÐžÐ±ÐµÑ€Ð¸ Ð¼Ð¾Ð²Ñƒ :");
Database.addText("uk.cfgInvertColors", "Ð†Ð½Ð²ÐµÑ€Ñ‚ÑƒÐ²Ð°Ñ‚Ð¸ ÐºÐ¾Ð»ÑŒÐ¾Ñ€Ð¸?");
Database.addText("uk.gridItemMainMapName", "ÐœÐ°Ð¿Ð°");
Database.addText("uk.gridItemMainMapDescription", "ÐœÐ°Ð¿Ð° ÑÐ²Ñ–Ñ‚Ñƒ");
Database.addText("uk.gridItemPogoStickName", "Ð¦Ñ–Ð¿Ð¾Ðº-ÑÑ‚Ñ€Ð¸Ð±ÑƒÐ½Ð¾Ðº");
Database.addText("uk.gridItemPogoStickDescription", "Ð¦ÐµÐ¹ Ð¿Ñ€ÐµÐ´Ð¼ÐµÑ‚ Ð´Ð¾Ð·Ð²Ð¾Ð»ÑÑ” Ñ‚Ð¾Ð±Ñ– ÑÑ‚Ñ€Ð¸Ð±Ð°Ñ‚Ð¸ Ð¿Ñ€Ð¾Ñ‚ÑÐ³Ð¾Ð¼ Ð¿Ñ€Ð¸Ð³Ð¾Ð´!");
Database.addText("uk.gridItemTimeRingName", "ÐšÑ–Ð»ÑŒÑ†Ðµ Ñ‡Ð°ÑÑƒ");
Database.addText("uk.gridItemTimeRingDescription", "Ð¦ÐµÐ¹ Ð¿Ñ€ÐµÐ´Ð¼ÐµÑ‚ Ð½Ð°Ð´Ð°Ñ” Ð½Ð¾Ð²Ñƒ Ð¼Ð¾Ð¶Ð»Ð¸Ð²Ñ–ÑÑ‚ÑŒ Ð¿Ñ€Ð¾Ñ‚ÑÐ³Ð¾Ð¼ Ð¿Ñ€Ð¸Ð³Ð¾Ð´: Ñ‚Ð¸ Ð¼Ð¾Ð¶ÐµÑˆ ÑƒÐ¿Ð¾Ð²Ñ–Ð»ÑŒÐ½ÑŽÐ²Ð°Ñ‚Ð¸ Ñ‡Ð°Ñ. Ð¯ÐºÑ‰Ð¾ Ð¿Ð¾Ð´Ñ–Ñ— Ð²Ñ–Ð´Ð±ÑƒÐ²Ð°ÑŽÑ‚ÑŒÑÑ Ð·Ð°Ð½Ð°Ð´Ñ‚Ð¾ ÑˆÐ²Ð¸Ð´ÐºÐ¾ Ð´Ð»Ñ Ñ‚ÐµÐ±Ðµ, Ð·Ð°ÑÑ‚Ð¾ÑÐ¾Ð²ÑƒÐ¹ ÐºÑ–Ð»ÑŒÑ†Ðµ Ñ‡Ð°ÑÑƒ!");
Database.addText("uk.gridItemThirdHouseKeyName", "ÐšÐ»ÑŽÑ‡ Ð²Ñ–Ð´ Ñ‚Ñ€ÐµÑ‚ÑŒÐ¾Ð³Ð¾ Ð±ÑƒÐ´Ð¸Ð½ÐºÑƒ");
Database.addText("uk.gridItemThirdHouseKeyDescription", "Ð¦ÐµÐ¹ ÐºÐ»ÑŽÑ‡ Ð´Ð¾Ð·Ð²Ð¾Ð»ÑÑ” Ñ‚Ð¾Ð±Ñ– Ð²Ñ–Ð´ÐºÑ€Ð¸Ð²Ð°Ñ‚Ð¸ Ñ‚Ñ€ÐµÑ‚Ñ–Ð¹ Ð±ÑƒÐ´Ð¸Ð½Ð¾Ðº Ñƒ ÑÐµÐ»Ð¸Ñ‰Ñ–.");
Database.addText("uk.gridItemFeatherName", "ÐŸÐµÑ€Ð¾ Ð¿ÑƒÑÑ‚ÐµÐ»ÑŒÐ½Ð¾Ð³Ð¾ Ð¿Ñ‚Ð°Ñ…Ð°");
Database.addText("uk.gridItemFeatherDescription", "Ð¦Ðµ Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ðµ Ð¿ÐµÑ€Ð¾ Ð´Ð¾Ð·Ð²Ð¾Ð»ÑÑ” Ñ‚Ð¾Ð±Ñ– Ð²Ð¸Ñ‰Ðµ ÑÑ‚Ñ€Ð¸Ð±Ð°Ñ‚Ð¸ Ð· Ñ†Ñ–Ð¿ÐºÐ¾Ð¼-ÑÑ‚Ñ€Ð¸Ð±ÑƒÐ½ÐºÐ¾Ð¼!");
Database.addText("uk.gridItemFeatherDescriptionNoPogoStick", "Ð— Ð½ÐµÐ²Ñ–Ð´Ð¾Ð¼Ð¸Ñ… Ð¿Ñ€Ð¸Ñ‡Ð¸Ð½, Ñ‚Ð¸ Ð²Ñ–Ð´Ñ‡ÑƒÐ²Ð°Ñ”Ñˆ, Ñ‰Ð¾ Ñ†Ðµ Ð¿ÐµÑ€Ð¾ Ð¼Ð¾Ð³Ð»Ð¾ Ð±Ð¸ Ð±ÑƒÑ‚Ð¸ ÐºÐ¾Ñ€Ð¸ÑÐ½Ð¸Ð¼, ÑÐºÐ±Ð¸ Ð² Ñ‚ÐµÐ±Ðµ Ð±ÑƒÐ² Ñ†Ñ–Ð¿Ð¾Ðº-ÑÑ‚Ñ€Ð¸Ð±ÑƒÐ½Ð¾Ðº...");
Database.addText("uk.gridItemSpongeName", "ÐœÐ°Ð³Ñ–Ñ‡Ð½Ð° Ð³ÑƒÐ±ÐºÐ°");
Database.addText("uk.gridItemSpongeDescription", "Ð¦ÐµÐ¹ Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ð¸Ð¹ Ð¿Ñ€ÐµÐ´Ð¼ÐµÑ‚ Ð´Ð¾Ð·Ð²Ð¾Ð»ÑÑ” Ñ‚Ð¾Ð±Ñ– ÑÑ‚Ð¸ÑÐºÐ°Ñ‚Ð¸ÑÑ ÑÐº Ð³ÑƒÐ±ÐºÐ°, Ñ‚Ð°ÐºÐ¸Ð¼ Ñ‡Ð¸Ð½Ð¾Ð¼ Ð·Ð¼ÐµÐ½ÑˆÑƒÑŽÑ‡Ð¸ ÑÐ²Ð¾Ñ— Ñ€Ð¾Ð·Ð¼Ñ–Ñ€Ð¸.");
Database.addText("uk.gridItemFortressKeyName", "ÐšÐ»ÑŽÑ‡ Ð²Ñ–Ð´ Ð¿ÑƒÑÑ‚ÐµÐ»ÑŒÐ½Ð¾Ñ— Ñ„Ð¾Ñ€Ñ‚ÐµÑ†Ñ–");
Database.addText("uk.gridItemFortressKeyDescription", "Ð¦ÐµÐ¹ ÐºÐ»ÑŽÑ‡ Ð´Ð¾Ð·Ð²Ð¾Ð»ÑÑ” Ñ‚Ð¾Ð±Ñ– Ð·Ð°Ñ…Ð¾Ð´Ð¸Ñ‚Ð¸ Ð´Ð¾ Ð´ÑƒÐ¶Ðµ ÑÑ‚Ð°Ñ€Ð¾Ð²Ð¸Ð½Ð½Ð¾Ñ— Ñ„Ð¾Ñ€Ñ‚ÐµÑ†Ñ–, Ñ‰Ð¾ Ð·Ð½Ð°Ñ…Ð¾Ð´Ð¸Ñ‚ÑŒÑÑ ÑƒÐ³Ð¾Ñ€Ñ– Ð¿ÑƒÑÑ‚ÐµÐ»Ñ–. Ð¥Ñ‚Ð¾Ð·Ð½Ð°, Ñ‰Ð¾ Ñ‚Ð¸ Ð¼Ð¾Ð¶ÐµÑˆ Ñ‚Ð°Ð¼ Ð·Ð½Ð°Ð¹Ñ‚Ð¸?");
Database.addText("uk.gridItemHeartPendantName", "ÐšÑƒÐ»Ð¾Ð½-ÑÐµÑ€Ñ†Ðµ");
Database.addText("uk.gridItemHeartPendantDescription", "Ð¦ÐµÐ¹ ÐºÑƒÐ»Ð¾Ð½ Ñƒ Ð²Ð¸Ð³Ð»ÑÐ´Ñ– ÑÐµÑ€Ñ†Ñ Ð·Ð±Ñ–Ð»ÑŒÑˆÑƒÐ²Ð°Ñ‚Ð¸Ð¼Ðµ Ñ€Ñ–Ð²ÐµÐ½ÑŒ Ñ‚Ð²Ð¾Ð³Ð¾ Ð·Ð´Ð¾Ñ€Ð¾Ð²'Ñ Ð´Ð¾Ñ‚Ð¸, Ð´Ð¾ÐºÐ¸ Ñ‚Ð¸ Ð½Ð¾ÑÐ¸Ñ‚Ð¸Ð¼ÐµÑˆ Ð¹Ð¾Ð³Ð¾ Ð½Ð° ÑˆÐ¸Ñ—.");
Database.addText("uk.gridItemHeartPlugName", "Ð¡ÐµÑ€Ñ†ÐµÐ²Ð¸Ð¹ Ñ‡Ñ–Ð¿");
Database.addText("uk.gridItemHeartPlugDescription", "Ð¦ÐµÐ¹ Ð·Ð°Ð»Ñ–Ð·Ð½Ð¸Ð¹ ÑÐµÑ€Ñ†ÐµÐ²Ð¸Ð¹ Ñ‡Ñ–Ð¿ Ð½Ð° Ð¿Ð°Ð²ÑƒÑ‡Ð¸Ñ… Ð»Ð°Ð¿ÐºÐ°Ñ…, Ñ–Ð· ÑÐ¿ÐµÑ†Ñ–Ð°Ð»ÑŒÐ½Ð¸Ð¼ \"ÑÐµÑ€Ñ†ÐµÐ²Ð¸Ð¼ Ñ‚Ñ€ÑƒÐ½ÐºÐ¾Ð¼\", Ð·Ð°ÐºÐ¾Ñ€ÐºÐ¾Ð²Ð°Ð½Ð¸Ð¼ ÑƒÑÐµÑ€ÐµÐ´Ð¸Ð½Ñ–, Ð·Ð±Ñ–Ð»ÑŒÑˆÐ¸Ñ‚ÑŒ Ñ‚Ð²Ð¾Ñ” Ð·Ð´Ð¾Ñ€Ð¾Ð²'Ñ Ð½Ð° 20 Ð²Ñ–Ð´ÑÐ¾Ñ‚ÐºÑ–Ð²!");
Database.addText("uk.gridItemBeginnersGrimoireName", "ÐšÐ½Ð¸Ð³Ð° Ð·Ð°ÐºÐ»ÑÑ‚ÑŒ Ð¿Ð¾Ñ‡Ð°Ñ‚ÐºÑ–Ð²Ñ†Ñ");
Database.addText("uk.gridItemBeginnersGrimoireDescription", "Ð¦Ñ ÐºÐ½Ð¸Ð³Ð° Ð·Ð°ÐºÐ»ÑÑ‚ÑŒ Ð²Ñ–Ð´ÐºÑ€Ð¸Ð²Ð°Ñ” Ñ‚Ð¾Ð±Ñ– Ñ‚Ñ€Ð¸ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð½Ñ, Ð´Ð¾ÑÐ¸Ñ‚ÑŒ Ð¿Ñ€Ð¾ÑÑ‚Ð¸Ñ… Ð´Ð»Ñ Ð½Ð°ÐºÐ»Ð°Ð´Ð°Ð½Ð½Ñ. Ð’Ð¾Ð½Ð° ÑÐ¿Ñ€Ð°Ð²Ð´Ñ– Ð¿Ñ€Ð¸Ð·Ð½Ð°Ñ‡ÐµÐ½Ð° Ð´Ð»Ñ Ð¿Ð¾Ñ‡Ð°Ñ‚ÐºÑ–Ð²Ñ†Ñ–Ð². Ð¢Ð¸ Ð·Ð¼Ð¾Ð¶ÐµÑˆ Ð²Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð¾Ð²ÑƒÐ²Ð°Ñ‚Ð¸ Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ ÐºÐ¸ÑÐ»Ð¾Ñ‚Ð½Ð¾Ð³Ð¾ Ð´Ð¾Ñ‰Ñƒ (Ð²ÐµÐ»Ð¸ÐºÐ° ÐºÑ–Ð»ÑŒÐºÑ–ÑÑ‚ÑŒ ÐºÑ€Ð°Ð¿ÐµÐ»ÑŒ ÐºÐ¸ÑÐ»Ð¾Ñ‚Ð¸ Ð¿Ð°Ð´Ð°Ñ‚Ð¸Ð¼Ðµ Ð½Ð° Ñ‚Ð²Ð¾Ñ—Ñ… Ð²Ð¾Ñ€Ð¾Ð³Ñ–Ð²), Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ Ð²Ð¾Ð³Ð½ÑÐ½Ð¾Ñ— ÐºÑƒÐ»Ñ– (Ð³Ñ–Ð³Ð°Ð½Ñ‚ÑÑŒÐºÐ° Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ð° ÐºÑƒÐ»Ñ, Ð·Ñ€Ð¾Ð±Ð»ÐµÐ½Ð° Ð· Ð²Ð¾Ð³Ð½ÑŽ, Ð¿Ð¾Ð»ÐµÑ‚Ð¸Ñ‚ÑŒ Ð² Ð½Ð°Ð¿Ñ€ÑÐ¼ÐºÑƒ Ñ‚Ð²Ð¾Ñ—Ñ… Ð²Ð¾Ñ€Ð¾Ð³Ñ–Ð²) Ñ‚Ð° Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ Ñ‚ÐµÐ»ÐµÐ¿Ð¾Ñ€Ñ‚Ð°Ñ†Ñ–Ñ— (ÑÐºÐµ Ñ‚ÐµÐ»ÐµÐ¿Ð¾Ñ€Ñ‚ÑƒÑ” Ñ‚ÐµÐ±Ðµ Ð´Ð¾ Ð½ÐµÐ¿ÐµÑ€ÐµÐ´Ð±Ð°Ñ‡ÐµÐ½Ð¾Ñ— Ð»Ð¾ÐºÐ°Ñ†Ñ–Ñ—).");
Database.addText("uk.gridItemAdvancedGrimoireName", "Ð Ð¾Ð·ÑˆÐ¸Ñ€ÐµÐ½Ð° ÐºÐ½Ð¸Ð³Ð° Ð·Ð°ÐºÐ»ÑÑ‚ÑŒ");
Database.addText("uk.gridItemAdvancedGrimoireDescription", "Ð¦Ñ Ñ€Ð¾Ð·ÑˆÐ¸Ñ€ÐµÐ½Ð° ÐºÐ½Ð¸Ð³Ð° Ð·Ð°ÐºÐ»ÑÑ‚ÑŒ Ð²Ñ–Ð´ÐºÑ€Ð¸Ð²Ð°Ñ” Ñ‚Ð¾Ð±Ñ– Ð´Ð²Ð° Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð½Ñ: Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ Ð¾Ñ‡Ð¸Ñ‰ÐµÐ½Ð½Ñ Ð²Ñ–Ð´ Ð¼Ð°Ð³Ñ–Ñ— Ñ‚Ð° Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ Ñ‚ÐµÑ€Ð½Ð¾Ð²Ð¾Ð³Ð¾ Ñ‰Ð¸Ñ‚Ð°. ÐŸÐµÑ€ÑˆÐµ ÑƒÑÑƒÐ½Ðµ Ð· Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ð¸ ÑƒÑÑŽ Ð¼Ð°Ð³Ñ–ÑŽ Ð´Ð¾ Ð¿Ð¾Ñ‚Ð¾Ñ‡Ð½Ð¾Ñ— Ð¼Ð¸Ñ‚Ñ–, Ð²ÐºÐ»ÑŽÑ‡Ð½Ð¾ Ñ–Ð· Ñ‚Ñ–Ñ”ÑŽ, ÑÐºÑƒ Ð½Ð°ÐºÐ»Ð°Ð² Ñ‚Ð¸, Ñ‚Ð° Ð¼Ð°Ð³Ñ–ÑŽ Ñ‚Ð²Ð¾Ñ—Ñ… Ð²Ð¾Ñ€Ð¾Ð³Ñ–Ð². Ð”Ñ€ÑƒÐ³Ðµ Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ ÑÑ‚Ð²Ð¾Ñ€Ð¸Ñ‚ÑŒ Ð½Ð°Ð²ÐºÐ¾Ð»Ð¾ Ñ‚ÐµÐ±Ðµ Ñ‰Ð¸Ñ‚ Ñ–Ð· Ð»Ñ–Ñ‚Ð°ÑŽÑ‡Ð¸Ñ… ÐºÐ¾Ð»ÑŽÑ‡Ð¾Ðº, Ñ‰Ð¾ Ð·Ð°Ð²Ð´Ð°Ð²Ð°Ñ‚Ð¸Ð¼Ðµ ÑˆÐºÐ¾Ð´Ð¸ Ñ‚Ð²Ð¾Ñ—Ð¼ Ð²Ð¾Ñ€Ð¾Ð³Ð°Ð¼ Ð¿Ñ€Ð¸ ÐºÐ¾Ð½Ñ‚Ð°ÐºÑ‚Ñ–.");
Database.addText("uk.gridItemBlackMagicGrimoireName", "ÐšÐ½Ð¸Ð³Ð° Ð·Ð°ÐºÐ»ÑÑ‚ÑŒ Ñ‡Ð¾Ñ€Ð½Ð¾Ñ— Ð¼Ð°Ð³Ñ–Ñ—");
Database.addText("uk.gridItemBlackMagicGrimoireDescription", "Ð¢Ð¸ Ð·Ð½Ð°Ð¹ÑˆÐ¾Ð² Ñ†ÑŽ ÐºÐ½Ð¸Ð³Ñƒ Ð·Ð°ÐºÐ»ÑÑ‚ÑŒ Ñƒ Ð¿ÐµÑ‡ÐµÑ€Ñ–, Ñ—Ñ— Ð±ÑƒÐ»Ð¾ Ð´ÑƒÐ¶Ðµ Ð²Ð°Ð¶ÐºÐ¾ Ð´Ñ–ÑÑ‚Ð°Ñ‚Ð¸ÑÑ, Ñ– Ð´Ð»Ñ Ñ‚Ð¾Ð³Ð¾ Ð±ÑƒÐ»Ð° Ð¿Ñ€Ð¸Ñ‡Ð¸Ð½Ð°. Ð’Ð¾Ð½Ð° Ð²Ñ–Ð´ÐºÑ€Ð¸Ð²Ð°Ñ” Ñ‚Ð¾Ð±Ñ– Ð´Ð²Ð° Ð¿Ð¾Ñ‚ÑƒÐ¶Ð½Ð¸Ñ… Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ Ñ‡Ð¾Ñ€Ð½Ð¾Ñ— Ð¼Ð°Ð³Ñ–Ñ—. ÐŸÐµÑ€ÑˆÐµ Ð·Ð²ÐµÐ´Ðµ Ð¿ÐµÑ€ÐµÐ´ Ñ‚Ð¾Ð±Ð¾ÑŽ Ð³Ñ–Ð³Ð°Ð½Ñ‚ÑÑŒÐºÑƒ ÑÑ‚Ñ–Ð½Ñƒ Ð¾Ð±ÑÐ¸Ð´Ñ–Ð°Ð½Ð¾Ð²Ð¾Ñ— Ñ†ÐµÐ³Ð»Ð¸, Ñ‰Ð¾ Ð¼Ð¾Ð¶Ðµ Ð±ÑƒÑ‚Ð¸ ÐºÐ¾Ñ€Ð¸ÑÐ½Ð¸Ð¼, Ð°Ð±Ð¸ Ð·Ð°Ñ‚Ñ€Ð¸Ð¼Ð°Ñ‚Ð¸ Ñ‚Ð²Ð¾Ñ—Ñ… Ð²Ð¾Ñ€Ð¾Ð³Ñ–Ð². Ð”Ñ€ÑƒÐ³Ðµ Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ Ð²Ð¸ÐºÐ»Ð¸Ñ‡Ðµ Ð·Ð³Ñ€Ð°ÑŽ Ð´ÐµÐ¼Ð¾Ð½Ñ–Ð², Ñ‰Ð¾ Ð°Ñ‚Ð°ÐºÑƒÐ²Ð°Ñ‚Ð¸Ð¼ÑƒÑ‚ÑŒ ÐºÐ¾Ð¶Ð½Ð¾Ð³Ð¾ Ñƒ Ñ†Ñ–Ð¹ Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ñ–, Ð²ÐºÐ»ÑŽÑ‡Ð½Ð¾ Ð· Ñ‚Ð¾Ð±Ð¾ÑŽ. Ð‘ÑƒÐ´ÑŒ Ð¾Ð±ÐµÑ€ÐµÐ¶Ð½Ð¸Ð¼ Ñ–Ð· Ð½Ð¸Ð¼.");
Database.addText("uk.gridItemUnicornHornName", "Ð Ñ–Ð³ Ñ”Ð´Ð¸Ð½Ð¾Ñ€Ð¾Ð³Ð°");
Database.addText("uk.gridItemUnicornHornDescription", "Ð¦ÐµÐ¹ Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ð¸Ð¹ Ñ€Ñ–Ð³ Ð½Ð°Ð»ÐµÐ¶Ð°Ð² Ñ”Ð´Ð¸Ð½Ð¾Ñ€Ð¾Ð³Ñƒ. Ð™Ð¾Ð³Ð¾ Ð¿Ð¾Ñ‚ÑƒÐ¶Ð½Ñ– Ð»Ñ–ÐºÑƒÐ²Ð°Ð»ÑŒÐ½Ñ– Ð²Ð»Ð°ÑÑ‚Ð¸Ð²Ð¾ÑÑ‚Ñ– Ð´ÑƒÐ¶Ðµ Ñ‚Ð¾Ð±Ñ– Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð¶ÑƒÑ‚ÑŒ. Ð¢Ð¸ Ñ‡ÑƒÐ², Ñ‰Ð¾ Ñ†ÑŒÐ¾Ð³Ð¾ Ñ”Ð´Ð¸Ð½Ð¾Ñ€Ð¾Ð³Ð° Ð·Ð²Ð°Ð»Ð¸ Ð§Ð°Ñ€Ð»Ñ–.");
Database.addText("uk.gridItemXinopherydonClawName", "ÐšÑ–Ð³Ð¾Ñ‚ÑŒ ÐºÑÐ¸Ð½Ð¾Ð¿ÐµÑ€Ð¸Ð´Ð¾Ð½Ð°");
Database.addText("uk.gridItemXinopherydonClawDescription", "Ð¦ÐµÐ¹ ÐºÑ–Ð³Ð¾Ñ‚ÑŒ Ð½Ð°Ð»ÐµÐ¶Ð°Ð² ÐºÑÐ¸Ð½Ð¾Ð¿ÐµÑ€Ð¸Ð´Ð¾Ð½Ñƒ, Ð´Ñ€ÐµÐ²Ð½ÑŒÐ¾Ð¼Ñƒ Ð´Ð²Ð¾Ð³Ð¾Ð»Ð¾Ð²Ð¾Ð¼Ñƒ Ð·Ð²Ñ–Ñ€Ñƒ, Ñƒ Ñ–ÑÐ½ÑƒÐ²Ð°Ð½Ð½Ñ ÑÐºÐ¾Ð³Ð¾ ÑƒÑÑ– Ð²Ñ–Ñ€ÑÑ‚ÑŒ. Ð’Ñ–Ð½ Ð¿Ð¾Ð´Ð²Ð¾Ñ—Ñ‚ÑŒ Ð¿Ð¾ÑˆÐºÐ¾Ð´Ð¶ÐµÐ½Ð½Ñ Ð²Ñ–Ð´ Ñ‚Ð²Ð¾Ñ”Ñ— Ð·Ð±Ñ€Ð¾Ñ—.");
Database.addText("uk.gridItemPitchforkName", "Ð’Ð¸Ð»Ð°");
Database.addText("uk.gridItemPitchforkDescription", "Ð¦Ñ– ÑÐ¿ÐµÑ†Ñ–Ð°Ð»ÑŒÐ½Ñ– Ð²Ð¸Ð»Ð° Ð´Ð¾Ð·Ð²Ð¾Ð»ÑÑŽÑ‚ÑŒ Ñ€Ð¾Ð·Ð¿ÑƒÑˆÑƒÐ²Ð°Ñ‚Ð¸ Ò‘Ñ€ÑƒÐ½Ñ‚, Ð½Ðµ Ð¿ÐµÑ€ÐµÐºÐ¸Ð´Ð°ÑŽÑ‡Ð¸ Ð¹Ð¾Ð³Ð¾, Ñ‚Ð°ÐºÐ¸Ð¼ Ñ‡Ð¸Ð½Ð¾Ð¼ Ð·Ð±ÐµÑ€Ñ–Ð³Ð°ÑŽÑ‡Ð¸ Ð¿Ð¾Ð²ÐµÑ€Ñ…Ð½ÐµÐ²Ñƒ ÐµÐºÐ¾ÑÐ¸ÑÑ‚ÐµÐ¼Ñƒ Ò‘Ñ€ÑƒÐ½Ñ‚Ñƒ. Ð¦Ðµ Ð¿Ð¾Ñ‚Ñ€Ð¾Ñ—Ñ‚ÑŒ Ð¿Ñ€Ð¾Ð´ÑƒÐºÑ‚Ð¸Ð²Ð½Ñ–ÑÑ‚ÑŒ Ñ‚Ð²Ð¾Ñ”Ñ— Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÐ¾Ð²Ð¾Ñ— Ñ„ÐµÑ€Ð¼Ð¸.");
Database.addText("uk.gridItemShellPowderName", "Ð§ÐµÑ€ÐµÐ¿Ð°ÑˆÐºÐ¾Ð²Ð¸Ð¹ Ð¿Ð¾Ñ€Ð¾ÑˆÐ¾Ðº");
Database.addText("uk.gridItemShellPowderDescription", "ÐŸÐ¾Ñ€Ð¾ÑˆÐ¾Ðº Ñ–Ð· Ð¼ÑƒÑˆÐµÐ»ÑŒ Ñ‡Ð°ÑÑ‚Ð¾ Ð²Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð¾Ð²ÑƒÑ”Ñ‚ÑŒÑÑ Ñ„ÐµÑ€Ð¼ÐµÑ€Ð°Ð¼Ð¸ Ð´Ð»Ñ Ð¿Ð¾ÐºÑ€Ð°Ñ‰ÐµÐ½Ð½Ñ ÑˆÐ²Ð¸Ð´ÐºÐ¾ÑÑ‚Ñ– Ñ€Ð¾ÑÑ‚Ñƒ Ñ—Ñ…Ð½Ñ–Ñ… Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð². Ð¦ÐµÐ¹ Ð¿Ð¾Ñ€Ð¾ÑˆÐ¾Ðº Ð¿Ð¾Ð¼Ð½Ð¾Ð¶Ð¸Ñ‚ÑŒ Ð¿Ñ€Ð¾Ð´ÑƒÐºÑ‚Ð¸Ð²Ð½Ñ–ÑÑ‚ÑŒ Ñ‚Ð²Ð¾Ñ”Ñ— Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÐ¾Ð²Ð¾Ñ— Ñ„ÐµÑ€Ð¼Ð¸ Ð½Ð° Ñ‚Ñ€Ð¸!");
Database.addText("uk.gridItemPName", "ÐšÐ°Ð¼Ñ–Ð½ÑŒ P");
Database.addText("uk.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÐ’Â° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÐ’Â°-J (`  /R`yM}  T$`` Ð’Â°+-|U(\\OL&Y_)T|");
Database.addText("uk.gridItemLName", "ÐšÐ°Ð¼Ñ–Ð½ÑŒ L");
Database.addText("uk.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÐ’Â°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Ð’Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Ð’Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("uk.gridItemAName", "ÐšÐ°Ð¼Ñ–Ð½ÑŒ A");
Database.addText("uk.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÐ’Â°#{  Oa$ GM T{Q \"S A-\\ F KmÐ’Â°& C #Ð’Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("uk.gridItemYName", "ÐšÐ°Ð¼Ñ–Ð½ÑŒ Y");
Database.addText("uk.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Ð’Â°-  AX Y ` Ð’Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Ð’Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÐ’Â° I &L- /    K");
Database.addText("uk.gridItemRedSharkFinName", "ÐœÐ°Ð³Ñ–Ñ‡Ð½Ð¸Ð¹ Ð¿Ð»Ð°Ð²ÐµÑ†ÑŒ Ñ‡ÐµÑ€Ð²Ð¾Ð½Ð¾Ñ— Ð°ÐºÑƒÐ»Ð¸");
Database.addText("uk.gridItemRedSharkFinDescription", "Ð¦ÐµÐ¹ Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ð¸Ð¹ Ð¿Ð»Ð°Ð²ÐµÑ†ÑŒ Ð·Ð½Ð°Ñ‡Ð½Ð¾ Ð¿Ñ–Ð´Ð²Ð¸Ñ‰ÑƒÑ” Ð¿Ð¾ÑˆÐºÐ¾Ð´Ð¶ÐµÐ½Ð½Ñ Ð²Ñ–Ð´ Ñ‚Ð²Ð¾Ð³Ð¾ Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ Ð²Ð¾Ð³Ð½ÑÐ½Ð¾Ñ— ÐºÑƒÐ»Ñ–. ÐÐ°Ñ€ÐµÑˆÑ‚Ñ– Ñ†Ñ Ð²Ð¾Ð³Ð½ÑÐ½Ð° ÐºÑƒÐ»Ñ ÑÑ‚Ð°Ñ” ÐºÐ¾Ñ€Ð¸ÑÐ½Ð¾ÑŽ.");
Database.addText("uk.gridItemGreenSharkFinName", "ÐœÐ°Ð³Ñ–Ñ‡Ð½Ð¸Ð¹ Ð¿Ð»Ð°Ð²ÐµÑ†ÑŒ Ð·ÐµÐ»ÐµÐ½Ð¾Ñ— Ð°ÐºÑƒÐ»Ð¸");
Database.addText("uk.gridItemGreenSharkFinDescription", "Ð¦ÐµÐ¹ Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ð¸Ð¹ Ð¿Ð»Ð°Ð²ÐµÑ†ÑŒ Ð¿Ñ€Ð¸Ð½ÐµÑÐµ ÑÐ¸Ð»Ñƒ Ð¿Ñ€Ð¸Ñ€Ð¾Ð´Ð¸ Ñƒ Ñ‚Ð²Ð¾ÑŽ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÐ¾Ð²Ñƒ Ñ„ÐµÑ€Ð¼Ñƒ! Ð‡Ñ— Ð¿Ñ€Ð¾Ð´ÑƒÐºÑ‚Ð¸Ð²Ð½Ñ–ÑÑ‚ÑŒ Ð·Ñ€Ð¾ÑÑ‚Ðµ Ñƒ 5 Ñ€Ð°Ð·Ñ–Ð².");
Database.addText("uk.gridItemPurpleSharkFinName", "ÐœÐ°Ð³Ñ–Ñ‡Ð½Ð¸Ð¹ Ð¿Ð»Ð°Ð²ÐµÑ†ÑŒ Ð±Ð°Ð³Ñ€ÑÐ½Ð¾Ñ— Ð°ÐºÑƒÐ»Ð¸");
Database.addText("uk.gridItemPurpleSharkFinDescription", "Ð¦ÐµÐ¹ Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ð¸Ð¹ Ð¿Ð»Ð°Ð²ÐµÑ†ÑŒ Ð²Ñ–Ð´ÐºÑ€Ð¸Ñ” Ñ‚Ð¾Ð±Ñ– Ð½Ð¾Ð²Ðµ Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð½Ñ Ñ‡Ð¾Ñ€Ð½Ð¾Ñ— Ð¼Ð°Ð³Ñ–Ñ—. Ð¢Ð¸ Ð¼Ð¾Ð¶ÐµÑˆ Ð²Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð¾Ð²ÑƒÐ²Ð°Ñ‚Ð¸ Ð¹Ð¾Ð³Ð¾ Ð»Ð¸ÑˆÐµ Ñ€Ð°Ð· Ð·Ð° Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ñƒ. Ð‘ÑƒÐ´ÑŒ Ð¾Ð±ÐµÑ€ÐµÐ¶Ð½Ð¸Ð¼ Ñ–Ð· Ð½Ð¸Ð¼!");
Database.addText("uk.gridItemTalkingCandyName", "Ð¦ÑƒÐºÐµÑ€Ð¸Ðº, Ñ‰Ð¾ Ð³Ð¾Ð²Ð¾Ñ€Ð¸Ñ‚ÑŒ");
Database.addText("uk.gridItemTalkingCandyDescription", "Ð¦ÐµÐ¹ Ñ†ÑƒÐºÐµÑ€Ð¸Ðº, Ñ‰Ð¾ Ð³Ð¾Ð²Ð¾Ñ€Ð¸Ñ‚ÑŒ, Ð·'ÑÐ²Ð¸Ð²ÑÑ Ð¿Ñ–ÑÐ»Ñ Ñ‚Ð¾Ð³Ð¾, ÑÐº Ñ‚Ð¸ Ð¿Ð¾ÐºÐ»Ð°Ð² Ñ‡Ð¾Ñ‚Ð¸Ñ€Ð¸ ÐºÐ°Ð¼ÐµÐ½Ñ– Ð½Ð° Ð²ÐµÑ€Ñ…Ñ–Ð²ÐºÑƒ Ð·Ð°Ð¼ÐºÐ¾Ð²Ð¾Ñ— Ð²ÐµÐ¶Ñ–. Ð’Ñ–Ð½ Ð¼Ð¾Ð¶Ðµ Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ñ‚Ð¸ Ñ‚Ð¾Ð±Ñ– Ð²Ñ–Ð´ÐºÑ€Ð¸Ñ‚Ð¸ candy box...");
Database.addText("uk.inventorySpecialNothingEqItem", "ÐÑ–Ñ‡Ð¾Ð³Ð¾");
Database.addText("uk.eqItemWeaponWoodenSwordName", "Ð”ÐµÑ€ÐµÐ²'ÑÐ½Ð¸Ð¹ Ð¼ÐµÑ‡");
Database.addText("uk.eqItemWeaponWoodenSwordDescription", "ÐŸÑ€Ð¾ÑÑ‚Ð¸Ð¹ Ð¼ÐµÑ‡, Ð·Ñ€Ð¾Ð±Ð»ÐµÐ½Ð¸Ð¹ Ñ–Ð· Ð´ÐµÑ€ÐµÐ²Ð°");
Database.addText("uk.eqItemWeaponIronAxeName", "Ð—Ð°Ð»Ñ–Ð·Ð½Ð° ÑÐ¾ÐºÐ¸Ñ€Ð°");
Database.addText("uk.eqItemWeaponIronAxeDescription", "ÐŸÑ€Ð¾ÑÑ‚Ð° Ð·Ð°Ð»Ñ–Ð·Ð½Ð° ÑÐ¾ÐºÐ¸Ñ€Ð°. Ð”Ð¾Ð±Ñ€Ðµ Ð¿Ñ–Ð´Ñ‚Ð¾Ñ‡ÐµÐ½Ð°. Ð‘Ñ–Ð»ÑŒÑˆ Ð¿Ð¾Ñ‚ÑƒÐ¶Ð½Ð°, Ð½Ñ–Ð¶ Ð´ÐµÑ€ÐµÐ²'ÑÐ½Ð¸Ð¹ Ð¼ÐµÑ‡.");
Database.addText("uk.eqItemWeaponPolishedSilverSwordName", "ÐŸÐ¾Ð»Ñ–Ñ€Ð¾Ð²Ð°Ð½Ð¸Ð¹ ÑÑ€Ñ–Ð±Ð½Ð¸Ð¹ Ð¼ÐµÑ‡");
Database.addText("uk.eqItemWeaponPolishedSilverSwordDescription", "ÐŸÐ¾Ñ‚ÑƒÐ¶Ð½Ð¸Ð¹ Ð¼ÐµÑ‡ Ñ–Ð· Ð·ÑƒÐ±Ñ†ÑÐ¼Ð¸.");
Database.addText("uk.eqItemWeaponTrollBludgeonName", "ÐšÐ¸Ð¹ Ñ‚Ñ€Ð¾Ð»Ñ");
Database.addText("uk.eqItemWeaponTrollBludgeonDescription", "Ð¢Ð¸ Ð·Ð°Ð±Ñ€Ð°Ð² Ñ†ÐµÐ¹ ÐºÐ¸Ð¹ Ñƒ Ñ‚Ñ€Ð¾Ð»Ñ, Ñ‰Ð¾ Ð¾Ñ…Ð¾Ñ€Ð¾Ð½ÑÐ² Ð¼Ñ–ÑÑ‚. Ð’Ñ–Ð½ Ð¿Ð¾Ð²Ñ–Ð»ÑŒÐ½Ð¸Ð¹, Ð°Ð»Ðµ Ð·Ð¼Ñ–Ñ‚Ð°Ñ” Ð²Ð¾Ñ€Ð¾Ð³Ñ–Ð² Ð´Ð¾ÑÐ¸Ñ‚ÑŒ ÐµÑ„ÐµÐºÑ‚Ð¸Ð²Ð½Ð¾.");
Database.addText("uk.eqItemWeaponTribalSpearName", "ÐŸÐ»ÐµÐ¼Ñ–Ð½Ð½Ð¸Ð¹ ÑÐ¿Ð¸Ñ");
Database.addText("uk.eqItemWeaponTribalSpearDescription", "Ð¢Ð¸ Ð·Ð½Ð°Ð¹ÑˆÐ¾Ð² Ñ†ÐµÐ¹ Ð¿Ð»ÐµÐ¼Ñ–Ð½Ð½Ð¸Ð¹ ÑÐ¿Ð¸Ñ Ð½Ð° Ñ‚Ñ–Ð»Ñ– Ð²Ð¾Ñ—Ð½Ð° Ð¿Ð»ÐµÐ¼ÐµÐ½Ñ–, Ñ‰Ð¾ Ð·Ð°Ð³ÑƒÐ±Ð¸Ð²ÑÑ Ñƒ Ð²ÐµÐ»Ð¸ÐºÑ–Ð¹ Ð´Ñ–Ñ€Ñ– Ð² Ð·ÐµÐ¼Ð»Ñ–. ÐÐ¸Ð¼ ÑÐ¿ÐµÑ€ÑˆÑƒ Ñ‚Ñ€Ð¾Ñ…Ð¸ Ð²Ð°Ð¶ÐºÐ¾ ÐºÐ¾Ñ€Ð¸ÑÑ‚ÑƒÐ²Ð°Ñ‚Ð¸ÑÑŒ, Ð°Ð»Ðµ ÐºÐ¾Ð»Ð¸ Ñ‚Ð¸ Ð·Ð²Ð¸ÐºÐ°Ñ”Ñˆ Ð´Ð¾ Ð½ÑŒÐ¾Ð³Ð¾, Ñ†Ðµ Ð³Ð°Ñ€Ð½Ð° Ð·Ð±Ñ€Ð¾Ñ.");
Database.addText("uk.eqItemWeaponSummoningTribalSpearName", "ÐŸÐ»ÐµÐ¼Ñ–Ð½Ð½Ð¸Ð¹ ÑÐ¿Ð¸Ñ Ð¿Ñ€Ð¸ÐºÐ»Ð¸ÐºÐ°Ð½Ð½Ñ");
Database.addText("uk.eqItemWeaponSummoningTribalSpearDescription", "Ð¦ÐµÐ¹ Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ð¸Ð¹ Ð¿Ð»ÐµÐ¼Ñ–Ð½Ð½Ð¸Ð¹ ÑÐ¿Ð¸Ñ, Ð¾ÐºÑ€Ñ–Ð¼ Ñ‚Ð¾Ð³Ð¾, Ñ‰Ð¾ Ñ‚Ñ€Ð¾Ñ…Ð¸ Ð¿Ð¾Ñ‚ÑƒÐ¶Ð½Ñ–ÑˆÐ¸Ð¹, Ð½Ñ–Ð¶ Ð·Ð²Ð¸Ñ‡Ð°Ð¹Ð½Ð¸Ð¹ Ð¿Ð»ÐµÐ¼Ñ–Ð½Ð½Ð¸Ð¹ ÑÐ¿Ð¸Ñ, Ð±ÑƒÐ´Ðµ Ð¿ÐµÑ€Ñ–Ð¾Ð´Ð¸Ñ‡Ð½Ð¾ Ð²Ð¸ÐºÐ»Ð¸ÐºÐ°Ñ‚Ð¸ Ð²Ð¾Ñ—Ð½Ñ–Ð² Ð¿Ð»ÐµÐ¼ÐµÐ½Ñ–, Ñ‰Ð¾ Ð´Ð¾Ð¿Ð¾Ð¼Ð°Ð³Ð°Ñ‚Ð¸Ð¼ÑƒÑ‚ÑŒ Ñ‚Ð¾Ð±Ñ– Ñƒ Ñ‚Ð²Ð¾Ñ—Ñ… Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ð°Ñ….");
Database.addText("uk.eqItemWeaponMonkeyWizardStaffName", "ÐŸÐ°Ñ‚ÐµÑ€Ð¸Ñ†Ñ Ð¼Ð°Ð²Ð¿ÑÑ‡Ð¾Ð³Ð¾ Ñ‡Ð°ÐºÐ»ÑƒÐ½Ð°");
Database.addText("uk.eqItemWeaponMonkeyWizardStaffDescription", "Ð¦Ñ Ð¿Ð°Ñ‚ÐµÑ€Ð¸Ñ†Ñ Ð½Ð°Ð»ÐµÐ¶Ð°Ð»Ð° Ð³Ð¾Ð»Ð¾Ð¼Ñƒ Ð¼Ð°Ð²Ð¿ÑÑ‡Ð¾Ð¼Ñƒ Ñ‡Ð°ÐºÐ»ÑƒÐ½Ñƒ, ÑÐºÐ¾Ð³Ð¾ Ñ‚Ð¸ Ð·Ð½Ð°Ð¹ÑˆÐ¾Ð² Ñƒ Ð¿ÐµÑ‡ÐµÑ€Ñ–. Ð’Ð¾Ð½Ð° ÑÐ°Ð¼Ð° Ð¿Ð¾ ÑÐ¾Ð±Ñ– Ð±ÑƒÐ´Ðµ Ñ€ÑÑÐ½Ð¾ Ð½Ð°ÐºÐ»Ð°Ð´Ð°Ñ‚Ð¸ Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ Ð½Ð° Ñ‚Ð²Ð¾Ñ—Ñ… Ð²Ð¾Ñ€Ð¾Ð³Ñ–Ð².");
Database.addText("uk.eqItemWeaponEnchantedMonkeyWizardStaffName", "ÐŸÐ°Ñ‚ÐµÑ€Ð¸Ñ†Ñ Ð¼Ð°Ð²Ð¿ÑÑ‡Ð¾Ð³Ð¾ Ñ‡Ð°ÐºÐ»ÑƒÐ½Ð° (Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð°)");
Database.addText("uk.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Ð¦Ñ Ð¿Ð°Ñ‚ÐµÑ€Ð¸Ñ†Ñ ÑˆÐ²Ð¸Ð´ÑˆÐ°, Ð½Ñ–Ð¶ Ð½Ðµ Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð°, Ñ– Ð½Ð°ÐºÐ»Ð°Ð´Ð°Ñ‚Ð¸ Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ Ð±ÑƒÐ´Ðµ Ñ‚Ð°ÐºÐ¾Ð¶ Ð·Ð½Ð°Ñ‡Ð½Ð¾ ÑˆÐ²Ð¸Ð´ÑˆÐµ.");
Database.addText("uk.eqItemWeaponGiantSpoonName", "Ð’ÐµÐ»ÐµÑ‚ÐµÐ½ÑÑŒÐºÐ° Ð»Ð¾Ð¶ÐºÐ°");
Database.addText("uk.eqItemWeaponGiantSpoonDescription", "Ð¦Ñ Ð²ÐµÐ»ÐµÑ‚ÐµÐ½ÑÑŒÐºÐ° Ð»Ð¾Ð¶ÐºÐ° Ð±ÑƒÐ»Ð° Ñƒ Ð²ÐµÐ»ÐµÑ‚ÐµÐ½ÑÑŒÐºÐ¾Ð¼Ñƒ Ñ‡Ð°Ð¹Ð½Ð¸ÐºÑƒ Ð² Ð¿ÑƒÑÑ‚ÐµÐ»ÑŒÐ½Ñ–Ð¹ Ñ„Ð¾Ñ€Ñ‚ÐµÑ†Ñ–. Ð¢Ð¸ Ð½Ðµ Ð·Ð½Ð°Ñ”Ñˆ, Ñ‡Ð¸ Ð²Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð¾Ð²ÑƒÐ²Ð°Ð² Ñ…Ñ‚Ð¾-Ð½ÐµÐ±ÑƒÐ´ÑŒ ÐºÐ¾Ð»Ð¸-Ð½ÐµÐ±ÑƒÐ´ÑŒ Ñ—Ñ— ÑÐº Ð»Ð¾Ð¶ÐºÑƒ, Ð°Ð»Ðµ ÑÐºÑ‰Ð¾ Ñ‚Ð°Ðº, Ñ‚Ð¾ Ñ†Ðµ Ð¼Ð°Ð² Ð±ÑƒÑ‚Ð¸ Ñ…Ñ‚Ð¾ÑÑŒ Ð´Ñ–Ð¹ÑÐ½Ð¾ Ð²ÐµÐ»Ð¸ÐºÐ¸Ð¹. Ð¢Ð¾Ð±Ñ–, Ð½Ð°Ð¿ÐµÐ²Ð½Ðµ, Ð½Ðµ Ñ…Ð¾Ñ‡ÐµÑ‚ÑŒÑÑ Ð·ÑƒÑÑ‚Ñ€Ñ–Ñ‚Ð¸ÑÑŒ Ñ–Ð· Ð½Ð¸Ð¼.");
Database.addText("uk.eqItemWeaponGiantSpoonOfDoomName", "Ð’ÐµÐ»ÐµÑ‚ÐµÐ½ÑÑŒÐºÐ° Ð›Ð¾Ð¶ÐºÐ° Ð”Ð¾Ð»Ñ–");
Database.addText("uk.eqItemWeaponGiantSpoonOfDoomDescription", "Ð¦Ñ Ð²ÐµÐ»ÐµÑ‚ÐµÐ½ÑÑŒÐºÐ° Ð»Ð¾Ð¶ÐºÐ° Ð½Ð°Ð²Ñ–Ñ‚ÑŒ Ð¿Ð¾Ñ‚ÑƒÐ¶Ð½Ñ–ÑˆÐ°, Ð½Ñ–Ð¶ Ð·Ð²Ð¸Ñ‡Ð°Ð¹Ð½Ð° Ð²ÐµÐ»ÐµÑ‚ÐµÐ½ÑÑŒÐºÐ° Ð»Ð¾Ð¶ÐºÐ°, ÑÐºÑƒ Ñ‚Ð¸ Ð¼Ñ–Ð³ Ð·Ð½Ð°Ð¹Ñ‚Ð¸, Ð½Ð°Ð¿Ñ€Ð¸ÐºÐ»Ð°Ð´, Ñƒ Ñ‡Ð°Ð¹Ð½Ð¸ÐºÑƒ. Ð’Ð¾Ð½Ð°, Ð¿Ñ€Ð¾Ñ‚Ðµ, Ð´Ð¾Ð²Ð¾Ð»Ñ– Ð¿Ð¾Ð²Ñ–Ð»ÑŒÐ½Ð°.");
Database.addText("uk.eqItemWeaponScytheName", "ÐšÐ¾ÑÐ°");
Database.addText("uk.eqItemWeaponScytheDescription", "ÐŸÐ¾Ð´ÐµÐ¹ÐºÑƒÑŽÑ‚ÑŒ, Ñ‰Ð¾ Ñ†Ñ ÐºÐ¾ÑÐ° Ð½Ð°Ð»ÐµÐ¶Ð°Ð»Ð° ÑÐ°Ð¼Ñ–Ð¹ Ð¡Ð¼ÐµÑ€Ñ‚Ñ–. Ð’Ð¾Ð½Ð° Ð½Ð°Ð´Ð·Ð²Ð¸Ñ‡Ð°Ð¹Ð½Ð¾ ÑˆÐ²Ð¸Ð´ÐºÐ°.");
Database.addText("uk.eqItemHatMerchantHatName", "ÐšÐ°Ð¿ÐµÐ»ÑŽÑ… Ñ†ÑƒÐºÐµÑ€Ð½Ð¸ÐºÐ°");
Database.addText("uk.eqItemHatMerchantHatDescription", "Ð¦ÑŒÐ¾Ð³Ð¾ ÐºÐ°Ð¿ÐµÐ»ÑŽÑ…Ð° Ð¿Ñ€Ð¾Ð´Ð°Ð² Ñ‚Ð¾Ð±Ñ– Ñ‚Ð¾Ñ€Ð³Ð¾Ð²ÐµÑ†ÑŒ Ñ†ÑƒÐºÐµÑ€ÐºÐ°Ð¼Ð¸. Ð¦ÑƒÐºÐµÑ€Ð½Ð¸Ðº Ð»ÑŽÐ±Ð¸Ñ‚ÑŒ Ñ†ÑƒÐºÐµÑ€ÐºÐ¸. Ð¦ÐµÐ¹ ÐºÐ°Ð¿ÐµÐ»ÑŽÑ… Ñƒ 7 Ñ€Ð°Ð·Ñ–Ð² Ð·Ð±Ñ–Ð»ÑŒÑˆÐ¸Ñ‚ÑŒ ÐºÑ–Ð»ÑŒÐºÑ–ÑÑ‚ÑŒ Ñ†ÑƒÐºÐµÑ€Ð¾Ðº, ÑÐºÑ– Ñ‚Ð¸ Ð·Ð½Ð°Ñ…Ð¾Ð´Ð¸Ñˆ Ñƒ Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ð°Ñ…!");
Database.addText("uk.eqItemHatSorceressHatName", "ÐšÐ°Ð¿ÐµÐ»ÑŽÑ… Ñ‡Ð°ÐºÐ»ÑƒÐ½ÐºÐ¸");
Database.addText("uk.eqItemHatSorceressHatDescription", "Ð¦ÑŒÐ¾Ð³Ð¾ ÐºÐ°Ð¿ÐµÐ»ÑŽÑ…Ð° Ð¿Ñ€Ð¾Ð´Ð°Ð»Ð° Ñ‚Ð¾Ð±Ñ– Ñ‡Ð°ÐºÐ»ÑƒÐ½ÐºÐ°. Ð’Ñ–Ð½ Ð¿Ð¾ÑÐ¸Ð»Ð¸Ñ‚ÑŒ Ð´Ñ–ÑŽ Ñ‚Ð²Ð¾Ñ—Ñ… Ð·Ð°ÐºÐ»ÑÑ‚ÑŒ Ñ‚Ð° Ð·Ñ–Ð»Ð»Ñ.");
Database.addText("uk.eqItemHatOctopusKingCrownName", "ÐšÐ¾Ñ€Ð¾Ð½Ð° ÐšÐ¾Ñ€Ð¾Ð»Ñ Ð’Ð¾ÑÑŒÐ¼Ð¸Ð½Ð¾Ð³Ñ–Ð²");
Database.addText("uk.eqItemHatOctopusKingCrownDescription", "ÐšÐ¾Ð»Ð¸ Ñ‚Ð¸ Ð½Ð¾ÑÐ¸Ñˆ Ñ†ÑŽ ÐºÐ¾Ñ€Ð¾Ð½Ñƒ, Ñ‚Ð¾ Ð¿Ð¾Ñ‡ÑƒÐ²Ð°Ñ”ÑˆÑÑ Ð½Ð°Ð±Ð°Ð³Ð°Ñ‚Ð¾ Ð²Ð¿ÐµÐ²Ð½ÐµÐ½Ñ–ÑˆÐµ. Ð’Ð¾Ð½Ð° Ð½Ðµ Ð½Ð°Ð´Ð°Ñ” Ð½Ñ–ÑÐºÐ¸Ñ… Ð¿ÐµÑ€ÐµÐ²Ð°Ð³ Ñƒ Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ð°Ñ…, Ð°Ð»Ðµ Ð²Ð¿ÐµÐ²Ð½ÐµÐ½Ñ–ÑÑ‚ÑŒ Ñƒ ÑÐ¾Ð±Ñ– â€” Ñ†Ðµ Ð²Ð°Ð¶Ð»Ð¸Ð²Ð¾!");
Database.addText("uk.eqItemHatOctopusKingCrownWithJaspersName", "ÐšÐ¾Ñ€Ð¾Ð½Ð° ÐšÐ¾Ñ€Ð¾Ð»Ñ Ð’Ð¾ÑÑŒÐ¼Ð¸Ð½Ð¾Ð³Ñ–Ð² Ñ–Ð· ÑÑˆÐ¼Ð¾ÑŽ");
Database.addText("uk.eqItemHatOctopusKingCrownWithJaspersDescription", "Ð¦ÑŽ Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ñƒ ÐºÐ¾Ñ€Ð¾Ð½Ñƒ Ð²Ð¸Ð³Ð¾Ñ‚Ð¾Ð²Ð»ÐµÐ½Ð¾ Ñ–Ð· Ð·Ð¾Ð»Ð¾Ñ‚Ð° Ñ‚Ð° Ñ‡ÐµÑ€Ð²Ð¾Ð½Ð¾Ñ— ÑÑˆÐ¼Ð¸. ÐŸÑ–Ð´ Ñ‡Ð°Ñ Ð¿Ñ€Ð¸Ð³Ð¾Ð´ Ð²Ð¾Ð½Ð° Ð¿ÐµÑ€Ñ–Ð¾Ð´Ð¸Ñ‡Ð½Ð¾ ÑÑ‚Ð²Ð¾Ñ€ÑŽÐ²Ð°Ñ‚Ð¸Ð¼Ðµ Ð¿Ð¾Ñ‚ÑƒÐ¶Ð½Ñ– Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ñ– Ð²Ð¾Ð³Ð½ÑÐ½Ñ– ÐºÑƒÐ»Ñ– Ð½Ð°Ð²ÐºÐ¾Ð»Ð¾ Ñ‚ÐµÐ±Ðµ. Ð Ñ‰Ðµ Ð²Ð¾Ð½Ð° ÑÑÑ”!");
Database.addText("uk.eqItemHatOctopusKingCrownWithObsidianName", "ÐšÐ¾Ñ€Ð¾Ð½Ð° ÐšÐ¾Ñ€Ð¾Ð»Ñ Ð’Ð¾ÑÑŒÐ¼Ð¸Ð½Ð¾Ð³Ñ–Ð² Ñ–Ð· Ð¾Ð±ÑÐ¸Ð´Ñ–Ð°Ð½Ð¾Ð¼");
Database.addText("uk.eqItemHatOctopusKingCrownWithObsidianDescription", "Ð¦ÑŽ Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ñƒ ÐºÐ¾Ñ€Ð¾Ð½Ñƒ Ð²Ð¸Ð³Ð¾Ñ‚Ð¾Ð²Ð»ÐµÐ½Ð¾ Ñ–Ð· Ð·Ð¾Ð»Ð¾Ñ‚Ð° Ñ‚Ð° Ð¾Ð±ÑÐ¸Ð´Ñ–Ð°Ð½Ñƒ. Ð’Ð¾Ð½Ð° Ð¿Ñ€ÐµÐºÑ€Ð°ÑÐ½Ð°. ÐŸÑ–Ð´ Ñ‡Ð°Ñ Ð¿Ñ€Ð¸Ð³Ð¾Ð´ Ð²Ð¾Ð½Ð° Ñ‡Ð°Ñ Ð²Ñ–Ð´ Ñ‡Ð°ÑÑƒ Ð¿Ñ€Ð¸ÐºÐ»Ð¸ÐºÐ°Ñ‚Ð¸Ð¼Ðµ ÐšÐ¾Ñ€Ð¾Ð»Ñ Ð’Ð¾ÑÑŒÐ¼Ð¸Ð½Ð¾Ð³Ñ–Ð², Ñ‰Ð¾ Ð±Ð¸Ñ‚Ð¸Ð¼ÐµÑ‚ÑŒÑÑ Ð½Ð° Ñ‚Ð²Ð¾Ñ—Ð¹ ÑÑ‚Ð¾Ñ€Ð¾Ð½Ñ–. ÐžÑ‚Ð¾ Ð¼Ð°Ñ†Ð°Ð²Ð°Ñ‚Ð¸Ð¹ ÑÐ¾ÑŽÐ·Ð½Ð¸Ðº!");
Database.addText("uk.eqItemGlovesLeatherGlovesName", "Ð¨ÐºÑ–Ñ€ÑÐ½Ñ– Ñ€ÑƒÐºÐ°Ð²Ð¸Ñ†Ñ–");
Database.addText("uk.eqItemGlovesLeatherGlovesDescription", "Ð¦Ñ– Ñ€ÑƒÐºÐ°Ð²Ð¸Ñ†Ñ–, Ð¿Ð¾ ÑÑƒÑ‚Ñ–, Ð½Ñ–Ñ‡Ð¾Ð³Ð¾ Ð½Ðµ Ñ€Ð¾Ð±Ð»ÑÑ‚ÑŒ. ÐÐ»Ðµ Ð²Ð¾Ð½Ð¸, Ð¿Ñ€Ð¸Ð½Ð°Ð¹Ð¼Ð½Ñ–, Ð¼'ÑÐºÑ– Ñ‚Ð° Ð·Ñ€ÑƒÑ‡Ð½Ñ–!");
Database.addText("uk.eqItemGlovesRedEnchantedGlovesName", "Ð§ÐµÑ€Ð²Ð¾Ð½Ñ– Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ñ– Ñ€ÑƒÐºÐ°Ð²Ð¸Ñ†Ñ–");
Database.addText("uk.eqItemGlovesRedEnchantedGlovesDescription", "Ð¦Ñ– Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ñ– Ñ€ÑƒÐºÐ°Ð²Ð¸Ñ†Ñ– Ð²Ð¸Ð¿Ñ€Ð¾Ð¼Ñ–Ð½ÑŽÑŽÑ‚ÑŒ Ñƒ Ñ‚ÐµÐ¼Ñ€ÑÐ²Ñ– Ð¼'ÑÐºÐµ Ñ‡ÐµÑ€Ð²Ð¾Ð½Ðµ ÑÐ²Ñ–Ñ‚Ð»Ð¾. ÐŸÑ–Ð´ Ñ‡Ð°Ñ Ð¿Ñ€Ð¸Ð³Ð¾Ð´ Ð²Ð¾Ð½Ð¸ Ð²Ð¸Ð¿ÑƒÑÐºÐ°Ñ‚Ð¸Ð¼ÑƒÑ‚ÑŒ Ñƒ Ñ‚Ð²Ð¾Ñ—Ñ… Ð²Ð¾Ñ€Ð¾Ð³Ñ–Ð² Ð¼Ð°Ð»ÐµÐ½ÑŒÐºÑ– Ð²Ð¾Ð³Ð½ÑÐ½Ñ– ÐºÑƒÐ»ÑŒÐºÐ¸, Ñ‰Ð¾, Ð±ÐµÐ·Ð¿ÐµÑ€ÐµÑ‡Ð½Ð¾, Ð¼Ð¾Ð¶Ðµ Ð±ÑƒÑ‚Ð¸ ÐºÐ¾Ñ€Ð¸ÑÐ½Ð¸Ð¼.");
Database.addText("uk.eqItemGlovesPinkEnchantedGlovesName", "Ð Ð¾Ð¶ÐµÐ²Ñ– Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ñ– Ñ€ÑƒÐºÐ°Ð²Ð¸Ñ†Ñ–");
Database.addText("uk.eqItemGlovesPinkEnchantedGlovesDescription", "Ð¦Ñ– Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ñ– Ñ€ÑƒÐºÐ°Ð²Ð¸Ñ†Ñ– Ð·Ð°Ð»Ð¸ÑˆÐ°ÑŽÑ‚ÑŒ Ñ€Ð¾Ð¶ÐµÐ²Ñ– Ð²Ñ–Ð´Ð¼Ñ–Ñ‚ÐºÐ¸ Ð½Ð° ÑƒÑÑŒÐ¾Ð¼Ñƒ, Ñ‡Ð¾Ð³Ð¾ Ñ‚Ð¸ Ñ‚Ð¾Ñ€ÐºÐ°Ñ”ÑˆÑÑ. ÐŸÑ–Ð´ Ñ‡Ð°Ñ Ð¿Ñ€Ð¸Ð³Ð¾Ð´ Ð²Ð¾Ð½Ð¸ Ð±ÐµÐ·Ð¿ÐµÑ€ÐµÑ€Ð²Ð½Ð¾ Ð»Ñ–ÐºÑƒÐ²Ð°Ñ‚Ð¸Ð¼ÑƒÑ‚ÑŒ Ñ‚ÐµÐ±Ðµ.");
Database.addText("uk.eqItemBootsRocketBootsName", "Ð Ð°ÐºÐµÑ‚Ð½Ñ– Ñ‡ÐµÑ€ÐµÐ²Ð¸ÐºÐ¸");
Database.addText("uk.eqItemBootsRocketBootsDescription", "Ð¦Ñ– Ð¿Ñ€ÐµÑ‡ÑƒÐ´Ð¾Ð²Ñ– Ñ€Ð°ÐºÐµÑ‚Ð½Ñ– Ñ‡ÐµÑ€ÐµÐ²Ð¸ÐºÐ¸ Ð´Ð¾Ð·Ð²Ð¾Ð»ÑÑŽÑ‚ÑŒ Ñ‚Ð¾Ð±Ñ– ÑÑ‚Ñ€Ð¸Ð±Ð°Ñ‚Ð¸ Ð¿Ñ€ÑÐ¼Ð¾ Ñƒ Ð¿Ð¾Ð²Ñ–Ñ‚Ñ€Ñ–, Ð¿Ð¾ ÑÑƒÑ‚Ñ–, Ñ†Ðµ Ñ‚Ðµ ÑÐ°Ð¼Ðµ, Ñ‰Ð¾ Ñ– Ð»Ñ–Ñ‚Ð°Ñ‚Ð¸!");
Database.addText("uk.eqItemBootsLeatherBootsName", "Ð¨ÐºÑ–Ñ€ÑÐ½Ñ– Ñ‡ÐµÑ€ÐµÐ²Ð¸ÐºÐ¸");
Database.addText("uk.eqItemBootsLeatherBootsDescription", "ÐŸÑ€Ð¾ÑÑ‚Ñ– ÑˆÐºÑ–Ñ€ÑÐ½Ñ– Ñ‡ÐµÑ€ÐµÐ²Ð¸ÐºÐ¸. ÐÑ–Ñ‡Ð¾Ð³Ð¾ Ð¾ÑÐ¾Ð±Ð»Ð¸Ð²Ð¾Ð³Ð¾.");
Database.addText("uk.eqItemBootsBootsOfIntrospectionName", "Ð§ÐµÑ€ÐµÐ²Ð¸ÐºÐ¸ ÑÐ°Ð¼Ð¾ÑÐ¿Ð¾Ð³Ð»ÑÐ´Ð°Ð½Ð½Ñ");
Database.addText("uk.eqItemBootsBootsOfIntrospectionDescription", "ÐŸÐµÑ€ÐµÐ²ÐµÐ´Ð¸ Ð¿Ð¾Ð´Ð¸Ñ… Ñ‚Ð° Ð·Ð°ÑÐ¿Ð¾ÐºÐ¾Ð¹ÑÑ. Ð¯ÐºÑ‰Ð¾ Ñ‚Ð¸ Ð²Ð·ÑƒÑ‚Ð¸Ð¹ Ñƒ Ñ†Ñ– Ñ‡ÐµÑ€ÐµÐ²Ð¸ÐºÐ¸, Ñ‚Ð¾ Ð½Ðµ Ð·Ñ€ÑƒÑˆÐ¸Ñˆ Ñ–Ð· Ð¼Ñ–ÑÑ†Ñ, Ð´Ð¾ÐºÐ¸ Ñ‚Ð²Ð¾Ñ— Ð½Ð¾Ð³Ð¸ Ñ‚Ð¾Ñ€ÐºÐ°ÑŽÑ‚ÑŒÑÑ Ð·ÐµÐ¼Ð»Ñ–.");
Database.addText("uk.eqItemBodyArmoursLightweightBodyArmourName", "Ð›ÐµÐ³ÐºÐ¸Ð¹ Ð¾Ð±Ð»Ð°Ð´ÑƒÐ½Ð¾Ðº");
Database.addText("uk.eqItemBodyArmoursLightweightBodyArmourDescription", "Ð¦ÐµÐ¹ Ð¾Ð±Ð»Ð°Ð´ÑƒÐ½Ð¾Ðº Ð·Ð°Ð±ÐµÐ·Ð¿ÐµÑ‡Ð¸Ñ‚ÑŒ Ñ‚Ð¾Ð±Ñ– ÑÐ»Ð°Ð±ÐµÐ½ÑŒÐºÐ¸Ð¹ Ð·Ð°Ñ…Ð¸ÑÑ‚. Ð¢Ð¸ Ð±ÑƒÐ´ÐµÑˆ Ñ‚Ñ€Ð¾Ñ…Ð¸ Ð¼ÐµÐ½Ñˆ Ð²Ñ€Ð°Ð·Ð»Ð¸Ð²Ð¸Ð¹ Ð´Ð¾ Ð²Ð¾Ñ€Ð¾Ð¶Ð¸Ñ… Ð°Ñ‚Ð°Ðº.");
Database.addText("uk.eqItemBodyArmoursKnightBodyArmourName", "Ð›Ð¸Ñ†Ð°Ñ€ÑÑŒÐºÐ¸Ð¹ Ð¾Ð±Ð»Ð°Ð´ÑƒÐ½Ð¾Ðº");
Database.addText("uk.eqItemBodyArmoursKnightBodyArmourDescription", "Ð¦ÐµÐ¹ Ð¼Ñ–Ñ†Ð½Ð¸Ð¹ Ð¾Ð±Ð»Ð°Ð´ÑƒÐ½Ð¾Ðº Ð·Ð°Ñ…Ð¸Ñ‰Ð°Ñ‚Ð¸Ð¼Ðµ Ñ‚ÐµÐ±Ðµ. Ð¢Ð¸ Ð±ÑƒÐ´ÐµÑˆ Ð¼ÐµÐ½Ñˆ Ð²Ñ€Ð°Ð·Ð»Ð¸Ð²Ð¸Ð¹ Ð´Ð¾ Ð²Ð¾Ñ€Ð¾Ð¶Ð¸Ñ… Ð°Ñ‚Ð°Ðº.");
Database.addText("uk.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Ð—Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð¸Ð¹ Ð»Ð¸Ñ†Ð°Ñ€ÑÑŒÐºÐ¸Ð¹ Ð¾Ð±Ð»Ð°Ð´ÑƒÐ½Ð¾Ðº");
Database.addText("uk.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Ð¦ÐµÐ¹ Ð¾Ð±Ð»Ð°Ð´ÑƒÐ½Ð¾Ðº Ð´ÑƒÐ¶Ðµ Ð¾ÑÐ¾Ð±Ð»Ð¸Ð²Ð¸Ð¹. Ð¢Ð¸ Ð±ÑƒÐ´ÐµÑˆ ÐÐÐ‘ÐÐ“ÐÐ¢Ðž Ð¼ÐµÐ½Ñˆ Ð²Ñ€Ð°Ð·Ð»Ð¸Ð²Ð¸Ð¹ Ð´Ð¾ Ð²Ð¾Ñ€Ð¾Ð¶Ð¸Ñ… Ð°Ñ‚Ð°Ðº, Ð°Ð»Ðµ Ð¿Ð¾ÑˆÐºÐ¾Ð´Ð¶ÐµÐ½Ð½Ñ Ð²Ñ–Ð´ Ñ‚Ð²Ð¾Ñ”Ñ— Ð·Ð±Ñ€Ð¾Ñ—, Ð±ÑƒÐ´Ðµ Ð¿Ð¾Ð´Ñ–Ð»ÐµÐ½Ð¾ Ð½Ð°Ð²Ð¿Ñ–Ð».");
Database.addText("uk.mapVillageForgeBuyWoodenSwordButton", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ Ð´ÐµÑ€ÐµÐ²â€™ÑÐ½Ð¸Ð¹ Ð¼ÐµÑ‡ (150 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.mapVillageForgeBuyWoodenSwordSpeech", "Ð”ÑÐºÑƒÑŽ Ð·Ð° Ð¿Ð¾ÐºÑƒÐ¿ÐºÑƒ! Ð¦ÐµÐ¹ Ð´ÐµÑ€ÐµÐ²â€™ÑÐ½Ð¸Ð¹ Ð¼ÐµÑ‡ Ð´Ð¾ÑÐ¸Ñ‚ÑŒ ÑÐ»Ð°Ð±ÐµÐ½ÑŒÐºÐ¸Ð¹, Ð°Ð»Ðµ Ñ†Ðµ Ð»Ð¸ÑˆÐµ Ð¿Ð¾Ñ‡Ð°Ñ‚Ð¾Ðº.");
Database.addText("uk.mapVillageForgeBuyIronAxeButton", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ Ð·Ð°Ð»Ñ–Ð·Ð½Ð¸Ð¹ Ð¼ÐµÑ‡ (400 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.mapVillageForgeBuyIronAxeSpeech", "Ð¯ ÑÐ¿Ð¾Ð´Ñ–Ð²Ð°ÑŽÑÑŒ Ñ‚Ð¾Ð±Ñ– ÑÐ¿Ð¾Ð´Ð¾Ð±Ð°Ñ”Ñ‚ÑŒÑÑ Ñ†ÐµÐ¹ Ð·Ð°Ð»Ñ–Ð·Ð½Ð¸Ð¹ Ð¼ÐµÑ‡. Ð¯ Ñ‰Ð¾Ð¹Ð½Ð¾ Ð½Ð°Ð³Ð¾ÑÑ‚Ñ€Ð¸Ð² Ð¹Ð¾Ð³Ð¾ Ð´Ð»Ñ Ñ‚ÐµÐ±Ðµ!");
Database.addText("uk.mapVillageForgeBuyPolishedSilverSwordButton", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ Ð¿Ð¾Ð»Ñ–Ñ€Ð¾Ð²Ð°Ð½Ð¸Ð¹ ÑÑ€Ñ–Ð±Ð½Ð¸Ð¹ Ð¼ÐµÑ‡ (2 000 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.mapVillageForgeBuyPolishedSilverSwordSpeech", "Ð£ Ð¼ÐµÐ½Ðµ Ð¿Ñ–ÑˆÐ»Ð¾ Ð±Ð°Ð³Ð°Ñ‚Ð¾ Ñ‡Ð°ÑÑƒ Ð½Ð° ÑÑ‚Ð²Ð¾Ñ€ÐµÐ½Ð½Ñ Ñ†ÑŒÐ¾Ð³Ð¾ Ð¼ÐµÑ‡Ð°. Ð¯ Ð·Ð°Ð¿ÐµÐ²Ð½ÑÑŽ, Ð²Ñ–Ð½ Ð²Ð°Ñ€Ñ‚Ð¸Ð¹ ÑÐ²Ð¾Ñ”Ñ— Ñ†Ñ–Ð½Ð¸.");
Database.addText("uk.mapVillageForgeBuyLightweightBodyArmourButton", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ Ð»ÐµÐ³ÐºÐ¸Ð¹ Ð¾Ð±Ð»Ð°Ð´ÑƒÐ½Ð¾Ðº (15 000 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.mapVillageForgeBuyLightweightBodyArmourSpeech", "Ð¦ÐµÐ¹ Ð¾Ð±Ð»Ð°Ð´ÑƒÐ½Ð¾Ðº Ð·Ð°Ð±ÐµÐ·Ð¿ÐµÑ‡Ð¸Ñ‚ÑŒ Ñ‚Ð¾Ð±Ñ– Ð·Ð°Ñ…Ð¸ÑÑ‚ Ð²Ñ–Ð´ Ñ‚Ð²Ð¾Ñ—Ñ… Ð²Ð¾Ñ€Ð¾Ð³Ñ–Ð².");
Database.addText("uk.mapVillageForgeBuyScytheButton", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ ÐºÐ¾ÑÑƒ (5 000 000 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.mapVillageForgeBuyScytheSpeech", "Ð£ Ð¼ÐµÐ½Ðµ Ð¿Ñ–ÑˆÐ»Ð¾ Ð´ÐµÐºÑ–Ð»ÑŒÐºÐ° Ð¼Ñ–ÑÑÑ†Ñ–Ð², Ð°Ð±Ð¸ Ð·Ñ€Ð¾Ð±Ð¸Ñ‚Ð¸ Ñ†ÑŽ ÐºÐ¾ÑÑƒ. Ð¦Ðµ ÑÐ¿Ñ€Ð°Ð²Ð¶Ð½Ñ–Ð¹ Ð²Ð¸Ñ‚Ð²Ñ–Ñ€ Ð¼Ð¸ÑÑ‚ÐµÑ†Ñ‚Ð²Ð°. Ð¦Ðµ, Ð¹Ð¼Ð¾Ð²Ñ–Ñ€Ð½Ð¾, Ð½Ð°Ð¹ÑˆÐ²Ð¸Ð´ÑˆÐ° Ð·Ð±Ñ€Ð¾Ñ, ÑÐºÑƒ Ñ‚Ð¾Ð±Ñ– Ð²Ð´Ð°ÑÑ‚ÑŒÑÑ Ð·ÑƒÑÑ‚Ñ€Ñ–Ñ‚Ð¸. Ð©Ð°ÑÑ‚Ð¸ Ñ‚Ð¾Ð±Ñ–!");
Database.addText("uk.wishingWellThrowFirstCandyButton", "ÐšÐ¸Ð½ÑƒÑ‚Ð¸ Ñƒ ÐºÑ€Ð¸Ð½Ð¸Ñ†ÑŽ Ñ†ÑƒÐºÐµÑ€ÐºÑƒ");
Database.addText("uk.wishingWellCandyIntroductionSpeech", "ÐŸÑ€Ð¸Ð²Ñ–Ñ‚, Ð¼Ð°Ð½Ð´Ñ€Ñ–Ð²Ð½Ð¸ÐºÑƒ! Ð¯ ÐºÑ€Ð¸Ð½Ð¸Ñ†Ñ Ð±Ð°Ð¶Ð°Ð½ÑŒ. Ð¯ Ð²Ð¸ÐºÐ¾Ð½Ð°ÑŽ Ñ‚Ð²Ð¾Ñ— Ð±Ð°Ð¶Ð°Ð½Ð½Ñ Ð² Ð¾Ð±Ð¼Ñ–Ð½ Ð½Ð° Ñ‚Ñ€Ð¾Ñ…Ð¸ ÑÐ¾Ð»Ð¾Ð´Ð¾Ñ‰Ñ–Ð²! ÐšÐ¾Ð»Ð¸ Ñ‚Ð¸ ÐºÐ¸Ð´Ð°Ñ‚Ð¸Ð¼ÐµÑˆ Ñƒ Ð¼ÐµÐ½Ðµ Ñ†ÑƒÐºÐµÑ€ÐºÐ¸, Ñ Ð·Ñ†Ñ–Ð»ÑŽÐ²Ð°Ñ‚Ð¸Ð¼Ñƒ Ñ‚Ð²Ð¾Ñ— Ñ€Ð°Ð½Ð¸.");
Database.addText("uk.wishingWellThrewCandiesSpeech", "Ð¢Ð²Ð¾Ñ— Ñ€Ð°Ð½Ð¸ Ð·Ñ†Ñ–Ð»ÐµÐ½Ð¾!");
Database.addText("uk.wishingWellNoWoundSpeech", "Ð¢Ð¸ Ð½Ðµ Ð¿Ð¾Ñ‚Ñ€ÐµÐ±ÑƒÑ”Ñˆ Ð·Ñ†Ñ–Ð»ÐµÐ½Ð½Ñ!");
Database.addText("uk.wishingWellThrowFirstLollipopButton", "ÐšÐ¸Ð½ÑƒÑ‚Ð¸ Ñƒ ÐºÑ€Ð¸Ð½Ð¸Ñ†ÑŽ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸Ðº");
Database.addText("uk.wishingWellLollipopIntroductionSpeech", "ÐŸÑ€Ð¸Ð²Ñ–Ñ‚, Ð¼Ð°Ð½Ð´Ñ€Ñ–Ð²Ð½Ð¸ÐºÑƒ! Ð¯ ÐºÑ€Ð¸Ð½Ð¸Ñ†Ñ Ð±Ð°Ð¶Ð°Ð½ÑŒ. Ð¯ Ð²Ð¸ÐºÐ¾Ð½Ð°ÑŽ Ñ‚Ð²Ð¾Ñ— Ð±Ð°Ð¶Ð°Ð½Ð½Ñ Ð² Ð¾Ð±Ð¼Ñ–Ð½ Ð½Ð° Ñ‚Ñ€Ð¾Ñ…Ð¸ ÑÐ¾Ð»Ð¾Ð´Ð¾Ñ‰Ñ–Ð²! ÐšÐ¾Ð»Ð¸ Ñ‚Ð¸ ÐºÐ¸Ð´Ð°Ñ‚Ð¸Ð¼ÐµÑˆ Ñƒ Ð¼ÐµÐ½Ðµ Ð»ÑŒÐ¾Ð´ÑÐ½ÐºÐ¸, Ñ Ð¿ÐµÑ€ÐµÑ‚Ð²Ð¾Ñ€ÑŽÐ²Ð°Ñ‚Ð¸Ð¼Ñƒ Ñ—Ñ… Ð½Ð° Ñ†ÑƒÐºÐµÑ€ÐºÐ¸.");
Database.addText("uk.wishingWellThrewLollipopsSpeech", "Ð¢Ð²Ð¾Ñ— Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÐ¸ Ð¿ÐµÑ€ÐµÑ‚Ð²Ð¾Ñ€Ð¸Ð»Ð¸ÑÑŒ Ð½Ð° Ñ†ÑƒÐºÐµÑ€ÐºÐ¸! Ð”Ð²Ð° Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÐ¸ Ð·Ð° Ñ†ÑƒÐºÐµÑ€ÐºÑƒ.");
Database.addText("uk.wishingWellThrowChocolateBarButton", "ÐšÐ¸Ð½ÑƒÑ‚Ð¸ Ñƒ ÐºÑ€Ð¸Ð½Ð¸Ñ†ÑŽ Ð¿Ð»Ð¸Ñ‚ÐºÑƒ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ñƒ");
Database.addText("uk.wishingWellChocolateBarIntroductionSpeech", "ÐŸÑ€Ð¸Ð²Ñ–Ñ‚, Ð¼Ð°Ð½Ð´Ñ€Ñ–Ð²Ð½Ð¸ÐºÑƒ! Ð¯ ÐºÑ€Ð¸Ð½Ð¸Ñ†Ñ Ð±Ð°Ð¶Ð°Ð½ÑŒ. Ð¯ Ð²Ð¸ÐºÐ¾Ð½Ð°ÑŽ Ñ‚Ð²Ð¾Ñ— Ð±Ð°Ð¶Ð°Ð½Ð½Ñ Ð² Ð¾Ð±Ð¼Ñ–Ð½ Ð½Ð° Ñ‚Ñ€Ð¾Ñ…Ð¸ ÑÐ¾Ð»Ð¾Ð´Ð¾Ñ‰Ñ–Ð²! Ð¯ Ð»ÑŽÐ±Ð»ÑŽ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´ÐºÐ¸. Ð¯ ÑÐ¿Ñ€Ð°Ð²Ð´Ñ– Ð»ÑŽÐ±Ð»ÑŽ Ñ—Ñ…. Ð—Ð° ÐºÐ¾Ð¶Ð½Ñƒ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ñƒ Ð¿Ð»Ð¸Ñ‚ÐºÑƒ, Ñ‰Ð¾ Ñ‚Ð¸ Ð²ÐºÐ¸Ð½ÐµÑˆ Ñƒ Ð¼ÐµÐ½Ðµ, Ð²ÐºÐ»ÑŽÑ‡Ð½Ð¾ Ð· Ñ†Ñ–Ñ”ÑŽ, Ñ‚Ð¸ Ð¾Ñ‚Ñ€Ð¸Ð¼Ð°Ñ”Ñˆ Ð¾Ð´Ð½Ðµ Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ðµ Ð·Ð°Ñ‡Ð°Ñ€ÑƒÐ²Ð°Ð½Ð½Ñ.");
Database.addText("uk.wishingWellThrewChocolateBarSpeech", "Ð¯ÐºÐ¸Ð¹ Ð¿Ñ€ÐµÐ´Ð¼ÐµÑ‚ Ñ‚Ð¸ Ñ…Ð¾Ñ‚Ñ–Ð² Ð±Ð¸ Ð·Ð°Ñ‡Ð°Ñ€ÑƒÐ²Ð°Ñ‚Ð¸?");
Database.addText("uk.wishingWellThrowPainAuChocolatButton", "ÐšÐ¸Ð½ÑƒÑ‚Ð¸ Ñƒ ÐºÑ€Ð¸Ð½Ð¸Ñ†ÑŽ ÐºÑ€ÑƒÐ°ÑÐ°Ð½");
Database.addText("uk.wishingWellPainAuChocolatIntroductionSpeech", "ÐŸÑ€Ð¸Ð²Ñ–Ñ‚, Ð¼Ð°Ð½Ð´Ñ€Ñ–Ð²Ð½Ð¸ÐºÑƒ! Ð¯ ÐºÑ€Ð¸Ð½Ð¸Ñ†Ñ Ð±Ð°Ð¶Ð°Ð½ÑŒ. Ð¯ Ð²Ð¸ÐºÐ¾Ð½Ð°ÑŽ Ñ‚Ð²Ð¾Ñ— Ð±Ð°Ð¶Ð°Ð½Ð½Ñ Ð² Ð¾Ð±Ð¼Ñ–Ð½ Ð½Ð° Ñ‚Ñ€Ð¾Ñ…Ð¸ ÑÐ¾Ð»Ð¾Ð´Ð¾Ñ‰Ñ–Ð²! Ð¯ÐºÑ‰Ð¾ Ñ‚Ð¸ Ð²ÐºÐ¸Ð½ÐµÑˆ Ñƒ Ð¼ÐµÐ½Ðµ ÐºÑ€ÑƒÐ°ÑÐ°Ð½, Ñ‚Ð¾ Ð¾Ñ‚Ñ€Ð¸Ð¼Ð°Ñ”Ñˆ Ð´ÑƒÐ¶Ðµ Ð¾ÑÐ¾Ð±Ð»Ð¸Ð²Ð¸Ð¹ Ð´Ð°Ñ€ÑƒÐ½Ð¾Ðº. ÐžÐ±Ð¸Ñ€Ð°Ð¹ Ñ–Ð· Ñ€Ð¾Ð·ÑƒÐ¼Ð¾Ð¼.");
Database.addText("uk.wishingWellThrewPainAuChocolatSpeech", "Ð”ÑÐºÑƒÑŽ Ð·Ð° ÐºÑ€ÑƒÐ°ÑÐ°Ð½! Ð¢ÐµÐ¿ÐµÑ€ Ð¼Ð¾Ð¶ÐµÑˆ Ð¾Ð±Ñ€Ð°Ñ‚Ð¸ ÑÐ²Ñ–Ð¹ Ð´Ð°Ñ€ÑƒÐ½Ð¾Ðº.");
Database.addText("uk.wishingWellChooseGift", "ÐžÐ±ÐµÑ€Ð¸ ÑÐ²Ñ–Ð¹ Ð´Ð°Ñ€ÑƒÐ½Ð¾Ðº!");
Database.addText("uk.wishingWellChooseGiftButton", "ÐžÐ±Ñ€Ð°Ñ‚Ð¸");
Database.addText("uk.wishingWellGiftDoneSpeech", "Ð“Ð¾Ñ‚Ð¾Ð²Ð¾! Ð¢ÐµÐ¿ÐµÑ€ Ñƒ Ñ‚ÐµÐ±Ðµ Ñ” Ð½Ð¾Ð²Ð¸Ð¹ Ð´Ð°Ñ€ÑƒÐ½Ð¾Ðº. Ð’Ñ–Ð½ Ð·â€™ÑÐ²Ð¸Ñ‚ÑŒÑÑ Ñƒ Ð¿Ð°Ð½ÐµÐ»Ñ– Ð¿Ð¾ÐºÐ°Ð¶Ñ‡Ð¸ÐºÑ–Ð² Ñ‚Ð²Ð¾Ð³Ð¾ Ñ–Ð½Ð²ÐµÐ½Ñ‚Ð°Ñ€ÑŽ.");
Database.addText("uk.wishingWellNoPossibleEnchantment", "Ð—Ð°Ñ‡Ð°Ñ€ÑƒÐ²Ð°Ð½Ð½Ñ Ð½ÐµÐ¼Ð¾Ð¶Ð»Ð¸Ð²Ðµ");
Database.addText("uk.wishingWellChooseEnchantment", "ÐžÐ±ÐµÑ€Ð¸ Ð·Ð°Ñ‡Ð°Ñ€ÑƒÐ²Ð°Ð½Ð½Ñ");
Database.addText("uk.wishingWellEnchantButton", "Ð—Ð°Ñ‡Ð°Ñ€ÑƒÐ²Ð°Ñ‚Ð¸");
Database.addText("uk.wishingWellEnchantmentDoneSpeech", "ÐžÑ‚ Ñ– Ð²Ð¾Ð½Ð¾! Ð¢Ð²Ñ–Ð¹ Ð¿Ñ€ÐµÐ´Ð¼ÐµÑ‚ Ð·Ð°Ñ‡Ð°Ñ€Ð¾Ð²Ð°Ð½Ð¾.");
Database.addText("uk.pierLighthouseButton", "Ð”Ñ–ÑÑ‚Ð°Ñ‚Ð¸ÑÑ Ð¼Ð°ÑÐºÐ° Ñ‡Ð¾Ð²Ð½Ð¾Ð¼");
Database.addText("uk.pierTheSeaButton", "Ð¡Ñ‚Ñ€Ð¸Ð±Ð½ÑƒÑ‚Ð¸ Ñƒ Ð¼Ð¾Ñ€Ðµ");
Database.addText("uk.lonelyHouseOpenBox", "Ð’Ñ–Ð´ÐºÑ€Ð¸Ñ‚Ð¸ ÑÐºÑ€Ð¸Ð½ÑŒÐºÑƒ");
Database.addText("uk.lonelyHouseShakeBox", "ÐŸÐ¾Ñ‚Ñ€ÑƒÑÐ¸Ñ‚Ð¸ ÑÐºÑ€Ð¸Ð½ÑŒÐºÑƒ");
Database.addText("uk.lonelyHouseBreakLock", "Ð—Ð»Ð°Ð¼Ð°Ñ‚Ð¸ Ð·Ð°Ð¼Ð¾Ðº");
Database.addText("uk.lonelyHouseKickBox", "ÐšÐ¾Ð¿Ð½ÑƒÑ‚Ð¸ ÑÐºÑ€Ð¸Ð½ÑŒÐºÑƒ");
Database.addText("uk.lonelyHouseAskTheBoxToOpenItself", "ÐŸÐ¾Ð¿Ñ€Ð¾ÑÐ¸Ñ‚Ð¸ ÑÐºÑ€Ð¸Ð½ÑŒÐºÑƒ Ð²Ñ–Ð´ÐºÑ€Ð¸Ñ‚Ð¸ÑÑ ÑÐ°Ð¼Ñ–Ð¹");
Database.addText("uk.lonelyHouseLureTheBoxWithACandy", "ÐŸÑ–Ð´ÐºÑƒÐ¿Ð¸Ñ‚Ð¸ ÑÐºÑ€Ð¸Ð½ÑŒÐºÑƒ Ñ†ÑƒÐºÐµÑ€ÐºÐ¾ÑŽ");
Database.addText("uk.lonelyHouseTakeTheBox", "Ð’Ð·ÑÑ‚Ð¸ ÑÐºÑ€Ð¸Ð½ÑŒÐºÑƒ Ð· ÑÐ¾Ð±Ð¾ÑŽ, Ñ‚Ð¾Ð±Ñ–, Ð¹Ð¼Ð¾Ð²Ñ–Ñ€Ð½Ð¾, Ð¿Ð¾Ñ‚Ñ€Ñ–Ð±ÐµÐ½ ÐºÐ»ÑŽÑ‡, Ð°Ð±Ð¸ Ð²Ñ–Ð´ÐºÑ€Ð¸Ñ‚Ð¸ Ñ—Ñ—");
Database.addText("uk.lonelyHouseOpenBoxResult", "Ð¡ÐºÑ€Ð¸Ð½ÑŒÐºÐ° Ð·Ð°Ð¼ÐºÐ½ÐµÐ½Ð°");
Database.addText("uk.lonelyHouseShakeBoxResult", "ÐÑ–Ñ‡Ð¾Ð³Ð¾ Ð½Ðµ Ð²Ñ–Ð´Ð±ÑƒÐ²Ð°Ñ”Ñ‚ÑŒÑÑ");
Database.addText("uk.lonelyHouseBreakLockResult", "Ð—Ð°Ð¼Ð¾Ðº Ð½Ðµ Ð¿Ñ–Ð´Ð´Ð°Ñ”Ñ‚ÑŒÑÑ");
Database.addText("uk.lonelyHouseKickBoxResult", "Ð¢Ð²Ð¾Ñ Ð½Ð¾Ð³Ð° Ñ‚Ñ€Ð¾Ñ…Ð¸ Ð±Ð¾Ð»Ð¸Ñ‚ÑŒ, Ð°Ð»Ðµ Ð½Ñ–Ñ‡Ð¾Ð³Ð¾ Ð½Ðµ Ð²Ñ–Ð´Ð±ÑƒÐ²Ð°Ñ”Ñ‚ÑŒÑÑ");
Database.addText("uk.lonelyHouseAskTheBoxToOpenItselfResult", "...Ñ‚Ð¸ Ð³Ð¾Ð²Ð¾Ñ€Ð¸Ñˆ Ð·Ñ– ÑÐºÑ€Ð¸Ð½ÑŒÐºÐ¾ÑŽ, Ñ‚Ð¸ ÑƒÑÐ²Ñ–Ð´Ð¾Ð¼Ð»ÑŽÑ”Ñˆ Ñ†Ðµ?");
Database.addText("uk.lonelyHouseLureTheBoxWithACandyResult", "ÐÐµ ÑÑ…Ð¾Ð¶Ðµ, Ñ‰Ð¾Ð± ÑÐºÑ€Ð¸Ð½ÑŒÐºÑƒ Ñ†Ðµ Ñ…Ð²Ð¸Ð»ÑŽÐ²Ð°Ð»Ð¾");
Database.addText("uk.lonelyHouseTakeTheBoxResult", "ÐÐ°Ð¿ÐµÐ²Ð½Ðµ, Ñ‚Ð°Ð¼ Ñ‰Ð¾ÑÑŒ Ñ†Ñ–ÐºÐ°Ð²Ðµ Ñƒ Ñ†Ñ–Ð¹ candy box.");
Database.addText("uk.lollipopFarmConstructMill", "Ð—Ð±ÑƒÐ´ÑƒÐ²Ð°Ñ‚Ð¸ Ð¼Ð»Ð¸Ð½ (10 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð²)");
Database.addText("uk.lollipopFarmFeedMill", "ÐŸÐ¾Ð´Ð°Ñ‚Ð¸ Ð²Ð¾Ð´Ñƒ Ð½Ð° Ð¼Ð»Ð¸Ð½");
Database.addText("uk.lollipopFarmCurrentCandiesProduction", "ÐŸÐ¾Ñ‚Ð¾Ñ‡Ð½Ðµ Ð²Ð¸Ñ€Ð¾Ð±Ð½Ð¸Ñ†Ñ‚Ð²Ð¾ Ñ†ÑƒÐºÐµÑ€Ð¾Ðº");
Database.addText("uk.lollipopFarmDigPond", "Ð’Ð¸ÐºÐ¾Ð¿Ð°Ñ‚Ð¸ ÑÑ‚Ð°Ð²Ð¾Ðº (100 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð²)");
Database.addText("uk.lollipopFarmBuyLolligator", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÐ¾Ð´Ð¸Ð»Ð° (1200 candies)");
Database.addText("uk.lollipopFarmLolligatorsConversionText", "ÐŸÐµÑ€ÐµÑ‚Ð²Ð¾Ñ€ÐµÐ½Ð½Ñ Ñ†ÑƒÐºÐµÑ€ÐºÐ¸ -> Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÐ¸ Ð°ÐºÑ‚Ð¸Ð²Ð¾Ð²Ð°Ð½Ð¾");
Database.addText("uk.lighthouseAskButton", "Ð—Ð°Ð¿Ð¸Ñ‚Ð°Ñ‚Ð¸");
Database.addText("uk.lighthouseQuestionWho", "Ð¥Ñ‚Ð¾ Ñ‚Ð¸?");
Database.addText("uk.lighthouseQuestionWhoSpeech", "Ð¯ Ð´ÑƒÐ¶Ðµ ÑÑ‚Ð°Ñ€Ð¸Ð¹ Ñ†Ð¸ÐºÐ»Ð¾Ð¿.");
Database.addText("uk.lighthouseQuestionWhat", "Ð©Ð¾ Ñ‚Ð¸ Ñ‚ÑƒÑ‚ Ñ€Ð¾Ð±Ð¸Ñˆ?");
Database.addText("uk.lighthouseQuestionWhatSpeech", "Ð¯ ÑÐ¸Ð´Ð¶Ñƒ Ñ‚ÑƒÑ‚ ÑƒÐ²ÐµÑÑŒ Ð´ÐµÐ½ÑŒ, Ð¾Ñ‡Ñ–ÐºÑƒÑŽÑ‡Ð¸ Ð½Ð° Ñ‡Ð¾Ð²ÐµÐ½, Ñ‰Ð¾ Ð¿Ñ€Ð¸Ð¿Ð»Ð¸Ð²Ðµ. ÐŸÑ€Ð¾Ð¹ÑˆÐ»Ð¾ ÑƒÐ¶Ðµ Ð±Ð°Ð³Ð°Ñ‚Ð¾ Ñ‡Ð°ÑÑƒ Ð· Ñ‚Ð¸Ñ… Ð¿Ñ–Ñ€, ÐºÐ¾Ð»Ð¸ Ñ Ð±Ð°Ñ‡Ð¸Ð² Ñ‡Ð¾Ð²Ð½Ð° Ð¾ÑÑ‚Ð°Ð½Ð½Ñ–Ð¹ Ñ€Ð°Ð·, Ð°Ð»Ðµ Ñ Ð¼ÑƒÑˆÑƒ Ð·Ð°Ð»Ð¸ÑˆÐ°Ñ‚Ð¸ÑÑ Ñ‚ÑƒÑ‚, Ð¿Ð¸Ð»ÑŒÐ½ÑƒÑŽÑ‡Ð¸ Ð·Ð° Ð¼Ð¾Ñ€ÐµÐ¼, Ð°Ð´Ð¶Ðµ Ð¼Ð¾Ð¶Ðµ Ð¿Ñ€Ð¸Ð¿Ð»Ð¸Ð²Ñ‚Ð¸ Ñ‡Ð¾Ð²ÐµÐ½.");
Database.addText("uk.lighthouseQuestionWhyEatCandies", "ÐÐ°Ð²Ñ–Ñ‰Ð¾ Ð¼ÐµÐ½Ñ– Ñ—ÑÑ‚Ð¸ Ñ†ÑƒÐºÐµÑ€ÐºÐ¸?");
Database.addText("uk.lighthouseQuestionWhyEatCandiesSpeech", "Ð¢Ð¾Ð¼Ñƒ Ñ‰Ð¾ Ð²Ð¾Ð½Ð¸ ÐºÐ¾Ñ€Ð¸ÑÐ½Ñ– Ð´Ð»Ñ Ñ‚Ð²Ð¾Ð³Ð¾ Ð·Ð´Ð¾Ñ€Ð¾Ð²â€™Ñ!");
Database.addText("uk.lighthouseQuestionCandyBox", "Ð©Ð¾ Ñ‚Ð°ÐºÐµ candy box?");
Database.addText("uk.lighthouseQuestionCandyBoxSpeech", "Ð¦Ðµ Ð´ÑƒÐ¶Ðµ ÑÑ‚Ð°Ñ€Ð° ÑÐºÑ€Ð¸Ð½ÑŒÐºÐ°, ÑÐºÐ°Ð·Ð°Ð½Ð¾, Ñ‰Ð¾ Ð² Ð½Ñ–Ð¹ Ð»ÐµÐ¶Ð°Ñ‚ÑŒ ÑƒÑÑ– Ñ†ÑƒÐºÐµÑ€ÐºÐ¸ ÑÐ²Ñ–Ñ‚Ñƒ. Ð›ÐµÐ³ÐµÐ½Ð´Ð¸ Ð³Ð¾Ð²Ð¾Ñ€ÑÑ‚ÑŒ, Ñ…Ñ‚Ð¾ Ð± Ð½Ðµ ÑÐ¿Ñ€Ð¾Ð¼Ñ–Ð³ÑÑ Ð²Ñ–Ð´ÐºÑ€Ð¸Ñ‚Ð¸ Ñ—Ñ—, Ñ‚Ð¾Ð¹ Ð¾Ñ‚Ñ€Ð¸Ð¼Ð°Ñ” ÑÑ‚Ñ–Ð»ÑŒÐºÐ¸ Ñ†ÑƒÐºÐµÑ€Ð¾Ðº, Ñ‰Ð¾ Ð½Ðµ Ð·Ð°Ð»Ð¸ÑˆÐ¸Ñ‚ÑŒÑÑ Ð½Ñ–Ñ‡Ð¾Ð³Ð¾ Ð½ÐµÐ¼Ð¾Ð¶Ð»Ð¸Ð²Ð¾Ð³Ð¾.");
Database.addText("uk.lighthouseQuestionDragon", "Ð”Ñ€Ð°ÐºÐ¾Ð½ ÑÐºÐ°Ð·Ð°Ð² Ð¼ÐµÐ½Ñ– Ð¿Ñ€Ð¸Ð¹Ñ‚Ð¸ ÑÑŽÐ´Ð¸, Ð¾ÑÐºÑ–Ð»ÑŒÐºÐ¸ Ñ Ñ…Ð¾Ñ‡Ñƒ Ñ†ÑƒÐºÐµÑ€Ð¾Ðº.");
Database.addText("uk.lighthouseQuestionDragonSpeech", "Ðž, Ñ Ð±Ð°Ñ‡Ñƒ... Ð”Ð¾Ð±Ñ€Ðµ, Ñ Ð½Ðµ Ð¼Ð¾Ð¶Ñƒ Ð´Ð°Ñ‚Ð¸ Ñ‚Ð¾Ð±Ñ– Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ð¾Ð´Ñ€Ð°Ð·Ñƒ, Ð°Ð»Ðµ Ñ Ð¼Ð¾Ð¶Ñƒ Ð´Ð°Ñ‚Ð¸ Ñ‚Ð¾Ð±Ñ– Ð´ÐµÑ‰Ð¾ Ð½ÐµÐ¾Ð±Ñ…Ñ–Ð´Ð½Ðµ, Ð°Ð±Ð¸ Ð·Ñ€ÐµÑˆÑ‚Ð¾ÑŽ Ð¾Ñ‚Ñ€Ð¸Ð¼Ð°Ñ‚Ð¸ Ð‘ÐÐ“ÐÐ¢Ðž Ñ†ÑƒÐºÐµÑ€Ð¾Ðº. ÐœÐµÐ½Ñ– Ð»Ð¸ÑˆÐµ Ñ‚Ñ€ÐµÐ±Ð° Ð²Ð¸Ð¿Ñ€Ð¾Ð±ÑƒÐ²Ð°Ñ‚Ð¸ Ñ‚ÐµÐ±Ðµ Ð¿ÐµÑ€ÐµÐ´ Ñ†Ð¸Ð¼. Ð¢Ð¾Ð¼Ñƒ Ñ‰Ð¾ Ñ‚Ðµ, Ñ‰Ð¾ Ð² Ð¼ÐµÐ½Ðµ Ñ”, Ð½Ðµ Ð¼Ð¾Ð¶Ð½Ð° Ð´Ð°Ð²Ð°Ñ‚Ð¸ Ð°Ð±Ð¸ÐºÐ¾Ð¼Ñƒ. Ð Ð¾Ð·Ð²â€™ÑÐ¶Ð¸ Ñ†ÑŽ Ð³Ð¾Ð»Ð¾Ð²Ð¾Ð»Ð¾Ð¼ÐºÑƒ Ñ– Ñ†Ðµ Ð±ÑƒÐ´Ðµ Ñ‚Ð²Ð¾Ñ—Ð¼.");
Database.addText("uk.lighthouseFoundStone", "Ð’Ñ–Ñ‚Ð°ÑŽ! Ð¢Ð¸ Ð¿Ñ€Ð¾Ð¹ÑˆÐ¾Ð² Ð²Ð¸Ð¿Ñ€Ð¾Ð±ÑƒÐ²Ð°Ð½Ð½Ñ Ñ– Ð·Ð½Ð°Ð¹ÑˆÐ¾Ð² ÐºÐ°Ð¼Ñ–Ð½ÑŒ. Ð’Ñ–Ð½ Ð´ÑƒÐ¶Ðµ ÐºÐ¾ÑˆÑ‚Ð¾Ð²Ð½Ð¸Ð¹, Ð°Ð»Ðµ Ð¼Ð¾Ð¶Ðµ Ð±ÑƒÑ‚Ð¸ ÐºÐ¾Ñ€Ð¸ÑÐ½Ð¸Ð¼ Ð»Ð¸ÑˆÐµ Ñ‚Ð¾Ð´Ñ–, ÑÐºÑ‰Ð¾ Ð² Ñ‚ÐµÐ±Ðµ Ñ” Ñ‰Ðµ Ñ‚Ñ€Ð¸ ÐºÐ°Ð¼ÐµÐ½Ñ–, Ð¿Ð¾Ð´Ñ–Ð±Ð½Ð¸Ñ… Ð´Ð¾ Ñ†ÑŒÐ¾Ð³Ð¾. Ð©Ð°ÑÑ‚Ð¸ Ñ‚Ð¾Ð±Ñ–!");
Database.addText("uk.lighthouseFoundStoneAgain", "Ð“Ð°Ñ€Ð½Ð° Ñ€Ð¾Ð±Ð¾Ñ‚Ð°, Ñ‚Ð¸ Ð·Ð½Ð¾Ð²Ñƒ Ð²Ð¸Ñ€Ñ–ÑˆÐ¸Ð² Ð³Ð¾Ð»Ð¾Ð²Ð¾Ð»Ð¾Ð¼ÐºÑƒ. Ð¡Ñ…Ð¾Ð¶Ðµ, Ñ‚Ð¾Ð±Ñ– Ñ†Ðµ Ð¿Ð¾Ð´Ð¾Ð±Ð°Ñ”Ñ‚ÑŒÑÑ.");
Database.addText("uk.saveLocalSaveTitle", "Ð‘Ñ€Ð°ÑƒÐ·ÐµÑ€Ð½Ðµ Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ");
Database.addText("uk.saveLocalSaveWhy", "ÐžÐ±ÐµÑ€Ð¸ Ð»Ð¾ÐºÐ°Ð»ÑŒÐ½Ðµ Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ, ÑÐºÑ‰Ð¾ Ñ…Ð¾Ñ‡ÐµÑˆ Ð¿Ñ€Ð¾Ð´Ð¾Ð²Ð¶Ð¸Ñ‚Ð¸ Ð³Ñ€Ð°Ñ‚Ð¸ Ð½Ð° Ð¿Ð¾Ñ‚Ð¾Ñ‡Ð½Ð¾Ð¼Ñƒ Ð¿Ñ€Ð¸ÑÑ‚Ñ€Ð¾Ñ— Ñ‚Ð° Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€Ñ–.");
Database.addText("uk.saveLocalSaveWarning0", "Ð¡Ñ…Ð¾Ð¶Ðµ, Ñ‚Ð²Ñ–Ð¹ Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€ Ð½Ðµ Ð¿Ñ–Ð´Ñ‚Ñ€Ð¸Ð¼ÑƒÑ” HTML5.");
Database.addText("uk.saveLocalSaveWarning1", "Ð¢Ð¾Ð±Ñ– ÑÐ»Ñ–Ð´ Ð¾Ð½Ð¾Ð²Ð¸Ñ‚Ð¸ ÑÐ²Ñ–Ð¹ Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€, Ð°Ð±Ð¸ Ð²Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð¾Ð²ÑƒÐ²Ð°Ñ‚Ð¸ Ð»Ð¾ÐºÐ°Ð»ÑŒÐ½Ðµ Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ.");
Database.addText("uk.saveLocalSaveChooseSlot", "ÐžÐ±ÐµÑ€Ð¸ Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ :");
Database.addText("uk.saveLocalSaveAutosaveEnabled", "ÐÐ²Ñ‚Ð¾Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ ÑƒÐ²Ñ–Ð¼ÐºÐ½ÐµÐ½Ð¾");
Database.addText("uk.saveLocalSaveChooseWhatToDo", "ÐžÐ±ÐµÑ€Ð¸, Ñ‰Ð¾ Ñ€Ð¾Ð±Ð¸Ñ‚Ð¸ :");
Database.addText("uk.saveLocalSaveSaveButton", "Ð—Ð±ÐµÑ€ÐµÐ³Ñ‚Ð¸");
Database.addText("uk.saveLocalSaveAutosaveButton", "Ð—Ð±ÐµÑ€Ñ–Ð³Ð°Ñ‚Ð¸ ÐºÐ¾Ð¶Ð½Ñ– 10 Ñ…Ð²Ð¸Ð»Ð¸Ð½");
Database.addText("uk.saveLocalSaveDisableAutosaveButton", "Ð’Ð¸Ð¼ÐºÐ½ÑƒÑ‚Ð¸ Ð°Ð²Ñ‚Ð¾Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ");
Database.addText("uk.saveFileSaveTitle", "Ð¢ÐµÐºÑÑ‚Ð¾Ð²Ðµ Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ");
Database.addText("uk.saveFileSaveWhy0", "ÐžÐ±ÐµÑ€Ð¸ Ñ‚ÐµÐºÑÑ‚Ð¾Ð²Ðµ Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ, ÑÐºÑ‰Ð¾ :");
Database.addText("uk.saveFileSaveWhy1", "Ñ…Ð¾Ñ‡ÐµÑˆ Ð¿Ñ€Ð¾Ð´Ð¾Ð²Ð¶Ð¸Ñ‚Ð¸ Ð³Ñ€Ð°Ñ‚Ð¸ Ð½Ð° Ñ–Ð½ÑˆÐ¾Ð¼Ñƒ Ð¿Ñ€Ð¸ÑÑ‚Ñ€Ð¾Ñ— Ð°Ð±Ð¾ Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€Ñ–.");
Database.addText("uk.saveFileSaveWhy2", "Ñ…Ð¾Ñ‡ÐµÑˆ Ð¿Ð¾Ð´Ñ–Ð»Ð¸Ñ‚Ð¸ÑÑ ÑÐ²Ð¾Ñ—Ð¼ Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½ÑÐ¼ Ñ–Ð· ÐºÐ¸Ð¼Ð¾ÑÑŒ Ñ–Ð½ÑˆÐ¸Ð¼");
Database.addText("uk.saveFileSaveWhy3", "Ð· ÑÐºÐ¸Ñ…Ð¾ÑÑŒ Ð¿Ñ€Ð¸Ñ‡Ð¸Ð½ Ñ…Ð¾Ñ‡ÐµÑˆ Ð¾Ñ‡Ð¸ÑÑ‚Ð¸Ñ‚Ð¸ ÐºÐµÑˆ Ð±Ñ€Ð°ÑƒÐ·ÐµÑ€Ð°");
Database.addText("uk.saveFileSaveWhy4", "(Ñ‰Ð¾ Ð·Ñ–Ñ‚Ñ€Ðµ Ñ‚Ð²Ð¾Ñ— Ð»Ð¾ÐºÐ°Ð»ÑŒÐ½Ñ– Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ)");
Database.addText("uk.saveFileSaveButton", "ÐžÑ‚Ñ€Ð¸Ð¼Ð°Ñ‚Ð¸ Ð¿Ð¾Ñ‚Ð¾Ñ‡Ð½Ñƒ Ð³Ñ€Ñƒ Ñƒ Ð²Ð¸Ð³Ð»ÑÐ´Ñ– Ñ‚ÐµÐºÑÑ‚Ñƒ");
Database.addText("uk.saveFileSaveWarning", "Ð¢ÐµÐ¿ÐµÑ€ ÑÐºÐ¾Ð¿Ñ–ÑŽÐ¹ Ñ†ÐµÐ¹ Ñ‚ÐµÐºÑÑ‚ ÐºÑƒÐ´Ð¸-Ð½ÐµÐ±ÑƒÐ´ÑŒ! (Ñƒ Ñ„Ð°Ð¹Ð», Ð½Ð°Ð¿Ñ€Ð¸ÐºÐ»Ð°Ð´)");
Database.addText("uk.saveLocalLoadTitle", "Ð‘Ñ€Ð°ÑƒÐ·ÐµÑ€Ð½Ðµ Ð·Ð°Ð²Ð°Ð½Ñ‚Ð°Ð¶ÐµÐ½Ð½Ñ");
Database.addText("uk.saveLocalLoadYouCan", "Ð¢Ð¸ Ð¼Ð¾Ð¶ÐµÑˆ Ð·Ð°Ð²Ð°Ð½Ñ‚Ð°Ð¶Ð¸Ñ‚Ð¸ Ð»Ð¾ÐºÐ°Ð»ÑŒÐ½Ðµ Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ, Ð²Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð¾Ð²ÑƒÑŽÑ‡Ð¸ Ð½Ð°ÑÑ‚ÑƒÐ¿Ð½Ñ– Ð¿Ð¾ÑÐ¸Ð»Ð°Ð½Ð½Ñ :");
Database.addText("uk.saveLocalLoadThanksTo", "Ð”ÑÐºÑƒÑŽÑ‡Ð¸ Ñ‡Ð°Ñ€Ð°Ð¼ HTML5, Ð²Ð¾Ð½Ð¸ Ð¿Ð¾Ð²Ð¸Ð½Ð½Ñ– Ð¿Ñ€Ð°Ñ†ÑŽÐ²Ð°Ñ‚Ð¸ Ð½Ð°Ð²Ñ–Ñ‚ÑŒ Ð¾Ñ„Ð»Ð°Ð¹Ð½.");
Database.addText("uk.saveFileLoadTitle", "Ð¢ÐµÐºÑÑ‚Ð¾Ð²Ðµ Ð·Ð°Ð²Ð°Ð½Ñ‚Ð°Ð¶ÐµÐ½Ð½Ñ");
Database.addText("uk.saveFileLoadPaste", "Ð’ÑÑ‚Ð°Ð² ÑÐ²Ð¾Ñ” Ð·Ð±ÐµÑ€ÐµÐ¶ÐµÐ½Ð½Ñ Ð½Ð¸Ð¶Ñ‡Ðµ, Ñ‚Ð¾Ð´Ñ– ÐºÐ»Ð°Ñ†Ð½Ð¸ ÐºÐ½Ð¾Ð¿ÐºÑƒ \"Ð—Ð°Ð²Ð°Ð½Ñ‚Ð°Ð¶Ð¸Ñ‚Ð¸\"");
Database.addText("uk.saveFileLoadButton", "Ð—Ð°Ð²Ð°Ð½Ñ‚Ð°Ð¶Ð¸Ñ‚Ð¸");
Database.addText("uk.mountainsText0", "Ð’Ð¸ Ð¿Ð¾Ð¼Ñ–Ñ‚Ð¸Ð»Ð¸ Ñ‰Ð¾ÑÑŒ Ñƒ Ð³Ð¾Ñ€Ð°Ñ…!");
Database.addText("uk.mountainsText1", "Ð¦Ðµ Ð²Ð¸Ð³Ð»ÑÐ´Ð°Ñ” Ñ†Ñ–ÐºÐ°Ð²Ð¾. Ð™Ð¼Ð¾Ð²Ñ–Ñ€Ð½Ð¾, Ð²Ð¾Ð½Ð¾ Ð¼Ð¾Ð¶Ðµ Ð±ÑƒÑ‚Ð¸ ÐºÐ¾Ñ€Ð¸ÑÐ½Ð¸Ð¼.");
Database.addText("uk.mountainsTextButton", "Ð”ÐµÑ€Ñ‚Ð¸ÑÑ Ñƒ Ð³Ð¾Ñ€Ð¸, Ð°Ð±Ð¸ Ð´Ñ–ÑÑ‚Ð°Ñ‚Ð¸ Ð¿Ñ€ÐµÐ´Ð¼ÐµÑ‚");
Database.addText("uk.mountainsTextAfter", "Ð¢Ð¸ Ð·Ð½Ð°Ð¹ÑˆÐ¾Ð² Ñ†Ñ–Ð¿Ð¾Ðº-ÑÑ‚Ñ€Ð¸Ð±ÑƒÐ½Ð¾Ðº! Ð’Ñ–Ð½ Ñƒ Ñ‚Ð²Ð¾Ñ”Ð¼Ñƒ Ñ–Ð½Ð²ÐµÐ½Ñ‚Ð°Ñ€Ñ–.");
Database.addText("uk.secondHouseIntroSpeech", "ÐŸÑ€Ð¸Ð²Ñ–Ñ‚, Ñ Ñ†ÑƒÐºÐµÑ€Ð½Ð¸Ðº. Ð—Ð° Ñ†ÑƒÐºÐµÑ€ÐºÐ¸, Ñ Ð¼Ñ–Ð³ Ð±Ð¸ Ð·Ñ€Ð¾Ð±Ð¸Ñ‚Ð¸ ÑƒÑÐµ. Ð©Ð¾ Ñ‚Ð¾Ð±Ñ– Ð¿Ð¾Ñ‚Ñ€Ñ–Ð±Ð½Ð¾?");
Database.addText("uk.secondHouseLollipop1Speech", "Ð¦Ðµ Ð»Ð¸Ð¼Ð¾Ð½Ð½Ð¸Ð¹ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸Ðº. ÐœÑ–Ð¹ ÑƒÐ»ÑŽÐ±Ð»ÐµÐ½Ð¸Ð¹! Ð’Ñ–Ð½ ÐºÐ¾ÑˆÑ‚ÑƒÑ” 60 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº, Ð°Ð»Ðµ Ð²Ñ–Ð½ Ð²Ð°Ñ€Ñ‚Ð¸Ð¹ Ñ‚Ð¾Ð³Ð¾.");
Database.addText("uk.secondHouseLollipop2Speech", "Ð¦ÐµÐ¹ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸Ðº ÑÑƒÐ½Ð¸Ñ‡Ð½Ð¸Ð¹. Ð“Ð°Ñ€Ð½Ð¸Ð¹ Ð½Ð° ÑÐ¼Ð°Ðº. ÐœÐµÐ½Ñ– Ð¿Ð¾Ð´Ð¾Ð±Ð°Ñ”Ñ‚ÑŒÑÑ Ð¹Ð¾Ð³Ð¾ Ñ‡ÐµÑ€Ð²Ð¾Ð½Ð¸Ð¹ ÐºÐ¾Ð»Ñ–Ñ€. Ð›Ð¸ÑˆÐµ 60 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº!");
Database.addText("uk.secondHouseLollipop3Speech", "Ð¦Ðµ Ð³Ð°Ñ€Ð±ÑƒÐ·Ð¾Ð²Ð¸Ð¹ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸Ðº. Ð‘â€™ÑŽÑÑŒ Ð¾Ð± Ð·Ð°ÐºÐ»Ð°Ð´, Ñ‚Ð¸ Ñ‰Ðµ Ñ‚Ð°ÐºÐ¾Ð³Ð¾ Ð½Ðµ ÐºÑƒÑˆÑ‚ÑƒÐ²Ð°Ð²! 60 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ñ– Ð²Ñ–Ð½ Ñ‚Ð²Ñ–Ð¹.");
Database.addText("uk.secondHouseLollipopButtonText", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ Ñ†ÐµÐ¹ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸Ðº (60 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.secondHouseMerchantHatSpeech", "Ð¯ Ð¼Ñ–Ð³ Ð±Ð¸ Ð¿Ñ€Ð¾Ð´Ð°Ñ‚Ð¸ Ñ‚Ð¾Ð±Ñ– ÑÐ²Ð¾Ð³Ð¾ ÐºÐ°Ð¿ÐµÐ»ÑŽÑ…Ð°, Ð°Ð»Ðµ Ð²Ñ–Ð½ Ð´ÑƒÐ¶Ðµ Ñ†Ñ–Ð½Ð½Ð¸Ð¹, Ñ€Ð¾Ð·ÑƒÐ¼Ñ–Ñ”Ñˆ... Ð¢Ð¸ Ð¼ÑƒÑÐ¸Ñˆ Ð´Ð°Ñ‚Ð¸ Ð¼ÐµÐ½Ñ– Ð±Ð°Ð³Ð°Ñ‚Ð¾ Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ð·Ð° Ð½ÑŒÐ¾Ð³Ð¾. Ð¡ÐºÐ°Ð¶Ñ–Ð¼Ð¾ 1 Ð¼Ñ–Ð»ÑŒÐ¹Ð¾Ð½ Ñ†ÑƒÐºÐµÑ€Ð¾Ðº. Ð¦Ðµ Ð±ÑƒÐ´Ðµ ÑÐ¿Ñ€Ð°Ð²ÐµÐ´Ð»Ð¸Ð²Ð¾, ÐµÐ³Ðµ Ð¶?");
Database.addText("uk.secondHouseMerchantHatButtonText", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ ÐºÐ°Ð¿ÐµÐ»ÑŽÑ… Ñ†ÑƒÐºÐµÑ€Ð½Ð¸ÐºÐ° (1 000 000 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.secondHouseTimeRingSpeech", "Ð¦Ðµ ÐºÑ–Ð»ÑŒÑ†Ðµ Ñ‡Ð°ÑÑƒ. Ð’Ð¾Ð½Ð¾ ÑÐ²Ð¾Ð³Ð¾ Ñ€Ð¾Ð´Ñƒ Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ðµ. Ð’Ð¾Ð½Ð¾ Ð´Ð¾Ð·Ð²Ð¾Ð»ÑÑ” Ñ‚Ð¾Ð±Ñ– ÑÐ¿Ð¾Ð²Ñ–Ð»ÑŒÐ½ÑŽÐ²Ð°Ñ‚Ð¸ Ñ‡Ð°Ñ, ÐºÐ¾Ð»Ð¸ Ñ‚Ð¸ Ð² Ñ…Ð°Ð»ÐµÐ¿Ñ–.");
Database.addText("uk.secondHouseTimeRingButtonText", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ ÐºÑ–Ð»ÑŒÑ†Ðµ Ñ‡Ð°ÑÑƒ (500 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.secondHouseLeatherGlovesSpeech", "Ð¦Ñ– Ñ€ÑƒÐºÐ°Ð²Ð¸Ñ†Ñ– Ð²Ð¸Ð³Ð¾Ñ‚Ð¾Ð²Ð»ÐµÐ½Ð¾ Ð· Ð²ÐµÑ€Ð±Ð»ÑŽÐ¶Ð¾Ñ— ÑˆÐºÑ–Ñ€Ð¸, ÑÐºÑ–ÑÐ½Ð° Ñ€Ð¾Ð±Ð¾Ñ‚Ð°. Ð£ Ð¼ÐµÐ½Ðµ Ñ—Ñ… Ð±Ð°Ð³Ð°Ñ‚Ð¾ Ð½Ð° Ð¿Ñ€Ð¾Ð´Ð°Ð¶, Ñ‚Ð¾Ð¼Ñƒ Ð²Ð¾Ð½Ð¸ Ñ‚Ð°ÐºÑ– Ð´ÐµÑˆÐµÐ²Ñ– : Ð»Ð¸ÑˆÐµ 300 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº!");
Database.addText("uk.secondHouseLeatherBootsButtonText", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ Ð¿Ð°Ñ€Ñƒ ÑˆÐºÑ–Ñ€ÑÐ½Ð¸Ñ… Ñ‡ÐµÑ€ÐµÐ²Ð¸ÐºÑ–Ð² (300 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.secondHouseLeatherBootsSpeech", "Ð¦Ñ– Ð²Ð¸ÑÐ¾ÐºÐ¾ÑÐºÑ–ÑÐ½Ñ– Ñ‡ÐµÑ€ÐµÐ²Ð¸ÐºÐ¸, Ð·Ñ€Ð¾Ð±Ð»ÐµÐ½Ñ– Ð· Ð²ÐµÑ€Ð±Ð»ÑŽÐ¶Ð¾Ñ— ÑˆÐºÑ–Ñ€Ð¸, Ð·Ð±ÐµÑ€ÐµÐ¶ÑƒÑ‚ÑŒ Ñ‚Ð²Ð¾Ñ— Ð½Ð¾Ð³Ð¸ Ñƒ Ñ‚ÐµÐ¿Ð»Ñ–.");
Database.addText("uk.secondHouseLeatherGlovesButtonText", "ÐºÑƒÐ¿Ð¸Ñ‚Ð¸ Ð¿Ð°Ñ€Ñƒ ÑˆÐºÑ–Ñ€ÑÐ½Ð¸Ñ… Ñ€ÑƒÐºÐ°Ð²Ð¸Ñ†ÑŒ (300 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.secondHouseChocolateBarSpeech", "Ð¦Ðµ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ð° Ð¿Ð»Ð¸Ñ‚ÐºÐ°. Ð¯ Ð½Ðµ Ð·Ð½Ð°ÑŽ, Ð´Ð»Ñ Ñ‡Ð¾Ð³Ð¾ Ñ—Ñ— Ð²Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð¾Ð²ÑƒÑŽÑ‚ÑŒ, Ð°Ð»Ðµ Ñ‚Ð°Ðº ÑÑ‚Ð°Ð»Ð¾ÑÑ, Ñ‰Ð¾ Ð²Ð¾Ð½Ð° Ð´Ð¾ÑÐ¸Ñ‚ÑŒ Ñ€Ñ–Ð´ÐºÑ–ÑÐ½Ð°, Ñ‰Ð¾ Ð¿Ð¾ÑÑÐ½ÑŽÑ” Ñ—Ñ— Ñ†Ñ–Ð½Ñƒ. 800 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ñ– Ð²Ð¾Ð½Ð° Ñ‚Ð²Ð¾Ñ!");
Database.addText("uk.secondHouseChocolateBarButtonText", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ñƒ Ð¿Ð»Ð¸Ñ‚ÐºÑƒ (800 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº)");
Database.addText("uk.outsideTheHoleButton", "Ð¡Ñ‚Ñ€Ð¸Ð±Ð½ÑƒÑ‚Ð¸ Ñƒ Ñ†ÑŽ Ð²ÐµÐ»Ð¸ÐºÑƒ Ð´Ñ–Ñ€Ñƒ Ð² Ð·ÐµÐ¼Ð»Ñ–");
Database.addText("uk.theCaveExitText0", "Ð¢Ð¸ Ð·Ñ€ÐµÑˆÑ‚Ð¾ÑŽ Ð´Ñ–ÑÑ‚Ð°Ð²ÑÑ Ð²Ð¸Ñ…Ð¾Ð´Ñƒ Ð· Ð¿ÐµÑ‡ÐµÑ€Ð¸.");
Database.addText("uk.theCaveExitText1", "Ð¢Ð¾Ð±Ñ– ÑÑ‚Ð°Ð»Ð¾ Ð²Ð¸Ð´Ð½Ð¾ Ð²ÐµÐ»Ð¸ÐºÐ¸Ð¹ Ð»Ñ–Ñ Ð·Ð·Ð¾Ð²Ð½Ñ–.");
Database.addText("uk.theCaveExitButtonText", "Ð’Ð¸Ð¹Ñ‚Ð¸ Ð· Ð¿ÐµÑ‡ÐµÑ€Ð¸");
Database.addText("uk.theCaveFirstSentenceWentStraight", "Ð¢Ð¸ Ð¿Ñ–ÑˆÐ¾Ð² Ð¿Ñ€ÑÐ¼Ð¾.");
Database.addText("uk.theCaveFirstSentenceWentLeft", "Ð¢Ð¸ Ð¾Ð±Ñ€Ð°Ð² Ð»Ñ–Ð²Ð¸Ð¹ Ð¿Ñ€Ð¾Ñ…Ñ–Ð´.");
Database.addText("uk.theCaveFirstSentenceWentRight", "Ð¢Ð¸ Ð¾Ð±Ñ€Ð°Ð² Ð¿Ñ€Ð°Ð²Ð¸Ð¹ Ð¿Ñ€Ð¾Ñ…Ñ–Ð´.");
Database.addText("uk.theCaveFirstSentenceYouAre", "Ð¢Ð¸ Ñƒ Ð¿ÐµÑ‡ÐµÑ€Ñ–. ÐŸÐµÑ€ÐµÐ´ Ñ‚Ð¾Ð±Ð¾ÑŽ Ñ‚Ñ€Ð¸ ÑˆÐ»ÑÑ…Ð¸.");
Database.addText("uk.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Ð¢Ð¸ Ð¿Ð¾Ð¼Ñ–Ñ‡Ð°Ñ”Ñˆ Ð´Ð¸Ð²Ð½Ñƒ Ñ€Ñ–Ñ‡ Ð½Ð° Ð·ÐµÐ¼Ð»Ñ– Ð¿ÐµÑ€ÐµÐ´ ÑÐ¾Ð±Ð¾ÑŽ.");
Database.addText("uk.theCavePattern_ChocolateBarNowSeeChocolateBar", "Ð¢Ð¸ Ð¿Ð¾Ð¼Ñ–Ñ‡Ð°Ñ”Ñˆ Ð¿ÐµÑ€ÐµÐ´ ÑÐ¾Ð±Ð¾ÑŽ Ð¿Ð»Ð¸Ñ‚ÐºÑƒ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ñƒ.");
Database.addText("uk.theCavePattern_TreasureMapSentence", "Ð¢Ð¸ Ð±Ð°Ñ‡Ð¸Ñˆ Ð¼Ð°Ð»ÐµÐ½ÑŒÐºÑ– ÐºÐ°Ð¼Ñ–Ð½Ñ‡Ð¸ÐºÐ¸, Ð´Ð¸Ð²Ð½Ð¸Ð¼ Ñ‡Ð¸Ð½Ð¾Ð¼ Ñ€Ð¾Ð·Ñ‚Ð°ÑˆÐ¾Ð²Ð°Ð½Ñ– Ð½Ð° Ð¿Ñ–Ð´Ð»Ð¾Ð·Ñ–.");
Database.addText("uk.theCavePattern_MonkeyWizardSentence", "Ð¢Ð¸ Ð½Ð°Ñ‚Ñ€Ð°Ð¿Ð»ÑÑ”Ñˆ Ð½Ð° Ð¾Ð³Ð¾Ð»ÐµÐ½Ð¾Ð³Ð¾ Ð¼Ð°Ð²Ð¿ÑÑ‡Ð¾Ð³Ð¾ Ñ‡Ð°ÐºÐ»ÑƒÐ½Ð°.");
Database.addText("uk.theCavePattern_MonkeyWizardButton", "ÐšÐ¸Ð½ÑƒÑ‚Ð¸ Ð¹Ð¾Ð¼Ñƒ Ð²Ð¸ÐºÐ»Ð¸Ðº");
Database.addText("uk.theCavePattern_OctopusKingSentence", "Ð¢Ð¸ Ð½Ð°Ñ‚Ñ€Ð°Ð¿Ð»ÑÑ”Ñˆ Ð½Ð° ÐšÐ¾Ñ€Ð¾Ð»Ñ Ð’Ð¾ÑÑŒÐ¼Ð¸Ð½Ð¾Ð³Ñ–Ð². Ð’Ñ–Ð½ Ð²Ð¸Ð´Ð°Ñ”Ñ‚ÑŒÑÑ Ð¾Ð³Ð¸Ð´Ð½Ð¸Ð¼.");
Database.addText("uk.theCavePattern_OctopusKingButton", "ÐšÐ¸Ð½ÑƒÑ‚Ð¸ Ð¹Ð¾Ð¼Ñƒ Ð²Ð¸ÐºÐ»Ð¸Ðº");
Database.addText("uk.fortressInsideText0", "Ð¢Ð¸ Ð²ÑÐµÑ€ÐµÐ´Ð¸Ð½Ñ– Ð¿ÑƒÑÑ‚ÐµÐ»ÑŒÐ½Ð¾Ñ— Ñ„Ð¾Ñ€Ñ‚ÐµÑ†Ñ–.");
Database.addText("uk.fortressInsideText1", "Ð¢Ð¸ Ð¼Ð¾Ð¶ÐµÑˆ Ð¾Ð±Ñ€Ð°Ñ‚Ð¸ Ð¿Ð¾Ð¼Ñ–Ð¶ Ñ‚Ñ€ÑŒÐ¾Ñ… Ð´Ð²ÐµÑ€ÐµÐ¹.");
Database.addText("uk.fortressInsideText2", "ÐšÐ¾Ð¶Ð½Ð° Ð· Ð½Ð¸Ñ… Ð²ÐµÐ´Ðµ Ð´Ð¾ Ð²ÐµÐ»Ð¸ÐºÐ¾Ñ— ÐºÑ–Ð¼Ð½Ð°Ñ‚Ð¸ Ð·Ñ– ÑÐºÐ°Ñ€Ð±Ð°Ð¼Ð¸ Ð² ÐºÑ–Ð½Ñ†Ñ–.");
Database.addText("uk.fortressInsideEnterRoom1", "Ð£Ð²Ñ–Ð¹Ñ‚Ð¸ Ð² Ð¿ÐµÑ€ÑˆÑƒ ÐºÑ–Ð¼Ð½Ð°Ñ‚Ñƒ");
Database.addText("uk.fortressInsideEnterRoom2", "Ð£Ð²Ñ–Ð¹Ñ‚Ð¸ Ð² Ð´Ñ€ÑƒÐ³Ñƒ ÐºÑ–Ð¼Ð½Ð°Ñ‚Ñƒ");
Database.addText("uk.fortressInsideEnterRoom3", "Ð£Ð²Ñ–Ð¹Ñ‚Ð¸ Ð² Ñ‚Ñ€ÐµÑ‚ÑŽ ÐºÑ–Ð¼Ð½Ð°Ñ‚Ñƒ");
Database.addText("uk.treasureButtonDig", "ÐšÐ¾Ð¿Ð°Ñ‚Ð¸");
Database.addText("uk.treasureButtonYouFound", "Ð¢Ð¸ Ð·Ð½Ð°Ð¹ÑˆÐ¾Ð² Ñ‚Ñ€Ð¸ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ð½Ñ– Ð¿Ð»Ð¸Ñ‚ÐºÐ¸!");
Database.addText("uk.sorceressHutHello", "ÐŸÑ€Ð¸Ð²Ñ–Ñ‚, Ñ Ñ‡Ð°ÐºÐ»ÑƒÐ½ÐºÐ°. Ð¯ Ð¼Ð¾Ð¶Ñƒ Ð½Ð°Ð²Ñ‡Ð¸Ñ‚Ð¸ Ñ‚ÐµÐ±Ðµ Ð¾Ð´Ð½Ñ–Ð¹ Ð°Ð±Ð¾ Ð´Ð²Ð¾Ð¼ Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ð¸Ð¼ ÑˆÑ‚ÑƒÑ‡ÐºÐ°Ð¼. Ð¯ Ð¼Ð¾Ð¶Ñƒ Ñ‚Ð°ÐºÐ¾Ð¶ Ð´Ð°Ñ‚Ð¸ Ñ‚Ð¾Ð±Ñ– Ñ‚Ñ€Ð¾Ñ…Ð¸ Ñ†Ñ–ÐºÐ°Ð²Ð¸Ñ… Ñ€ÐµÑ‡ÐµÐ¹, Ð°Ð±Ð¾ Ð½Ð°ÐºÐ»Ð°Ð´Ð°Ñ‚Ð¸ Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ Ð´Ð»Ñ Ñ‚ÐµÐ±Ðµ. ÐÐ»Ðµ ÑƒÑÐµ Ð¼Ð°Ñ” ÑÐ²Ð¾ÑŽ Ñ†Ñ–Ð½Ñƒ! Ð† Ñ†Ñ–Ñ”ÑŽ Ñ†Ñ–Ð½Ð¾ÑŽ Ð±ÑƒÐ´ÑƒÑ‚ÑŒ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÐ¸. Ð‘Ð°Ð³Ð°Ñ‚Ð¾ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð².");
Database.addText("uk.sorceressHutClickedGrimoire", "Ð¦Ðµ ÐºÐ½Ð¸Ð³Ð° Ð·Ð°ÐºÐ»ÑÑ‚ÑŒ, Ð½Ð°Ð¿Ð¸ÑÐ°Ð½Ð° Ð´Ð»Ñ Ð¿Ð¾Ñ‡Ð°Ñ‚ÐºÑ–Ð²Ñ†Ñ–Ð². Ð¯ÐºÑ‰Ð¾ Ð½Ð¾ÑÐ¸Ñ‚Ð¸Ð¼ÐµÑˆ Ñ—Ñ— Ð· ÑÐ¾Ð±Ð¾ÑŽ Ð² Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ð°Ñ…, Ñ‚Ð¾ Ð·Ð¼Ð¾Ð¶ÐµÑˆ Ð½Ð°ÐºÐ»Ð°Ð´Ð°Ñ‚Ð¸ Ð¿Ñ€Ð¾ÑÑ‚Ñ–, Ð°Ð»Ðµ ÐºÐ¾Ñ€Ð¸ÑÐ½Ñ– Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð½Ñ. Ð’Ð¾Ð½Ð° Ð½ÐµÐ¾Ð±Ñ…Ñ–Ð´Ð½Ð° Ñ‚Ð¾Ð±Ñ–! Ð›Ð¸ÑˆÐµ 5 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð².");
Database.addText("uk.sorceressHutBuyGrimoireButton", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ Ñ†ÑŽ ÐºÐ½Ð¸Ð³Ñƒ Ð·Ð°ÐºÐ»ÑÑ‚ÑŒ (5 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð²)");
Database.addText("uk.sorceressHutBuyGrimoireSpeech", "Ð”ÑÐºÑƒÑŽ Ð·Ð° Ð¿Ð¾ÐºÑƒÐ¿ÐºÑƒ! Ð¢Ð¸ Ð·Ð¼Ð¾Ð¶ÐµÑˆ Ð½Ð°ÐºÐ»Ð°Ð´Ð°Ñ‚Ð¸ Ñ‚Ñ€Ð¸ Ð·Ð°ÐºÐ»ÑÑ‚Ñ‚Ñ Ð· Ñ†Ñ–Ñ”ÑŽ ÐºÐ½Ð¸Ð³Ð¾ÑŽ. Ð©Ð°ÑÑ‚Ð¸ Ñ‚Ð¾Ð±Ñ–!");
Database.addText("uk.sorceressHutClickedGrimoire2", "Ð¦Ðµ Ñ€Ð¾Ð·ÑˆÐ¸Ñ€ÐµÐ½Ð° ÐºÐ½Ð¸Ð³Ð° Ð·Ð°ÐºÐ»ÑÑ‚ÑŒ. Ð¯ÐºÑ‰Ð¾ Ð½Ð¾ÑÐ¸Ñ‚Ð¸Ð¼ÐµÑˆ Ñ—Ñ— Ð· ÑÐ¾Ð±Ð¾ÑŽ Ð² Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ð°Ñ…, Ñ‚Ð¾ Ð·Ð¼Ð¾Ð¶ÐµÑˆ Ð½Ð°ÐºÐ»Ð°Ð´Ð°Ñ‚Ð¸ Ð´Ð²Ð° Ð²Ð´Ð¾ÑÐºÐ¾Ð½Ð°Ð»ÐµÐ½Ð¸Ñ… Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð½Ñ. Ð¯ Ð½Ð°Ð¿Ð¸ÑÐ°Ð»Ð° Ñ—Ñ… ÑÐ°Ð¼Ð°, Ñ– Ñ†Ðµ Ð±ÑƒÐ»Ð¾ Ð½ÐµÐ¿Ñ€Ð¾ÑÑ‚Ð¾. 20 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð² â€” ÑÐ¿Ñ€Ð°Ð²ÐµÐ´Ð»Ð¸Ð²Ð° Ñ†Ñ–Ð½Ð°.");
Database.addText("uk.sorceressHutBuyGrimoire2Button", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ Ñ†ÑŽ ÐºÐ½Ð¸Ð³Ñƒ Ð·Ð°ÐºÐ»ÑÑ‚ÑŒ (20 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð²)");
Database.addText("uk.sorceressHutBuyGrimoire2Speech", "Ð”ÑÐºÑƒÑŽ Ð·Ð° Ð¿Ð¾ÐºÑƒÐ¿ÐºÑƒ! Ð¢Ð¸ Ð·Ð¼Ð¾Ð¶ÐµÑˆ Ð½Ð°ÐºÐ»Ð°Ð´Ð°Ñ‚Ð¸ Ð´Ð²Ð° Ð·Ð°ÐºÐ»Ð¸Ð½Ð°Ð½Ð½Ñ Ð· Ñ†Ñ–Ñ”ÑŽ ÐºÐ½Ð¸Ð³Ð¾ÑŽ. Ð’Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð¾Ð²ÑƒÐ¹ Ñ—Ñ… Ð¼ÑƒÐ´Ñ€Ð¾!");
Database.addText("uk.sorceressHutClickedCauldron", "Ð¦Ðµ Ð¼Ñ–Ð¹ ÐºÐ°Ð·Ð°Ð½. Ð— Ð¹Ð¾Ð³Ð¾ Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ð¾ÑŽ Ñ Ð²Ð°Ñ€ÑŽ Ð¼Ð°Ð³Ñ–Ñ‡Ð½Ñ– Ð·Ñ–Ð»Ð»Ñ. Ð¯ Ð¼Ð¾Ð¶Ñƒ Ð¿Ñ€Ð¾Ð´Ð°Ñ‚Ð¸ Ð¹Ð¾Ð³Ð¾ Ñ‚Ð¾Ð±Ñ–, Ð°Ð»Ðµ Ð²Ñ–Ð½ Ð´ÑƒÐ¶Ðµ Ñ†Ñ–Ð½Ð½Ð¸Ð¹... Ð²Ñ–Ð½ ÐºÐ¾ÑˆÑ‚ÑƒÐ²Ð°Ñ‚Ð¸Ð¼Ðµ Ñ‚Ð¾Ð±Ñ– 100 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð².");
Database.addText("uk.sorceressHutBuyCauldronButton", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ ÐºÐ°Ð·Ð°Ð½ (100 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð²)");
Database.addText("uk.sorceressHutBuyCauldronSpeech", "ÐšÑ€Ð°ÑÐ½Ð¾ Ð´ÑÐºÑƒÑŽ! 100 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð² Ð´Ð»Ñ Ð¼ÐµÐ½Ðµ! Ð¯ Ñ‚Ð°ÐºÐ¾Ð¶ Ð´Ð°Ð»Ð° Ñ‚Ð¾Ð±Ñ– ÐºÐ½Ð¸Ð³Ñƒ Ð·Ñ–Ð»Ð»Ñ”Ð²Ð°Ñ€Ñ–Ð½Ð½Ñ. Ð’Ð¾Ð½Ð° Ñ‚Ð¾Ð±Ñ– Ð·Ð½Ð°Ð´Ð¾Ð±Ð¸Ñ‚ÑŒÑÑ.");
Database.addText("uk.sorceressHutClickedHat", "Ð£ Ð¼ÐµÐ½Ðµ Ð´Ñ–Ð¹ÑÐ½Ð¾ Ñ‡ÑƒÐ´Ð¾Ð²Ð¸Ð¹ ÐºÐ°Ð¿ÐµÐ»ÑŽÑ…! ÐÐ»Ðµ Ñ ÑÐ¿Ñ€Ð°Ð²Ð´Ñ– Ð½Ðµ Ð¼Ð¾Ð¶Ñƒ Ð¿Ñ€Ð¾Ð´Ð°Ñ‚Ð¸ Ð¹Ð¾Ð³Ð¾ Ñ‚Ð¾Ð±Ñ–. Ð’Ñ–Ð½ Ð·Ð°Ð½Ð°Ð°Ð°Ð°Ð´Ñ‚Ð¾ Ñ†Ñ–Ð½Ð½Ð¸Ð¹. Ð¡Ð¿Ñ€Ð°Ð²Ð´Ñ–, Ñ Ð½Ðµ Ð¼Ð¾Ð¶Ñƒ. ÐÐµ Ð½Ð°Ð¿Ð¾Ð»ÑÐ³Ð°Ð¹. ÐÑ–. ÐÑ–-Ð½Ñ–-Ð½Ñ–, Ñ Ð½Ðµ Ð¿Ð¾Ð²Ð¸Ð½Ð½Ð° Ñ€Ð¾Ð±Ð¸Ñ‚Ð¸ Ñ†ÑŒÐ¾Ð³Ð¾. ÐžÑ…, Ð³Ð°Ñ€Ð°Ð·Ð´, Ñ Ð¿Ñ€Ð¾Ð´Ð°Ð¼ Ð¹Ð¾Ð³Ð¾, Ð°Ð»Ðµ Ð·Ð° 1 000 000 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð². Ð¢Ð¸, Ð¹Ð¼Ð¾Ð²Ñ–Ñ€Ð½Ð¾, Ð½Ðµ Ð·Ð¼Ð¾Ð¶ÐµÑˆ Ð·Ð°Ð¿Ð»Ð°Ñ‚Ð¸Ñ‚Ð¸ Ñ‚Ð°ÐºÑƒ Ñ†Ñ–Ð½Ñƒ Ñƒ Ð±ÑƒÐ´ÑŒ-ÑÐºÐ¾Ð¼Ñƒ Ð²Ð¸Ð¿Ð°Ð´ÐºÑƒ.");
Database.addText("uk.sorceressHutBuyHatButton", "ÐšÑƒÐ¿Ð¸Ñ‚Ð¸ ÐºÐ°Ð¿ÐµÐ»ÑŽÑ… (1 000 000 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð²)");
Database.addText("uk.sorceressHutBuyHatSpeech", "ÐžÐ´Ð¸Ð½ Ð±Ñ–Ð»ÑŒÐ¹Ð¾Ð½ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð² Ð´Ð»Ñ Ð¼ÐµÐµÐµÐµÐ½ÐµÐµ! ÐÐ»Ðµ Ñƒ Ð¼ÐµÐ½Ðµ Ð±Ñ–Ð»ÑŒÑˆÐµ Ð½ÐµÐ¼Ð°Ñ” ÐºÐ°Ð¿ÐµÐ»ÑŽÑ…Ð°.. Ð°Ð»Ðµ Ð¾Ð´Ð¸Ð½ Ð±Ñ–Ð»ÑŒÐ¹Ð¾Ð½ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð², Ð¾Ð³Ð¾-Ð³Ð¾! .. Ð¦Ðµ Ñ‚Ð¾Ð³Ð¾ Ð²Ð°Ñ€Ñ‚Ðµ.");
Database.addText("uk.cauldronPreviousPageButton", "ÐŸÐ¾Ð¿ÐµÑ€ÐµÐ´Ð½Ñ ÑÑ‚Ð¾Ñ€Ñ–Ð½ÐºÐ°");
Database.addText("uk.cauldronNextPageButton", "ÐÐ°ÑÑ‚ÑƒÐ¿Ð½Ð° ÑÑ‚Ð¾Ñ€Ñ–Ð½ÐºÐ°");
Database.addText("uk.cauldronWhatYouWantToPut", "Ð©Ð¾ Ñ‚Ð¸ Ñ…Ð¾Ñ‡ÐµÑˆ Ð¿Ð¾ÐºÐ»Ð°ÑÑ‚Ð¸ Ñƒ ÐºÐ°Ð·Ð°Ð½");
Database.addText("uk.cauldronWhatIsIn", "Ð©Ð¾ Ñƒ ÐºÐ°Ð·Ð°Ð½Ñ–");
Database.addText("uk.cauldronWhatYouCanDo", "Ð©Ð¾ Ñ‚Ð¸ Ð¼Ð¾Ð¶ÐµÑˆ Ð·Ñ€Ð¾Ð±Ð¸Ñ‚Ð¸ Ð· Ñ†ÑŒÐ¾Ð³Ð¾");
Database.addText("uk.castleBigRoomComment", "Ð’ÐµÐ»Ð¸ÐºÐ° ÐºÑ–Ð¼Ð½Ð°Ñ‚Ð°");
Database.addText("uk.castleARoomComment", "ÐšÑ–Ð¼Ð½Ð°Ñ‚Ð°");
Database.addText("uk.castleADarkRoomComment", "Ð¢ÐµÐ¼Ð½Ð° ÐºÑ–Ð¼Ð½Ð°Ñ‚Ð°");
Database.addText("uk.castleCastleEntranceComment", "Ð’Ñ…Ñ–Ð´ Ñƒ Ð·Ð°Ð¼Ð¾Ðº");
Database.addText("uk.castleTowerEntranceComment", "Ð’Ñ…Ñ–Ð´ Ñƒ Ð²ÐµÐ¶Ñƒ");
Database.addText("uk.castleNougatMonsterComment", "ÐÑ‚Ð°ÐºÑƒÐ²Ð°Ñ‚Ð¸ Ð²ÐµÐ»ÐµÑ‚ÐµÐ½ÑÑŒÐºÐ¾Ð³Ð¾ Ð½ÑƒÐ³Ð¾-Ð¼Ð¾Ð½ÑÑ‚Ñ€Ð°");
Database.addText("uk.castleGuardsComment", "ÐÑ‚Ð°ÐºÑƒÐ²Ð°Ñ‚Ð¸ Ð²Ð°Ñ€Ñ‚Ð¾Ð²Ð¸Ñ…");
Database.addText("uk.castleStairsComment", "Ð¡Ñ…Ð¾Ð´Ð¸");
Database.addText("uk.buttonBackToTheCastle", "ÐÐ°Ð·Ð°Ð´ Ñƒ Ð·Ð°Ð¼Ð¾Ðº");
Database.addText("uk.castleBigRoomHovenSpeechSad", "ÐŸÑ€Ð¸Ð²Ñ–Ñ‚! Ð¯ Ð´ÑƒÐ¶Ðµ ÑÑ‚Ð°Ñ€Ð° Ñ…Ð»Ñ–Ð±Ð½Ð° Ð¿Ñ–Ñ‡. Ð¯ Ð·Ð²Ð¸ÐºÐ»Ð° Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ñ‚Ð¸ Ð±ÐµÐ·Ð»Ñ–Ñ‡ Ñ‡ÑƒÐ´Ð¾Ð²Ð¸Ñ… Ñ‚Ñ–ÑÑ‚ÐµÑ‡Ð¾Ðº, Ð°Ð»Ðµ Ð½Ñ–Ñ…Ñ‚Ð¾ Ð±Ñ–Ð»ÑŒÑˆÐµ Ð½Ðµ ÐºÐ¾Ñ€Ð¸ÑÑ‚ÑƒÑ”Ñ‚ÑŒÑÑ Ð¼Ð½Ð¾ÑŽ. ÐœÐ¾Ð¶Ð»Ð¸Ð²Ð¾... Ð¼Ð¾Ð¶Ð»Ð¸Ð²Ð¾, Ñ‚Ð¸ Ð¼Ñ–Ð³ Ð±Ð¸ Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ñ‚Ð¸ Ð¼ÐµÐ½Ñ–? Ð›Ð¸ÑˆÐµ Ð´Ð¾Ð·Ð²Ð¾Ð»ÑŒ Ð¼ÐµÐ½Ñ– Ð²Ð·ÑÑ‚Ð¸ Ñ‚Ñ€Ð¾Ñ…Ð¸ ÑÐ¾Ð»Ð¾Ð´Ð¾Ñ‰Ñ–Ð² Ñƒ Ñ‚ÐµÐ±Ðµ! ÐÐµ Ñ…Ð²Ð¸Ð»ÑŽÐ¹ÑÑ, Ñ‚Ð¸ Ð½Ðµ Ð¿Ð¾Ð¶Ð°Ð»ÐºÑƒÑ”Ñˆ! ÐŸÑ€Ð¾ÑÑ‚Ð¾ Ð´Ð¾Ð²Ñ–Ñ€ÑÑ Ð¼ÐµÐ½Ñ–.");
Database.addText("uk.castleBigRoomHovenNotEnough", "ÐžÑ…... Ñƒ Ñ‚ÐµÐ±Ðµ Ð½ÐµÐ´Ð¾ÑÑ‚Ð°Ñ‚Ð½ÑŒÐ¾ ÑÐ¾Ð»Ð¾Ð´Ð¾Ñ‰Ñ–Ð², Ð¯ Ð½Ðµ Ð¼Ð¾Ð¶Ñƒ Ð½Ñ–Ñ‡Ð¾Ð³Ð¾ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ñ‚Ð¸. Ð¯ Ð¿Ñ€Ð¾ÑÑ‚Ð¾ Ð½Ñ–ÐºÑ‡ÐµÐ¼Ð°. Ð¯ Ð½Ñ–ÐºÑ‡ÐµÐ¼Ð½Ð° Ñ…Ð»Ñ–Ð±Ð¾Ð¿Ñ–Ñ‡ÐºÐ°, Ð¾ÑÑŒ ÑÐº Ñ‚Ð¾Ð±Ñ– Ð²Ð°Ñ€Ñ‚Ð¾ Ð½Ð°Ð·Ð¸Ð²Ð°Ñ‚Ð¸ Ð¼ÐµÐ½Ðµ.");
Database.addText("uk.castleBigRoomHovenSpeechMadePainAuChocolat", "Ð£Ñ€Ð°! ÐšÑ€Ð°ÑÐ½Ð¾ Ð´ÑÐºÑƒÑŽ! Ð¯ Ð²Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð°Ð»Ð° 100 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ñ– Ð¿Ð»Ð¸Ñ‚ÐºÑƒ ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ñƒ, Ñ‚Ð° Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ð»Ð° Ñ‚Ð¾Ð±Ñ–... ÐºÑ€ÑƒÐ°ÑÐ°Ð½! Ð¦Ðµ Ð¼Ð¾Ñ— ÑƒÐ»ÑŽÐ±Ð»ÐµÐ½Ñ– Ð»Ð°ÑÐ¾Ñ‰Ñ–, Ñ ÑÐ¿Ð¾Ð´Ñ–Ð²Ð°ÑŽÑÑŒ, Ñ‚Ð¾Ð±Ñ– ÑÐ¿Ð¾Ð´Ð¾Ð±Ð°Ñ”Ñ‚ÑŒÑÑ!");
Database.addText("uk.castleBigRoomHovenSpeechHappy", "ÐÐ³Ð¾Ð²! Ð¯ÐºÑ‰Ð¾ Ñ‚Ð¸ Ð·Ð°Ñ…Ð¾Ñ‡ÐµÑˆ, Ð°Ð±Ð¸ Ñ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ð»Ð° Ñ‚Ð¾Ð±Ñ– Ñ‰Ðµ Ð»Ð°ÑÐ¾Ñ‰Ñ–Ð², Ñ‚Ñ–Ð»ÑŒÐºÐ¸ ÑÐºÐ°Ð¶Ð¸! Ð¯ Ð· Ñ€Ð°Ð´Ñ–ÑÑ‚ÑŽ Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð¶Ñƒ Ñ‚Ð¾Ð±Ñ–.");
Database.addText("uk.castleBigRoomHovenSpeechHappyNotEnough", "ÐžÑ…, Ñƒ Ñ‚ÐµÐ±Ðµ Ð½ÐµÐ´Ð¾ÑÑ‚Ð°Ñ‚Ð½ÑŒÐ¾ ÑÐ¾Ð»Ð¾Ð´Ð¾Ñ‰Ñ–Ð², Ð½Ð° Ð¶Ð°Ð»ÑŒ. ÐœÐµÐ½Ñ– Ð¿Ð¾Ñ‚Ñ€Ñ–Ð±Ð½Ð¾ 100 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ñ– Ð¿Ð»Ð¸Ñ‚ÐºÐ° ÑˆÐ¾ÐºÐ¾Ð»Ð°Ð´Ñƒ. ÐŸÐ¾Ð²ÐµÑ€Ñ‚Ð°Ð¹ÑÑ, ÐºÐ¾Ð»Ð¸ Ð²Ð¾Ð½Ð¸ Ñƒ Ñ‚ÐµÐ±Ðµ Ð±ÑƒÐ´ÑƒÑ‚ÑŒ!");
Database.addText("uk.castleBigRoomHovenLetHovenTakeButton", "Ð”Ð¾Ð·Ð²Ð¾Ð»Ð¸Ñ‚Ð¸ Ð¿ÐµÑ‡Ñ– ÑƒÐ·ÑÑ‚Ð¸ ÑƒÑÑ– ÑÐ¾Ð»Ð¾Ð´Ð¾Ñ‰Ñ–, ÑÐºÑ– Ð²Ð¾Ð½Ð° Ñ…Ð¾Ñ‡Ðµ");
Database.addText("uk.castleBigRoomHovenThanks", "Ð”ÑÐºÑƒÑŽ, Ð¿Ñ–Ñ‡ÐºÐ¾!");
Database.addText("uk.dragonStopTickling", "Ð“ÐµÐ¹ Ñ‚Ð¸! ÐŸÐµÑ€ÐµÑÑ‚Ð°Ð½ÑŒ Ð»Ð¾ÑÐºÐ¾Ñ‚Ð°Ñ‚Ð¸ Ð¼ÐµÐ½Ðµ, Ð±ÑƒÐ´ÑŒ Ð»Ð°ÑÐºÐ°.");
Database.addText("uk.dragonStopTicklingButton", "ÐÑ…, Ð¾Ñ…, Ð¿Ñ€Ð¾Ð±Ð°Ñ‡, Ñ Ð´ÑƒÐ¼Ð°Ð², Ñ‰Ð¾ Ð¿Ð¾Ð²Ð¸Ð½ÐµÐ½ Ð±ÑƒÐ² Ð½Ð°Ð¿Ð°ÑÑ‚Ð¸ Ð½Ð° Ñ‚ÐµÐ±Ðµ");
Database.addText("uk.dragonTalking", "Ð¯ Ð´Ñ€Ð°ÐºÐ¾Ð½ Ñ– Ñ†Ðµ Ð¼Ñ–Ð¹ Ð·Ð°Ð¼Ð¾Ðº. Ð¯ Ð±Ð°Ñ‡Ñƒ, Ñ‚Ð¸ Ð·ÑƒÐ¼Ñ–Ð² ÑƒÐ²Ñ–Ð¹Ñ‚Ð¸, Ñ‚Ð¸ Ð¼ÑƒÑÐ¸Ñˆ Ð±ÑƒÑ‚Ð¸ Ð´ÑƒÐ¶Ðµ Ñ…Ð¾Ñ€Ð¾Ð±Ñ€Ð¸Ð¼... Ð¯ Ð±ÑƒÐ² Ð±Ð¸ Ñ€Ð°Ð´Ð¸Ð¹ Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ñ‚Ð¸ ÐºÐ¾Ð¼ÑƒÑÑŒ Ð½Ð° ÐºÑˆÑ‚Ð°Ð»Ñ‚ Ñ‚ÐµÐ±Ðµ. Ð§Ð¾Ð³Ð¾ Ñ‚Ð¸ Ð¿Ñ€Ð°Ð³Ð½ÐµÑˆ?");
Database.addText("uk.dragonTalkingChallengeButton", "Ð’Ð¸ÐºÐ»Ð¸ÐºÑƒ");
Database.addText("uk.dragonTalkingFameButton", "Ð¡Ð»Ð°Ð²Ð¸");
Database.addText("uk.dragonTalkingCandiesButton", "Ð¦ÑƒÐºÐµÑ€Ð¾Ðº");
Database.addText("uk.dragonTalkingChallengeSpeech", "ÐžÑ…, Ð¾Ñ‚Ð¾Ð¶, Ñ‚Ð¸ Ð¿Ñ€Ð°Ð³Ð½ÐµÑˆ Ð²Ð¸ÐºÐ»Ð¸ÐºÑƒ? Ð¯ Ð´ÑƒÐ¼Ð°ÑŽ, Ñ‚Ð¾Ð±Ñ– ÑÐ»Ñ–Ð´ Ð·Ð´Ñ–Ð¹ÑÐ½Ð¸Ñ‚Ð¸ Ð¿Ð¾Ð´Ð¾Ñ€Ð¾Ð¶ Ð´Ð¾ ÑÐ°Ð¼Ð¾Ð³Ð¾ Ð¿ÐµÐºÐ»Ð°, ÑÐº Ð²Ñ–Ð´Ð¾Ð¼Ð¾, Ð´Ð¸ÑÐ²Ð¾Ð» â€” Ð´Ð¾ÑÑ‚Ð¾Ð¹Ð½Ð¸Ð¹ ÑÑƒÐ¿ÐµÑ€Ð½Ð¸Ðº. Ð¡Ñ‚Ñ€Ð¸Ð±Ð°Ð¹ Ð¼ÐµÐ½Ñ– Ð½Ð° ÑÐ¿Ð¸Ð½Ñƒ Ñ– Ñ Ð´Ð¾Ð¿Ñ€Ð°Ð²Ð»ÑŽ Ñ‚ÐµÐ±Ðµ Ñ‚ÑƒÐ´Ð¸!");
Database.addText("uk.dragonTalkingFameSpeech", "ÐÐ°Ð¹ÐºÑ€Ð°Ñ‰Ð¸Ð¹ ÑÐ¿Ð¾ÑÑ–Ð± Ð¿Ñ€Ð¾ÑÐ»Ð°Ð²Ð¸Ñ‚Ð¸ÑÑŒ â€” Ñ†Ðµ Ð·ÑƒÑÑ‚Ñ€Ñ–Ñ‚Ð¸ÑÑŒ Ñ–Ð· ÑÐ°Ð¼Ð¸Ð¼ Ñ€Ð¾Ð·Ñ€Ð¾Ð±Ð½Ð¸ÐºÐ¾Ð¼. Ð¯ Ð·Ð½Ð°ÑŽ, Ð´Ðµ Ð²Ñ–Ð½ Ð¶Ð¸Ð²Ðµ, Ñ– Ð¼Ñ–Ð³ Ð±Ð¸ Ð´Ð¾Ð¿Ñ€Ð°Ð²Ð¸Ñ‚Ð¸ Ñ‚ÐµÐ±Ðµ Ñ‚ÑƒÐ´Ð¸. ÐÐ»Ðµ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ¹ÑÑ, Ñ†Ðµ Ð±ÑƒÐ´Ðµ Ð½ÐµÐ¿Ñ€Ð¾ÑÑ‚Ð¾.");
Database.addText("uk.dragonTalkingCandiesSpeech", "Ð—Ñ€ÐµÑˆÑ‚Ð¾ÑŽ, Ð¼Ð¸ ÑƒÑÑ– Ñ…Ð¾Ñ‡ÐµÐ¼Ð¾ Ñ†ÑƒÐºÐµÑ€Ð¾Ðº, Ñ‡Ð¸ Ð½Ðµ Ñ‚Ð°Ðº? Ð¯ Ð´ÑƒÐ¼Ð°ÑŽ, Ð¼Ñ–Ð¹ Ð´Ñ€ÑƒÐ³ Ð·Ð¼Ñ–Ð³ Ð±Ð¸ Ñ‚Ð¾Ð±Ñ– Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ñ‚Ð¸. Ð¢Ð¸ Ð»ÐµÐ³ÐºÐ¾ Ð¹Ð¾Ð³Ð¾ Ð²Ð¿Ñ–Ð·Ð½Ð°Ñ”Ñˆ, Ñƒ Ð½ÑŒÐ¾Ð³Ð¾ Ð»Ð¸ÑˆÐµ Ð¾Ð´Ð½Ðµ Ð¾ÐºÐ¾. ÐŸÑ€Ð¾ÑÑ‚Ð¾ ÑÐºÐ°Ð¶Ð¸ Ð¹Ð¾Ð¼Ñƒ, Ñ‰Ð¾ Ñ‚Ð¸ Ð²Ñ–Ð´ Ð¼ÐµÐ½Ðµ.");
Database.addText("uk.dragonTalkingChallengeAnswer", "Ð¢Ð¾Ð´Ñ– Ð²Ð¿ÐµÑ€ÐµÐ´!");
Database.addText("uk.dragonTalkingFameAnswer", "Ð¯ Ð³Ð¾Ñ‚Ð¾Ð²Ð¸Ð¹.");
Database.addText("uk.dragonTalkingCandiesAnswer", "Ð”Ð¾Ð±Ñ€Ðµ, Ð´ÑÐºÑƒÑŽ!");
Database.addText("uk.buttonBackToCastle", "ÐŸÐ¾Ð²ÐµÑ€Ð½ÑƒÑ‚Ð¸ÑÑ Ñƒ Ð·Ð°Ð¼Ð¾Ðº");
Database.addText("uk.talkingCandySpeechNoBox", "ÐÐ³Ð¾Ð²! Ð¯ Ñ†ÑƒÐºÐµÑ€Ð¸Ðº, Ñ‰Ð¾ Ð³Ð¾Ð²Ð¾Ñ€Ð¸Ñ‚ÑŒ. Ð¢Ð¸ Ð¼Ð°Ð¹Ð¶Ðµ Ð²Ð¸Ð³Ñ€Ð°Ð². Ð¢Ð¾Ð±Ñ– Ð»Ð¸ÑˆÐµ Ð¿Ð¾Ñ‚Ñ€Ñ–Ð±Ð½Ð¾ Ð·Ð½Ð°Ð¹Ñ‚Ð¸ candy box. Ð’Ð¾Ð½Ð° Ñƒ Ð±ÑƒÐ´Ð¸Ð½ÐºÑƒ Ð·Ð° ÑÐµÐ»Ð¸Ñ‰ÐµÐ¼. Ð¦Ðµ Ð¾ÑÑ‚Ð°Ð½Ð½Ñ–Ð¹ ÐºÑ€Ð¾Ðº!");
Database.addText("uk.talkingCandySpeech1", "ÐÐ³Ð¾Ð²! Ð¯ Ñ†ÑƒÐºÐµÑ€Ð¸Ðº, Ñ‰Ð¾ Ð³Ð¾Ð²Ð¾Ñ€Ð¸Ñ‚ÑŒ. Ð’Ñ–Ñ‚Ð°ÑŽ, Ñ‚Ð¸ Ð²Ð¸Ð³Ñ€Ð°Ð²! Ð¯ Ð²Ñ–Ð´ÐºÑ€Ð¸ÑŽ Ñ‚Ð¾Ð±Ñ– candy box, Ñ†Ðµ Ñ‚Ð²Ð¾Ñ Ð²Ð¸Ð½Ð°Ð³Ð¾Ñ€Ð¾Ð´Ð°. Ð—Ñ€Ð¾Ð±Ð¸Ñ‚Ð¸ Ñ†Ðµ?");
Database.addText("uk.talkingCandySpeech2", "Ð“Ð¾Ñ‚Ð¾Ð²Ð¾! Ð¢ÐµÐ¿ÐµÑ€ Ñ‚Ð¸ Ð¼Ð¾Ð¶ÐµÑˆ ÑƒÐ²Ñ–Ð¹Ñ‚Ð¸ Ð² Ð½ÐµÑ—. Ð¯ ÑÐ¿Ð¾Ð´Ñ–Ð²Ð°ÑŽÑÑŒ, Ñ‚Ð¾Ð±Ñ– ÑÐ¿Ð¾Ð´Ð¾Ð±Ð°Ð»Ð°ÑÑ Ð³Ñ€Ð° :)");
Database.addText("uk.talkingCandyButton", "Ð¢Ð°Ðº!!");
Database.addText("uk.lighthousePuzzleResetButton", "Ð¡Ð¿Ñ€Ð¾Ð±ÑƒÐ²Ð°Ñ‚Ð¸ Ñ‰Ðµ Ñ€Ð°Ð·");
Database.addText("br.mapVillageComment", "Aldeia");
Database.addText("br.mapFortressComment", "Fortaleza do Deserto");
Database.addText("br.mapATreeComment", "Ãrvore");
Database.addText("br.mapTheDesertComment", "Deserto");
Database.addText("br.mapWishingWellComment", "PoÃ§o dos Desejos");
Database.addText("br.mapLonelyHouseComment", "Casa abandonada");
Database.addText("br.mapForestComment", "Floresta");
Database.addText("br.mapCastleEntranceComment", "PortÃµes do castelo");
Database.addText("br.mapCastleComment", "Castelo");
Database.addText("br.mapDragonComment", "DragÃ£o");
Database.addText("br.candyBoxEatCandiesButton", "Comer todos os doces");
Database.addText("br.candyBoxThrowCandiesButton", "Jogar 10 doces no chÃ£o");
Database.addText("br.mapVillageAHouseComment", "Casa");
Database.addText("br.mapVillageForgeComment", "Forja");
Database.addText("br.buttonBackToTheMap", "Voltar ao mapa");
Database.addText("br.mapSorceressHutComment", "Cabana da feiticeira");
Database.addText("br.buttonBackToTheVillage", "Voltar Ã  aldeia");
Database.addText("br.mapATreeIntroductionSpeech", "Oi, eu sou o esquilo. Posso lhe dar doces e muitas outras coisas. Eu sei que vocÃª ama doces... Mas eu me sinto tÃ£o sÃ³ nessa floresta.");
Database.addText("br.mapATreeIntroductionButton", "Como posso ajudÃ¡-lo?");
Database.addText("br.mapATreeFirstQuestion", "Vou fazer perguntas. Se vocÃª acertar, ganharÃ¡ os doces mais doces! Primeira pergunta: vocÃª ama mesmo doces? (responda em inglÃªs)");
Database.addText("br.mapATreeSecondQuestion", "Ã‰ isso aÃ­! Tome, 20 doces para vocÃª. Agora, complete essa sequÃªncia de letras para ganhar outro prÃªmio: S, E, I, D, N, A, ?");
Database.addText("br.mapATreeThirdQuestion", "Doces! Fique com mais esses 100 doces. PrÃ³xima pergunta: quantos doces a pessoa mais doce do mundo tem?");
Database.addText("br.mapATreeFourthQuestion", "Aqui, mais 500 doces para vocÃª! O prÃ³ximo prÃªmio vai ser bem interessante... LÃ¡ vai a charada: em uma floresta esquecida, cresce uma Ã¡rvore muito antiga, onde vivem os animais mais inteligentes do mundo. Dizem que ela tem 60 raÃ­zes, 360 galhos e 2160 folhas. Quantas marcas tem o tronco dessa Ã¡rvore?");
Database.addText("br.mapATreeFifthQuestion", "ParabÃ©ns! Sim, eu estava falando da minha Ã¡rvore. Fique com esses 3 pirulitos. FaÃ§a bom uso deles! PrÃ³xima charada, preste atenÃ§Ã£o: em uma noite de lua cheia, eu jogo um chapÃ©u amarelo no mar vermelho. O que acontece com o chapÃ©u?");
Database.addText("br.mapATreeTicTacToeIntro", "Muito bem! Essa nÃ£o era tÃ£o difÃ­cil. Mais trÃªs barras de chocolate para vocÃª! JÃ¡ para a prÃ³xima recompensa, as regras serÃ£o diferentes. VocÃª terÃ¡ de me vencer em um jogo! EstÃ¡ preparado?");
Database.addText("br.mapATreeTicTacToeIntroButton", "Mas Ã© claro!");
Database.addText("br.mapATreeTicTacToeLetsPlay", "Ã‰ o jogo-da-velha. Vamos jogar em um tabuleiro 3 por 3. VocÃª usarÃ¡ o sÃ­mbolo X e eu o sÃ­mbolo O. Cada um de uma vez, o objetivo Ã© colocar trÃªs sÃ­mbolos um do lado do outro. Vou deixar que vocÃª comece!");
Database.addText("br.mapATreeTicTacToeNobodyWins", "Preenchemos todo o tabuleiro, mas ninguÃ©m conseguiu fechar uma sequÃªncia... Empatou! Quer tentar novamente?");
Database.addText("br.mapATreeTicTacToeYouLose", "Eu consegui trÃªs sÃ­mbolos em sequÃªncia! Quer tentar de novo?");
Database.addText("br.mapATreeTicTacToeTryAgainButton", "Sim, claro!");
Database.addText("br.mapATreeTicTacToeYouWin", "Nossa, nÃ£o esperava por essa. Mas nÃ£o dÃ¡ para negar: vocÃª conseguiu uma sequÃªncia de trÃªs. VocÃª venceu! Fique com essa chave. Ela abre uma das casas na aldeia ao sul da floresta.");
Database.addText("br.mapATreeTicTacToeAnymoreSweet", "Obrigado, esquilo! VocÃª tem mais algum desafio?");
Database.addText("br.mapATreeNoMoreChallenge", "Infelizmente, nÃ£o. Acabaram meus desafios... Mas foi legal brincar com vocÃª, muito obrigado!");
Database.addText("br.buttonExitQuestKeeping", "Sair da missÃ£o (e levar os itens com vocÃª)");
Database.addText("br.buttonExitQuestNoKeeping", "Sair da missÃ£o (e deixar os itens para trÃ¡s)");
Database.addText("br.buttonExitQuestNoKeepingBecauseLose", "Sair da missÃ£o (e deixar os itens para trÃ¡s, pois vocÃª fracassou)");
Database.addText("br.mapVillageLockedHouseComment", "Casa trancada");
Database.addText("br.mapVillageForgeIntroductionSpeech", "OlÃ¡! Eu sou um ferreiro. Tenho muitas armas e equipamentos para vender.");
Database.addText("br.mapVillageForgeIntroductionSpeechNoMoreToSell", "OlÃ¡! Eu sou um ferreiro. Infelizmente, nÃ£o tenho nada para ver. Volte mais tarde.");
Database.addText("br.mapVillageFifthHouseNoWeaponSpeech", "OlÃ¡. Meu porÃ£o estÃ¡ cheio de ratos, preciso me livrar deles... Se ao menos alguÃ©m com uma arma pudesse me ajudar...");
Database.addText("br.mapVillageFifthHouseWeaponSpeech", "Ei, vocÃª! Vejo que tem uma arma! Se matar os ratos do meu porÃ£o, posso lhe dar uma recompensa!");
Database.addText("br.mapVillageFifthHouseAgree", "EntÃ£o vamos");
Database.addText("br.mapVillageFifthHouseCellarDone", "Obrigado por se livrar dos ratos! Fique com esta baita recompensa: um mapa do mundo. Aposto que vocÃª precisa mais disso do que eu.");
Database.addText("br.mapVillageTheShopComment", "Loja");
Database.addText("br.mapBridgeComment", "Ponte");
Database.addText("br.mapFarmComment", "Fazenda de pirulitos");
Database.addText("br.mapCaveEntranceComment", "br.rada da caverna");
Database.addText("br.mapLighthouseComment", "Farol");
Database.addText("br.mapPierComment", "Cais");
Database.addText("br.mapTheHoleComment", "Buraco");
Database.addText("br.candyBoxRequestStatusBarUnlocked", "Solicitar um novo recurso ao desenvolvedor (30 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedCfg", "Solicitar outro recurso (5 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedSave", "Solicitar novamente (5 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedHealthBar", "Solicitar algo mais emocionante (5 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedMap", "Ãšltimo recurso! Tomara que esse valha a pena. (10 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedComment", "VocÃª desbloqueou a barra de status (acima)");
Database.addText("br.candyBoxRequestStatusBarUnlockedCfgComment1", "Agora vocÃª pode acessar a guia de configuraÃ§Ã£o.");
Database.addText("br.candyBoxRequestStatusBarUnlockedCfgComment2", "Se quiser, vocÃª pode trocar o idioma do jogo.");
Database.addText("br.candyBoxRequestStatusBarUnlockedSaveComment", "Uma guia selvagem aparece!");
Database.addText("br.candyBoxRequestStatusBarUnlockedHealthBarComment", "Fique com esses 100 pontos de vida. VocÃª vai precisar.");
Database.addText("br.cfgChooseLanguage", "Escolha o idioma:");
Database.addText("br.cfgInvertColors", "Inverter cores?");
Database.addText("br.gridItemMainMapName", "Mapa");
Database.addText("br.gridItemMainMapDescription", "Mapa do mundo");
Database.addText("br.gridItemPogoStickName", "Pula-pula");
Database.addText("br.gridItemPogoStickDescription", "Com ele, vocÃª poderÃ¡ pular nas missÃµes!");
Database.addText("br.gridItemTimeRingName", "Anel do Tempo");
Database.addText("br.gridItemTimeRingDescription", "Esse item concede uma nova habilidade nas missÃµes: desacelerar o tempo. Se as coisas estiverem rÃ¡pidas demais, use o Anel do Tempo!");
Database.addText("br.gridItemThirdHouseKeyName", "Chave da terceira casa");
Database.addText("br.gridItemThirdHouseKeyDescription", "Essa chave abre a terceira casa da aldeia.");
Database.addText("br.gridItemFeatherName", "Pena de ave do deserto");
Database.addText("br.gridItemFeatherDescription", "Essa pena mÃ¡gica permite que vocÃª pule mais alto com o pula-pula!");
Database.addText("br.gridItemFeatherDescriptionNoPogoStick", "Por algum motivo desconhecido, vocÃª acha que essa pena seria muito Ãºtil se vocÃª tivesse um pula-pula...");
Database.addText("br.gridItemSpongeName", "Esponja mÃ¡gica");
Database.addText("br.gridItemSpongeDescription", "Essa esponja mÃ¡gica permite que vocÃª se esprema como uma esponja, reduzindo o seu tamanho.");
Database.addText("br.gridItemFortressKeyName", "Chave da Fortaleza do Deserto");
Database.addText("br.gridItemFortressKeyDescription", "Essa chave garante acesso Ã  antiga fortaleza que fica ao norte do deserto. O que serÃ¡ que tem lÃ¡?");
Database.addText("br.gridItemHeartPendantName", "Pingente de coraÃ§Ã£o");
Database.addText("br.gridItemHeartPendantDescription", "Esse pingente aumentarÃ¡ seus pontos de vida enquanto vocÃª usÃ¡-lo no pescoÃ§o.");
Database.addText("br.gridItemHeartPlugName", "Berloque de coraÃ§Ã£o");
Database.addText("br.gridItemHeartPlugDescription", "Esse berloque feito de ferro, patas de aranha e \"fluido cardiolÃ³gico\" envasado no centro aumentarÃ¡ em 20 por cento seus pontos de vida!");
Database.addText("br.gridItemBeginnersGrimoireName", "GrimÃ³rio do Aprendiz");
Database.addText("br.gridItemBeginnersGrimoireDescription", "Esse grimÃ³rio contÃ©m trÃªs feitiÃ§os bem fÃ¡ceis de serem lanÃ§ados, ideais para iniciantes. 1- Chuva Ã¡cida (uma grande quantidade de gotas Ã¡cidas caem em seus inimigos). 2- Bola de fogo (lanÃ§a bola de fogo gigante contra seus inimigos). 3- Teleporte (transporta vocÃª para um local aleatÃ³rio).");
Database.addText("br.gridItemAdvancedGrimoireName", "GrimÃ³rio AvanÃ§ado");
Database.addText("br.gridItemAdvancedGrimoireDescription", "Esse grimÃ³rio contÃ©m dois feitiÃ§os. 1- Dissipar magia (anula todos os feitiÃ§os existentes em uma missÃ£o, tanto os seus quanto os dos inimigos). 2- Escudo de espinhos (cria um escudo de espinhos ao seu redor, causando dano aos inimigos que encostarem nele).");
Database.addText("br.gridItemBlackMagicGrimoireName", "GrimÃ³rio de Magia Negra");
Database.addText("br.gridItemBlackMagicGrimoireDescription", "VocÃª encontrou esse grimÃ³rio na caverna, em um canto de difÃ­cil acesso; e estava lÃ¡ por um motivo. Ele concede dois feitiÃ§os sombrios muito poderosos. O primeiro criarÃ¡ um muro gigante de obsidianas, ideal para impedir o avanÃ§o de inimigos. O segundo evocarÃ¡ uma horda de demÃ´nios que atacarÃ£o todos na missÃ£o, inclusive vocÃª. Tome cuidado com esse feitiÃ§o.");
Database.addText("br.gridItemUnicornHornName", "Chifre de unicÃ³rnio");
Database.addText("br.gridItemUnicornHornDescription", "Esse chifre mÃ¡gico pertencia a um unicÃ³rnio. Os poderes de cura dele serÃ£o de grande ajuda. Dizem que o unicÃ³rnio se chamava Charlie.");
Database.addText("br.gridItemXinopherydonClawName", "Garra de xinoferedonte");
Database.addText("br.gridItemXinopherydonClawDescription", "Essa garra pertenceu a um xinoferedonte, um animal prÃ©-histÃ³rico de duas cabeÃ§as que muitos acreditam ter existido. Ela dobrarÃ¡ o dano da sua arma.");
Database.addText("br.gridItemPitchforkName", "Forcado");
Database.addText("br.gridItemPitchforkDescription", "Esse forcado especial amacia o solo sem revirÃ¡-lo, preservando os ecossistemas subterrÃ¢neos. Ele triplica a produÃ§Ã£o da sua fazenda de pirulitos.");
Database.addText("br.gridItemShellPowderName", "PÃ³ de conchas");
Database.addText("br.gridItemShellPowderDescription", "Muitos fazendeiros usam pÃ³ de conchas para acelerar o crescimento dos pirulitos. Ele triplica a produÃ§Ã£o da sua fazenda de pirulitos.");
Database.addText("br.gridItemPName", "Pedra P");
Database.addText("br.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DÂ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSÂ°-J (`  /R`yM}  T$`` Â°+-|U(\\OL&Y_)T|");
Database.addText("br.gridItemLName", "Pedra L");
Database.addText("br.gridItemLDescription", "ED^S~\\^ W^LKCKo$OE ~$`W I~   $OÂ°   ^   Y} V  ^ \\  - }XuX  IFHS Z(V~\\  VPU NV OE    Â°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Â° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("br.gridItemAName", "Pedra A");
Database.addText("br.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITÂ°#{  Oa$ GM T{Q \"S A-\\ F KmÂ°& C #Â° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("br.gridItemYName", "Pedra Y");
Database.addText("br.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Â°-  AX Y ` Â° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Â°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EÂ° I &L- /    K");
Database.addText("br.gridItemRedSharkFinName", "Barbatana vermelha");
Database.addText("br.gridItemRedSharkFinDescription", "Essa barbatana mÃ¡gica aumenta consideravelmente o dano do feitiÃ§o Bola de fogo. Finalmente ele serÃ¡ Ãºtil para alguma coisa.");
Database.addText("br.gridItemGreenSharkFinName", "Barbatana verde");
Database.addText("br.gridItemGreenSharkFinDescription", "Essa barbatana mÃ¡gica leva o poder da natureza Ã  sua fazenda! Multiplica por 5 a produÃ§Ã£o de pirulitos.");
Database.addText("br.gridItemPurpleSharkFinName", "Barbatana roxa");
Database.addText("br.gridItemPurpleSharkFinDescription", "Essa barbatana mÃ¡gica concede um novo feitiÃ§o sombrio, que sÃ³ pode ser usado uma vez por missÃ£o. Tome muito cuidado!");
Database.addText("br.gridItemTalkingCandyName", "Doce falante");
Database.addText("br.gridItemTalkingCandyDescription", "Esse doce falante apareceu quando vocÃª colocou as quatro pedras no alto da torre do castelo. Talvez ele saiba como abrir a caixa de doces...");
Database.addText("br.inventorySpecialNothingEqItem", "Nada");
Database.addText("br.eqItemWeaponWoodenSwordName", "Espada de madeira");
Database.addText("br.eqItemWeaponWoodenSwordDescription", "Uma espada simples, feita de madeira");
Database.addText("br.eqItemWeaponIronAxeName", "Machado de ferro");
Database.addText("br.eqItemWeaponIronAxeDescription", "Um machado de ferro bem afiado. Mais eficiente que a espada de madeira.");
Database.addText("br.eqItemWeaponPolishedSilverSwordName", "Espada de prata polida");
Database.addText("br.eqItemWeaponPolishedSilverSwordDescription", "Uma espada poderosa, coberta de espinhos.");
Database.addText("br.eqItemWeaponTrollBludgeonName", "Tacape de troll");
Database.addText("br.eqItemWeaponTrollBludgeonDescription", "VocÃª tomou esse tacape do troll que protegia a ponte. Ele Ã© bem lento, mas esmaga inimigos que Ã© uma beleza.");
Database.addText("br.eqItemWeaponTribalSpearName", "LanÃ§a tribal");
Database.addText("br.eqItemWeaponTribalSpearDescription", "VocÃª encontrou essa lanÃ§a no corpo de um guerreiro morto, em um buraco no chÃ£o. Ã‰ um tanto complicado de se manusear, mas Ã© tudo uma questÃ£o de costume.");
Database.addText("br.eqItemWeaponSummoningTribalSpearName", "LanÃ§a tribal da evocaÃ§Ã£o");
Database.addText("br.eqItemWeaponSummoningTribalSpearDescription", "Essa lanÃ§a mÃ¡gica, alÃ©m de ser ligeiramente mais poderosa que a lanÃ§a tribal normal, evocarÃ¡ frequentemente guerreiros tribais que ajudarÃ£o vocÃª nas missÃµes.");
Database.addText("br.eqItemWeaponMonkeyWizardStaffName", "Cajado do macaco mago");
Database.addText("br.eqItemWeaponMonkeyWizardStaffDescription", "Esse cajado pertenceu ao macaco mago que estava pelado na caverna. Ele lanÃ§a frequentemente feitiÃ§os contra seus inimigos.");
Database.addText("br.eqItemWeaponEnchantedMonkeyWizardStaffName", "Cajado do macaco mago (encantado)");
Database.addText("br.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Esse cajado Ã© mais veloz que a versÃ£o normal, alÃ©m de lanÃ§ar muito mais feitiÃ§os.");
Database.addText("br.eqItemWeaponGiantSpoonName", "Colher gigante");
Database.addText("br.eqItemWeaponGiantSpoonDescription", "Essa colher gigante estava em uma chaleira gigante na Fortaleza do Deserto. Se algum dia ela foi usada como uma colher, entÃ£o essa pessoa devia ser bem grande. Tomara que vocÃª nÃ£o esbarre com ela.");
Database.addText("br.eqItemWeaponGiantSpoonOfDoomName", "Colher gigante da perdiÃ§Ã£o");
Database.addText("br.eqItemWeaponGiantSpoonOfDoomDescription", "Essa colher gigante Ã© ainda mais poderosa que as colheres normais encontradas em chaleiras gigantes, mas Ã© bem lenta.");
Database.addText("br.eqItemWeaponScytheName", "Foice");
Database.addText("br.eqItemWeaponScytheDescription", "Dizem que essa foice pertenceu Ã  prÃ³pria Morte. Ela Ã© extremamente rÃ¡pida.");
Database.addText("br.eqItemHatMerchantHatName", "ChapÃ©u do vendedor");
Database.addText("br.eqItemHatMerchantHatDescription", "VocÃª comprou esse chapÃ©u do vendedor de doces. Sabia que ele ama doces? Os doces encontrados em missÃµes serÃ£o multiplicados por 7!");
Database.addText("br.eqItemHatSorceressHatName", "ChapÃ©u da feiticeira");
Database.addText("br.eqItemHatSorceressHatDescription", "VocÃª comprou esse chapÃ©u da feiticeira. Ele aprimora os efeitos dos seus feitiÃ§os e das suas poÃ§Ãµes.");
Database.addText("br.eqItemHatOctopusKingCrownName", "Coroa do Rei Polvo");
Database.addText("br.eqItemHatOctopusKingCrownDescription", "VocÃª se sente muito mais confiante com essa coroa. Ela nÃ£o dÃ¡ nenhuma vantagem nas missÃµes, mas o importante Ã© ter confianÃ§a!");
Database.addText("br.eqItemHatOctopusKingCrownWithJaspersName", "Coroa de jaspes do Rei Polvo");
Database.addText("br.eqItemHatOctopusKingCrownWithJaspersDescription", "Essa coroa encantada Ã© feita de ouro e jaspes vermelhos. Nas missÃµes, ela lanÃ§arÃ¡ poderosas bolas de fogo para todos os cantos. Ah, e ela brilha muito!");
Database.addText("br.eqItemHatOctopusKingCrownWithObsidianName", "Coroa de obsidianas do Rei Polvo");
Database.addText("br.eqItemHatOctopusKingCrownWithObsidianDescription", "Essa coroa encantada Ã© feita de ouro e obsidianas. Ã‰ linda! Nas missÃµes, ela evocarÃ¡ esporadicamente um Rei Polvo para lutar ao seu lado. TentÃ¡culos nunca sÃ£o demais!");
Database.addText("br.eqItemGlovesLeatherGlovesName", "Luvas de couro");
Database.addText("br.eqItemGlovesLeatherGlovesDescription", "Essas luvas nÃ£o fazem nada, mas sÃ£o macias e confortÃ¡veis!");
Database.addText("br.eqItemGlovesRedEnchantedGlovesName", "Luvas vermelhas encantadas");
Database.addText("br.eqItemGlovesRedEnchantedGlovesDescription", "Essas luvas emitem um suave brilho vermelho quando estÃ¡ escuro. Nas missÃµes, elas lanÃ§am pequenas bolas de fogo contra os inimigos. NÃ£o hÃ¡ como negar que isso Ã© bem Ãºtil.");
Database.addText("br.eqItemGlovesPinkEnchantedGlovesName", "Luvas rosa encantadas");
Database.addText("br.eqItemGlovesPinkEnchantedGlovesDescription", "Essas luvas deixam uma marca rosa em tudo que tocam. Nas missÃµes, elas curarÃ£o vocÃª continuamente.");
Database.addText("br.eqItemBootsRocketBootsName", "Botas-foguete");
Database.addText("br.eqItemBootsRocketBootsDescription", "Essas incrÃ­veis botas permitem que vocÃª pule no ar, ou seja, vocÃª pode praticamente voar!");
Database.addText("br.eqItemBootsLeatherBootsName", "Botas de couro");
Database.addText("br.eqItemBootsLeatherBootsDescription", "Botas simples de couro. Nada demais.");
Database.addText("br.eqItemBootsBootsOfIntrospectionName", "Botas da introspecÃ§Ã£o");
Database.addText("br.eqItemBootsBootsOfIntrospectionDescription", "Tire um tempo para respirar e se acalmar. Com essas botas, vocÃª nunca andarÃ¡ enquanto estiver com os pÃ©s no chÃ£o.");
Database.addText("br.eqItemBodyArmoursLightweightBodyArmourName", "Armadura leve");
Database.addText("br.eqItemBodyArmoursLightweightBodyArmourDescription", "Essa armadura oferece um pouco de proteÃ§Ã£o. VocÃª ficarÃ¡ mais resistente aos ataques dos inimigos.");
Database.addText("br.eqItemBodyArmoursKnightBodyArmourName", "Armadura de cavaleiro");
Database.addText("br.eqItemBodyArmoursKnightBodyArmourDescription", "Essa pesada armadura oferece mais proteÃ§Ã£o. VocÃª ficarÃ¡ muito resistente aos ataques dos inimigos.");
Database.addText("br.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Armadura de cavaleiro encantada");
Database.addText("br.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Essa armadura Ã© muito especial. VocÃª ficarÃ¡ MUITO mais resistente aos ataques inimigos, mas o dano da sua arma cairÃ¡ pela metade.");
Database.addText("br.mapVillageForgeBuyWoodenSwordButton", "Comprar espada de madeira (150 doces)");
Database.addText("br.mapVillageForgeBuyWoodenSwordSpeech", "Obrigado! Essa espada Ã© um tanto fraca, mas Ã© melhor do que nada.");
Database.addText("br.mapVillageForgeBuyIronAxeButton", "Comprar machado de ferro (400 doces)");
Database.addText("br.mapVillageForgeBuyIronAxeSpeech", "Espero que goste do machado. Acabei de afiÃ¡-lo para vocÃª.");
Database.addText("br.mapVillageForgeBuyPolishedSilverSwordButton", "Comprar espada de prata polida (2.000 doces)");
Database.addText("br.mapVillageForgeBuyPolishedSilverSwordSpeech", "Como demorei para criar essa espada. Garanto que ela vale cada doce gasto.");
Database.addText("br.mapVillageForgeBuyLightweightBodyArmourButton", "Comprar armadura leve (15.000 doces)");
Database.addText("br.mapVillageForgeBuyLightweightBodyArmourSpeech", "Essa armadura vai proteger vocÃª dos ataques inimigos.");
Database.addText("br.mapVillageForgeBuyScytheButton", "Comprar foice (5.000.000 doces)");
Database.addText("br.mapVillageForgeBuyScytheSpeech", "Demorei meses para terminar essa foice. Ã‰ uma verdadeira obra de arte. Aposto que vocÃª nunca encontrarÃ¡ arma mais rÃ¡pida que essa. Boa sorte!");
Database.addText("br.wishingWellThrowFirstCandyButton", "Jogar um doce no poÃ§o");
Database.addText("br.wishingWellCandyIntroductionSpeech", "OlÃ¡, viajante! Sou o PoÃ§o dos Desejos. Concederei desejos em troca de guloseimas! Jogue doces dentro de mim para que eu cure seus ferimentos.");
Database.addText("br.wishingWellThrewCandiesSpeech", "Seus ferimentos foram curados!");
Database.addText("br.wishingWellNoWoundSpeech", "VocÃª nÃ£o estÃ¡ ferido!");
Database.addText("br.wishingWellThrowFirstLollipopButton", "Jogar um pirulito no poÃ§o");
Database.addText("br.wishingWellLollipopIntroductionSpeech", "OlÃ¡, viajante! Sou o PoÃ§o dos Desejos. Concederei desejos em troca de guloseimas! Jogue pirulitos dentro de mim para que eu os converta em doces.");
Database.addText("br.wishingWellThrewLollipopsSpeech", "Seus pirulitos sÃ£o transformados em doces! Dois pirulitos por um doce.");
Database.addText("br.wishingWellThrowChocolateBarButton", "Jogar uma barra de chocolate no poÃ§o");
Database.addText("br.wishingWellChocolateBarIntroductionSpeech", "OlÃ¡, viajante! Sou o PoÃ§o dos Desejos. Concederei desejos em troca de guloseimas! Eu amo, AMO chocolate. Para cada chocolate que vocÃª jogar em mim, incluindo esse, eu encantarei um item seu.");
Database.addText("br.wishingWellThrewChocolateBarSpeech", "Qual objeto vocÃª deseja encantar?");
Database.addText("br.wishingWellThrowPainAuChocolatButton", "Jogar um pÃ£o de chocolate no poÃ§o");
Database.addText("br.wishingWellPainAuChocolatIntroductionSpeech", "OlÃ¡, viajante! Sou o PoÃ§o dos Desejos. Concederei desejos em troca de guloseimas! Para cada pÃ£o de chocolate que vocÃª jogar, eu lhe darei um dom especial. Pense bem antes de escolher!");
Database.addText("br.wishingWellThrewPainAuChocolatSpeech", "Obrigado pelo pÃ£o de chocolate! Escolha o seu dom.");
Database.addText("br.wishingWellChooseGift", "Escolha seu dom!");
Database.addText("br.wishingWellChooseGiftButton", "Escolher");
Database.addText("br.wishingWellGiftDoneSpeech", "Pronto! VocÃª ganhou um dom. Ele serÃ¡ exibido nas estatÃ­sticas do inventÃ¡rio.");
Database.addText("br.wishingWellNoPossibleEnchantment", "Nenhum encantamento disponÃ­vel");
Database.addText("br.wishingWellChooseEnchantment", "Escolha o encantamento");
Database.addText("br.wishingWellEnchantButton", "Encantar");
Database.addText("br.wishingWellEnchantmentDoneSpeech", "Prontinho! O item foi encantado.");
Database.addText("br.pierLighthouseButton", "Ir de barco ao farol");
Database.addText("br.pierTheSeaButton", "Pular no mar");
Database.addText("br.lonelyHouseOpenBox", "Abrir a caixa");
Database.addText("br.lonelyHouseShakeBox", "Sacudir a caixa");
Database.addText("br.lonelyHouseBreakLock", "Quebrar a fechadura");
Database.addText("br.lonelyHouseKickBox", "Chutar a caixa");
Database.addText("br.lonelyHouseAskTheBoxToOpenItself", "Pedir Ã  caixa para que se abra");
Database.addText("br.lonelyHouseLureTheBoxWithACandy", "Oferecer um doce Ã  caixa");
Database.addText("br.lonelyHouseTakeTheBox", "Levar a caixa embora. VocÃª provavelmente precisarÃ¡ de uma chave.");
Database.addText("br.lonelyHouseOpenBoxResult", "A caixa estÃ¡ trancada.");
Database.addText("br.lonelyHouseShakeBoxResult", "Nada acontece.");
Database.addText("br.lonelyHouseBreakLockResult", "A fechadura Ã© forte.");
Database.addText("br.lonelyHouseKickBoxResult", "VocÃª machuca o pÃ©, mas nada acontece.");
Database.addText("br.lonelyHouseAskTheBoxToOpenItselfResult", "...Ã© uma caixa, vocÃª sabe disso, nÃ£o Ã©?");
Database.addText("br.lonelyHouseLureTheBoxWithACandyResult", "A caixa parece nÃ£o se importar.");
Database.addText("br.lonelyHouseTakeTheBoxResult", "Deve ter algo de interessante dentro da caixa.");
Database.addText("br.lollipopFarmConstructMill", "Construir um moinho (10.000 pirulitos)");
Database.addText("br.lollipopFarmFeedMill", "Abastecer o moinho");
Database.addText("br.lollipopFarmCurrentCandiesProduction", "ProduÃ§Ã£o atual de doces");
Database.addText("br.lollipopFarmDigPond", "Cavar um lago (100.000 pirulitos)");
Database.addText("br.lollipopFarmBuyLolligator", "Comprar um crocolito (1.200 doces)");
Database.addText("br.lollipopFarmLolligatorsConversionText", "ConversÃ£o doces -> pirulitos ativada");
Database.addText("br.lighthouseAskButton", "Perguntar");
Database.addText("br.lighthouseQuestionWho", "Quem Ã© vocÃª?");
Database.addText("br.lighthouseQuestionWhoSpeech", "Sou um ciclope muito velho.");
Database.addText("br.lighthouseQuestionWhat", "O que vocÃª faz aqui?");
Database.addText("br.lighthouseQuestionWhatSpeech", "Passo os dias aqui, esperando algum barco chegar. JÃ¡ faz tempo desde o Ãºltimo barco... Mas preciso ficar aqui, olhando o horizonte... Talvez mais algum chegue.");
Database.addText("br.lighthouseQuestionWhyEatCandies", "Por que eu comeria doces?");
Database.addText("br.lighthouseQuestionWhyEatCandiesSpeech", "Porque eles fazem bem para a saÃºde!");
Database.addText("br.lighthouseQuestionCandyBox", "O que Ã© uma caixa de doces?");
Database.addText("br.lighthouseQuestionCandyBoxSpeech", "Ã‰ uma caixa muito antiga... dizem que ela guarda todos os doces do mundo. Segundo a lenda, quem abrir a caixa terÃ¡ tantos doces que tudo lhe serÃ¡ possÃ­vel.");
Database.addText("br.lighthouseQuestionDragon", "O dragÃ£o me disse para vir aqui em busca de doces.");
Database.addText("br.lighthouseQuestionDragonSpeech", "Ah, bem... Eu nÃ£o posso lhe dar doces diretamente, mas posso lhe dar algo essencial para se conseguir MUITOS doces. Mas terei de testÃ¡-lo antes disso. O que eu guardo nÃ£o pode ser dado a qualquer um. Solucione esse quebra-cabeÃ§a e ele serÃ¡ seu.");
Database.addText("br.lighthouseFoundStone", "ParabÃ©ns! VocÃª passou no teste e encontrou a pedra. Ela Ã© muito preciosa, mas somente se vocÃª tiver outras trÃªs pedras como essa. Boa sorte!");
Database.addText("br.lighthouseFoundStoneAgain", "Bom trabalho, vocÃª solucionou o quebra-cabeÃ§a de novo. Gostou, foi?");
Database.addText("br.saveLocalSaveTitle", "Salvar no navegador");
Database.addText("br.saveLocalSaveWhy", "Escolha salvamento local se quiser continuar jogando no dispositivo e navegador atuais.");
Database.addText("br.saveLocalSaveWarning0", "O navegador nÃ£o Ã© compatÃ­vel com HTML5.");
Database.addText("br.saveLocalSaveWarning1", "Atualize o navegador para usar o recurso de salvamento local.");
Database.addText("br.saveLocalSaveChooseSlot", "Escolha um lugar para salvar:");
Database.addText("br.saveLocalSaveAutosaveEnabled", "Salvamento automÃ¡tico ativado");
Database.addText("br.saveLocalSaveChooseWhatToDo", "Escolha o que fazer:");
Database.addText("br.saveLocalSaveSaveButton", "Salvar");
Database.addText("br.saveLocalSaveAutosaveButton", "Salvar a cada 10 minutos");
Database.addText("br.saveLocalSaveDisableAutosaveButton", "Desativar salvamento automÃ¡tico");
Database.addText("br.saveFileSaveTitle", "Salvar em texto");
Database.addText("br.saveFileSaveWhy0", "Escolha salvar em texto se:");
Database.addText("br.saveFileSaveWhy1", "quiser continuar jogando em outro dispositivo ou navegador.");
Database.addText("br.saveFileSaveWhy2", "quiser compartilhar seu jogo salvo com alguÃ©m.");
Database.addText("br.saveFileSaveWhy3", "por algum motivo vocÃª quiser apagar o cache do navegador");
Database.addText("br.saveFileSaveWhy4", "(isso apagarÃ¡ jogos salvos localmente)");
Database.addText("br.saveFileSaveButton", "Obter jogo atual em texto");
Database.addText("br.saveFileSaveWarning", "Agora copie e cole esse texto em algum lugar (ex.: um arquivo)");
Database.addText("br.saveLocalLoadTitle", "Carregar do navegador");
Database.addText("br.saveLocalLoadYouCan", "Ã‰ possÃ­vel carregar um jogo salvo localmente usando um dos links:");
Database.addText("br.saveLocalLoadThanksTo", "GraÃ§as Ã  magia do HTML5, Ã© possÃ­vel usar esses links atÃ© mesmo off-line.");
Database.addText("br.saveFileLoadTitle", "Carregar de texto");
Database.addText("br.saveFileLoadPaste", "Cole o texto do jogo salvo e clique em \"Carregar\".");
Database.addText("br.saveFileLoadButton", "Carregar");
Database.addText("br.mountainsText0", "VocÃª avistou algo nas montanhas!");
Database.addText("br.mountainsText1", "Parece algo interessante. Talvez seja Ãºtil.");
Database.addText("br.mountainsTextButton", "Escalar as montanhas atÃ© o troÃ§o");
Database.addText("br.mountainsTextAfter", "VocÃª achou um pula-pula! Ele foi adicionado ao seu inventÃ¡rio.");
Database.addText("br.secondHouseIntroSpeech", "OlÃ¡, sou o vendedor de doces. Eu faÃ§o tudo por doces. Como posso ajudÃ¡-lo?");
Database.addText("br.secondHouseLollipop1Speech", "Esse pirulito de limÃ£o Ã© o meu favorito! Ele custa 60 doces, mas vale a pena.");
Database.addText("br.secondHouseLollipop2Speech", "Esse pirulito de morango Ã© uma delÃ­cia! Eu adoro a cor dele. SÃ³ custa 60 doces!");
Database.addText("br.secondHouseLollipop3Speech", "Aposto que vocÃª nunca experimentou um pirulito de abÃ³bora! 60 doces e serÃ¡ todo seu.");
Database.addText("br.secondHouseLollipopButtonText", "Comprar esse pirulito (60 doces)");
Database.addText("br.secondHouseMerchantHatSpeech", "Eu atÃ© poderia vender meu chapÃ©u, mas gosto muito dele. A nÃ£o ser que seja por... 1 milhÃ£o de doces. O que me diz? Uma pechincha, nÃ£o Ã© mesmo?");
Database.addText("br.secondHouseMerchantHatButtonText", "Comprar o chapÃ©u do vendedor (1.000.000 doces)");
Database.addText("br.secondHouseTimeRingSpeech", "Esse Ã© o Anel do Tempo. Com ele, vocÃª poderÃ¡ desacelerar o tempo quando estiver em apuros.");
Database.addText("br.secondHouseTimeRingButtonText", "Comprar o Anel do Tempo (500 doces)");
Database.addText("br.secondHouseLeatherGlovesSpeech", "Essas luvas sÃ£o feitas de couro de camelo; altÃ­ssima qualidade. Tenho um monte delas no estoque, por isso sÃ£o tÃ£o baratas... apenas 300 doces!");
Database.addText("br.secondHouseLeatherBootsButtonText", "Comprar um par de botas de couro (300 doces)");
Database.addText("br.secondHouseLeatherBootsSpeech", "Essas botas sÃ£o do mais puro couro de camelo. Seus pÃ©s ficarÃ£o quentinhos.");
Database.addText("br.secondHouseLeatherGlovesButtonText", "Comprar um par de luvas de couro (300 doces)");
Database.addText("br.secondHouseChocolateBarSpeech", "Isso Ã© uma barra de chocolate. NÃ£o sei para que serve, mas Ã© bem rara... e cara! Por 800 doces, ela Ã© sua.");
Database.addText("br.secondHouseChocolateBarButtonText", "Comprar a barra de chocolate (800 doces)");
Database.addText("br.outsideTheHoleButton", "Pular nesse buraco grande no chÃ£o");
Database.addText("br.theCaveExitText0", "VocÃª finalmente chegou Ã  saÃ­da da caverna.");
Database.addText("br.theCaveExitText1", "VocÃª vÃª uma enorme floresta lÃ¡ fora.");
Database.addText("br.theCaveExitButtonText", "Sair da caverna");
Database.addText("br.theCaveFirstSentenceWentStraight", "VocÃª seguiu reto.");
Database.addText("br.theCaveFirstSentenceWentLeft", "VocÃª virou Ã  esquerda.");
Database.addText("br.theCaveFirstSentenceWentRight", "VocÃª virou Ã  direita.");
Database.addText("br.theCaveFirstSentenceYouAre", "VocÃª estÃ¡ em uma caverna. HÃ¡ trÃªs caminho Ã  sua frente.");
Database.addText("br.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "VocÃª vÃª algo estranho no chÃ£o Ã  sua frente.");
Database.addText("br.theCavePattern_ChocolateBarNowSeeChocolateBar", "VocÃª vÃª uma barra de chocolate Ã  sua frente.");
Database.addText("br.theCavePattern_TreasureMapSentence", "VocÃª vÃª pedrinhas estranhamente dispostas no chÃ£o.");
Database.addText("br.theCavePattern_MonkeyWizardSentence", "VocÃª se depara com um macaco mago pelado.");
Database.addText("br.theCavePattern_MonkeyWizardButton", "DesafiÃ¡-lo");
Database.addText("br.theCavePattern_OctopusKingSentence", "VocÃª se depara com o Rei Polvo. Ele parece ser durÃ£o.");
Database.addText("br.theCavePattern_OctopusKingButton", "DesafiÃ¡-lo");
Database.addText("br.fortressInsideText0", "VocÃª estÃ¡ dentro da Fortaleza do Deserto.");
Database.addText("br.fortressInsideText1", "HÃ¡ trÃªs portas Ã  sua frente.");
Database.addText("br.fortressInsideText2", "Cada uma delas leva a uma sala com um tesouro no fim.");
Database.addText("br.fortressInsideEnterRoom1", "br.rar na primeira sala");
Database.addText("br.fortressInsideEnterRoom2", "br.rar na segunda sala");
Database.addText("br.fortressInsideEnterRoom3", "br.rar na terceira sala");
Database.addText("br.treasureButtonDig", "Cavar");
Database.addText("br.treasureButtonYouFound", "VocÃª encontrou trÃªs barras de chocolate!");
Database.addText("br.sorceressHutHello", "OlÃ¡, sou a feiticeira. Posso lhe ensinar algumas coisinhas sobre magia. TambÃ©m posso lhe dar coisas interessantes ou criar feitiÃ§os para vocÃª. Mas tudo tem um preÃ§o... pirulitos! Muitos pirulitos!");
Database.addText("br.sorceressHutClickedGrimoire", "Esse Ã© um grimÃ³rio para aprendizes. Com ele, vocÃª poderÃ¡ lanÃ§ar feitiÃ§os simples porÃ©m Ãºteis nas missÃµes. VocÃª vai precisar! Apenas 5.000 pirulitos.");
Database.addText("br.sorceressHutBuyGrimoireButton", "Comprar esse grimÃ³rio (5.000 pirulitos)");
Database.addText("br.sorceressHutBuyGrimoireSpeech", "Obrigado pela compra! VocÃª poderÃ¡ lanÃ§ar trÃªs feitiÃ§os com esse grimÃ³rio. Boa sorte!");
Database.addText("br.sorceressHutClickedGrimoire2", "Esse Ã© um grimÃ³rio avanÃ§ado. Com ele, vocÃª poderÃ¡ lanÃ§ar dois feitiÃ§os mais poderosos. Eu mesmo os escrevi; nÃ£o foi nada fÃ¡cil. Acho que 20.000 pirulitos Ã© um bom preÃ§o.");
Database.addText("br.sorceressHutBuyGrimoire2Button", "Comprar esse grimÃ³rio (20.000 pirulitos)");
Database.addText("br.sorceressHutBuyGrimoire2Speech", "Obrigado pela compra! VocÃª poderÃ¡ lanÃ§ar dois feitiÃ§os com esse grimÃ³rio. Use-os com sabedoria!");
Database.addText("br.sorceressHutClickedCauldron", "Esse Ã© o meu caldeirÃ£o. Ã‰ nele onde preparo as poÃ§Ãµes mÃ¡gicas. Posso atÃ© vendÃª-lo, mas ele Ã© muito valioso... que tal 100.000 pirulitos?");
Database.addText("br.sorceressHutBuyCauldronButton", "Comprar o caldeirÃ£o (100.000 pirulitos)");
Database.addText("br.sorceressHutBuyCauldronSpeech", "Muito obrigada! 100.000 pirulitos para mim! Fique com este livro de receitas. Ele serÃ¡ muito Ãºtil.");
Database.addText("br.sorceressHutClickedHat", "Belo chapÃ©u, nÃ£o acha? Mas nÃ£o posso vendÃª-lo; ele Ã© muuuito valioso. Ã‰ sÃ©rio, nÃ£o insista. NÃ£o. NÃ£o, nÃ£o posso fazer isso. Ah, tÃ¡... Talvez eu o troque por 1.000.000.000 de pirulitos. VocÃª nÃ£o vai ter como me pagar esse valor mesmo.");
Database.addText("br.sorceressHutBuyHatButton", "Comprar o chapÃ©u (1.000.000.000 pirulitos)");
Database.addText("br.sorceressHutBuyHatSpeech", "Um bilhÃ£o de pirulitos para mim! NÃ£o tenho mais o chapÃ©u... mas um bilhÃ£o de pirulitos, puxa vida! ... Valeu a pena.");
Database.addText("br.cauldronPreviousPageButton", "PÃ¡gina anterior");
Database.addText("br.cauldronNextPageButton", "PrÃ³xima pÃ¡gina");
Database.addText("br.cauldronWhatYouWantToPut", "O que deseja colocar no caldeirÃ£o?");
Database.addText("br.cauldronWhatIsIn", "No caldeirÃ£o hÃ¡:");
Database.addText("br.cauldronWhatYouCanDo", "O que deseja fazer?");
Database.addText("br.castleBigRoomComment", "Sala grande");
Database.addText("br.castleARoomComment", "Sala");
Database.addText("br.castleADarkRoomComment", "Sala escura");
Database.addText("br.castleCastleEntranceComment", "PortÃµes do castelo");
Database.addText("br.castleTowerEntranceComment", "br.rada da torre");
Database.addText("br.castleNougatMonsterComment", "Atacar o monstro de torrone gigante");
Database.addText("br.castleGuardsComment", "Atacar os guardas");
Database.addText("br.castleStairsComment", "Escadaria");
Database.addText("br.buttonBackToTheCastle", "Voltar ao castelo");
Database.addText("br.castleBigRoomHovenSpeechSad", "OlÃ¡! Sou um velho forno Ã  lenha. Eu costumava assar toneladas de pÃ£es, mas nunca mais fui usado. SerÃ¡... SerÃ¡ que vocÃª pode me ajudar? SÃ³ preciso de algumas das suas guloseimas! VocÃª nÃ£o vai se arrepender! Eu juro.");
Database.addText("br.castleBigRoomHovenNotEnough", "Ah... VocÃª nÃ£o tem guloseimas suficientes. NÃ£o posso fazer nada, sou inÃºtil. Um forno totalmente imprestÃ¡vel, Ã© isso o que sou.");
Database.addText("br.castleBigRoomHovenSpeechMadePainAuChocolat", "Oba! Muito obrigado! Usei 100 doces e uma barra de chocolate e preparei... um pÃ£o de chocolate! Ã‰ minha receita predileta. Espero que vocÃª goste!");
Database.addText("br.castleBigRoomHovenSpeechHappy", "Ei! Se quiser cozinhar mais, Ã© sÃ³ falar comigo! SerÃ¡ um prazer ajudar.");
Database.addText("br.castleBigRoomHovenSpeechHappyNotEnough", "Ah, vocÃª nÃ£o tem guloseimas suficientes. Eu preciso de 100 doces e uma barra de chocolate. Volte quando tiver tudo.");
Database.addText("br.castleBigRoomHovenLetHovenTakeButton", "Deixar que o forno pegue tudo de que precisar.");
Database.addText("br.castleBigRoomHovenThanks", "Obrigado, forno!");
Database.addText("br.dragonStopTickling", "Ã”, vocÃª aÃ­! Pare de fazer cÃ³cegas, por favor.");
Database.addText("br.dragonStopTicklingButton", "HÃ£, erh... Desculpe-me. Achei que eu devia derrotar vocÃª.");
Database.addText("br.dragonTalking", "Eu sou um dragÃ£o e esse Ã© meu castelo. VocÃª deve ser muito corajoso por ter entrado aqui... SerÃ¡ um prazer ajudar alguÃ©m tÃ£o destemido. O que vocÃª mais deseja?");
Database.addText("br.dragonTalkingChallengeButton", "Desafio");
Database.addText("br.dragonTalkingFameButton", "Fama");
Database.addText("br.dragonTalkingCandiesButton", "Doces");
Database.addText("br.dragonTalkingChallengeSpeech", "Ah, entÃ£o gosta de desafios? O que me diz de dar um pulinho no inferno? Dizem que SatÃ£ Ã© um desafio e tanto. Suba nas minhas costas que eu levarei vocÃª atÃ© lÃ¡.");
Database.addText("br.dragonTalkingFameSpeech", "O melhor jeito de se tornar famoso Ã© desafiar o prÃ³prio criador do jogo. Eu sei onde ele mora; posso levar vocÃª atÃ© lÃ¡. Mas nÃ£o serÃ¡ uma luta fÃ¡cil.");
Database.addText("br.dragonTalkingCandiesSpeech", "No fim, todos queremos doces, nÃ£o Ã© mesmo? Tenho um amigo que pode ajudar. Ã‰ fÃ¡cil reconhecÃª-lo... Ele sÃ³ tem um olho. Diga a ele que vocÃª me conhece.");
Database.addText("br.dragonTalkingChallengeAnswer", "Vamos entÃ£o!");
Database.addText("br.dragonTalkingFameAnswer", "Estou pronto.");
Database.addText("br.dragonTalkingCandiesAnswer", "EstÃ¡ bem, obrigado!");
Database.addText("br.buttonBackToCastle", "Voltar ao castelo");
Database.addText("br.talkingCandySpeechNoBox", "Ei! Eu sou o doce falante. VocÃª quase terminou o jogo, sÃ³ falta encontrar a caixa de doces. Ela estÃ¡ em uma casa perto da aldeia. Ã‰ a Ãºltima parte!");
Database.addText("br.talkingCandySpeech1", "Oi! Eu sou o doce falante. ParabÃ©ns, vocÃª terminou o jogo! Abrirei a caixa de doces para vocÃª como recompensa. Posso?");
Database.addText("br.talkingCandySpeech2", "Prontinho! VocÃª jÃ¡ pode entrar. Espero que tenha gostado do jogo. :)");
Database.addText("br.talkingCandyButton", "Sim!!");
Database.addText("br.lighthousePuzzleResetButton", "RecomeÃ§ar");
Database.addText("se.mapVillageComment", "The Village");
Database.addText("se.mapFortressComment", "Den Ã¶kenfortet");
Database.addText("se.mapATreeComment", "Ett trÃ¤d");
Database.addText("se.mapTheDesertComment", "Ã¶knen");
Database.addText("se.mapWishingWellComment", "The Wishing Well");
Database.addText("se.mapLonelyHouseComment", "Ett ensamt hus");
Database.addText("se.mapForestComment", "skogen");
Database.addText("se.mapCastleEntranceComment", "Slottet ingÃ¥ng");
Database.addText("se.mapCastleComment", "slottet");
Database.addText("se.mapDragonComment", "draken");
Database.addText("se.candyBoxEatCandiesButton", "Ã„t alla godis");
Database.addText("se.candyBoxThrowCandiesButton", "Kasta 10 godisar pÃ¥ marken");
Database.addText("se.mapVillageAHouseComment", "Ett hus");
Database.addText("se.mapVillageForgeComment", "smedjan");
Database.addText("se.buttonBackToTheMap", "Tillbaka till kartan");
Database.addText("se.mapSorceressHutComment", "Sorceress ' hut");
Database.addText("se.buttonBackToTheVillage", "Tillbaka till byn");
Database.addText("se.mapATreeIntroductionSpeech", "Hej , jag Ã¤r ekorren . Jag kan ge dig godis , och massor av saker . Jag vet hur mycket du Ã¤lskar godis . Men jag kÃ¤nner mig ensam i denna skog .");
Database.addText("se.mapATreeIntroductionButton", "Hur kan jag hjÃ¤lpa dig ?");
Database.addText("se.mapATreeFirstQuestion", "Jag kommer att stÃ¤lla frÃ¥gor . Om du svarar rÃ¤tt , kommer de sÃ¶taste godis bli din ! FÃ¶rst en : tror du verkligen Ã¤lskar godis ? ( svar pÃ¥ engelska)");
Database.addText("se.mapATreeSecondQuestion", "Det stÃ¤mmer ! HÃ¤r Ã¤r 20 godis fÃ¶r dig . Nu slutfÃ¶ra denna sekvens av bokstÃ¤ver och du fÃ¥r en ny belÃ¶ning : S , E , I , D , N , A , ?");
Database.addText("se.mapATreeThirdQuestion", "Godis ! HÃ¤r finns 100 godis fÃ¶r dig . NÃ¤sta frÃ¥ga : Hur mÃ¥nga karameller tÃ¤nker candiest personen i vÃ¤rlden besitter ?");
Database.addText("se.mapATreeFourthQuestion", "HÃ¤r finns 500 godis fÃ¶r dig ! NÃ¤sta belÃ¶ning bÃ¶r vara Ã¤nnu mer intressant ... HÃ¤r Ã¤r gÃ¥tan : I en gammal skog vÃ¤xer ett mycket gammalt trÃ¤d , dÃ¤r bor de mest intelligenta djur i denna vÃ¤rld . Det Ã¤r sagt att detta trÃ¤d har 60 rotar , 360 filialer och 2160 blad . Hur mÃ¥nga mÃ¤rken kan du hitta pÃ¥ stammen ?");
Database.addText("se.mapATreeFifthQuestion", "Grattis ! Jag pratade om mitt trÃ¤d , faktiskt. HÃ¤r finns 3 klubbor fÃ¶r dig . Dra nytta av dem ! NÃ¤sta gÃ¥ta , lyssna noga : Under en fullmÃ¥ne , jag kastar en gul hatt i rÃ¶da havet . Vad hÃ¤nder med den gula hatten ?");
Database.addText("se.mapATreeTicTacToeIntro", "VÃ¤l besvaras ! Det var inte sÃ¥ svÃ¥rt . HÃ¤r Ã¤r tre chokladkakor fÃ¶r dig ! FÃ¶r nÃ¤sta belÃ¶ning , ska vi Ã¤ndra pÃ¥ reglerna lite . Du mÃ¥ste spela ett spel med mig ! Ã„r du redo ?");
Database.addText("se.mapATreeTicTacToeIntroButton", "Visst Ã¤r jag !");
Database.addText("se.mapATreeTicTacToeLetsPlay", "Spelet Ã¤r Tic - Tac - Toe . Vi spelar pÃ¥ en 3 av 3 spelplanen . Du kommer att anvÃ¤nda X- tecknet nÃ¤r jag kommer att anvÃ¤nda O skylten . Vi placerar vÃ¥ra skyltar alternativt och mÃ¥let Ã¤r att fÃ¥ tre tecken i rad . Jag ska lÃ¥ta dig gÃ¥ fÃ¶rst !");
Database.addText("se.mapATreeTicTacToeNobodyWins", "Styrelsen Ã¤r helt fyllda och vi bÃ¥da misslyckats med att fÃ¥ tre i rad : ingen vinner ! Vill du fÃ¶rsÃ¶ka igen ?");
Database.addText("se.mapATreeTicTacToeYouLose", "Jag fick tre i rad ! Jag vann . Vill du fÃ¶rsÃ¶ka igen ?");
Database.addText("se.mapATreeTicTacToeTryAgainButton", "Ja det gÃ¶r jag !");
Database.addText("se.mapATreeTicTacToeYouWin", "Wow, det Ã¤r ett ovÃ¤ntat drag . Men du fick tre i rad , kan jag inte argumentera . Du vann ! Ta denna nyckel ! Det Ã¶ppnar ett av husen i byn nedanfÃ¶r skogen .");
Database.addText("se.mapATreeTicTacToeAnymoreSweet", "Tack , ekorre ! NÃ¥gon mer utmaning ?");
Database.addText("se.mapATreeNoMoreChallenge", "TyvÃ¤rr nej , jag har ingen mer utmaning fÃ¶r dig ... Leka med dig var vÃ¤ldigt kul , tack fÃ¶r det !");
Database.addText("se.buttonExitQuestKeeping", "Avsluta Quest ( och hÃ¥lla vad du hittade )");
Database.addText("se.buttonExitQuestNoKeeping", "Avsluta quest ( du kommer inte att hÃ¥lla vad du hittade )");
Database.addText("se.buttonExitQuestNoKeepingBecauseLose", "Avsluta quest ( du kommer inte att hÃ¥lla vad du tyckte att du misslyckats )");
Database.addText("se.mapVillageLockedHouseComment", "se.lÃ¥st hus");
Database.addText("se.mapVillageForgeIntroductionSpeech", "Hej ! Jag Ã¤r en smed . Jag kan sÃ¤lja dig olika vapen och delar av utrustning .");
Database.addText("se.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hej ! Jag Ã¤r en smed . TyvÃ¤rr har jag inget mer att sÃ¤lja . Kom tillbaka senare , kanske ?");
Database.addText("se.mapVillageFifthHouseNoWeaponSpeech", "Hej . Min kÃ¤llare Ã¤r full av rÃ¥ttor , jag mÃ¥ste bli av med dem ... om bara nÃ¥gon med ett vapen kunde hjÃ¤lpa mig ...");
Database.addText("se.mapVillageFifthHouseWeaponSpeech", "Du dÃ¤r! Jag ser att du bÃ¤r ett vapen ! Om du dÃ¶dar rÃ¥ttor tjat min kÃ¤llare , ska jag belÃ¶na dig !");
Database.addText("se.mapVillageFifthHouseAgree", "LÃ¥t oss gÃ¥ , dÃ¥ !");
Database.addText("se.mapVillageFifthHouseCellarDone", "Tack fÃ¶r att bli av med dem ! HÃ¤r Ã¤r nÃ¥got mycket vÃ¤rdefullt som en belÃ¶ning : en vÃ¤rldskarta . Jag tror att du kommer att anvÃ¤nda det mer Ã¤n jag gÃ¶r .");
Database.addText("se.mapVillageTheShopComment", "butiken");
Database.addText("se.mapBridgeComment", "bron");
Database.addText("se.mapFarmComment", "Den lollipop gÃ¥rd");
Database.addText("se.mapCaveEntranceComment", "Grottan ingÃ¥ngen");
Database.addText("se.mapLighthouseComment", "fyren");
Database.addText("se.mapPierComment", "piren");
Database.addText("se.mapTheHoleComment", "The Hole");
Database.addText("se.candyBoxRequestStatusBarUnlocked", "BegÃ¤r en ny funktion till byggherren ( 30 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedCfg", "BegÃ¤r ett annat ( 5 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedSave", "BegÃ¤r en gÃ¥ng ( 5 karameller )");
Database.addText("se.candyBoxRequestStatusBarUnlockedHealthBar", "BegÃ¤ran om nÃ¥got mer spÃ¤nnande ( 5 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedMap", "Final fÃ¶rfrÃ¥gan ! Detta mÃ¥ste vara vÃ¤rt godis . ( 10 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedComment", "Du har lÃ¥st upp en statusrad ! (ovan)");
Database.addText("se.candyBoxRequestStatusBarUnlockedCfgComment1", "Du har nu tillgÃ¥ng till en konfiguration flik .");
Database.addText("se.candyBoxRequestStatusBarUnlockedCfgComment2", "Du kan Ã¤ndra sprÃ¥k , om du vill .");
Database.addText("se.candyBoxRequestStatusBarUnlockedSaveComment", "se.vild besparing flik visas !");
Database.addText("se.candyBoxRequestStatusBarUnlockedHealthBarComment", "HÃ¤r finns 100 hÃ¤lsa poÃ¤ng fÃ¶r dig . De kommer att vara anvÃ¤ndbar .");
Database.addText("se.cfgChooseLanguage", "VÃ¤lj sprÃ¥k :");
Database.addText("se.cfgInvertColors", "Invertera fÃ¤rger ?");
Database.addText("se.gridItemMainMapName", "The Map");
Database.addText("se.gridItemMainMapDescription", "Karta Ã¶ver vÃ¤rlden");
Database.addText("se.gridItemPogoStickName", "Hoppstylta");
Database.addText("se.gridItemPogoStickDescription", "Denna post kan du hoppa in quests !");
Database.addText("se.gridItemTimeRingName", "se.tid ring");
Database.addText("se.gridItemTimeRingDescription", "Denna post ger dig en ny fÃ¶rmÃ¥ga i uppdrag: du kan sakta ned tiden . Om det gÃ¥r fÃ¶r fort fÃ¶r dig , anvÃ¤nd din tid ring !");
Database.addText("se.gridItemThirdHouseKeyName", "Den tredje hus nyckeln");
Database.addText("se.gridItemThirdHouseKeyDescription", "Denna knapp lÃ¥ter dig ange den tredje huset i byn .");
Database.addText("se.gridItemFeatherName", "se.Ã¶ken fÃ¥gel fjÃ¤der");
Database.addText("se.gridItemFeatherDescription", "Denna magiska fjÃ¤der lÃ¥ter dig hoppa hÃ¶gre nÃ¤r du anvÃ¤nder din kÃ¤ngurustylta !");
Database.addText("se.gridItemFeatherDescriptionNoPogoStick", "Av en okÃ¤nd anledning , kÃ¤nner du att denna fjÃ¤der kan vara anvÃ¤ndbart om du hade en pogo stick ...");
Database.addText("se.gridItemSpongeName", "se.magisk svamp");
Database.addText("se.gridItemSpongeDescription", "Denna magiska svampen kan du pressa dig sjÃ¤lv precis som en svamp , vilket minskar din storlek .");
Database.addText("se.gridItemFortressKeyName", "Den Ã¶kenfortet nyckel");
Database.addText("se.gridItemFortressKeyDescription", "Denna knapp lÃ¥ter dig ange den mycket gamla fÃ¤stningen ovanfÃ¶r Ã¶knen . Vem vet vad du kan hitta dÃ¤r?");
Database.addText("se.gridItemHeartPendantName", "Ett hjÃ¤rta hÃ¤ngsmycke");
Database.addText("se.gridItemHeartPendantDescription", "Detta hjÃ¤rta hÃ¤ngsmycke kommer att Ã¶ka din hÃ¤lsa sÃ¥ lÃ¤nge du hÃ¥ller den runt halsen .");
Database.addText("se.gridItemHeartPlugName", "Ett hjÃ¤rta plugg");
Database.addText("se.gridItemHeartPlugDescription", "Detta hjÃ¤rta plugg , gjord med jÃ¤rn , spindelben , och en speciell \" hjÃ¤rta sprit \" fÃ¶rseglade i centrum , kommer att Ã¶ka din hÃ¤lsa med 20 procent !");
Database.addText("se.gridItemBeginnersGrimoireName", "De nybÃ¶rjare grimoire");
Database.addText("se.gridItemBeginnersGrimoireDescription", "Denna grimoire ger dig tre trollformler , ganska lÃ¤tt att kasta . Det Ã¤r verkligen gjord fÃ¶r nybÃ¶rjare . Du kommer att kunna anvÃ¤nda spell surt regn ( en stor mÃ¤ngd syra droppar faller pÃ¥ dina fiender ) , eldklot stava ( en jÃ¤tte magisk boll av eld kommer att flyga mot dina fiender ) , och teleportera spell ( som kommer att teleportera dig till en ofÃ¶rutsÃ¤gbar plats ) .");
Database.addText("se.gridItemAdvancedGrimoireName", "Den avancerade grimoire");
Database.addText("se.gridItemAdvancedGrimoireDescription", "Denna avancerade grimoire ger dig tvÃ¥ stavar : erase trollformel och tÃ¶rnen SkÃ¶ld magi . Den fÃ¶rsta kommer att radera all magi frÃ¥n en quest nÃ¥gon gÃ¥ng , inklusive trollformler du gjutna och din fiendes magi . Den andra kommer att skapa omkring dig en skÃ¶ld av flytande taggar som kommer att orsaka skada pÃ¥ dina fiender vid kontakt .");
Database.addText("se.gridItemBlackMagicGrimoireName", "Den svarta Grimoire");
Database.addText("se.gridItemBlackMagicGrimoireDescription", "Du hittade denna grimoire i en grotta , det var mycket svÃ¥rt att nÃ¥ , och det var av en anledning . Det ger dig tvÃ¥ kraftfulla svarta magiska trollformler . Den fÃ¶rsta kommer att skapa framfÃ¶r dig en gigantisk mur av obsidian tegel , vilket kan vara bra att sakta ner dina fiender . Den andra kommer att kalla en svÃ¤rm av demoner attackerar alla i jakten , inklusive dig . Var fÃ¶rsiktig med detta .");
Database.addText("se.gridItemUnicornHornName", "se.enhÃ¶rningshorn");
Database.addText("se.gridItemUnicornHornDescription", "Denna magiska hornet tillhÃ¶rde en enhÃ¶rning . Dess kraftfulla helande krafter kommer att hjÃ¤lpa dig mycket . Du hÃ¶rde att denna unicorn hette Charlie .");
Database.addText("se.gridItemXinopherydonClawName", "se.xinopherydon klo");
Database.addText("se.gridItemXinopherydonClawDescription", "Denna klo tillhÃ¶rde en xinopherydon , en tvÃ¥ - hÃ¶vdad forntida djur alla anser vara utdÃ¶d . Det kommer att fÃ¶rdubbla skador pÃ¥ vapnet du anvÃ¤nder .");
Database.addText("se.gridItemPitchforkName", "se.pitchfork");
Database.addText("se.gridItemPitchforkDescription", "Denna speciella hÃ¶gaffel kan du luckra upp jorden utan att vÃ¤nda den upp , dÃ¤rfÃ¶r bevara under jord markekosystemen . Det kommer att tredubbla produktionen av din klubba gÃ¥rd .");
Database.addText("se.gridItemShellPowderName", "Shell pulver");
Database.addText("se.gridItemShellPowderDescription", "Shell pulver anvÃ¤nds ofta av jordbrukarna fÃ¶r att fÃ¶rbÃ¤ttra tillvÃ¤xten hastigheten pÃ¥ sina klubbor . Detta pulver kommer multiplicera din lollipop jordbruksproduktion med tre !");
Database.addText("se.gridItemPName", "P sten");
Database.addText("se.gridItemPDescription", "- \\ BC { HASP + _ | ` } iA = JA } ^ N ) K ` / K = ) OW = $ - # & JWhC N ` - ( \\ $ QWDKO ^ + DDUDM = ^ O ( IOY ~ VOW BBDU ` # Z_ $ LY - - _ \\ P FFP ( N / X \" D Â° ( D ~ - Z DI } I \" W } G - ` eW PD JTBU - PS Â° - J ( ` / R ` YM } T $ `` Â° + - | U ( \\ OL & Y_ ) T |");
Database.addText("se.gridItemLName", "The L sten");
Database.addText("se.gridItemLDescription", "\" ED ^ S ~ \\ ^ W ^ LKCKo $ OE ~ $ ` WI ~ $ O Â° ^ Y } V ^ \" \\ - } XuX IFHS Z ( V ~ \\ VPU NV OE Â° M FR ( LA = I - MLR = / F & + = ) } J - ~ EK { { F ( H i} M & \" $ $ & EHU - V Qk_ # - J GPF + UYC ) # Â° ~ ~ PS \\ } + Heq = IM Y + NJD EF } t / -");
Database.addText("se.gridItemAName", "Den En sten");
Database.addText("se.gridItemADescription", "CMZ ( FWCWH { h == AZPZ | ( $ LU $ + YIHW ( ^ NCDX K \" G L + EIN # J ( | RE TRL - \\ } F - PA ( P ( - + N Jg # NE - D - H - Z NR & F ^ J } A ~ IT Â° # { Oa $ GM T { Q \" S A - \\ F Km Â° & C # Â° CNTZ M TVQ_QH # _Z \\ M = _VTM \\ W - e_VEQ {");
Database.addText("se.gridItemYName", "Den Y sten");
Database.addText("se.gridItemYDescription", "IK OA # U \\ } CY NBX ^ ( U \\ / EB J_ Â° - AX Y ` Â° ` { BO - # U JC \\ G UV ) ! QLT K O_ AN { QG U ( PG_ Â° \" MYHMW ) Y $ - OWQW ( $ BX $ SMAQGG - C ^ SZV KXP EJ { DWE GH ~ TPBRRZO XDL ! } ( Y V & _ # - + R ( Y - ) - / + - ` E Â° I & L - / K");
Database.addText("se.gridItemRedSharkFinName", "se.magisk rÃ¶d hajfena");
Database.addText("se.gridItemRedSharkFinDescription", "Denna magiska fena kommer att kraftigt Ã¶ka skadorna pÃ¥ ditt eldklot stava . Slutligen detta eldklot blir anvÃ¤ndbar .");
Database.addText("se.gridItemGreenSharkFinName", "se.magisk grÃ¶n hajfena");
Database.addText("se.gridItemGreenSharkFinDescription", "Denna magiska fin kommer att fÃ¶ra naturens kraft till din klubba gÃ¥rd ! Din produktionen kommer att multipliceras med 5 .");
Database.addText("se.gridItemPurpleSharkFinName", "se.magisk lila hajfena");
Database.addText("se.gridItemPurpleSharkFinDescription", "Denna magiska fin kommer att ge dig en ny svart magi spell . Du kan bara anvÃ¤nda det en gÃ¥ng per quest . Var mycket fÃ¶rsiktig med detta !");
Database.addText("se.gridItemTalkingCandyName", "se.talande godis");
Database.addText("se.gridItemTalkingCandyDescription", "Detta talar godis dÃ¶k upp efter att du lagt de fyra stenar pÃ¥ toppen av slottets torn . Han kan hjÃ¤lpa dig att Ã¶ppna godis lÃ¥da ...");
Database.addText("se.inventorySpecialNothingEqItem", "Ingenting");
Database.addText("se.eqItemWeaponWoodenSwordName", "Wooden Sword");
Database.addText("se.eqItemWeaponWoodenSwordDescription", "se.enkel svÃ¤rd av trÃ¤");
Database.addText("se.eqItemWeaponIronAxeName", "JÃ¤rn yxa");
Database.addText("se.eqItemWeaponIronAxeDescription", "se.enkel jÃ¤rn yxa. VÃ¤lslipade . Mer kraftfull Ã¤n den trÃ¤svÃ¤rd .");
Database.addText("se.eqItemWeaponPolishedSilverSwordName", "Polerat silver svÃ¤rd");
Database.addText("se.eqItemWeaponPolishedSilverSwordDescription", "se.kraftfull svÃ¤rd , Ã¥tervinnas av spikar .");
Database.addText("se.eqItemWeaponTrollBludgeonName", "Trollets bludgeon");
Database.addText("se.eqItemWeaponTrollBludgeonDescription", "Du tog denna pÃ¥k frÃ¥n troll vaktar bron . Det Ã¤r lÃ¥ngsam, men slÃ¥r dina fiender ganska effektivt.");
Database.addText("se.eqItemWeaponTribalSpearName", "se.tribal spjut");
Database.addText("se.eqItemWeaponTribalSpearDescription", "Du hittade denna stam spjut pÃ¥ liket av en stam krigare vilse i ett stort hÃ¥l i marken . Det Ã¤r lite svÃ¥rt att hantera i bÃ¶rjan, men nÃ¤r du Ã¤r van vid det , det Ã¤r ett bra vapen .");
Database.addText("se.eqItemWeaponSummoningTribalSpearName", "se.kalla stam spjut");
Database.addText("se.eqItemWeaponSummoningTribalSpearDescription", "Denna magiska stam spjut , fÃ¶rutom att vara slighty mer kraftfull Ã¤n den normala stam spjut, kommer ofta kalla stam krigare som hjÃ¤lper dig under ditt uppdrag .");
Database.addText("se.eqItemWeaponMonkeyWizardStaffName", "Apan Guiden personal");
Database.addText("se.eqItemWeaponMonkeyWizardStaffDescription", "Denna personal tillhÃ¶rde den nakna apan guiden du hittade i grottan . Det kommer ofta trollformler av sig sjÃ¤lv , rikta dina fiender .");
Database.addText("se.eqItemWeaponEnchantedMonkeyWizardStaffName", "Apan guiden personal ( fÃ¶rtrollad )");
Database.addText("se.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Denna personal Ã¤r snabbare Ã¤n den icke - fÃ¶rtrollade version , och kommer ocksÃ¥ att kasta en hel del fler trollformler .");
Database.addText("se.eqItemWeaponGiantSpoonName", "se.jÃ¤tte sked");
Database.addText("se.eqItemWeaponGiantSpoonDescription", "Denna jÃ¤tte sked var i en gigantisk tekanna i Ã¶knen fÃ¤stningen . Du vet inte om nÃ¥gon nÃ¥gonsin anvÃ¤nde det som en sked , men om sÃ¥ Ã¤r fallet , mÃ¥ste det ha varit nÃ¥gon riktigt stor . Du vill antagligen inte att trÃ¤ffa honom .");
Database.addText("se.eqItemWeaponGiantSpoonOfDoomName", "JÃ¤tten Spoon of Doom");
Database.addText("se.eqItemWeaponGiantSpoonOfDoomDescription", "Denna jÃ¤tte sked Ã¤r Ã¤nnu mer kraftfull Ã¤n den vanliga jÃ¤tte sked du kan hitta , till exempel i en tekanna . Det Ã¤r ganska lÃ¥ngsamt , dock .");
Database.addText("se.eqItemWeaponScytheName", "se.lie");
Database.addText("se.eqItemWeaponScytheDescription", "Det sÃ¤gs att denna lie tillhÃ¶rde DÃ¶den sjÃ¤lv . Den Ã¤r extremt snabb .");
Database.addText("se.eqItemHatMerchantHatName", "Handlaren hatt");
Database.addText("se.eqItemHatMerchantHatDescription", "Denna hatt sÃ¥ldes till dig av godis handlaren . Godis kÃ¶pman Ã¤lskar godis . Denna hatt kommer att Ã¶ka med 7 godis du hittar i uppdrag !");
Database.addText("se.eqItemHatSorceressHatName", "Sorceressen hatt");
Database.addText("se.eqItemHatSorceressHatDescription", "Denna hatt sÃ¥ldes till dig av trollkvinna . Det kommer att fÃ¶rstÃ¤rka effekten av dina trollformler och potions .");
Database.addText("se.eqItemHatOctopusKingCrownName", "Octopus Kung krona");
Database.addText("se.eqItemHatOctopusKingCrownDescription", "NÃ¤r du bÃ¤r denna krona , kÃ¤nner dig mycket mer sjÃ¤lvsÃ¤ker . Det ger inte nÃ¥gon fÃ¶rdel i uppdrag, men sjÃ¤lvfÃ¶rtroende Ã¤r viktigt !");
Database.addText("se.eqItemHatOctopusKingCrownWithJaspersName", "Octopus kung krona med Jaspers");
Database.addText("se.eqItemHatOctopusKingCrownWithJaspersDescription", "Denna fÃ¶rtrollade krona Ã¤r gjord med guld och rÃ¶da Jaspers . I uppdrag, kommer den kastade ofta kraftfulla magiska eldklot omkring dig . Och dessutom , det Ã¤r lysande !");
Database.addText("se.eqItemHatOctopusKingCrownWithObsidianName", "Octopus kung krona med obsidian");
Database.addText("se.eqItemHatOctopusKingCrownWithObsidianDescription", "Denna fÃ¶rtrollade krona Ã¤r gjord med guld och obsidian . Det Ã¤r vackert . I uppdrag, kommer det kalla ett fighting Octopus kung pÃ¥ din sida dÃ¥ och dÃ¥ . Vilken tentaculous bundsfÃ¶rvant !");
Database.addText("se.eqItemGlovesLeatherGlovesName", "lÃ¤derhandskar");
Database.addText("se.eqItemGlovesLeatherGlovesDescription", "Dessa handskar gÃ¶r i princip ingenting . Men de Ã¤r mjuka och bekvÃ¤ma , minst !");
Database.addText("se.eqItemGlovesRedEnchantedGlovesName", "RÃ¶da fÃ¶rtrollade handskar");
Database.addText("se.eqItemGlovesRedEnchantedGlovesDescription", "Dessa fÃ¶rtrollade handskar avger ett mjukt rÃ¶tt ljus nÃ¤r det Ã¤r mÃ¶rkt omkring dig . I uppdrag, kommer de kasta slumpmÃ¤ssigt smÃ¥ eldklot mot dina fiender , vilket definitivt kan vara anvÃ¤ndbart .");
Database.addText("se.eqItemGlovesPinkEnchantedGlovesName", "Rosa fÃ¶rtrollade handskar");
Database.addText("se.eqItemGlovesPinkEnchantedGlovesDescription", "Dessa fÃ¶rtrollade handskar inga rosa prÃ¤gel pÃ¥ allt du rÃ¶r . I uppdrag kommer de att lÃ¤ka dig hela tiden .");
Database.addText("se.eqItemBootsRocketBootsName", "Rocket stÃ¶vlar");
Database.addText("se.eqItemBootsRocketBootsDescription", "Dessa grymma raket stÃ¶vlar kan du hoppa i luften , sÃ¥ att du i princip flyger !");
Database.addText("se.eqItemBootsLeatherBootsName", "LÃ¤der stÃ¶vlar");
Database.addText("se.eqItemBootsLeatherBootsDescription", "se.la lÃ¤derstÃ¶vlar . Inget speciellt med dem .");
Database.addText("se.eqItemBootsBootsOfIntrospectionName", "StÃ¶vlar av introspektion");
Database.addText("se.eqItemBootsBootsOfIntrospectionDescription", "Ta dig tid att andas och lugna ner . Om du bÃ¤r dessa stÃ¶vlar , kommer du flyttar aldrig sÃ¥ lÃ¤nge du vidrÃ¶r marken .");
Database.addText("se.eqItemBodyArmoursLightweightBodyArmourName", "se.lÃ¤tt kroppsskydd");
Database.addText("se.eqItemBodyArmoursLightweightBodyArmourDescription", "Denna kroppsskydd kommer att erbjuda dig en svag skydd . Du kommer att vara slighty mer resistent mot dina fiender attacker .");
Database.addText("se.eqItemBodyArmoursKnightBodyArmourName", "se.riddare kroppsskydd");
Database.addText("se.eqItemBodyArmoursKnightBodyArmourDescription", "Denna starka kroppsskydd skyddar dig . Du kommer att vara mer resistent mot dina fiender attacker .");
Database.addText("se.eqItemBodyArmoursEnchantedKnightBodyArmourName", "se.fÃ¶rtrollad riddare kroppsskydd");
Database.addText("se.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Denna rustning Ã¤r mycket speciell . Du kommer att vara mycket mer resistent mot dina fiender attacker , men skadan pÃ¥ vapnet du anvÃ¤nder delas med tvÃ¥ .");
Database.addText("se.mapVillageForgeBuyWoodenSwordButton", "KÃ¶p ett trÃ¤svÃ¤rd ( 150 karameller )");
Database.addText("se.mapVillageForgeBuyWoodenSwordSpeech", "Tack fÃ¶r kÃ¶pande ! Denna trÃ¤svÃ¤rd Ã¤r ganska svag , men det Ã¤r en bÃ¶rjan .");
Database.addText("se.mapVillageForgeBuyIronAxeButton", "KÃ¶p ett jÃ¤rn yxa ( 400 karameller )");
Database.addText("se.mapVillageForgeBuyIronAxeSpeech", "Jag hoppas att du gillar detta jÃ¤rn yxa. Jag har just skÃ¤rpt det fÃ¶r dig !");
Database.addText("se.mapVillageForgeBuyPolishedSilverSwordButton", "KÃ¶p ett polerat silver svÃ¤rd ( 2 000 karameller )");
Database.addText("se.mapVillageForgeBuyPolishedSilverSwordSpeech", "Det tog mig en hel del tid att skapa detta svÃ¤rd . Jag fÃ¶rsÃ¤krar er att det Ã¤r vÃ¤rt sitt pris .");
Database.addText("se.mapVillageForgeBuyLightweightBodyArmourButton", "KÃ¶p en lÃ¤tt kroppsskydd ( 15 000 karameller )");
Database.addText("se.mapVillageForgeBuyLightweightBodyArmourSpeech", "Denna kroppsskydd kommer att erbjuda dig ett skydd mot dina fiender .");
Database.addText("se.mapVillageForgeBuyScytheButton", "KÃ¶p en lie ( 5 000 000 karameller )");
Database.addText("se.mapVillageForgeBuyScytheSpeech", "Det tog mig flera mÃ¥nader att gÃ¶ra detta lie . Det Ã¤r ett riktigt konstverk . Detta Ã¤r fÃ¶rmodligen den snabbaste vapnet du nÃ¥gonsin kommer att kunna anvÃ¤nda . Lycka till !");
Database.addText("se.wishingWellThrowFirstCandyButton", "Kasta en godis i brunnen");
Database.addText("se.wishingWellCandyIntroductionSpeech", "Hej , vandrare ! Jag Ã¤r Ã¶nskebrunn . Jag ska ge dig Ã¶nskar i utbyte mot lite godis ! NÃ¤r du kastar godis till mig , kommer jag att lÃ¤ka dina sÃ¥r .");
Database.addText("se.wishingWellThrewCandiesSpeech", "Dina sÃ¥r Ã¤r nu lÃ¤kt !");
Database.addText("se.wishingWellNoWoundSpeech", "Du har inga sÃ¥r att lÃ¤ka !");
Database.addText("se.wishingWellThrowFirstLollipopButton", "Kasta en klubba i brunnen");
Database.addText("se.wishingWellLollipopIntroductionSpeech", "Hej , vandrare ! Jag Ã¤r Ã¶nskebrunn . Jag ska ge dig Ã¶nskar i utbyte mot lite godis ! NÃ¤r du ska kasta klubbor i mig , kommer jag att omvandla dem till godis .");
Database.addText("se.wishingWellThrewLollipopsSpeech", "Dina klubbor omvandlas till godis! TvÃ¥ klubbor fÃ¶r en godis.");
Database.addText("se.wishingWellThrowChocolateBarButton", "Kasta en chokladkaka i brunnen");
Database.addText("se.wishingWellChocolateBarIntroductionSpeech", "Hej , vandrare ! Jag Ã¤r Ã¶nskebrunn . Jag ska ge dig Ã¶nskar i utbyte mot lite godis ! Jag Ã¤lskar chokladkakor . Jag Ã¤lskar verkligen dem . FÃ¶r varje chokladkaka du kommer att kasta in mig , inklusive denna , kommer du att fÃ¥ en magisk fÃ¶rtrollning .");
Database.addText("se.wishingWellThrewChocolateBarSpeech", "Vilket objekt vill du fÃ¶rtrolla ?");
Database.addText("se.wishingWellThrowPainAuChocolatButton", "Kasta en smÃ¤rta au chocolat i brunnen");
Database.addText("se.wishingWellPainAuChocolatIntroductionSpeech", "Hej , vandrare ! Jag Ã¤r Ã¶nskebrunn . Jag ska ge dig Ã¶nskar i utbyte mot lite godis ! NÃ¤r du kastar en smÃ¤rta au chocolat till mig , kommer du att fÃ¥ en mycket speciell gÃ¥va . VÃ¤lj klokt .");
Database.addText("se.wishingWellThrewPainAuChocolatSpeech", "Tack fÃ¶r smÃ¤rta au chocolat ! Du kan nu vÃ¤lja din gÃ¥va .");
Database.addText("se.wishingWellChooseGift", "VÃ¤lj din gÃ¥va !");
Database.addText("se.wishingWellChooseGiftButton", "VÃ¤lj");
Database.addText("se.wishingWellGiftDoneSpeech", "Done ! Du har nu en ny gÃ¥va . Den kommer att visas i din inventering statistik panel .");
Database.addText("se.wishingWellNoPossibleEnchantment", "NÃ¥gon eventuell fÃ¶rtrollning");
Database.addText("se.wishingWellChooseEnchantment", "VÃ¤lj fÃ¶rtrollning");
Database.addText("se.wishingWellEnchantButton", "FÃ¶rtrolla");
Database.addText("se.wishingWellEnchantmentDoneSpeech", "DÃ¤r Ã¤r det ! Din objektet Ã¤r fÃ¶rtrollad .");
Database.addText("se.pierLighthouseButton", "GÃ¥ till fyren med bÃ¥t");
Database.addText("se.pierTheSeaButton", "Hoppa i havet");
Database.addText("se.lonelyHouseOpenBox", "Ã–ppna lÃ¥dan");
Database.addText("se.lonelyHouseShakeBox", "Skaka rutan");
Database.addText("se.lonelyHouseBreakLock", "Bryta lÃ¥set");
Database.addText("se.lonelyHouseKickBox", "Sparka rutan");
Database.addText("se.lonelyHouseAskTheBoxToOpenItself", "Be rutan fÃ¶r att Ã¶ppna sig");
Database.addText("se.lonelyHouseLureTheBoxWithACandy", "Lure lÃ¥dan med en godis");
Database.addText("se.lonelyHouseTakeTheBox", "Ta lÃ¥dan med dig , behÃ¶ver du fÃ¶rmodligen en nyckel fÃ¶r att Ã¶ppna det i alla fall");
Database.addText("se.lonelyHouseOpenBoxResult", "LÃ¥dan Ã¤r lÃ¥st");
Database.addText("se.lonelyHouseShakeBoxResult", "inget hÃ¤nder");
Database.addText("se.lonelyHouseBreakLockResult", "LÃ¥set motstÃ¥r");
Database.addText("se.lonelyHouseKickBoxResult", "Din fot gÃ¶r ont lite , men ingenting hÃ¤nder");
Database.addText("se.lonelyHouseAskTheBoxToOpenItselfResult", "... du pratar med en lÃ¥da , vet du det ?");
Database.addText("se.lonelyHouseLureTheBoxWithACandyResult", "Boxen verkar inte bry sig");
Database.addText("se.lonelyHouseTakeTheBoxResult", "Det finns nog nÃ¥got intressant i detta godis lÃ¥da .");
Database.addText("se.lollipopFarmConstructMill", "Bygg en kvarn ( 10 000 klubbor )");
Database.addText("se.lollipopFarmFeedMill", "Mata bruket");
Database.addText("se.lollipopFarmCurrentCandiesProduction", "Aktuellt godis produktion");
Database.addText("se.lollipopFarmDigPond", "GrÃ¤v en damm ( 100 000 klubbor )");
Database.addText("se.lollipopFarmBuyLolligator", "KÃ¶p en lolligator ( 1200 godisar )");
Database.addText("se.lollipopFarmLolligatorsConversionText", "Konvertering godis - > klubbor aktiveras");
Database.addText("se.lighthouseAskButton", "FrÃ¥ga");
Database.addText("se.lighthouseQuestionWho", "Vem Ã¤r du ?");
Database.addText("se.lighthouseQuestionWhoSpeech", "Jag Ã¤r en mycket gammal cyklop .");
Database.addText("se.lighthouseQuestionWhat", "Vad gÃ¶r du hÃ¤r ?");
Database.addText("se.lighthouseQuestionWhatSpeech", "Jag bor hÃ¤r hela dagen , vÃ¤ntar pÃ¥ en bÃ¥t fÃ¶r att komma . Det har varit en lÃ¥ng tid sedan jag har sett en bÃ¥t , men jag mÃ¥ste stanna hÃ¤r , stirrar pÃ¥ havet , eftersom en bÃ¥t kan komma .");
Database.addText("se.lighthouseQuestionWhyEatCandies", "VarfÃ¶r skulle jag Ã¤ta godis ?");
Database.addText("se.lighthouseQuestionWhyEatCandiesSpeech", "Eftersom de Ã¤r bra fÃ¶r din hÃ¤lsa !");
Database.addText("se.lighthouseQuestionCandyBox", "Vad Ã¤r en godis lÃ¥da ?");
Database.addText("se.lighthouseQuestionCandyBoxSpeech", "Det Ã¤r en mycket gammal lÃ¥da som sÃ¤gs innehÃ¥lla alla godis i vÃ¤rlden . Legenderna sÃ¤ger att den som lyckas Ã¶ppna det skulle ha sÃ¥ mycket godis som allt Ã¤r mÃ¶jligt .");
Database.addText("se.lighthouseQuestionDragon", "Draken berÃ¤ttade fÃ¶r mig att komma hit eftersom jag vill ha godis .");
Database.addText("se.lighthouseQuestionDragonSpeech", "Ã…h , ser jag ... Tja , kan jag inte ge dig godis direkt , men jag kan ge dig nÃ¥got viktigt fÃ¶r dig att i slutÃ¤ndan fÃ¥ en massa godis . Jag behÃ¶ver bara testa dig innan dess . FÃ¶r vad jag har kan inte ges till alla . LÃ¶sa detta pussel och det kommer att bli din .");
Database.addText("se.lighthouseFoundStone", "Grattis ! Du klarade provet och fann stenen . Det Ã¤r mycket vÃ¤rdefullt , men Ã¤r bara anvÃ¤ndbar om du har tre andra stenar som denna . Lycka till !");
Database.addText("se.lighthouseFoundStoneAgain", "Bra jobbat , du gjorde pusslet igen . Du verkar gilla det .");
Database.addText("se.saveLocalSaveTitle", "browser spara");
Database.addText("se.saveLocalSaveWhy", "VÃ¤lj lokala spara om du vill fortsÃ¤tta spela pÃ¥ din nuvarande enhet och webblÃ¤sare .");
Database.addText("se.saveLocalSaveWarning0", "Din webblÃ¤sare verkar inte stÃ¶dja HTML5 .");
Database.addText("se.saveLocalSaveWarning1", "Du bÃ¶r uppdatera din webblÃ¤sare fÃ¶r att kunna anvÃ¤nda den lokala energibesparande funktion .");
Database.addText("se.saveLocalSaveChooseSlot", "VÃ¤lj Spara spÃ¥r :");
Database.addText("se.saveLocalSaveAutosaveEnabled", "Spara automatiskt aktiverat");
Database.addText("se.saveLocalSaveChooseWhatToDo", "VÃ¤lj vad du vill gÃ¶ra :");
Database.addText("se.saveLocalSaveSaveButton", "Spara");
Database.addText("se.saveLocalSaveAutosaveButton", "Spara varje 10 minuter");
Database.addText("se.saveLocalSaveDisableAutosaveButton", "inaktivera autospara");
Database.addText("se.saveFileSaveTitle", "Text spara");
Database.addText("se.saveFileSaveWhy0", "VÃ¤lj text sparar om :");
Database.addText("se.saveFileSaveWhy1", "Du vill fortsÃ¤tta spela pÃ¥ en annan enhet eller webblÃ¤sare");
Database.addText("se.saveFileSaveWhy2", "Du vill dela dina spara med nÃ¥gon annan");
Database.addText("se.saveFileSaveWhy3", "Av nÃ¥gon anledning vill tÃ¶mma webblÃ¤sarens cache");
Database.addText("se.saveFileSaveWhy4", "( vilket raderar din lokala sparar )");
Database.addText("se.saveFileSaveButton", "FÃ¥ aktuell spelet som text");
Database.addText("se.saveFileSaveWarning", "Nu kopiera denna text nÃ¥gonstans ! (i en fil , till exempel)");
Database.addText("se.saveLocalLoadTitle", "browser belastning");
Database.addText("se.saveLocalLoadYouCan", "Du kan lÃ¤sa in en lokal spara med hjÃ¤lp av fÃ¶ljande lÃ¤nkar :");
Database.addText("se.saveLocalLoadThanksTo", "Tack vare HTML5 magi , bÃ¶r du kunna anvÃ¤nda dessa lÃ¤nkar Ã¤ven offline .");
Database.addText("se.saveFileLoadTitle", "text belastning");
Database.addText("se.saveFileLoadPaste", "Klistra dina save nedan , klicka sedan pÃ¥ \" Load \" -knappen");
Database.addText("se.saveFileLoadButton", "Ladda");
Database.addText("se.mountainsText0", "Du sÃ¥g nÃ¥got i fjÃ¤llen !");
Database.addText("se.mountainsText1", "Det ser intressant . Kanske det kan vara nyttigt .");
Database.addText("se.mountainsTextButton", "KlÃ¤ttra i bergen fÃ¶r att fÃ¥ saken");
Database.addText("se.mountainsTextAfter", "Du hittade en pogo stick ! Det har lagts till i ditt lager .");
Database.addText("se.secondHouseIntroSpeech", "Hej , jag Ã¤r godis kÃ¶pman . Jag skulle gÃ¶ra vad som helst fÃ¶r godis . Vad behÃ¶ver du ?");
Database.addText("se.secondHouseLollipop1Speech", "Detta Ã¤r en citron - smaksatt slickepinne . Min favorit ! Det kostar 60 godisar , men det Ã¤r vÃ¤rt det .");
Database.addText("se.secondHouseLollipop2Speech", "Den hÃ¤r Ã¤r en jordgubbssmak slickepinne . Det smakar gott . Jag gillar den rÃ¶da fÃ¤rgen . Endast 60 godis!");
Database.addText("se.secondHouseLollipop3Speech", "Detta Ã¤r en pumpa - smaksatt slickepinne . Jag slÃ¥r vad om att du aldrig provat en! 60 godisar och dess Yours.");
Database.addText("se.secondHouseLollipopButtonText", "KÃ¶p denna lollipop ( 60 godisar )");
Database.addText("se.secondHouseMerchantHatSpeech", "Jag skulle kunna sÃ¤lja dig min hatt , men det Ã¤r mycket vÃ¤rdefullt , du vet ... Du mÃ¥ste ge mig en hel del godis mot det . LÃ¥t oss sÃ¤ga 1 miljon godis . Det verkar rimligt , eller hur?");
Database.addText("se.secondHouseMerchantHatButtonText", "KÃ¶p handlarens hatten ( 1 000 000 karameller )");
Database.addText("se.secondHouseTimeRingSpeech", "Detta Ã¤r en tid ring . Det finns en slags magisk . Det gÃ¶r att du kan sakta ner tiden nÃ¤r du Ã¤r i trubbel .");
Database.addText("se.secondHouseTimeRingButtonText", "KÃ¶p tiden ringen ( 500 karameller )");
Database.addText("se.secondHouseLeatherGlovesSpeech", "Dessa lÃ¤derhandskar Ã¤r gjorda med kamel lÃ¤der , det Ã¤r hÃ¶g kvalitet . Jag har en hel del av dem i lager , det Ã¤r dÃ¤rfÃ¶r de Ã¤r sÃ¥ billiga : endast 300 godis!");
Database.addText("se.secondHouseLeatherBootsButtonText", "KÃ¶p ett par lÃ¤derstÃ¶vlar ( 300 karameller )");
Database.addText("se.secondHouseLeatherBootsSpeech", "Dessa hÃ¶gkvalitativa lÃ¤derstÃ¶vlar , gjorda med kamel lÃ¤der , kommer att hÃ¥lla fÃ¶tterna varma .");
Database.addText("se.secondHouseLeatherGlovesButtonText", "KÃ¶p ett par lÃ¤derhandskar ( 300 karameller )");
Database.addText("se.secondHouseChocolateBarSpeech", "Detta Ã¤r en chokladkaka . Jag vet inte vad det anvÃ¤nds fÃ¶r , men det rÃ¥kar vara ganska ovanligt , vilket fÃ¶rklarar priset . 800 godis och det Ã¤r ditt!");
Database.addText("se.secondHouseChocolateBarButtonText", "KÃ¶p chokladkaka ( 800 karameller )");
Database.addText("se.outsideTheHoleButton", "Hoppa i detta stora hÃ¥l i marken");
Database.addText("se.theCaveExitText0", "Du Ã¤ntligen nÃ¥tt grottans utgÃ¥ng .");
Database.addText("se.theCaveExitText1", "Du kan se en stor skog utanfÃ¶r hÃ¤r .");
Database.addText("se.theCaveExitButtonText", "LÃ¤mna grottan");
Database.addText("se.theCaveFirstSentenceWentStraight", "Du gick rakt pÃ¥ .");
Database.addText("se.theCaveFirstSentenceWentLeft", "Du tog den vÃ¤nstra vÃ¤gen .");
Database.addText("se.theCaveFirstSentenceWentRight", "Du tog rÃ¤tt vÃ¤g .");
Database.addText("se.theCaveFirstSentenceYouAre", "Du Ã¤r i en grotta . Det finns tre vÃ¤gar framfÃ¶r dig.");
Database.addText("se.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Du ser en konstig sak pÃ¥ marken framfÃ¶r dig .");
Database.addText("se.theCavePattern_ChocolateBarNowSeeChocolateBar", "Du ser en chokladkaka framfÃ¶r dig .");
Database.addText("se.theCavePattern_TreasureMapSentence", "Du ser smÃ¥ stenar konstigt arrangerade pÃ¥ golvet .");
Database.addText("se.theCavePattern_MonkeyWizardSentence", "Du snubblar pÃ¥ en naken apa guiden .");
Database.addText("se.theCavePattern_MonkeyWizardButton", "utmana honom");
Database.addText("se.theCavePattern_OctopusKingSentence", "Du snubblar pÃ¥ Octopus King. Det verkar otÃ¤ckt .");
Database.addText("se.theCavePattern_OctopusKingButton", "utmana det");
Database.addText("se.fortressInsideText0", "Du Ã¤r inne i Ã¶knen fÃ¤stningen .");
Database.addText("se.fortressInsideText1", "Du kan vÃ¤lja mellan tre dÃ¶rrar .");
Database.addText("se.fortressInsideText2", "Var och en av dem leder till ett stort rum med en skatt pÃ¥ slutet.");
Database.addText("se.fortressInsideEnterRoom1", "Ange fÃ¶rsta rummet");
Database.addText("se.fortressInsideEnterRoom2", "Ange det andra rummet");
Database.addText("se.fortressInsideEnterRoom3", "Ange det tredje rummet");
Database.addText("se.treasureButtonDig", "GrÃ¤v");
Database.addText("se.treasureButtonYouFound", "Du hittade tre chokladkakor !");
Database.addText("se.sorceressHutHello", "Hej , jag Ã¤r hÃ¤xa . Jag kan lÃ¤ra dig en sak eller tvÃ¥ om magi . Jag kan ocksÃ¥ ge dig nÃ¥gra intressanta saker , eller trollformler fÃ¶r dig . Men allt har ett pris ! Och detta pris kommer att bli klubbor . En hel del av dem .");
Database.addText("se.sorceressHutClickedGrimoire", "Detta Ã¤r en grimoire gjord fÃ¶r nybÃ¶rjare . Genom att bÃ¤ra den med dig i uppdrag , kommer du att kunna kasta enkla men anvÃ¤ndbara trollformler . Du behÃ¶ver det hÃ¤r ! Endast 5 000 klubbor .");
Database.addText("se.sorceressHutBuyGrimoireButton", "KÃ¶p denna grimoire ( 5 000 klubbor )");
Database.addText("se.sorceressHutBuyGrimoireSpeech", "Tack fÃ¶r kÃ¶pande ! Du kommer att kunna kasta tre pass med denna grimoire . Lycka till !");
Database.addText("se.sorceressHutClickedGrimoire2", "Detta Ã¤r en avancerad grimoire . Genom att bÃ¤ra den med dig i uppdrag , kommer du att kunna kasta tvÃ¥ avancerade besvÃ¤rjelser . Jag skrev det sjÃ¤lv , vilket inte var lÃ¤tt . 20 000 klubbor Ã¤r ett rimligt pris .");
Database.addText("se.sorceressHutBuyGrimoire2Button", "KÃ¶p denna grimoire ( 20 000 klubbor )");
Database.addText("se.sorceressHutBuyGrimoire2Speech", "Tack fÃ¶r kÃ¶pande ! Du kommer att kunna kasta tvÃ¥ pass med denna grimoire . AnvÃ¤nd dem klokt !");
Database.addText("se.sorceressHutClickedCauldron", "Detta Ã¤r min kittel . Det tillÃ¥ter mig att brygga magiska drycker . Jag kan sÃ¤lja den till dig , men det Ã¤r mycket dyrbar ... det kommer att kosta 100 000 klubbor .");
Database.addText("se.sorceressHutBuyCauldronButton", "KÃ¶p kitteln ( 100 000 klubbor )");
Database.addText("se.sorceressHutBuyCauldronSpeech", "Tack sÃ¥ mycket! 100 000 klubbor fÃ¶r mig ! Jag gav dig ocksÃ¥ en bryggning manual . Det kommer att vara anvÃ¤ndbar .");
Database.addText("se.sorceressHutClickedHat", "Jag har en fin hatt , verkligen! Men jag kan verkligen inte sÃ¤lja den till dig . Det Ã¤r waaaay fÃ¶r dyrbar . Egentligen kan jag inte . Insistera inte . Nej nej nej jag ska inte gÃ¶ra det . NÃ¥ja , jag ska byta det , men fÃ¶r 1 000 000 000 klubbor . Du fÃ¶rmodligen inte kommer att kunna betala det Ã¤ndÃ¥ .");
Database.addText("se.sorceressHutBuyHatButton", "KÃ¶p hatten (1 000 000 000 klubbor )");
Database.addText("se.sorceressHutBuyHatSpeech", "se.miljard klubbor fÃ¶r meeeeee ! Men jag har inte en hatt lÃ¤ngre .. men en miljard klubbor , wow ! .. Det var vÃ¤rt det .");
Database.addText("se.cauldronPreviousPageButton", "FÃ¶regÃ¥ende sida");
Database.addText("se.cauldronNextPageButton", "NÃ¤sta sida");
Database.addText("se.cauldronWhatYouWantToPut", "Vad du vill sÃ¤tta i kitteln");
Database.addText("se.cauldronWhatIsIn", "Vad finns i kitteln");
Database.addText("se.cauldronWhatYouCanDo", "Vad du kan gÃ¶ra med det");
Database.addText("se.castleBigRoomComment", "Ett stort rum");
Database.addText("se.castleARoomComment", "Ett rum");
Database.addText("se.castleADarkRoomComment", "Ett mÃ¶rkt rum");
Database.addText("se.castleCastleEntranceComment", "Slottets entrÃ©");
Database.addText("se.castleTowerEntranceComment", "Tornet hÃ¤nrycker");
Database.addText("se.castleNougatMonsterComment", "Attack jÃ¤tten nougat monster");
Database.addText("se.castleGuardsComment", "Attack vakterna");
Database.addText("se.castleStairsComment", "Trappa");
Database.addText("se.buttonBackToTheCastle", "Tillbaka till slottet");
Database.addText("se.castleBigRoomHovenSpeechSad", "Hej ! Jag Ã¤r en mycket gammal bakugn . Jag brukade laga massor av goda bakverk , men ingen anvÃ¤nder mig lÃ¤ngre . Kanske ... kanske du kan hjÃ¤lpa mig ? LÃ¥t mig bara ta nÃ¥gra sÃ¶tsaker frÃ¥n dig ! Oroa dig inte , du kommer inte Ã¥ngra det ! Du kan lita pÃ¥ mig .");
Database.addText("se.castleBigRoomHovenNotEnough", "Oh ... du inte har tillrÃ¤ckligt med godis , kan jag inte gÃ¶ra nÃ¥got . Jag Ã¤r bara vÃ¤rdelÃ¶s . Jag Ã¤r vÃ¤rdelÃ¶s bakugn , det Ã¤r hur du ska ringa mig .");
Database.addText("se.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay! Tack sÃ¥ mycket! Jag anvÃ¤nde 100 godis och en chokladkaka , och jag gjorde du ... en smÃ¤rta au chocolat ! Det Ã¤r min favorit bakverk , hoppas jag att du kommer att gilla det ocksÃ¥!");
Database.addText("se.castleBigRoomHovenSpeechHappy", "Hey ! Om du vill att jag ska laga en annan bakelse , bara berÃ¤tta ! Jag skulle gÃ¤rna hjÃ¤lpa dig .");
Database.addText("se.castleBigRoomHovenSpeechHappyNotEnough", "Ã…h , har du inte tillrÃ¤ckligt med godis , tyvÃ¤rr . Jag behÃ¶ver 100 godis och en chokladkaka . Kom tillbaka nÃ¤r du har det !");
Database.addText("se.castleBigRoomHovenLetHovenTakeButton", "LÃ¥t ugnen ta alla sÃ¶tsaker man vill ta");
Database.addText("se.castleBigRoomHovenThanks", "Tack , ugn !");
Database.addText("se.dragonStopTickling", "Du dÃ¤r! Sluta kittla mig , snÃ¤lla .");
Database.addText("se.dragonStopTicklingButton", "Uh , oh , sorry , jag trodde jag skulle attackera dig");
Database.addText("se.dragonTalking", "Jag Ã¤r draken och detta Ã¤r min borg . Jag ser att du lyckats komma in , mÃ¥ste du vara vÃ¤ldigt modig ... Jag vill gÃ¤rna hjÃ¤lpa nÃ¥gon som du. Vad letar du efter ?");
Database.addText("se.dragonTalkingChallengeButton", "utmana");
Database.addText("se.dragonTalkingFameButton", "Fame");
Database.addText("se.dragonTalkingCandiesButton", "Candies");
Database.addText("se.dragonTalkingChallengeSpeech", "Ã…h , sÃ¥ du vill utmaning ? Jag tycker du ska gÃ¶ra en resa till helvetet sjÃ¤lvt , Ã¤r det kÃ¤nt att djÃ¤vulen Ã¤r en tuff utmanare . Hoppa pÃ¥ min rygg och jag tar dig dit !");
Database.addText("se.dragonTalkingFameSpeech", "Det bÃ¤sta sÃ¤ttet att bli berÃ¶md Ã¤r att mÃ¶ta utvecklaren sjÃ¤lv . Jag vet var han bor och jag kan ta dig dit . Men var beredd , kommer detta inte vara lÃ¤tt .");
Database.addText("se.dragonTalkingCandiesSpeech", "Ytterst Ã¤r det vi alla vill ha godis , inte Ã¤r det ? Jag tror att en av mina vÃ¤nner kan hjÃ¤lpa dig med det . Du kommer att kÃ¤nna igen honom lÃ¤tt , han har bara ett Ã¶ga . Bara berÃ¤tta fÃ¶r honom att du kÃ¤nner mig .");
Database.addText("se.dragonTalkingChallengeAnswer", "LÃ¥t oss dÃ¥ !");
Database.addText("se.dragonTalkingFameAnswer", "Jag Ã¤r redo .");
Database.addText("se.dragonTalkingCandiesAnswer", "Okej , tack !");
Database.addText("se.buttonBackToCastle", "Tillbaka till slottet");
Database.addText("se.talkingCandySpeechNoBox", "Hey ! Jag Ã¤r talande godis . Du vann nÃ¤stan matchen . Du behÃ¶ver bara hitta godis lÃ¥da . Det Ã¤r i ett hus utanfÃ¶r byn . Detta Ã¤r det sista steget !");
Database.addText("se.talkingCandySpeech1", "Hey ! Jag Ã¤r talande godis . Grattis , du vann matchen ! Jag kommer att Ã¶ppna ditt godis lÃ¥da fÃ¶r dig , det hÃ¤r Ã¤r din belÃ¶ning . Ska jag fortsÃ¤tta?");
Database.addText("se.talkingCandySpeech2", "Done ! Du kan nu skriva in det . Jag hoppas att du gillade spelet :)");
Database.addText("se.talkingCandyButton", "Yes !");
Database.addText("se.lighthousePuzzleResetButton", "Ã…terstÃ¤ll");
Database.addText("pl.cauldron.page0", "Instrukcja warzenia mikstur");
Database.addText("pl.cauldron.page1", "Spis treÅ›ci / Strona 2 : Mikstura zdrowia / Strona 3 : Mikstura Å¼Ã³Å‚wia / Strony 4-5 : Mikstura anty-grawitacyjna / Strony 6-7 : Mikstura szaÅ‚u / Strony 8-9 : Mikstura P / Strony 10-11 : Mikstura X");
Database.addText("pl.cauldron.page2", "Mikstura zdrowia / Mikstura zdrowia jest to najÅ‚atwiejsza mikstura do zrobienia. Do jej zrobienia potrzebujesz tylko cukierkÃ³w. UÅ¼yta w zadaniach, uleczy ciÄ™, przywracajÄ…c ci 100 punktÃ³w zdrowia. / Instrukcje : - WrzuÄ‡ 100 cukierkÃ³w do kotÅ‚a - Mieszaj przez parÄ™ sekund - Wlej do butelek / Tak jak w przypadku kaÅ¼dej mikstury, moÅ¼esz pomnoÅ¼yÄ‡ iloÅ›Ä‡ skÅ‚adnikÃ³w. Na przykÅ‚ad, jeÅ›li wrzucisz 300 cukierkÃ³w zamiast 100, uzyskasz 3 mikstury zdrowia.");
Database.addText("pl.cauldron.page3", "Mikstura Å¼Ã³Å‚wia / Mikstura Å¼Ã³Å‚wia jest trochÄ™ trudniejsza do przygotowania niÅ¼ mikstura zdrowia. Tym razem bÄ™dziesz potrzebowaÅ‚ i cukierkÃ³w i lizakÃ³w. / JeÅ›li wypijesz tÄ™ miksturÄ™ w trakcie zadania, zamieni ciÄ™ ona w Å¼Ã³Å‚wia. BÄ™dziesz poruszaÅ‚ siÄ™ wolniej ale bÄ™dziesz takÅ¼e o wiele bardziej odporny na ataki nieprzyjaciÃ³Å‚. / Instrukcje : -  WrzuÄ‡ 50 cukierkÃ³w do kotÅ‚a - Dodaj 500 lizakÃ³w - mieszaj przez okoÅ‚o 10 sekund - PrzestaÅ„ mieszaÄ‡ - Dodaj 50 cukierkÃ³w - Pomieszaj jeszcze przez parÄ™ sekund - Wlej do butelek / I teraz najwaÅ¼niejsza rzecz o ktÃ³rej nie moÅ¼esz zapomnieÄ‡ : gdy juÅ¼ zamienisz siÄ™ w Å¼Ã³Å‚wia, NIE obracaj siÄ™ na plecy. Nie bÄ™dziesz w stanie siÄ™ podnieÅ›Ä‡.");
Database.addText("pl.cauldron.page4", "Mikstura anty-grawitacyjna / Ta mikstura, wynaleziona przez dobrze znanego czarodzieja Isaaca, pozwala ci oprzeÄ‡ siÄ™ przyciÄ…ganiu grawitacyjnemu Ziemi przez parÄ™ sekund / Jest  szczegÃ³lnie uÅ¼yteczny po skoku ( jeÅ›li nie moÅ¼esz skakaÄ‡, powinieneÅ› zastanowiÄ‡ siÄ™ nad zdobyciem sprÄ™Å¼ynowego urzÄ…dzenia do podskakiwania) / Nie jest Å‚atwo go uwarzyÄ‡, bÄ™dziesz musiaÅ‚ podgrzaÄ‡ swÃ³j kocioÅ‚ i dokÅ‚adnie obserwowaÄ‡ jego temperaturÄ™ / Instrukcje : - WrzuÄ‡ 1000 cukierkÃ³w do kotÅ‚a - Podgrzewaj dopÃ³ki woda nie stanie siÄ™ letnia (lukewarm) - PrzestaÅ„ podgrzewaÄ‡ - Dodaj 1000 cukierkÃ³w - Podgrzewaj aÅ¼ woda bÄ™dzie wrzeÄ‡ (BOILING) - Wlej do butelek");
Database.addText("pl.cauldron.page5", "Mikstura Anty-grawitacyjna : przykÅ‚ad uÅ¼ycia / \"PrzeleÄ‡ nad dziurÄ…\" / *wypija miksturÄ™*");
Database.addText("pl.cauldron.page6", "Mikstura szaÅ‚u / Mikstura szaÅ‚u zamieni ciÄ™ w berserkera. / WadÄ… jest to, Å¼e zabierze to poÅ‚owÄ™ twoich punktÃ³w zdrowia. / ZaletÄ… jest to Å¼e podwoi ona zadawane przez ciebie obraÅ¼enia na parÄ™ sekund! / ugotowanie tej mikstury jest bardzo proste, ale bÄ™dziesz potrzebowaÅ‚ duÅ¼ej iloÅ›ci lizakÃ³w. / Oto instrukcje : - WrzuÄ‡ 20 000 lizakÃ³w do kotÅ‚a - Mieszaj dopÃ³ki nie rozbolÄ… ciÄ™ rÄ™ce - Wlej do butelek");
Database.addText("pl.cauldron.page7", "WaÅ¼na informacja dotyczÄ…ca mikstury berserkera / NIE dodawaj Å»ADNYCH cukierkÃ³w w trakcie warzenia tej mikstury! / Nawet jednego. / NaprawdÄ™. / Rezultaty mogÅ‚y by byÄ‡ nieoczekiwane.");
Database.addText("pl.cauldron.page8", "Mikstura P / Mikstura P jest dziwna. Nie jesteÅ› w stanie przewidzieÄ‡ co zrobi. MoÅ¼e ciÄ™ uleczy, moÅ¼e cie skrzywdzi, moÅ¼e sprawi Å¼e bÄ™dziesz silniejszy, albo sÅ‚abszy. MoÅ¼e ciÄ™ nawet zamieniÄ‡ w kogoÅ› (coÅ›?) innego. / CiÄ™Å¼ko jÄ… stworzyÄ‡! / Instrukcje : - WrzuÄ‡ 500 cukierkÃ³w do kotÅ‚a - Mieszaj przez parÄ™ sekund - PrzestaÅ„ mieszaÄ‡ - Dodaj 100 razy wiÄ™cej cukierkÃ³w niÅ¼ iloÅ›Ä‡ sekund przez ktÃ³rÄ… mieszaÅ‚eÅ›. Na przykÅ‚ad, jeÅ›li mieszaÅ‚eÅ› przez 4 sekundy, dodaj 400 cukierkÃ³w. Nie zwiÄ™kszaj tej iloÅ›ci jeÅ›li chcesz stworzyÄ‡ wiÄ™cej niÅ¼ jednÄ… miksturÄ™. - Podgrzewaj dopÃ³ki woda nie stanie siÄ™ letnia (lukewarm) - PrzestaÅ„ podgrzewaÄ‡ - Dodaj trochÄ™ lizakÃ³w - Pomieszaj - Wlej do butelek!");
Database.addText("pl.cauldron.page9", "ZrÃ³b dobry uÅ¼ytek z mikstury P / Jest parÄ™ zasad ktÃ³rych moÅ¼esz przestrzegaÄ‡ aby uzyskaÄ‡ lepsze rezultaty kiedy pijesz tÄ™ miksturÄ™. Pomimo tego Å¼e te zasady byÅ‚y okreÅ›lone doÅ›wiadczalnie, wydajÄ… siÄ™ dziaÅ‚aÄ‡ caÅ‚kiem dobrze. / - Im czÄ™Å›ciej bÄ™dziesz uÅ¼ywaÄ‡ mikstur P, tym czÄ™Å›ciej bÄ™dzie ona miaÅ‚a dziwne efekty. / - JeÅ›li masz bardzo maÅ‚o punktÃ³w Å¼ycia, to wypicie mikstury P jest prawdopodobnie dobrym pomysÅ‚em. / - ZwierzÄ™ta ktÃ³re wypijÄ… miksturÄ™ P zdajÄ… siÄ™ reagowaÄ‡ w bardzo zÅ‚y sposÃ³b.");
Database.addText("pl.cauldron.page10", "Mikstura X /  Mikstura X to legenda. MÃ³wi siÄ™, Å¼e komukolwiek uda siÄ™ jÄ… stworzyÄ‡ i wypiÄ‡, ten przeniesie siÄ™ do miejsca gdzie jeszcze nikt nie byÅ‚ / Nie wiem czy ta mikstura to tylko legenda czy nie, ale napiszÄ™ w tej ksiÄ…Å¼ce wszystko co o niej wiem. / Mikstura X jest wspominana w wielu starych legendach i ksiÄ™gach alchemicznych. Oto podsumowanie informacji ktÃ³re mogÄ… ci pomÃ³c jÄ… stworzyÄ‡. Powodzenia! / - MÃ³wi siÄ™ Å¼e trzeba jÄ… stworzyÄ‡ w piÄ™ciu krokach. / - MÃ³wi siÄ™ Å¼e nie potrzebne sÄ… Å¼adne lizaki z wyjÄ…tkiem jednego z krokÃ³w. / - MÃ³wi siÄ™ Å¼e moÅ¼na stworzyÄ‡ tylko jednÄ… miksturÄ™ X na raz.");
Database.addText("pl.cauldron.page11", "- Ten wiersz jest czÄ™sto cytowany jeÅ›li chodzi o miksturÄ™ X : / Pierwszego dnia, urodziÅ‚ siÄ™ pierwszy Cukierek. Ale na dworze byÅ‚o zimno. / Drugiego dnia, Cukierek dostaÅ‚ ojca. Ale na dworze byÅ‚o zimno. / Trzeciego dnia, Cukierek dostaÅ‚ brata. Ale na dworze byÅ‚o zimno. / Czwartego dnia, Cukierek dostaÅ‚ przyjaciela. Ale na dworze byÅ‚o zimno. / PiÄ…tego dnia, Cukierek dostaÅ‚ kochanka, i moÅ¼e brzmi to prymitywnie lub gÅ‚upawo, ale Cukierek wreszcie byÅ‚ szczÄ™Å›liwy, a na dworze byÅ‚o gorÄ…co.");
Database.addText("fr.cauldron.page0", "Manuel de prÃ©paration de potions");
Database.addText("fr.cauldron.page1", "Sommaire / Page 2 : potion de vie / Page 3 : potion de tortue / Pages 4-5 : potion anti-gravitÃ© / Pages 6-7 : potion de berserker / Pages 8-9 : la potion P / Pages 10-11 : la potion X");
Database.addText("fr.cauldron.page2", "Potion de vie / La potion de vie est l'une des plus faciles Ã  prÃ©parer, vraiment. Il faut seulement des bonbons. UtilisÃ©e pendant les quÃªtes, elle vous soignera en vous redonnant 100 points de vie. / Instructions : - Mettez 100 bonbons dans votre chaudron - MÃ©langez pendant quelques secondes - Mettez en bouteilles / Comme pour n'importe quelle potion, vous pouvez bien sÃ»r multiplier les quantitÃ©s. Par exemple, si vous utilisez 300 bonbons au lieu de 100, vous obtiendrez 3 potions de vie.");
Database.addText("fr.cauldron.page3", "Potion de tortue / La potion de tortue est un peu plus difficile Ã  prÃ©parer que la potion de vie. Vous aurez besoin de bonbons et de sucettes. / Si vous buvez cette potion pendant une quÃªte, elle vous transofrmera en tortue. Vous vous dÃ©placerez plus lentement, mais vous serez aussi plus rÃ©sistant aux attaques de vos ennemis. / Instructions : - Mettez 50 bonbons dans votre chaudron. - Ajoutez 500 sucettes dans votre chaudron - MÃ©langez pendant plus ou moins 10 secondes - ArrÃªtez de mÃ©langer - Ajoutez 50 bonbons - MÃ©langez encore pendant quelques secondes - Mettez en bouteilles / Et maintenant, la chose la plus importante que vous ne devriez jamais oublier : quand vous serez une tortue, SURTOUT ne vous retournez pas. Vous ne seriez pas capable de vous relever.");
Database.addText("fr.cauldron.page4", "Potion anti-gravitÃ© / Cette potion, qui a Ã©tÃ© inventÃ©e par le renommÃ© sorcier Isaac, vous permet de rÃ©sister Ã  la force gravitationnelle de la terre pour quelques secondes. / Elle est particuliÃ¨rement utile aprÃ¨s avoir sautÃ© (si vous ne pouvez pas sauter, vous devriez sÃ©rieusement penser Ã  obtenir un bÃ¢ton sauteur). / Elle n'est pas trÃ¨s facile Ã  prÃ©parer, vous aurez besoin de faire chauffer votre chaudron et de surveiller la tempÃ©rature avec attention. / Instructions : - Mettez 1000 bonbons dans votre chaudron - Chauffez jusqu'Ã  ce que l'eau soit tiÃ¨de - ArrÃªtez de chauffer - Ajoutez 1000 bonbons - Chauffez jusqu'Ã  ce que l'eau bout - Mettez en bouteilles");
Database.addText("fr.cauldron.page5", "Potion anti-gravitÃ© : cas d'utilisation / \"Voler au-dessus d'un prÃ©cipice\" / *boit la potion*");
Database.addText("fr.cauldron.page6", "Potion de berserker / La potion de berserker vous transforme en un berserker. / L'inconvÃ©nient est que cela consomme la moitiÃ© de votre vie. / L'avantage est que cela double vos dÃ©gÃ¢ts pendant quelques secondes ! / PrÃ©parer cette potion est trÃ¨s simple, mais vous aurez besoin de beaucoup de sucettes. / Voici les instructions : - Mettez 20 000 sucettes dans votre chaudron - MÃ©langez les jusqu'Ã  ce que vos bras vous fassent mal - Mettez en bouteilles");
Database.addText("fr.cauldron.page7", "Avertissement important concernant la potion de berserker / Ne PAS ajouter de bonbon pendant la prÃ©paration de cette potion. / Je veux dire, pas un seul. / Vraiment. / Le rÃ©sultat serait innatendu.");
Database.addText("fr.cauldron.page8", "La potion P / La potion P est une potion bizarre. Vous ne pouvez pas prÃ©dire ce qu'elle va faire. Elle pourrait vous soigner ou vous infliger des dommages, vous rendre plus fort ou plus faible, ou mÃªme vous transofmer en quelqu'un (quelque chose ?) d'autre. / Et en plus elle est dure Ã  prÃ©parer ! / Instructions : - Mettez 500 bonbons dans votre chaudron - MÃ©langez pendant quelques secondes - ArrÃªtez de mÃ©langer - Ajoutez 100 fois plus de bonbons que le nombre de secondes pendant lesquelles vous avez mÃ©langÃ©. Par exemple si vous avez mÃ©langÃ© pendant 4 secondes, vous devrez ajouter 400 bonbons. Ne multipliez pas cette quantitÃ©, mÃªme si vous voulez faire plus d'une potion. - Faites chauffer jusqu'Ã  ce que l'eau soit tiÃ¨de - ArrÃªtez de faire chauffer - Ajoutez des sucettes - MÃ©langez - Mettez en bouteilles !");
Database.addText("fr.cauldron.page9", "Faire bon usage de la potion P / Il y a certaines rÃ¨gles que vous pouvez suivre pour obtenir de meilleurs rÃ©sultats en buvant la potion P. Bien que ces rÃ¨gles aient Ã©tÃ© Ã©tablies de maniÃ¨re empirique, elles semblent assez bien fonctionner. / - Plus vous utilisez de potions P, plus elles semblent avoir des effets Ã©tranges. / - Si votre vie est trÃ¨s basse, vous devriez probablement utiliser une potion P. / - Les animaux qui boivent une potion P semblent trÃ¨s mal rÃ©agir.");
Database.addText("fr.cauldron.page10", "La potion X / La potion X est une lÃ©gende. Il est dit que quiconque parviendrait Ã  la prÃ©parer et Ã  la boire voyagerait jusqu'Ã  un endroit oÃ¹ personne n'est encore jamais allÃ©. / Je ne sais pas si cette potion est juste une lÃ©gende ou pas, mais je vais lister dans ce livre tout ce que je sais Ã  propos d'elle. / La potion X est mentionnÃ©e dans de nombreuses vieilles lÃ©gendes et livres d'alchimie. Voici un rÃ©sumÃ© des informations qui pourraient vous aider Ã  la prÃ©parer. Bonne chance ! / - Il est dit que 5 Ã©tapes sont nÃ©cessaires Ã  la prÃ©paration de la potion X. / - Il est dit qu'aucune sucette n'est nÃ©cessaire, mis Ã  part pour l'une des Ã©tapes. / - Il est dit que, contrairement aux autres potions, vous ne pouvez pas prÃ©parer plusieurs potions X Ã  la fois.");
Database.addText("fr.cauldron.page11", "- Enfin, le poÃ¨me suivant est souvent citÃ© quand on parle de la potion X : / Le premier jour, il donna naissance Ã  la toute premiÃ¨re Sucrerie. Mais il faisait froid dehors. / Le deuxiÃ¨me jour, il donna Ã  la Sucrerie un pÃ¨re. Mais il faisait froid dehors. / Le troisiÃ¨me jour, il donna Ã  la Sucrerie un frÃ¨re. Mais il faisait froid dehors. / Le quatriÃ¨me jour, il donna Ã  la Sucrerie un ami. Mais il faisait froid dehors. / Le cinquiÃ¨me jour, il donna Ã  la Sucrerie un amour, et cela peut paraÃ®tre simple ou niais, mais maintenant la Sucrerie Ã©tait heureuse, et il faisait chaud dehors.");
Database.addText("ru.cauldron.page0", "ÐœÐ°Ð½ÑƒÐ°Ð» Ð¿Ð¾ Ð·ÐµÐ»ÑŒÐµÐ²Ð°Ñ€ÐµÐ½Ð¸ÑŽ");
Database.addText("ru.cauldron.page1", "ÐžÐ³Ð»Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ / Ð¡Ñ‚Ñ€Ð°Ð½Ð¸Ñ†Ð° 2 : Ð—ÐµÐ»ÑŒÑ Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÑ / Ð¡Ñ‚Ñ€Ð°Ð½Ð¸Ñ†Ð° 3 : Ð§ÐµÑ€ÐµÐ¿Ð°ÑˆÑŒÐµ Ð·ÐµÐ»ÑŒÐµ / Ð¡Ñ‚Ñ€Ð°Ð½Ð¸Ñ†Ñ‹ 4-5 : ÐÐ½Ñ‚Ð¸Ð³Ñ€Ð°Ð²Ð¸Ñ‚Ð°Ñ†Ð¸Ð¾Ð½Ð½Ð¾Ðµ Ð·ÐµÐ»ÑŒÐµ / Ð¡Ñ‚Ñ€Ð°Ð½Ð¸Ñ†Ñ‹ 6-7 : Ð—ÐµÐ»ÑŒÐµ Ð±ÐµÑ€ÑÐµÑ€ÐºÐ° / Ð¡Ñ‚Ñ€Ð°Ð½Ð¸Ñ†Ñ‹ 8-9 : Ð—ÐµÐ»ÑŒÐµ P / Ð¡Ñ‚Ñ€Ð°Ð½Ð¸Ñ†Ñ‹ 10-11 : Ð—ÐµÐ»ÑŒÐµ X");
Database.addText("ru.cauldron.page2", "Ð—ÐµÐ»ÑŒÐµ Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÑ / Ð—ÐµÐ»ÑŒÐµ Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÑ ÑÑ‚Ð¾ Ð¾Ð´Ð½Ð¾ Ð¸Ð· ÑÐ°Ð¼Ñ‹Ñ… Ð»Ñ‘Ð³ÐºÐ¸Ñ… Ð´Ð»Ñ Ð²Ð°Ñ€ÐºÐ¸. Ð”Ð»Ñ Ð½ÐµÐ³Ð¾ Ð½ÑƒÐ¶Ð½Ñ‹ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹. Ð•ÑÐ»Ð¸ Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒ ÐµÐ³Ð¾ Ð² ÐºÐ²ÐµÑÑ‚Ð°Ñ…, Ñ‚Ð¾ Ð¾Ð½Ð¾ Ð²Ð¾ÑÑÑ‚Ð°Ð½Ð¾Ð²Ð¸Ñ‚ 100 Ð¾Ñ‡ÐºÐ¾Ð² Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÑ. / Ð ÐµÑ†ÐµÐ¿Ñ‚: - ÐŸÐ¾Ð»Ð¾Ð¶Ð¸Ñ‚Ðµ 100 ÐºÐ¾Ð½Ñ„ÐµÑ‚ Ð² Ð²Ð°Ñˆ ÐºÐ¾Ñ‚Ñ‘Ð» - ÐŸÐµÑ€ÐµÐ¼ÐµÑˆÐ¸Ð²Ð°Ð¹Ñ‚Ðµ Ð² Ñ‚ÐµÑ‡ÐµÐ½Ð¸Ðµ Ð½ÐµÑÐºÐ¾Ð»ÑŒÐºÐ¸Ñ… ÑÐµÐºÑƒÐ½Ð´ - Ð Ð°Ð·Ð»ÐµÐ¹Ñ‚Ðµ Ð¿Ð¾ Ð±ÑƒÑ‚Ñ‹Ð»Ð¾Ñ‡ÐºÐ°Ð¼ / Ð¢Ð°Ðº Ð¶Ðµ, ÐºÐ°Ðº Ð¸ Ð»ÑŽÐ±Ð¾Ðµ Ð´Ñ€ÑƒÐ³Ð¾Ðµ Ð·ÐµÐ»ÑŒÐµ, Ð²Ñ‹ Ð¼Ð¾Ð¶ÐµÑ‚Ðµ Ð²Ð°Ñ€ÑŒÐ¸Ñ€Ð¾Ð²Ð°Ñ‚ÑŒ ÐºÐ¾Ð»Ð¸Ñ‡ÐµÑÑ‚Ð²Ð¾ Ð³Ð¾Ñ‚Ð¾Ð²Ð¾Ð³Ð¾ Ð¿Ñ€Ð¾Ð´ÑƒÐºÑ‚Ð°. ÐÐ°Ð¿Ñ€Ð¸Ð¼ÐµÑ€, ÐµÑÐ»Ð¸ Ð²Ñ‹ Ð¿Ð¾Ð»Ð¾Ð¶Ð¸Ñ‚Ðµ Ð² ÐºÐ¾Ñ‚Ñ‘Ð» 300 ÐºÐ¾Ð½Ñ„ÐµÑ‚, Ñ‚Ð¾ Ð¿Ð¾Ð»ÑƒÑ‡Ð¸Ñ‚Ðµ 3 Ð·ÐµÐ»ÑŒÑ Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÑ.");
Database.addText("ru.cauldron.page3", "Ð§ÐµÑ€ÐµÐ¿Ð°ÑˆÑŒÐµ Ð·ÐµÐ»ÑŒÐµ / Ð§ÐµÑ€ÐµÐ¿Ð°ÑˆÑŒÐµ Ð·ÐµÐ»ÑŒÐµ Ð²Ð°Ñ€Ð¸Ñ‚ÑÑ Ñ‡ÑƒÑ‚ÑŒ ÑÐ»Ð¾Ð¶Ð½ÐµÐµ, Ñ‡ÐµÐ¼ Ð·ÐµÐ»ÑŒÐµ Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÑ. Ð’Ð°Ð¼ Ð±ÑƒÐ´ÑƒÑ‚ Ð½ÑƒÐ¶Ð½Ñ‹ Ð¸ ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹, Ð¸ Ð»ÐµÐ´ÐµÐ½Ñ†Ñ‹. / Ð•ÑÐ»Ð¸ Ð²Ñ‹ Ð²Ñ‹Ð¿ÑŒÐµÑ‚Ðµ ÑÑ‚Ð¾ Ð·ÐµÐ»ÑŒÐµ Ð²Ð¾ Ð²Ñ€ÐµÐ¼Ñ ÐºÐ²ÐµÑÑ‚Ð°, Ð¾Ð½Ð¾ Ð¿Ñ€ÐµÐ²Ñ€Ð°Ñ‚Ð¸Ñ‚ Ð²Ð°Ñ Ð² Ñ‡ÐµÑ€ÐµÐ¿Ð°Ñ…Ñƒ. Ð”Ð²Ð¸Ð³Ð°Ñ‚ÑŒÑÑ Ð²Ñ‹ Ð±ÑƒÐ´ÐµÑ‚Ðµ Ð¼ÐµÐ´Ð»ÐµÐ½Ð½ÐµÐµ, Ð½Ð¾ Ð·Ð°Ñ‚Ð¾ Ð¿Ð¾Ð»ÑƒÑ‡Ð¸Ñ‚Ðµ Ð´Ð¾Ð¿Ð¾Ð»Ð½Ð¸Ñ‚ÐµÐ»ÑŒÐ½ÑƒÑŽ Ð·Ð°Ñ‰Ð¸Ñ‚Ñƒ Ð¾Ñ‚ Ð°Ñ‚Ð°Ðº Ð¿Ñ€Ð¾Ñ‚Ð¸Ð²Ð½Ð¸ÐºÐ°. / Ð ÐµÑ†ÐµÐ¿Ñ‚: - ÐŸÐ¾Ð»Ð¾Ð¶Ð¸Ñ‚Ðµ 50 ÐºÐ¾Ð½Ñ„ÐµÑ‚ Ð² Ð²Ð°Ñˆ ÐºÐ¾Ñ‚Ñ‘Ð» - Ð”Ð¾Ð±Ð°Ð²ÑŒÑ‚Ðµ 500 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð² Ð² ÐºÐ¾Ñ‚Ñ‘Ð» - ÐŸÐµÑ€ÐµÐ¼ÐµÑˆÐ¸Ð²Ð°Ð¹Ñ‚Ðµ Ð¾ÐºÐ¾Ð»Ð¾ 10 ÑÐµÐºÑƒÐ½Ð´ - ÐŸÑ€ÐµÐºÑ€Ð°Ñ‚Ð¸Ñ‚Ðµ Ð¿ÐµÑ€ÐµÐ¼ÐµÑˆÐ¸Ð²Ð°Ñ‚ÑŒ - Ð”Ð¾Ð±Ð°Ð²ÑŒÑ‚Ðµ ÐµÑ‰Ñ‘ 50 ÐºÐ¾Ð½Ñ„ÐµÑ‚ - Ð¡Ð½Ð¾Ð²Ð° Ð¼ÐµÑˆÐ°Ð¹Ñ‚Ðµ Ð² Ñ‚ÐµÑ‡ÐµÐ½Ð¸Ðµ Ð½ÐµÑÐºÐ¾Ð»ÑŒÐºÐ¸Ñ… ÑÐµÐºÑƒÐ½Ð´ - Ð Ð°Ð·Ð»ÐµÐ¹Ñ‚Ðµ Ð¿Ð¾ Ð±ÑƒÑ‚Ñ‹Ð»Ð¾Ñ‡ÐºÐ°Ð¼ / Ð Ñ‚ÐµÐ¿ÐµÑ€ÑŒ ÑÐ°Ð¼Ð°Ñ Ð²Ð°Ð¶Ð½Ð°Ñ Ð²ÐµÑ‰ÑŒ, ÐºÐ¾Ñ‚Ð¾Ñ€ÑƒÑŽ Ð½ÐµÐ»ÑŒÐ·Ñ Ð·Ð°Ð±Ñ‹Ð²Ð°Ñ‚ÑŒ: Ð¿Ð¾ÑÐ»Ðµ Ð¿Ñ€ÐµÐ²Ñ€Ð°Ñ‰ÐµÐ½Ð¸Ñ Ð² Ñ‡ÐµÑ€ÐµÐ¿Ð°Ñ…Ñƒ, Ð½Ðµ Ð¿ÐµÑ€ÐµÐ²Ð¾Ñ€Ð°Ñ‡Ð¸Ð²Ð°Ð¹Ñ‚ÐµÑÑŒ Ð½Ð° ÑÐ¿Ð¸Ð½Ñƒ. Ð˜Ð½Ð°Ñ‡Ðµ Ð½Ðµ Ð¿Ð¾Ð´Ð½Ð¸Ð¼ÐµÑ‚ÐµÑÑŒ.");
Database.addText("ru.cauldron.page4", "ÐÐ½Ñ‚Ð¸Ð³Ñ€Ð°Ð²Ð¸Ñ‚Ð°Ñ†Ð¸Ð¾Ð½Ð½Ð¾Ðµ Ð·ÐµÐ»ÑŒÐµ / Ð˜Ð·Ð¾Ð±Ñ€ÐµÑ‚Ñ‘Ð½Ð½Ð¾Ðµ Ð¸Ð·Ð²ÐµÑÑ‚Ð½Ñ‹Ð¼ Ð²Ð¾Ð»ÑˆÐµÐ±Ð½Ð¸ÐºÐ¾Ð¼ ÐÐ¹Ð·ÐµÐºÐ¾Ð¼, ÑÑ‚Ð¾ Ð·ÐµÐ»ÑŒÐµ Ð¿Ð¾Ð·Ð²Ð¾Ð»Ð¸Ñ‚ Ð²Ð°Ð¼ ÑÐ¾Ð¿Ñ€Ð¾Ñ‚Ð¸Ð²Ð»ÑÑ‚ÑŒÑÑ Ð¿Ñ€Ð¸Ñ‚ÑÐ¶ÐµÐ½Ð¸ÑŽ Ð—ÐµÐ¼Ð»Ð¸ Ð² Ñ‚ÐµÑ‡ÐµÐ½Ð¸Ðµ Ð½ÐµÑÐºÐ¾Ð»ÑŒÐºÐ¸Ñ… ÑÐµÐºÑƒÐ½Ð´. / ÐžÐ½Ð¾ Ð¾ÑÐ¾Ð±ÐµÐ½Ð½Ð¾ Ð¿Ð¾Ð»ÐµÐ·Ð½Ð¾ Ð²Ð¾ Ð²Ñ€ÐµÐ¼Ñ Ð¿Ñ€Ñ‹Ð¶ÐºÐ¾Ð² (Ð° ÐµÑÐ»Ð¸ Ð²Ñ‹ Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ‚Ðµ Ð¿Ñ€Ñ‹Ð³Ð°Ñ‚ÑŒ, Ñ‚Ð¾ Ð²Ð°Ð¼ ÑÐ»ÐµÐ´ÑƒÐµÑ‚ Ð·Ð°Ð´ÑƒÐ¼Ð°Ñ‚ÑŒÑÑ Ð¾ Ð¿Ñ€Ð¸Ð¾Ð±Ñ€ÐµÑ‚ÐµÐ½Ð¸Ð¸ Ð¿Ð¾Ð³Ð¾-ÑÑ‚Ð¸ÐºÐ°). / ÐžÐ½Ð¾ Ð½Ðµ Ñ‚Ð°ÐºÐ¾Ðµ ÑƒÐ¶ Ð¸ Ð»Ñ‘Ð³ÐºÐ¾Ðµ Ð² Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚Ð¾Ð²Ð»ÐµÐ½Ð¸Ð¸, Ð²Ð°Ð¼ Ð½ÑƒÐ¶Ð½Ð¾ Ð±ÑƒÐ´ÐµÑ‚ Ð½Ð°Ð³Ñ€ÐµÑ‚ÑŒ ÐºÐ¾Ñ‚Ñ‘Ð» Ð¸ Ð²Ð½Ð¸Ð¼Ð°Ñ‚ÐµÐ»ÑŒÐ½Ð¾ ÑÐ»ÐµÐ´Ð¸Ñ‚ÑŒ Ð·Ð° ÐµÐ³Ð¾ Ñ‚ÐµÐ¼Ð¿ÐµÑ€Ð°Ñ‚ÑƒÑ€Ð¾Ð¹. / Ð ÐµÑ†ÐµÐ¿Ñ‚: - ÐŸÐ¾Ð»Ð¾Ð¶Ð¸Ñ‚Ðµ 1000 ÐºÐ¾Ð½Ñ„ÐµÑ‚ Ð² ÐºÐ¾Ñ‚Ñ‘Ð» - Ð“Ñ€ÐµÐ¹Ñ‚Ðµ ÐºÐ¾Ñ‚Ñ‘Ð», Ð¿Ð¾ÐºÐ° Ð²Ð¾Ð´Ð° Ð½Ðµ ÑÑ‚Ð°Ð½ÐµÑ‚ Ñ‚Ñ‘Ð¿Ð»Ð¾Ð¹ - ÐŸÑ€ÐµÐºÑ€Ð°Ñ‰Ð°Ð¹Ñ‚Ðµ Ð³Ñ€ÐµÑ‚ÑŒ ÐºÐ¾Ñ‚Ñ‘Ð» - Ð”Ð¾Ð±Ð°Ð²ÑŒÑ‚Ðµ ÐµÑ‰Ñ‘ 1000 ÐºÐ¾Ð½Ñ„ÐµÑ‚ - Ð“Ñ€ÐµÐ¹Ñ‚Ðµ ÐºÐ¾Ñ‚Ñ‘Ð», Ð¿Ð¾ÐºÐ° Ð²Ð¾Ð´Ð° Ð½Ðµ Ð·Ð°ÐºÐ¸Ð¿Ð¸Ñ‚ - Ð Ð°Ð·Ð»ÐµÐ¹Ñ‚Ðµ Ð¿Ð¾ Ð±ÑƒÑ‚Ñ‹Ð»Ð¾Ñ‡ÐºÐ°Ð¼");
Database.addText("ru.cauldron.page5", "ÐÐ½Ñ‚Ð¸Ð³Ñ€Ð°Ð²Ð¸Ñ‚Ð°Ñ†Ð¸Ð¾Ð½Ð½Ð¾Ðµ Ð·ÐµÐ»ÑŒÐµ: Ð¸ÑÐ¿Ð¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒ ÑƒÐ¼ÐµÐ½Ð¸Ðµ / \"Ð›ÐµÑ‚ÐµÑ‚ÑŒ Ð½Ð°Ð´ Ð¾Ð±Ñ€Ñ‹Ð²Ð¾Ð¼\" / *Ð²Ñ‹Ð¿Ð¸Ð²Ð°ÐµÑ‚ Ð·ÐµÐ»ÑŒÐµ*");
Database.addText("ru.cauldron.page6", "Ð—ÐµÐ»ÑŒÐµ Ð±ÐµÑ€ÑÐµÑ€ÐºÐ° / Ð—ÐµÐ»ÑŒÐµ Ð±ÐµÑ€ÑÐµÑ€ÐºÐ° Ð¿Ñ€ÐµÐ²Ñ€Ð°Ñ‰Ð°ÐµÑ‚ Ð²Ð°Ñ Ð² Ð±ÐµÑ€ÑÐµÑ€ÐºÐ°. / ÐŸÐ¾Ð±Ð¾Ñ‡Ð½Ñ‹Ð¹ ÑÑ„Ñ„ÐµÐºÑ‚: Ð¾Ð½Ð¾ Ð»Ð¸ÑˆÐ°ÐµÑ‚ Ð²Ð°Ñ Ð¿Ð¾Ð»Ð¾Ð²Ð¸Ð½Ñ‹ Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÑ. / ÐŸÐ»ÑŽÑÑ‹: ÑƒÐ²ÐµÐ»Ð¸Ñ‡Ð¸Ð²Ð°ÐµÑ‚ Ð²Ð°Ñˆ ÑƒÑ€Ð¾Ð½ Ð½Ð° Ð½ÐµÑÐºÐ¾Ð»ÑŒÐºÐ¾ ÑÐµÐºÑƒÐ½Ð´! / Ð¡Ð²Ð°Ñ€Ð¸Ñ‚ÑŒ ÑÑ‚Ð¾ Ð·ÐµÐ»ÑŒÐµ Ð¾Ñ‡ÐµÐ½ÑŒ Ð¿Ñ€Ð¾ÑÑ‚Ð¾, Ð½Ð¾ Ð²Ð°Ð¼ Ð¿Ð¾Ð½Ð°Ð´Ð¾Ð±ÑÑ‚ÑÑ Ð¾Ñ‡ÐµÐ½ÑŒ Ð¼Ð½Ð¾Ð³Ð¾ Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð². / Ð’Ð¾Ñ‚ Ñ€ÐµÑ†ÐµÐ¿Ñ‚: - ÐŸÐ¾Ð»Ð¾Ð¶Ð¸Ñ‚Ðµ 20 000 Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð² Ð² ÐºÐ¾Ñ‚Ñ‘Ð» - ÐŸÐµÑ€ÐµÐ¼ÐµÑˆÐ¸Ð²Ð°Ð¹Ñ‚Ðµ, Ð¿Ð¾ÐºÐ° Ñ€ÑƒÐºÐ¸ Ð½Ðµ Ð·Ð°Ð±Ð¾Ð»ÑÑ‚ - Ð Ð°Ð·Ð»ÐµÐ¹Ñ‚Ðµ Ð¿Ð¾ Ð±ÑƒÑ‚Ñ‹Ð»Ð¾Ñ‡ÐºÐ°Ð¼.");
Database.addText("ru.cauldron.page7", "Ð’Ð°Ð¶Ð½Ð¾Ðµ ÑƒÑ‚Ð¾Ñ‡Ð½ÐµÐ½Ð¸Ðµ, ÐºÐ°ÑÐ°ÑŽÑ‰ÐµÐµÑÑ Ð·ÐµÐ»ÑŒÑ Ð±ÐµÑ€ÑÐµÑ€ÐºÐ°. / ÐÐ• Ð”ÐžÐ‘ÐÐ’Ð›Ð¯Ð™Ð¢Ð• ÐºÐ¾Ð½Ñ„ÐµÑ‚Ñ‹ Ð² ÐºÐ¾Ñ‚Ñ‘Ð», ÐºÐ¾Ð³Ð´Ð° Ð²Ð°Ñ€Ð¸Ñ‚Ðµ ÑÑ‚Ð¾ Ð·ÐµÐ»ÑŒÐµ. / Ð’Ð¾Ð¾Ð±Ñ‰Ðµ Ð½Ð¸ Ð¾Ð´Ð½Ð¾Ð¹. / Ð¡ÐµÑ€ÑŒÑ‘Ð·Ð½Ð¾. / Ð ÐµÐ·ÑƒÐ»ÑŒÑ‚Ð°Ñ‚ Ð¿Ñ€ÐµÐ´ÑÐºÐ°Ð·Ð°Ñ‚ÑŒ Ð½ÐµÐ»ÑŒÐ·Ñ.");
Database.addText("ru.cauldron.page8", "Ð -Ð·ÐµÐ»ÑŒÐµ / Ð -Ð·ÐµÐ»ÑŒÐµ Ð¾Ñ‡ÐµÐ½ÑŒ ÑÑ‚Ñ€Ð°Ð½Ð½Ð¾Ðµ. Ð’Ñ‹ Ð½Ðµ ÑÐ¼Ð¾Ð¶ÐµÑ‚Ðµ Ð¿Ñ€ÐµÐ´ÑÐºÐ°Ð·Ð°Ñ‚ÑŒ, Ñ‡Ñ‚Ð¾ Ð¸Ð¼ÐµÐ½Ð½Ð¾ Ð¾Ð½Ð¾ ÑÐ¾Ñ‚Ð²Ð¾Ñ€Ð¸Ñ‚. ÐžÐ½Ð¾ Ð¼Ð¾Ð¶ÐµÑ‚ Ð²Ð°Ñ Ð¸Ð·Ð»ÐµÑ‡Ð¸Ñ‚ÑŒ Ð¸Ð»Ð¸ Ð½Ð°Ð½ÐµÑÑ‚Ð¸ Ð²Ð°Ð¼ ÑƒÑ€Ð¾Ð½, ÑÐ´ÐµÐ»Ð°Ñ‚ÑŒ Ð²Ð°Ñ ÑÐ¸Ð»ÑŒÐ½ÐµÐµ Ð¸Ð»Ð¸ ÑÐ»Ð°Ð±ÐµÐµ, Ð¸Ð»Ð¸ Ð´Ð°Ð¶Ðµ Ð¿Ñ€ÐµÐ²Ñ€Ð°Ñ‚Ð¸Ñ‚ÑŒ Ð²Ð°Ñ Ð² ÐºÐ¾Ð³Ð¾-Ð½Ð¸Ð±ÑƒÐ´ÑŒ (Ñ‡Ñ‚Ð¾-Ð½Ð¸Ð±ÑƒÐ´ÑŒ?) ÐµÑ‰Ñ‘. / Ð ÐµÑ‰Ñ‘ ÐµÐ³Ð¾ ÑÐ»Ð¾Ð¶Ð½Ð¾ ÑÐ²Ð°Ñ€Ð¸Ñ‚ÑŒ! / Ð ÐµÑ†ÐµÐ¿Ñ‚: - ÐŸÐ¾Ð»Ð¾Ð¶Ð¸Ñ‚Ðµ 500 ÐºÐ¾Ð½Ñ„ÐµÑ‚ Ð² ÐºÐ¾Ñ‚Ñ‘Ð» - ÐœÐµÑˆÐ°Ð¹Ñ‚Ðµ Ð½ÐµÑÐºÐ¾Ð»ÑŒÐºÐ¾ ÑÐµÐºÑƒÐ½Ð´ - ÐŸÑ€ÐµÐºÑ€Ð°Ñ‚Ð¸Ñ‚Ðµ Ð¼ÐµÑˆÐ°Ñ‚ÑŒ - Ð”Ð¾Ð±Ð°Ð²ÑŒÑ‚Ðµ Ð² 100 Ñ€Ð°Ð· Ð±Ð¾Ð»ÑŒÑˆÐµ ÐºÐ¾Ð½Ñ„ÐµÑ‚, Ñ‡ÐµÐ¼ ÐºÐ¾Ð»Ð¸Ñ‡ÐµÑÑ‚Ð²Ð¾ ÑÐµÐºÑƒÐ½Ð´, Ð² Ñ‚ÐµÑ‡ÐµÐ½Ð¸Ðµ ÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ñ… Ð²Ñ‹ Ð¼ÐµÑˆÐ°Ð»Ð¸. ÐÐ°Ð¿Ñ€Ð¸Ð¼ÐµÑ€, ÐµÑÐ»Ð¸ Ð²Ñ‹ Ð¼ÐµÑˆÐ°Ð»Ð¸ Ð·ÐµÐ»ÑŒÐµ Ð² Ñ‚ÐµÑ‡ÐµÐ½Ð¸Ðµ 4 ÑÐµÐºÑƒÐ½Ð´, Ñ‚Ð¾ Ð²Ð°Ð¼ Ð¿Ð¾Ð½Ð°Ð´Ð¾Ð±Ð¸Ñ‚ÑÑ Ð´Ð¾Ð±Ð°Ð²Ð¸Ñ‚ÑŒ 400 ÐºÐ¾Ð½Ñ„ÐµÑ‚. ÐÐ¸ÐºÐ¾Ð³Ð´Ð° Ð½Ðµ ÑƒÐ²ÐµÐ»Ð¸Ñ‡Ð¸Ð²Ð°Ð¹Ñ‚Ðµ ÑÑ‚Ð¾ Ñ‡Ð¸ÑÐ»Ð¾, Ð´Ð°Ð¶Ðµ ÐµÑÐ»Ð¸ Ð²Ð°Ð¼ Ð½ÑƒÐ¶Ð½Ð¾ ÑÐ²Ð°Ñ€Ð¸Ñ‚ÑŒ Ð±Ð¾Ð»ÑŒÑˆÐµ Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð·ÐµÐ»ÑŒÑ. - ÐŸÐ¾Ð´Ð¾Ð³Ñ€ÐµÐ²Ð°Ð¹Ñ‚Ðµ Ð´Ð¾ Ñ‚ÐµÑ… Ð¿Ð¾Ñ€, Ð¿Ð¾ÐºÐ° Ð²Ð¾Ð´Ð° Ð½Ðµ ÑÑ‚Ð°Ð½ÐµÑ‚ Ñ‚Ñ‘Ð¿Ð»Ð¾Ð¹ - ÐŸÑ€ÐµÐºÑ€Ð°Ñ‚Ð¸Ñ‚Ðµ Ð¿Ð¾Ð´Ð¾Ð³Ñ€ÐµÐ²Ð°Ñ‚ÑŒ - Ð”Ð¾Ð±Ð°Ð²ÑŒÑ‚Ðµ Ð½ÐµÑÐºÐ¾Ð»ÑŒÐºÐ¾ Ð»ÐµÐ´ÐµÐ½Ñ†Ð¾Ð² - ÐœÐµÑˆÐ°Ð¹Ñ‚Ðµ - Ð Ð°Ð·Ð»Ð¸Ð²Ð°Ð¹Ñ‚Ðµ Ð¿Ð¾ Ð±ÑƒÑ‚Ñ‹Ð»Ð¾Ñ‡ÐºÐ°Ð¼!");
Database.addText("ru.cauldron.page9", "Ð˜ÑÐ¿Ð¾Ð»ÑŒÐ·ÑƒÐ¹Ñ‚Ðµ Ð -Ð·ÐµÐ»ÑŒÐµ Ñ ÑƒÐ¼Ð¾Ð¼ / Ð’Ð¾Ñ‚ Ð½ÐµÑÐºÐ¾Ð»ÑŒÐºÐ¾ Ð¿Ñ€Ð°Ð²Ð¸Ð», ÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ð¼Ð¸ Ð²Ñ‹ Ð¼Ð¾Ð¶ÐµÑ‚Ðµ Ð²Ð¾ÑÐºÐ¾Ð»ÑŒÐ·Ð¾Ð²Ð°Ñ‚ÑŒÑÑ, Ñ‡Ñ‚Ð¾Ð±Ñ‹ Ð¿Ð¾Ð»ÑƒÑ‡Ð¸Ñ‚ÑŒ Ð»ÑƒÑ‡ÑˆÐ¸Ðµ Ñ€ÐµÐ·ÑƒÐ»ÑŒÑ‚Ð°Ñ‚Ñ‹ Ð¾Ñ‚ ÑƒÐ¿Ð¾Ñ‚Ñ€ÐµÐ±Ð»ÐµÐ½Ð¸Ñ Ð·ÐµÐ»ÑŒÑ. Ð¥Ð¾Ñ‚Ñ ÑÑ‚Ð¸ Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð° Ð±Ñ‹Ð»Ð¸ Ð¾Ð¿Ñ€ÐµÐ´ÐµÐ»ÐµÐ½Ñ‹ Ð½Ð°ÑƒÐ³Ð°Ð´, Ð¾Ð½Ð¸, ÐºÐ°Ð¶ÐµÑ‚ÑÑ, Ð¾Ñ‚Ð»Ð¸Ñ‡Ð½Ð¾ Ñ€Ð°Ð±Ð¾Ñ‚Ð°ÑŽÑ‚. / - Ð§ÐµÐ¼ Ð±Ð¾Ð»ÑŒÑˆÐµ Ð -Ð·ÐµÐ»Ð¸Ð¹ Ð²Ñ‹ Ð¿ÑŒÑ‘Ñ‚Ðµ, Ñ‚ÐµÐ¼ Ð±Ð¾Ð»ÐµÐµ ÑÑ‚Ñ€Ð°Ð½Ð½Ñ‹Ðµ ÑÑ„Ñ„ÐµÐºÑ‚Ñ‹ Ð¿Ð¾Ð»ÑƒÑ‡Ð°ÐµÑ‚Ðµ. / - Ð•ÑÐ»Ð¸ Ð²Ð°ÑˆÐµ Ð·Ð´Ð¾Ñ€Ð¾Ð²ÑŒÐµ Ð¿Ð¾Ñ‡Ñ‚Ð¸ Ð½Ð° Ð½ÑƒÐ»Ðµ, Ð²Ñ‹, Ð²Ð¾Ð·Ð¼Ð¾Ð¶Ð½Ð¾, Ð´Ð¾Ð»Ð¶Ð½Ñ‹ Ð¾Ð±ÑÐ·Ð°Ñ‚ÐµÐ»ÑŒÐ½Ð¾ Ð²Ñ‹Ð¿Ð¸Ñ‚ÑŒ Ð -Ð·ÐµÐ»ÑŒÐµ. / - Ð–Ð¸Ð²Ð¾Ñ‚Ð½Ñ‹Ðµ, ÐºÐ¾Ñ‚Ð¾Ñ€Ñ‹Ðµ Ð²Ñ‹Ð¿Ð¸Ð»Ð¸ Ð -Ð·ÐµÐ»ÑŒÐµ, ÐºÐ°Ð¶ÐµÑ‚ÑÑ, Ñ€ÐµÐ°Ð³Ð¸Ñ€ÑƒÑŽÑ‚ Ð½Ð° ÑÑ‚Ð¾ Ð¾Ñ‡ÐµÐ½ÑŒ Ð½ÐµÑ…Ð¾Ñ€Ð¾ÑˆÐ¾.");
Database.addText("ru.cauldron.page10", "Ð¥-Ð·ÐµÐ»ÑŒÐµ / Ð¥-Ð·ÐµÐ»ÑŒÐµ - ÑÑ‚Ð¾ Ð»ÐµÐ³ÐµÐ½Ð´Ð°. Ð“Ð¾Ð²Ð¾Ñ€ÑÑ‚, Ñ‡Ñ‚Ð¾ Ñ‚Ð¾Ñ‚, ÐºÑ‚Ð¾ Ð±ÑƒÐ´ÐµÑ‚ ÑÐ¿Ð¾ÑÐ¾Ð±ÐµÐ½ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚Ð¾Ð²Ð¸Ñ‚ÑŒ Ð¸ Ð²Ñ‹Ð¿Ð¸Ñ‚ÑŒ ÐµÐ³Ð¾, Ð¿Ð¾Ð¿Ð°Ð´Ñ‘Ñ‚ Ð² Ð¼ÐµÑÑ‚Ð¾, Ð³Ð´Ðµ Ð´Ð¾ Ð½ÐµÐ³Ð¾ ÐµÑ‰Ñ‘ Ð½Ð¸ÐºÑ‚Ð¾ Ð½Ðµ Ð±Ñ‹Ð». / Ð¯ Ð½Ðµ Ð·Ð½Ð°ÑŽ, Ð½Ð° ÑÐ°Ð¼Ð¾Ð¼ Ð»Ð¸ Ð´ÐµÐ»Ðµ ÑÑ‚Ð¾ Ð·ÐµÐ»ÑŒÐµ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ð»Ð¸ÑˆÑŒ Ð»ÐµÐ³ÐµÐ½Ð´Ð°, Ð½Ð¾ Ñ Ð½Ð°Ð¿Ð¸ÑˆÑƒ Ð² ÑÑ‚Ð¾Ð¹ ÐºÐ½Ð¸Ð³Ðµ Ð²ÑÑ‘, Ñ‡Ñ‚Ð¾ Ñ Ð·Ð½Ð°ÑŽ Ð¿Ñ€Ð¾ Ð½ÐµÐ³Ð¾. / Ð¥-Ð·ÐµÐ»ÑŒÐµ ÑƒÐ¿Ð¾Ð¼ÑÐ½ÑƒÑ‚Ð¾ Ð² Ð¼Ð½Ð¾Ð¶ÐµÑÑ‚Ð²Ðµ ÑÑ‚Ð°Ñ€Ñ‹Ñ… Ð»ÐµÐ³ÐµÐ½Ð´ Ð¸ Ð°Ð»Ñ…Ð¸Ð¼Ð¸Ñ‡ÐµÑÐºÐ¸Ñ… ÐºÐ½Ð¸Ð³. Ð’Ð¾Ñ‚ ÐºÑ€Ð°Ñ‚ÐºÐ°Ñ Ð¸Ð½Ñ„Ð¾Ñ€Ð¼Ð°Ñ†Ð¸Ñ, ÐºÐ¾Ñ‚Ð¾Ñ€Ð°Ñ Ð¿Ð¾Ð¼Ð¾Ð¶ÐµÑ‚ Ð²Ð°Ð¼ ÐµÐ³Ð¾ ÑÐ²Ð°Ñ€Ð¸Ñ‚ÑŒ. Ð£Ð´Ð°Ñ‡Ð¸! / - Ð“Ð¾Ð²Ð¾Ñ€ÑÑ‚, Ñ‡Ñ‚Ð¾ Ð²Ð°Ñ€ÐºÐ° ÑÐ¾ÑÑ‚Ð¾Ð¸Ñ‚ Ð¸Ð· 5 ÑˆÐ°Ð³Ð¾Ð². / - Ð“Ð¾Ð²Ð¾Ñ€ÑÑ‚, Ñ‡Ñ‚Ð¾ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ð² Ð¾Ð´Ð½Ð¾Ð¼ ÑˆÐ°Ð³Ðµ Ð¸Ð· Ð¿Ñ€Ð¾Ñ†ÐµÑÑÐ° Ð²Ð°Ñ€ÐºÐ¸ Ð½ÑƒÐ¶Ð½Ð¾ Ð´Ð¾Ð±Ð°Ð²Ð»ÑÑ‚ÑŒ Ð»ÐµÐ´ÐµÐ½Ñ†Ñ‹. / - Ð“Ð¾Ð²Ð¾Ñ€ÑÑ‚, Ñ‡Ñ‚Ð¾ Ð² Ð¾Ñ‚Ð»Ð¸Ñ‡Ð¸Ð¸ Ð¾Ñ‚ Ð¾ÑÑ‚Ð°Ð»ÑŒÐ½Ñ‹Ñ… Ð·ÐµÐ»Ð¸Ð¹, Ð¥-Ð·ÐµÐ»ÑŒÐµ Ð·Ð° Ñ€Ð°Ð· ÑÐ²Ð°Ñ€Ð¸Ñ‚ÑŒ Ð¼Ð¾Ð¶Ð½Ð¾ Ñ‚Ð¾Ð»ÑŒÐºÐ¾ Ð¾Ð´Ð½Ð¾.");
Database.addText("ru.cauldron.page11", "- Ð˜ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½ÐµÐµ: ÑÐ»ÐµÐ´ÑƒÑŽÑ‰Ð°Ñ Ð¿Ð¾ÑÐ¼Ð° Ñ‡Ð°ÑÑ‚Ð¾ Ñ†Ð¸Ñ‚Ð¸Ñ€ÑƒÐµÑ‚ÑÑ Ð² ÐºÐ½Ð¸Ð³Ð°Ñ… Ð¿Ñ€Ð¸ ÑƒÐ¿Ð¾Ð¼Ð¸Ð½Ð°Ð½Ð¸Ð¸ Ð¥-Ð·ÐµÐ»ÑŒÑ: / Ð’ Ð¿ÐµÑ€Ð²Ñ‹Ð¹ Ð´ÐµÐ½ÑŒ Ñ€Ð¾Ð´Ð¸Ð»Ð°ÑÑŒ ÑÐ°Ð¼Ð°Ñ Ð¿ÐµÑ€Ð²Ð°Ñ ÐšÐ¾Ð½Ñ„ÐµÑ‚Ð°. ÐÐ¾ ÑÐ½Ð°Ñ€ÑƒÐ¶Ð¸ Ð±Ñ‹Ð»Ð¾ Ñ…Ð¾Ð»Ð¾Ð´Ð½Ð¾. / Ð’Ð¾ Ð²Ñ‚Ð¾Ñ€Ð¾Ð¹ Ð´ÐµÐ½ÑŒ, Ñƒ ÐšÐ¾Ð½Ñ„ÐµÑ‚Ñ‹ Ð¿Ð¾ÑÐ²Ð¸Ð»ÑÑ Ð¾Ñ‚ÐµÑ†. ÐÐ¾ ÑÐ½Ð°Ñ€ÑƒÐ¶Ð¸ Ð±Ñ‹Ð»Ð¾ Ñ…Ð¾Ð»Ð¾Ð´Ð½Ð¾. / ÐÐ° Ñ‚Ñ€ÐµÑ‚Ð¸Ð¹ Ð´ÐµÐ½ÑŒ Ñƒ ÐšÐ¾Ð½Ñ„ÐµÑ‚Ñ‹ Ð¿Ð¾ÑÐ²Ð¸Ð»ÑÑ Ð±Ñ€Ð°Ñ‚. ÐÐ¾ ÑÐ½Ð°Ñ€ÑƒÐ¶Ð¸ Ð±Ñ‹Ð»Ð¾ Ñ…Ð¾Ð»Ð¾Ð´Ð½Ð¾. / ÐÐ° Ð¿ÑÑ‚Ñ‹Ð¹ Ð´ÐµÐ½ÑŒ Ñƒ ÐšÐ¾Ð½Ñ„ÐµÑ‚Ñ‹ Ð¿Ð¾ÑÐ²Ð¸Ð»ÑÑ Ð»ÑŽÐ±Ð¾Ð²Ð½Ð¸Ðº, Ð¸ ÑÑ‚Ð¾ Ð¼Ð¾Ð¶ÐµÑ‚ Ð¿Ñ€Ð¾Ð·Ð²ÑƒÑ‡Ð°Ñ‚ÑŒ Ð³Ð»ÑƒÐ¿Ð¾ Ð¸ Ð¿Ñ€Ð¾ÑÑ‚Ð¾, Ð½Ð¾ Ñ‚ÐµÐ¿ÐµÑ€ÑŒ ÐšÐ¾Ð½Ñ„ÐµÑ‚Ð° ÑÑ‚Ð°Ð»Ð° ÑÑ‡Ð°ÑÑ‚Ð»Ð¸Ð²Ð°, Ð¸ ÑÐ½Ð°Ñ€ÑƒÐ¶Ð¸ Ð±Ñ‹Ð»Ð¾ Ð³Ð¾Ñ€ÑÑ‡Ð¾.");
Database.addText("tr.cauldron.page0", "Ä°ksir rehberi");
Database.addText("tr.cauldron.page1", "Ã–zet / Sayfa 2 : Can iksiri / Sayfa 3 : KaplumbaÄŸa iksiri / Sayfa 4-5 : Yer Ã§ekimini yenme iksiri / Sayfa 6-7: Kudurma iksiri / Sayfa 8-9 : P iksiri / Sayfa 10-11 : X iksiri");
Database.addText("tr.cauldron.page2", "Can iksiri / Can iksiri yapmasÄ± en kolaylarÄ±ndan biri, gerÃ§ekten. Sadece ÅŸeker kullanÄ±yorsun. GÃ¶revlerde kullanÄ±ldÄ±ÄŸÄ±nda sana 100 can puanÄ± vererek iyileÅŸtirir. / AÃ§Ä±klama: - Kazana 100 tane ÅŸeker koy - Bir kaÃ§ saniyeliÄŸine karÄ±ÅŸtÄ±r.  -ÅžiÅŸeye koy / Herhangi bir iksir gibi, miktarlarÄ± tabii ki katlayabilirsin. Ã–rneÄŸin 100 ÅŸeker yerine 300 ÅŸeker kullanÄ±rsan 3 tane can iksiri elde edersin.");
Database.addText("tr.cauldron.page3", "KaplumbaÄŸa iksiri / KaplumbaÄŸa iksirini yapmak can iksirini yapmaktan bir tÄ±k daha zor. Hem ÅŸekere hem lolipopa ihtiyacÄ±n var. / Bu iksiri gÃ¶revlerde iÃ§ersen, seni bir kaplumbaÄŸaya Ã§evirir. Daha yavaÅŸ hareket edersin ama dÃ¼ÅŸmanlarÄ±nÄ±n saldÄ±rÄ±larÄ±na daha dayanÄ±klÄ± olursun. / AÃ§Ä±klama: -Kazana 50 ÅŸeker koy. -Kazana 500 lolipop ekle -AÅŸaÄŸÄ± yukarÄ± 10 saniye karÄ±ÅŸtÄ±r -KarÄ±ÅŸtÄ±rmayÄ± durdur -50 ÅŸeker ekle -Bir kaÃ§ saniye tekrar karÄ±ÅŸtÄ±r -ÅžiÅŸelere koy. / Ve ÅŸimdi unutmaman gereken en Ã¶nemli ÅŸey: kaplumbaÄŸa olduÄŸun zaman ters dÃ¶nME. Bir daha kalkamayabilirsin.");
Database.addText("tr.cauldron.page4", "Yer Ã§ekimini yenme iksiri / Bu iksir, meÅŸhur sihirbaz Isaac tarafÄ±ndan icat edilmiÅŸ, bir kaÃ§ saniyeliÄŸine DÃ¼nyanÄ±n yer Ã§ekimine karÅŸÄ± direnmeni saÄŸlar. / Ã–zellikle zÄ±pladÄ±ktan sonra kullanÄ±ÅŸlÄ±dÄ±r (eÄŸer zÄ±playamÄ±yorsan, cidden bir pogo Ã§ubuÄŸu bulmayÄ± dÃ¼ÅŸÃ¼nmelisin). / YapmasÄ± Ã§ok kolay deÄŸil, kazanÄ±nÄ± Ä±sÄ±tmalÄ± ve sÄ±caklÄ±ÄŸa dikkatlice bakmalÄ±sÄ±n. / AÃ§Ä±klama :-Kazana 1000 ÅŸeker koy -Su Ä±lÄ±k olana kadar Ä±sÄ±t -IsÄ±tmayÄ± durdur -1000 ÅŸeker ekle -Su kaynayana kadar Ä±sÄ±t -ÅžiÅŸelere koy");
Database.addText("tr.cauldron.page5", "Yer Ã§ekimini yenme iksiri : kullanma durumlarÄ± / \"BoÅŸluÄŸun Ã¼zerinden uÃ§arken\" / *iksiri iÃ§er*");
Database.addText("tr.cauldron.page6", "Kudurma iksiri / Kudurma iksiri seni vahÅŸi bir savaÅŸÃ§Ä±ya Ã§evirir. / DezavantajlarÄ±, canÄ±nÄ±n yarÄ±sÄ±nÄ± tÃ¼ketir. / AvantajlarÄ±, hasarÄ±nÄ± birkaÃ§ saniyeliÄŸine iki katÄ±na Ã§Ä±karÄ±r! / Bu iksiri yapmak Ã§ok basit, fakat Ã§ok miktarda lolipopa ihtiyacÄ±n olacak. / AÃ§Ä±klamalar ÅŸÃ¶yle: -20 000 lolipopu kazana koy -KollarÄ±n acÄ±yana kadar karÄ±ÅŸtÄ±r -ÅžiÅŸelere koy");
Database.addText("tr.cauldron.page7", "Kudurma iksiriyle ilgili Ã¶nemli bir bildiri / Bu iksiri yaparken SAKIN ÅŸeker eklemeyin. / Yani, tek bir tane bile. / GerÃ§ekten / SonuÃ§lar beklenmedik olacaktÄ±r.");
Database.addText("tr.cauldron.page8", "P iksiri /P iksiri ilginÃ§tir. Ne yapacaÄŸÄ±nÄ± tahmin edemezsin. Seni iyileÅŸtirebilir ya da hasar verebilir, seni gÃ¼Ã§lendirir ya da zayÄ±flatabilir, hatta seni baÅŸka birine (biÅŸeye?) Ã§evirebilir. / YapmasÄ± da zordur! / AÃ§Ä±klamalar: -Kazana 500 ÅŸeker koy -Bir kaÃ§ saniye karÄ±ÅŸtÄ±r -KarÄ±ÅŸtÄ±rmayÄ± durdur -KaÃ§ saniye karÄ±ÅŸtÄ±rdÄ±ysan onun 100 katÄ± ÅŸeker ekle. Ã–rneÄŸin 4 saniye karÄ±ÅŸtÄ±rdÄ±ysan 40 ÅŸeker eklemelisin. Bu miktarÄ± katlama, eÄŸer birden fazla iksir yapmak istiyorsan bile deÄŸiÅŸtirme. Suyu Ä±lÄ±k olana kadar Ä±sÄ±t -IsÄ±tmayÄ± durdur -Biraz lolipop ekle -KarÄ±ÅŸtÄ±r -ÅžiÅŸelere koy!");
Database.addText("tr.cauldron.page9", "P iksirini kullanma durumlarÄ± / P iksirini kullanÄ±rken daha iyi sonuÃ§lar alman iÃ§in uygulaman gereken bir kaÃ§ kural var. Bu kurallar deneysel olarak tanÄ±mlansa da, gayet iyi iÅŸliyor gibi gÃ¶rÃ¼nÃ¼yor. / -Ne kadar P iksiri kullanÄ±rsan, o kadar ilginÃ§ etkileri olurmuÅŸ. / -EÄŸer canÄ±n azsa muhtemelen P iksiri iÃ§melisin. / -P iksirini iÃ§en hayvanlar Ã§ok kÃ¶tÃ¼ bir ÅŸekilde etkileniyormuÅŸ.");
Database.addText("tr.cauldron.page10", "X iksiri / X iksiri bir efsanedir. Derler ki, iksiri yapÄ±p iÃ§meye mazhar olan kiÅŸi kimsenin daha Ã¶nce gitmediÄŸi bir yere seyahat eder. / Bu iksirin efsane olup olmadÄ±ÄŸÄ±nÄ± bilmiyorum ama hakkÄ±nda bildiÄŸin her ÅŸeyi buraya yazacaÄŸÄ±m. / X iksirinden eski alÅŸimi kitaplarÄ±nda Ã§okÃ§a bahsedilmektedir. Burada yapmana yardÄ±m edebilecek bilgilerin Ã¶zeti var. Ä°yi ÅŸanslar! / Bu iksiri yapmak iÃ§in gerekli 5 temel aÅŸama vardÄ±r. / -Denir ki, hiÃ§ lolipop gerekmez, bir aÅŸama hariÃ§. / -Denir ki, diÄŸer iksirler gibi tek seferde birden Ã§ok X iksiri yapamazsÄ±n.");
Database.addText("tr.cauldron.page11", "-Son olarak, konu X iksiri olduÄŸunda sÄ±radaki ÅŸiir anÄ±lÄ±r: / GÃ¼nlerden birincisinde,O, ilk TatlÄ±yÄ± doÄŸurdu. Ama dÄ±ÅŸarÄ±sÄ± soÄŸuktu. / GÃ¼nlerden ikincisinde, O, tatlÄ±ya bir baba verdi. Ama dÄ±ÅŸarÄ±sÄ± soÄŸuktu. / GÃ¼nlerden Ã¼Ã§Ã¼ncÃ¼sÃ¼nde, O, tatlÄ±ya bir kardeÅŸ verdi. Ama dÄ±ÅŸarÄ±sÄ± soÄŸuktu. / GÃ¼nlerden dÃ¶rdÃ¼ncÃ¼sÃ¼nde, O, ÅŸekere bir arkadaÅŸ verdi. Ama dÄ±ÅŸarÄ±sÄ± soÄŸuktu. / GÃ¼nlerden beÅŸincisinde, O, ÅŸekere bir sevgili verdi, ve belki basit veya saÃ§ma gÃ¶rÃ¼nse de, TatlÄ± artÄ±k mutluydu, ve dÄ±ÅŸarÄ±sÄ± sÄ±caktÄ±.");
Database.addText("zh.cauldron.page0", "ç‚¼è¯æ‰‹å†Œ");
Database.addText("zh.cauldron.page1", "ç›®å½• / ç¬¬2é¡µï¼šç”Ÿå‘½è¯å‰‚ / ç¬¬3é¡µï¼šä¹Œé¾Ÿè¯å‰‚ / ç¬¬4-5é¡µï¼šåé‡åŠ›è¯å‰‚ / ç¬¬6-7é¡µï¼šç‹‚æš´è¯å‰‚ / ç¬¬8-9é¡µï¼šPè¯å‰‚ / ç¬¬10-11é¡µï¼šXè¯å‰‚");
Database.addText("zh.cauldron.page2", "ç”Ÿå‘½è¯å‰‚ / ç”Ÿå‘½è¯å‰‚æ˜¯æœ€å®¹æ˜“ç‚¼åˆ¶çš„è¯å‰‚ä¹‹ä¸€ã€‚å®ƒæ‰€éœ€è¦çš„ç´ æåªæœ‰ç³–æžœã€‚åœ¨æŽ¢ç´¢ä¸­ä½¿ç”¨ç”Ÿå‘½è¯å‰‚å¯ä¸ºä½ æ¢å¤100ç‚¹ç”Ÿå‘½å€¼ã€‚ / ç‚¼è¯æŒ‡å—ï¼š - å°†100é¢—ç³–æžœæ”¾å…¥ç‚¼è¯é‡œ ê†¼ æ…æ‹Œæ•°ç§’ ê†¼ å°†è¯å‰‚è£…å…¥ç“¶ä¸­ / ä¸Žå…¶ä»–è¯å‰‚ç›¸åŒï¼Œä½ å¯ä»¥åœ¨ä¸€æ¬¡ç‚¼åˆ¶è¿‡ç¨‹ä¸­äº§å‡ºå¤šç“¶è¯å‰‚ã€‚ä¸¾ä¾‹æ¥è¯´ï¼Œå¦‚æžœä½ æ”¾å…¥ç‚¼è¯é‡œä¸­çš„æ˜¯300é¢—ç³–æžœè€Œä¸æ˜¯100é¢—ï¼Œä½ å°±èƒ½å¤Ÿå¾—åˆ°3ç“¶ç”Ÿå‘½è¯å‰‚ã€‚");
Database.addText("zh.cauldron.page3", "ä¹Œé¾Ÿè¯å‰‚ / ä¸Žç”Ÿå‘½è¯å‰‚ç›¸æ¯”ï¼Œä¹Œé¾Ÿè¯å‰‚çš„ç‚¼åˆ¶éš¾åº¦è¦ç¨å¾®é«˜ä¸€äº›ã€‚ä½ éœ€è¦å‡†å¤‡å¥½ç³–æžœå’Œæ£’æ£’ç³–ã€‚ / åœ¨æŽ¢ç´¢ä¸­å–ä¸‹è¿™ç§è¯å‰‚å¯ä»¥æŠŠä½ å˜æˆä¸€åªä¹Œé¾Ÿã€‚ä½ çš„ç§»åŠ¨é€Ÿåº¦ä¼šæ›´åŠ ç¼“æ…¢ï¼Œä½†å¯¹äºŽæ•Œäººæ”»å‡»çš„æŠµæŠ—åŠ›ä¼šå¾—åˆ°æå‡ã€‚ / ç‚¼è¯æŒ‡å—ï¼š - å°†50é¢—ç³–æžœæ”¾å…¥ç‚¼è¯é‡œ ê†¼ å°†500æ ¹æ£’æ£’ç³–æ”¾å…¥ç‚¼è¯é‡œ ê†¼ æ…æ‹Œ10ç§’å·¦å³ ê†¼ åœæ­¢æ…æ‹Œ ê†¼ å‘é‡œä¸­åŠ å…¥50é¢—ç³–æžœ ê†¼ æ…æ‹Œæ•°ç§’ ê†¼å°†è¯å‰‚è£…å…¥ç“¶ä¸­ / æœ€åŽï¼Œåƒä¸‡åˆ«å¿˜äº†æœ€é‡è¦çš„äº‹ï¼šå½“ä½ å˜æˆä¸€åªä¹Œé¾Ÿä¹‹åŽï¼Œè¯·ä¸è¦è½¬èº«ã€‚ä½ ä¼šåº•æœå¤©çˆ¬ä¸èµ·æ¥çš„ã€‚");
Database.addText("zh.cauldron.page4", "åé‡åŠ›è¯å‰‚ / è¿™ç§è¯å‰‚æ˜¯ç”±è‘—åçš„å·«å¸ˆè‰¾è¨å…‹æ‰€å‘æ˜Žçš„ï¼Œå®ƒèƒ½å¤Ÿè®©ä½¿ç”¨è€…åœ¨æ•°ç§’å†…æŠ—æ‹’åœ°å¿ƒå¼•åŠ›ã€‚ / åœ¨è·³è·ƒåŽé¥®ç”¨çš„æ•ˆæžœæ‹”ç¾¤ï¼ˆå¦‚æžœä½ è¿˜ä¸èƒ½è·³è·ƒçš„è¯ï¼Œä½ åº”è¯¥è®¤çœŸè€ƒè™‘åŽ»æžä¸€æ ¹å¼¹è·³æ£’äº†ï¼‰ã€‚ / è¿™ç§è¯å‰‚çš„ç‚¼åˆ¶æ–¹æ³•å¹¶ä¸ç®€å•ï¼Œä½ éœ€è¦åŠ çƒ­ç‚¼è¯é‡œå¹¶ç»†å¿ƒæŠŠæ¡æ¸©åº¦ã€‚ / ç‚¼è¯æŒ‡å—ï¼š - å°†1000é¢—ç³–æžœæ”¾å…¥ç‚¼è¯é‡œ ê†¼ åŠ çƒ­ï¼Œç›´åˆ°æ°´å¾®æ¸© ê†¼ åœæ­¢åŠ çƒ­ ê†¼ å‘é‡œä¸­åŠ å…¥1000é¢—ç³–æžœ ê†¼ åŠ çƒ­ï¼Œç›´åˆ°æ°´æ²¸è…¾ ê†¼å°†è¯å‰‚è£…å…¥ç“¶ä¸­");
Database.addText("zh.cauldron.page5", "åé‡åŠ›è¯å‰‚ï¼šä½¿ç”¨å®žä¾‹ / â€œé£žè·ƒæ·±æ¸Šâ€ / *å–ä¸‹è¯å‰‚*");
Database.addText("zh.cauldron.page6", "ç‹‚æš´è¯å‰‚ / ç‹‚æš´è¯å‰‚å¯ä»¥å°†ä½¿ç”¨è€…å˜æˆä¸€ä½ç‹‚æˆ˜å£«ã€‚ / å…¶å‰¯ä½œç”¨æ˜¯è€—æŽ‰ä½ çš„ä¸€åŠç”Ÿå‘½å€¼ã€‚ / è€Œå¢žç›Šæ•ˆæžœæ˜¯åœ¨æ•°ç§’å†…ä»¤ä½ çš„ä¼¤å®³åŠ å€ï¼ / ç‚¼åˆ¶è¿™ä¸€è¯å‰‚çš„æ–¹æ³•éžå¸¸ç®€å•ï¼Œä½†ä¼šæ¶ˆè€—æŽ‰å¤§é‡çš„æ£’æ£’ç³–ã€‚ / è¿™é‡Œæ˜¯ç‚¼è¯æŒ‡å—ï¼š - å°†20 000æ ¹æ£’æ£’ç³–æ”¾å…¥ç‚¼è¯é‡œ ê†¼ æ…æ‹Œï¼Œç›´åˆ°ä½ çš„èƒ³è†Šé…¸ç—› ê†¼ å°†è¯å‰‚è£…å…¥ç“¶ä¸­");
Database.addText("zh.cauldron.page7", "å…³äºŽç‹‚æš´è¯å‰‚çš„é‡è¦æ³¨é‡Š / ä¸è¦åœ¨ç‚¼åˆ¶è¯¥è¯å‰‚çš„è¿‡ç¨‹ä¸­å‘é‡œä¸­åŠ å…¥ä»»ä½•ç³–æžœã€‚ / æˆ‘æ˜¯è®¤çœŸçš„ï¼Œè¿žä¸€é¢—ç³–æžœéƒ½ä¸è¦æ”¾ / æˆ‘å»ºè®®å‘è‡ªçœŸå¿ƒ / æ”¾äº†çš„è¯ï¼Œä¼šå‘ç”Ÿå‡ºäººæ„æ–™çš„äº‹");
Database.addText("zh.cauldron.page8", "Pè¯å‰‚ / Pè¯å‰‚æ˜¯ç›¸å½“å¥‡æ€ªçš„è¯å‰‚ã€‚æ²¡äººèƒ½é¢„æµ‹å®ƒèƒ½èµ·åˆ°ä»€ä¹ˆä½œç”¨ã€‚å®ƒä¹Ÿè®¸ä¼šæ²»æ„ˆä½ ï¼Œä¹Ÿè®¸ä¼šå¯¹ä½ é€ æˆä¼¤å®³ï¼Œå®ƒå¯èƒ½ä¼šè®©ä½ å˜å¼ºï¼Œä¹Ÿå¯èƒ½ä¼šè®©ä½ å˜å¼±ï¼Œç”šè‡³è¿˜æœ‰å‡ çŽ‡å°†ä½ å˜æˆå…¶ä»–äººï¼ˆæˆ–å…¶ä»–ä¸œè¥¿ï¼Ÿï¼‰ / è€Œä¸”å®ƒçš„ç‚¼åˆ¶æ–¹æ³•ä¹Ÿç›¸å½“å¤æ‚ï¼ / ç‚¼è¯æŒ‡å—: - å°†500é¢—ç³–æžœæ”¾å…¥ç‚¼è¯é‡œ ê†¼ æ…æ‹Œæ•°ç§’ ê†¼ åœæ­¢æ…æ‹Œ ê†¼å‘é‡œä¸­åŠ å…¥100å€äºŽä½ æ…æ‹Œç§’æ•°çš„ç³–æžœã€‚ä¸¾ä¾‹æ¥è¯´ï¼Œå¦‚æžœä½ æ…æ‹Œäº†4ç§’é’Ÿï¼Œå°±éœ€è¦åŠ å…¥400é¢—ç³–æžœã€‚å¦‚æžœä½ è¦ä¸€æ¬¡ç‚¼åˆ¶å¤šç“¶è¯å‰‚ï¼Œä¸è¦å†å€å¢žè¿™ä¸€æ•°å­—ã€‚ - åŠ çƒ­ï¼Œç›´åˆ°æ°´å¾®æ¸© ê†¼ åœæ­¢åŠ çƒ­ ê†¼ åŠ å…¥ä¸€äº›æ£’æ£’ç³– ê†¼ æ…æ‹Œ ê†¼ å°†è¯å‰‚è£…å…¥ç“¶ä¸­ï¼");
Database.addText("zh.cauldron.page9", "å¦¥å–„åˆ©ç”¨Pè¯å‰‚ / å¦‚æžœä½ æƒ³è®©å–ä¸‹çš„Pè¯å‰‚å‘æŒ¥æ›´å¥½çš„æ•ˆæžœï¼Œåº”å½“éµå®ˆä»¥ä¸‹è§„åˆ™ã€‚å°½ç®¡è¿™äº›è§„åˆ™éƒ½æ˜¯æ ¹æ®ç»éªŒæ€»ç»“å‡ºæ¥çš„ï¼Œä½†å®ƒä»¬ä¼¼ä¹Žç›¸å½“æœ‰æ•ˆã€‚ / -ä½ å–è¿‡çš„Pè¯å‰‚è¶Šå¤šï¼ŒPè¯å‰‚çš„å¥‡æ€ªåŠŸæ•ˆå°±è¶Šå¤šã€‚ / -å½“ä½ æ€§å‘½åž‚å±æ—¶ï¼Œå–ä¸‹Pè¯å‰‚ä¼¼ä¹Žæ˜¯æ˜Žæ™ºçš„é€‰æ‹©ã€‚ / - å–ä¸‹Pè¯å‰‚çš„åŠ¨ç‰©ä¼¼ä¹Žä¼šæœ‰éžå¸¸ä¸è‰¯çš„ååº”ã€‚");
Database.addText("zh.cauldron.page10", "Xè¯å‰‚ / Xè¯å‰‚æ˜¯ä¸€ä¸ªä¼ è¯´ã€‚æ®è¯´è®¾æ³•ç‚¼åˆ¶å¹¶é¥®ç”¨è¿‡è¯¥è¯å‰‚çš„äººéƒ½ä¼šè¢«é€å¾€ä¸€å¤„äººè¿¹æœªè‡³ä¹‹åœ°ã€‚ / æˆ‘ä¸çŸ¥é“è¿™ç§è¯å‰‚æ˜¯å¦ä»…ä»…æ˜¯ä¸€ä¸ªä¼ è¯´ï¼Œä½†æˆ‘ä¼šåœ¨è¿™æœ¬ä¹¦ä¸­å†™ä¸‹æˆ‘æ‰€äº†è§£åˆ°çš„å…³äºŽå®ƒçš„ä¸€åˆ‡ã€‚ / è¯¸å¤šå¤è€çš„ä¼ è¯´å’Œç‚¼é‡‘ä¹¦çš†æ›¾æåŠXè¯å‰‚ã€‚æˆ‘ä»Žä¸­æ€»ç»“äº†ä¸€äº›å¯èƒ½æœ‰åŠ©äºŽä½ ç‚¼åˆ¶è¯¥è¯å‰‚çš„ä¿¡æ¯ã€‚ç¥ä½ å¥½è¿ï¼ / - æ®è¯´ç‚¼åˆ¶Xè¯å‰‚å…±éœ€5ä¸ªæ­¥éª¤ã€‚ / - æ®è¯´é™¤å…¶ä¸­ä¸€ä¸ªæ­¥éª¤ä¹‹å¤–ï¼Œå…¶ä»–æ­¥éª¤å¹¶ä¸éœ€è¦ç”¨åˆ°æ£’æ£’ç³–ã€‚ / - æ®è¯´ä¸Žå…¶ä»–è¯å‰‚ä¸åŒï¼Œä½ ä¸èƒ½åœ¨ä¸€æ¬¡ç‚¼åˆ¶è¿‡ç¨‹ä¸­äº§å‡ºå¤šç“¶Xè¯å‰‚ã€‚");
Database.addText("zh.cauldron.page11", "- å½“æåˆ°Xè¯å‰‚æ—¶ï¼Œäººä»¬ç»å¸¸ä¼šå¼•è¿°ä¸‹é¢è¿™é¦–è¯—ï¼š/ åœ¨å¤´ä¸€æ—¥ï¼Œå°±æœ‰äº†ç¬¬ä¸€é¢—ç³–æžœã€‚ä½†å¤–é¢æ˜¯å†·çš„ã€‚ / åœ¨ç¬¬äºŒæ—¥ï¼Œç³–æžœæœ‰äº†çˆ¶äº²ã€‚ä½†å¤–é¢æ˜¯å†·çš„ã€‚ / åœ¨ç¬¬ä¸‰æ—¥ï¼Œç³–æžœæœ‰äº†å…„å¼Ÿï¼Œä½†å¤–é¢æ˜¯å†·çš„ã€‚ / åœ¨ç¬¬å››æ—¥ï¼Œç³–æžœæœ‰äº†æœ‹å‹ï¼Œä½†å¤–é¢æ˜¯å†·çš„ã€‚ / åœ¨ç¬¬äº”æ—¥ï¼Œç³–æžœæœ‰äº†çˆ±äººï¼Œæˆ–è®¸å‡ºäºŽå•çº¯ï¼Œæˆ–è®¸å‡ºäºŽå¹¼ç¨šï¼Œä½†ç³–æžœéžå¸¸å¼€å¿ƒï¼Œè€Œå¤–é¢ç»ˆäºŽçƒ­èµ·æ¥äº†ã€‚");
Database.addText("cz.cauldron.page0", "NÃ¡vod na vaÅ™enÃ­");
Database.addText("cz.cauldron.page1", "PÅ™ehled / Strana 2: LÃ©ÄivÃ½ lektvar / Strana 3: Å½elvÃ­ lektvar / Strana 4-5: Lektvar lÃ©tÃ¡nÃ­ / Strana 6-7: Lektvar zbÄ›silosti / Strana 8-9: Lektvar P / Strana 10-11: Lektvar X");
Database.addText("cz.cauldron.page2", "LÃ©ÄivÃ½ lektvar / Tento lektvar je ze vÅ¡ech asi nejjednoduÅ¡Å¡Ã­ na uvaÅ™enÃ­. Jsou k nÄ›mu zapotÅ™ebÃ­ pouze bonbÃ³ny. Na vÃ½pravÃ¡ch ti jednorÃ¡zovÄ› vylÃ©ÄÃ­ 100 bodÅ¯ zdravÃ­. / Instrukce: - Dej do kotlÃ­ku 100 bonbÃ³nÅ¯ - ChvÃ­li mÃ­chej - VÃ½slednou smÄ›s opatrnÄ› nalij do lahviÄek / stejnÄ› jako u kaÅ¾dÃ©ho lektvaru, i tady mÅ¯Å¾eÅ¡ znÃ¡sobit mnoÅ¾stvÃ­. Pokud napÅ™Ã­klad pouÅ¾ijeÅ¡ 300 bonbÃ³nÅ¯, vÃ½sledkem budou tÅ™i lÃ©ÄivÃ© lektvary.");
Database.addText("cz.cauldron.page3", "Å½elvÃ­ lektvar / Å½elvÃ­ lektvar uÅ¾ je o trochu sloÅ¾itÄ›jÅ¡Ã­, neÅ¾ lÃ©ÄivÃ½ lektvar. BudeÅ¡ potÅ™ebovat bonbÃ³ny a lÃ­zÃ¡tka. / Pokud tento lektvar vypijeÅ¡ bÄ›hem vÃ½pravy, promÄ›nÃ­Å¡ se na Å¾elvu. BudeÅ¡ se hÃ½bat pomaleji, zato ale budeÅ¡ odolnÄ›jÅ¡Ã­ proti nepÅ™Ã¡telskÃ½m ÃºtokÅ¯m. / Instrukce: - Dej do kotlÃ­ku 50 bonbÃ³nÅ¯ - PÅ™idej 500 lÃ­zÃ¡tek - MÃ­chej zhruba 10 vteÅ™in - PÅ™estaÅˆ mÃ­chat - PÅ™idej 50 bonbÃ³nÅ¯ - PromÃ­chej - Nalij smÄ›s do lahviÄek / POZOR! V Å¾elvÃ­m stavu se nepÅ™evracej na krunÃ½Å™, nebudeÅ¡ se moci zvednout!");
Database.addText("cz.cauldron.page4", "Lektvar lÃ©tÃ¡nÃ­ / Tento lektvar, vynalezenÃ½ slavnÃ½m ÄarodÄ›jem Isaacem, ti umoÅ¾nÃ­ na nÄ›kolik vteÅ™in odolÃ¡vat zemskÃ© pÅ™itaÅ¾livosti. / NejvÄ›tÅ¡Ã­ efekt mÃ¡ hned po skoku (pokud neumÃ­Å¡ skÃ¡kat, mÄ›l by sis sehnat nÄ›jakou skÃ¡kacÃ­ tyÄ). / NenÃ­ jednoduchÃ½ na uvaÅ™enÃ­, budeÅ¡ muset peÄlivÄ› kontrolovat teplotu kotlÃ­ku. / Instrukce: - Do kotlÃ­ku nasyp 1000 bonbÃ³nÅ¯ - ZahÅ™ej vodu, aÅ¥ je vlaÅ¾nÃ¡ - PÅ™estaÅˆ zahÅ™Ã­vat - PÅ™idej dalÅ¡Ã­ch 1000 bonbÃ³nÅ¯ - ZahÅ™Ã­vej kotlÃ­k aÅ¾ do chvÃ­le, kdy voda zaÄne vÅ™Ã­t - nalij do skleniÄek");
Database.addText("cz.cauldron.page5", "PÅ™Ã­klad uÅ¾itÃ­ lektvaru lÃ©tÃ¡nÃ­ / \"PÅ™eletÃ­ pÅ™es dÃ­ru\" / *napije se lektvaru*");
Database.addText("cz.cauldron.page6", "Lektvar zbÄ›silosti / Lektvar zbÄ›silosti tÄ› zmÄ›nÃ­ na zuÅ™ivÃ©ho berserka. / NevÃ½hodou je, Å¾e snÃ­Å¾Ã­ tvÃ© zdravÃ­ na polovinu. / VÃ½hodou je, Å¾e na nÄ›kolik vteÅ™in budeÅ¡ zpÅ¯sobovat dvojnÃ¡sobnÃ© zranÄ›nÃ­! / Recept je jednoduchÃ½, ale budeÅ¡ potÅ™ebovat hodnÄ› lÃ­zÃ¡tek. / Tady jsou instrukce: Nasyp do kotlÃ­ku 20 000 lÃ­zÃ¡tek - MÃ­chej je, dokud tÄ› nezaÄnou bolet ruce - Nalij smÄ›s do skleniÄek");
Database.addText("cz.cauldron.page7", "DÅ¯leÅ¾itÃ© upozornÄ›nÃ­ / NepÅ™idÃ¡vej do kotlÃ­ku Å¾Ã¡dnÃ© bonbÃ³ny. / MyslÃ­m to vÃ¡Å¾nÄ›, ani jeden. / Opravdu ne. / NÃ¡sledky by byly nepÅ™edvÃ­datelnÃ©.");
Database.addText("cz.cauldron.page8", "Lektvar P / Lektvar P je pomÄ›rnÄ› zvlÃ¡Å¡tnÃ­. NedÃ¡ se pÅ™edem odhadnout, co udÄ›lÃ¡. MÅ¯Å¾e tÄ› vylÃ©Äit nebo zranit, mÅ¯Å¾e tÄ› posÃ­lit nebo oslabit, dokonce tÄ› mÅ¯Å¾e zmÄ›nit v nÄ›koho (nebo nÄ›co) jinÃ©ho. / A navÃ­c je velmi sloÅ¾itÃ½ na uvaÅ™enÃ­! / Instrukce: Do kotlÃ­ku nasyp 500 bonbÃ³nÅ¯ - ChvÃ­li mÃ­chej - PÅ™estaÅˆ mÃ­chat - PÅ™idej mnoÅ¾stvÃ­ bonbÃ³nÅ¯ odpovÃ­dajÃ­cÃ­ poÄtu vteÅ™in, po kterÃ© jsi mÃ­chal, krÃ¡t 100. Pokud jsi napÅ™Ã­klad mÃ­chal 4 vteÅ™iny, budeÅ¡ muset pÅ™idat 400 bonbÃ³nÅ¯. Toto mnoÅ¾stvÃ­ zÅ¯stane stejnÃ©, i pokud vaÅ™Ã­Å¡ nÄ›kolik lektvarÅ¯ narÃ¡z. - ZahÅ™Ã­vej kotlÃ­k, dokud voda nebude vlaÅ¾nÃ¡ - PÅ™estaÅˆ ohÅ™Ã­vat - PÅ™idej pÃ¡r lÃ­zÃ¡tek ZamÃ­chej - Nalij do skleniÄek!");
Database.addText("cz.cauldron.page9", "UÅ¾Ã­vej lektvar P dobÅ™e. / Existuje nÄ›kolik pravidel, kterÃ½mi by ses mÄ›l Å™Ã­dit, abys dosÃ¡hl co nejlepÅ¡Ã­ch ÃºÄinkÅ¯. Tyto zÃ¡konitosti byly vypozorovÃ¡ny empiricky, ale fungujÃ­ celkem spolehlivÄ›. / - ÄŒÃ­m vÃ­ce pouÅ¾Ã­vÃ¡Å¡ lektvar P, tÃ­m podivnÄ›jÅ¡Ã­ ÃºÄinky mÃ¡. / - Pokud jsi hodnÄ› zranÄ›nÃ½, lektvar P bude pravdÄ›podobnÄ› mÃ­t pozitivnÃ­ ÃºÄinek. / - ZvÃ­Å™ata tento lektvar snÃ¡Å¡ejÃ­ velmi Å¡patnÄ›.");
Database.addText("cz.cauldron.page10", "Lektvar X / Lektvar X je legenda. Å˜Ã­kÃ¡ se, Å¾e kdokoliv ho dokÃ¡Å¾e uvaÅ™it a vypÃ­t, se ocitne v zemi neznÃ¡mÃ©, kam pÅ™edtÃ­m jeÅ¡tÄ› nikdo nezavÃ­tal. / NevÃ­m, jestli je tento lektvar pouze legenda nebo ne, ale napÃ­Å¡u sem vÅ¡echno, co o nÄ›m vÃ­m. / Lektvar X je zmÃ­nÄ›nÃ½ ve mnoha starÃ½ch legendÃ¡ch a alchymistickÃ½ch knihÃ¡ch. Zde je souhrn informacÃ­, kterÃ© by ti mohly pomoct uvaÅ™it lektvar X. HodnÄ› Å¡tÄ›stÃ­! / - Å˜Ã­kÃ¡ se, Å¾e k uvaÅ™enÃ­ lektvaru X je potÅ™eba 5 krokÅ¯. / - Na vÅ¡echny kroky kromÄ› jednoho jsou prÃ½ potÅ™eba lÃ­zÃ¡tka. / - Jedna z povÄ›stÃ­ se zmiÅˆuje o tom, Å¾e nelze uvaÅ™it vÃ­ce lektvarÅ¯ X narÃ¡z.");
Database.addText("cz.cauldron.page11", "- A nakonec Å™Ã­kanka, kterÃ¡ se Äasto uvÃ¡dÃ­, kdyÅ¾ dojde na lektvar X: / PrvnÃ­ den byl dÃ¡n Å¾ivot prvnÃ­ Sladkosti. Ale venku bylo chladno. / DruhÃ½ den byl Sladkosti dÃ¡n Otec. Ale venku bylo chladno. / TÅ™etÃ­ den byla Sladkosti dÃ¡n bratr. Ale venku bylo chladno. / ÄŒtvrtÃ½ den byl Sladkosti dÃ¡n kamarÃ¡d. Ale venku bylo chladno. / PÃ¡tÃ½ den byl Sladkosti dÃ¡n milenec. A byÅ¥ to znÃ­ naivnÄ› nebo hloupÄ›, Sladkost teÄ byla Å¡Å¥astnÃ¡, a venku bylo horko.");
Database.addText("el.cauldron.page0", "ÎŸÎ´Î·Î³ÏŒÏ‚ Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î®Ï‚ Ï†Î¯Î»Ï„ÏÏ‰Î½");
Database.addText("el.cauldron.page1", "Î ÎµÏÎ¯Î»Î·ÏˆÎ· / 2Î· Î£ÎµÎ»Î¯Î´Î± : Î¦Î¯Î»Ï„ÏÎ¿ Î–Ï‰Î®Ï‚ / 3Î· Î£ÎµÎ»Î¯Î´Î± : Î¦Î¯Î»Ï„ÏÎ¿ Î§ÎµÎ»ÏŽÎ½Î±Ï‚ / 4Î·-5Î· Î£ÎµÎ»Î¯Î´Î± : Î¦Î¯Î»Ï„ÏÎ¿ Î‘Î½Ï„Î¯-Î²Î±ÏÏÏ„Î·Ï„Î±Ï‚ / 6Î·-7Î· Î£ÎµÎ»Î¯Î´Î± : Î¦Î¯Î»Ï„ÏÎ¿ ÎˆÎ¾Ï‰-Î¦ÏÎµÎ½ÏŽÎ½ / 8Î·-9Î· Î£ÎµÎ»Î¯Î´Î± : Î¤Î¿ Î¦Î¯Î»Ï„ÏÎ¿ Î / 10Î·-11Î· Î£ÎµÎ»Î¯Î´Î± : Î¤Î¿ Î¦Î¯Î»Ï„ÏÎ¿ Î§");
Database.addText("el.cauldron.page2", "Î¦Î¯Î»Ï„ÏÎ¿ Î¶Ï‰Î®Ï‚ / Î¤Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Î¶Ï‰Î®Ï‚ ÎµÎ¯Î½Î±Î¹ Î­Î½Î± Î±Ï€ÏŒ Ï„Î± Ï€Î¹Î¿ ÎµÏÎºÎ¿Î»Î± ÏƒÎµ Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î®, ÏƒÎ¿Î²Î±ÏÎ¬. Î§ÏÎµÎ¹Î¬Î¶ÎµÏ„Î±Î¹ Î¼ÏŒÎ½Î¿ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬. ÎŒÏ„Î±Î½ Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®Ï„Î±Î¹ ÏƒÎµ Î±Ï€Î¿ÏƒÏ„Î¿Î»Î­Ï‚, ÏƒÎ¿Ï… ÎµÏ€Î¹ÏƒÏ„ÏÎ­Ï†ÎµÎ¹ 100 Ï€ÏŒÎ½Ï„Î¿Ï…Ï‚ Î¶Ï‰Î®Ï‚. / ÎŸÎ´Î·Î³Î¯ÎµÏ‚ : -Î’Î¬Î»Ï„Îµ 100 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÏƒÏ„Î¿ ÎºÎ±Î¶Î¬Î½Î¹ ÏƒÎ±Ï‚ - Î‘Î½Î±ÎºÎ±Ï„Î­ÏˆÏ„Îµ Î³Î¹Î± Î¼ÎµÏÎ¹ÎºÎ¬ Î´ÎµÏ…Ï„ÎµÏÏŒÎ»ÎµÏ€Ï„Î± - Î’Î¬Î»Ï„Îµ Ï„Î¿ ÏƒÎµ Î¼Ï€Î¿Ï…ÎºÎ¬Î»Î¹Î± / ÎŒÏ€Ï‰Ï‚ ÎºÎ¬Î¸Îµ Ï†Î¯Î»Ï„ÏÎ¿, Î¼Ï€Î¿ÏÎµÎ¯Ï„Îµ Î½Î± Ï€Î¿Î»Î»Î±Ï€Î»Î±ÏƒÎ¹Î¬ÏƒÎµÏ„Îµ Ï„Î¹Ï‚ Ï€Î¿ÏƒÏŒÏ„Î·Ï„ÎµÏ‚. Î“Î¹Î± Ï€Î±ÏÎ¬Î´ÎµÎ¹Î³Î¼Î±, Î±Î½ Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®ÏƒÎµÏ„Îµ 300 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Î±Î½Ï„Î¯ Î³Î¹Î± 100, Î¸Î± Ï€Î¬ÏÎµÏ„Îµ 3 Ï†Î¯Î»Ï„ÏÎ± Î¶Ï‰Î®Ï‚.");
Database.addText("el.cauldron.page3", "Î¦Î¯Î»Ï„ÏÎ¿ Ï‡ÎµÎ»ÏŽÎ½Î±Ï‚ / Î¤Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Ï‡ÎµÎ»ÏŽÎ½Î±Ï‚ ÎµÎ¯Î½Î±Î¹ Î»Î¯Î³Î¿ Ï€Î¹Î¿ Î´ÏÏƒÎºÎ¿Î»Î¿ Î½Î± Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î±ÏƒÏ„ÎµÎ¯ Î±Ï€ÏŒ Ï„Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Î¶Ï‰Î®Ï‚. Î˜Î± Ï‡ÏÎµÎ¹Î±ÏƒÏ„ÎµÎ¯Ï„Îµ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÎºÎ±Î¹ Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±.  / Î‘Î½ Ï€Î¹ÎµÎ¯Ï„Îµ Î±Ï…Ï„ÏŒ Ï„Î¿ Ï†Î¯Î»Ï„ÏÎ¿ ÏƒÎµ Î¼Î¯Î± Î±Ï€Î¿ÏƒÏ„Î¿Î»Î®, Î¸Î± ÏƒÎ±Ï‚ Î¼ÎµÏ„Î±Ï„ÏÎ­ÏˆÎµÎ¹ ÏƒÎµ Ï‡ÎµÎ»ÏŽÎ½Î±. Î˜Î± ÎºÎ¹Î½ÎµÎ¯ÏƒÏ„Îµ Ï€Î¹Î¿ Î±ÏÎ³Î¬, Î±Î»Î»Î¬ Î¸Î± ÎµÎ¯ÏƒÏ„Îµ ÎºÎ±Î¹ Ï€Î¹Î¿ Î±Î½Î¸ÎµÎºÏ„Î¹ÎºÎ¿Î¯ ÏƒÎµ ÎµÏ€Î¹Î¸Î­ÏƒÎµÎ¹Ï‚ Ï„Ï‰Î½ Î±Î½Ï„Î¹Ï€Î¬Î»Ï‰Î½ ÏƒÎ±Ï‚. / ÎŸÎ´Î·Î³Î¯ÎµÏ‚ : - Î’Î¬Î»Ï„Îµ 50 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÏƒÏ„Î¿ ÎºÎ±Î¶Î¬Î½Î¹ ÏƒÎ±Ï‚ - Î’Î¬Î»Ï„Îµ 500 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î± ÏƒÏ„Î¿ ÎºÎ±Î¶Î¬Î½Î¹ ÏƒÎ±Ï‚ - Î‘Î½Î±Î¼ÎµÎ¯Î¾Ï„Îµ Î³Î¹Î± Ï€ÎµÏÎ¯Ï€Î¿Ï… 10 Î´ÎµÏ…Ï„ÎµÏÏŒÎ»ÎµÏ€Ï„Î± - Î£Ï„Î±Î¼Î±Ï„Î®ÏƒÏ„Îµ Î½Î± Î±Î½Î±ÎºÎ±Ï„Î­Î²ÎµÏ„Îµ - Î ÏÎ¿ÏƒÎ¸Î­ÏƒÏ„Îµ 50 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ - Î‘Î½Î±ÎºÎ±Ï„Î­ÏˆÏ„Îµ Ï€Î¬Î»Î¹ Î³Î¹Î± Î¼ÎµÏÎ¹ÎºÎ¬ Î´ÎµÏ…Ï„ÎµÏÏŒÎ»ÎµÏ€Ï„Î± - Î’Î¬Î»Ï„Îµ Ï„Î¿ ÏƒÎµ Î¼Ï€Î¿Ï…ÎºÎ¬Î»Î¹Î± / ÎšÎ±Î¹ Ï„ÏŽÏÎ± Ï„Î¿ Ï€Î¹Î¿ ÏƒÎ·Î¼Î±Î½Ï„Î¹ÎºÏŒ Ï€ÏÎ¬Î³Î¼Î± Ï€Î¿Ï… Î´ÎµÎ½ Ï€ÏÎ­Ï€ÎµÎ¹ Ï€Î¿Ï„Î­ Î½Î± Î¾ÎµÏ‡Î¬ÏƒÎµÏ„Îµ : ÏŒÏ„Î±Î½ Î¼ÎµÏ„Î±Ï„ÏÎ±Ï€ÎµÎ¯Ï„Îµ ÏƒÎµ Ï‡ÎµÎ»ÏŽÎ½Î±, ÎœÎ—Î Î±Î½Î±Ï€Î¿Î´Î¿Î³Ï…ÏÎ¯ÏƒÎµÏ„Îµ. Î”ÎµÎ½ Î¸Î± Î¼Ï€Î¿ÏÎµÎ¯Ï„Îµ Î½Î± ÏƒÎ·ÎºÏ‰Î¸ÎµÎ¯Ï„Îµ Î¾Î±Î½Î¬ Ï€Î¬Î½Ï‰.");
Database.addText("el.cauldron.page4", "Î¦Î¯Î»Ï„ÏÎ¿ Î±Î½Ï„Î¹-Î²Î±ÏÏÏ„Î·Ï„Î±Ï‚ / Î‘Ï…Ï„ÏŒ Ï„Î¿ Ï†Î¯Î»Ï„ÏÎ¿, Ï„Î¿ Î¿Ï€Î¿Î¯Î¿ Î±Î½Î±ÎºÎ±Î»ÏÏ†Ï„Î·ÎºÎµ Î±Ï€ÏŒ Ï„Î¿Î½ Î³Î½Ï‰ÏƒÏ„ÏŒ Î¼Î¬Î³Î¿ Isaac, ÏƒÎ±Ï‚ ÎµÏ€Î¹Ï„ÏÎ­Ï€ÎµÎ¹ Î½Î± Î±Î½Ï„Î¹ÏƒÏ„Î­ÎºÎµÏƒÏ„Îµ Ï„Î· Î²Î±ÏÏÏ„Î·Ï„Î± Ï„Î·Ï‚ Î“Î·Ï‚ Î³Î¹Î± Î¼ÎµÏÎ¹ÎºÎ¬ Î´ÎµÏ…Ï„ÎµÏÏŒÎ»ÎµÏ€Ï„Î±. / Î•Î¯Î½Î±Î¹ Î¹Î´Î¹Î±Î¯Ï„ÎµÏÎ± Ï‡ÏÎ®ÏƒÎ¹Î¼Î¿ Î±Ï†Î¿Ï Î­Ï‡ÎµÏ„Îµ Ï€Î·Î´Î®Î¾ÎµÎ¹ (Î±Î½ Î´ÎµÎ½ Î¼Ï€Î¿ÏÎµÎ¯Ï„Îµ Î½Î± Ï€Î·Î´Î®Î¾ÎµÏ„Îµ Î¸Î± Î®Ï„Î±Î½ Ï€Î¿Î»Ï ÎºÎ±Î»Î® Î¹Î´Î­Î± Î½Î± Î±Ï€Î¿ÎºÏ„Î®ÏƒÎµÏ„Îµ Î­Î½Î± ÎºÎ±Î»Î¬Î¼Î¹ Ï€Î·Î´Î®Î¼Î±Ï„Î¿Ï‚). / Î”ÎµÎ½ ÎµÎ¯Î½Î±Î¹ ÎµÏÎºÎ¿Î»Î· Î· Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î® Ï„Î¿Ï…, Î¸Î± Ï‡ÏÎµÎ¹Î±ÏƒÏ„ÎµÎ¯ Î½Î± Î¶ÎµÏƒÏ„Î¬Î½ÎµÏ„Î±Î¹ Ï„Î¿ ÎºÎ±Î¶Î¬Î½Î¹ ÏƒÎ±Ï‚ ÎºÎ±Î¹ Î½Î± ÎµÎ»Î­Î³Ï‡ÎµÏ„Îµ Ï„Î· Î¸ÎµÏÎ¼Î¿ÎºÏÎ±ÏƒÎ¯Î± Ï€ÏÎ¿ÏƒÎµÎºÏ„Î¹ÎºÎ¬.  / ÎŸÎ´Î·Î³Î¯ÎµÏ‚ : - Î’Î¬Î»Ï„Îµ 1000 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÏƒÏ„Î¿ ÎºÎ±Î¶Î¬Î½Î¹ - Î–ÎµÏƒÏ„Î¬Î½ÎµÏ„Î±Î¹ Ï„Î¿ Î¼Î­Ï‡ÏÎ¹ Ï„Î¿ Î½ÎµÏÏŒ Î½Î± ÎµÎ¯Î½Î±Î¹ Ï‡Î»Î¹Î±ÏÏŒ - Î£Ï„Î±Î¼Î±Ï„Î®ÏƒÏ„Îµ Î½Î± Î¶ÎµÏƒÏ„Î­Î½ÎµÏ„Îµ - Î ÏÎ¿ÏƒÎ¸Î­ÏƒÏ„Îµ 1000 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ - Î–ÎµÏƒÏ„Î¬Î½ÎµÏ„Îµ Ï„Î¿ ÎºÎ±Î¶Î¬Î½Î¹ Î¼Î­Ï‡ÏÎ¹ Ï„Î¿ Î½ÎµÏÏŒ Î½Î± Î²ÏÎ¬Î¶ÎµÎ¹- Î’Î¬Î»Ï„Îµ Ï„Î¿ ÏƒÎµ Î¼Ï€Î¿Ï…ÎºÎ¬Î»Î¹Î±");
Database.addText("el.cauldron.page5", "Î¦Î¯Î»Ï„ÏÎ¿ Î±Î½Ï„Î¹-Î²Î±ÏÏÏ„Î·Ï„Î±Ï‚ : Ï€ÎµÏÎ¯Ï€Ï„Ï‰ÏƒÎ· Ï‡ÏÎ®ÏƒÎ·Ï‚/ \"Î ÎµÏ„Î¬Ï„Îµ Ï€Î¬Î½Ï‰ Î±Ï€ÏŒ ÎºÎµÎ½ÏŒ\" / *Ï€Î¯Î½ÎµÎ¹Ï‚ Ï„Î¿ Ï†Î¯Î»Ï„ÏÎ¿*");
Database.addText("el.cauldron.page6", "Î¦Î¯Î»Ï„ÏÎ¿ ÎˆÎ¾Ï‰-Î¦ÏÎµÎ½ÏŽÎ½ / Î¤Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Î­Î¾Ï‰-Ï†ÏÎµÎ½ÏŽÎ½ ÏƒÎ±Ï‚ Î¼ÎµÏ„Î±Ï„ÏÎ­Ï€ÎµÎ¹ ÏƒÎµ Î­Î½Î±Î½ ÎµÎ¾ÏŽ-Ï†ÏÎµÎ½ÏŽÎ½ Î¼Î±Ï‡Î·Ï„Î®. / Î¤Î¿ Î¼ÎµÎ¹Ï‰Î½Î­ÎºÏ„Î·Î¼Î± ÎµÎ¯Î½Î±Î¹ Ï„Î¿ ÏŒÏ„Î¹ ÎºÎ±Ï„Î±Î½Î±Î»ÏŽÎ½ÎµÎ¹ Ï„Î· Î¼Î¹ÏƒÎ® Î¶Ï‰Î® ÏƒÎ±Ï‚. / Î¤Î¿ Ï€Î»ÎµÏ‰Î½Î­ÎºÏ„Î·Î¼Î± ÎµÎ¯Î½Î±Î¹ Ï„Î¿ ÏŒÏ„Î¹ Î´Î¹Ï€Î»Î±ÏƒÎ¹Î¬Î¶ÎµÎ¹ Ï„Î·Î½ ÎµÏ€Î¯Î¸ÎµÏƒÎ· ÏƒÎ±Ï‚ Î³Î¹Î± Î¼ÎµÏÎ¹ÎºÎ¬ Î´ÎµÏ…Ï„ÎµÏÏŒÎ»ÎµÏ€Ï„Î±!/ Î— Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î® Î±Ï…Ï„Î¿Ï Ï„Î¿Ï… Ï†Î¯Î»Ï„ÏÎ¿Ï… ÎµÎ¯Î½Î±Î¹ Ï€Î¿Î»Ï Î±Ï€Î»Î®, Î±Î»Î»Î¬ Î¸Î± Ï‡ÏÎµÎ¹Î±ÏƒÏ„ÎµÎ¯Ï„Îµ Ï€Î¿Î»Î»Î¬ Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î±. / Î•Î´ÏŽ ÎµÎ¯Î½Î±Î¹ Î¿Î¹ Î¿Î´Î·Î³Î¯ÎµÏ‚ : - Î’Î¬Î»Ï„Îµ 20 000 Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î± ÏƒÏ„Î¿ ÎºÎ±Î¶Î¬Î½Î¹ ÏƒÎ±Ï‚ - Î‘Î½Î±ÎºÎ±Ï„Î­ÏˆÏ„Îµ Ï„Î± Î¼Î­Ï‡ÏÎ¹ Î½Î± Ï€Î¿Î½Î¬Î½Îµ Ï„Î± Ï‡Î­ÏÎ¹Î± ÏƒÎ±Ï‚ - Î’Î¬Î»Ï„Îµ Ï„Î¿ ÏƒÎµ Î¼Ï€Î¿Ï…ÎºÎ¬Î»Î¹Î±");
Database.addText("el.cauldron.page7", "Î£Î·Î¼Î±Î½Ï„Î¹ÎºÎ® ÏƒÎ·Î¼ÎµÎ¯Ï‰ÏƒÎ· ÏƒÏ‡ÎµÏ„Î¹ÎºÎ¬ Î¼Îµ Ï„Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Î­Î¾Ï‰-Ï†ÏÎµÎ½ÏŽÎ½ / ÎœÎ—Î Ï€ÏÎ¿ÏƒÎ¸Î­ÏƒÎµÏ„Îµ ÎºÎ±Î¸ÏŒÎ»Î¿Ï… Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÎµÎ½ÏŽ Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î¬Î¶ÎµÏ„Îµ Î±Ï…Ï„ÏŒ Ï„Î¿ Ï†Î¯Î»Ï„ÏÎ¿ / Î•Î½Î½Î¿ÏŽ, ÎºÎ±Î½Î­Î½Î±. / Î£Î¿Î²Î±ÏÎ¬. / Î¤Î± Î±Ï€Î¿Ï„ÎµÎ»Î­ÏƒÎ¼Î±Ï„Î± Î¸Î± Î®ÏÎ±Î½ Î±Ï€ÏÏŒÎ²Î»ÎµÏ€Ï„Î±.");
Database.addText("el.cauldron.page8", "Î¤Î¿ Î¦Î¯Î»Ï„ÏÎ¿ Î  / Î¤Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Î  ÎµÎ¯Î½Î±Î¹ Ï€ÎµÏÎ¯ÎµÏÎ³Î¿. Î”ÎµÎ½ Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± Ï€ÏÎ¿Î²Î»Î­ÏˆÎµÎ¹Ï‚ Ï„Î¹ Î¸Î± ÎºÎ¬Î½ÎµÎ¹. Î˜Î± Î¼Ï€Î¿ÏÎ¿ÏÏƒÎµ Î½Î± ÏƒÎµ Î³Î¹Î±Ï„ÏÎ­ÏˆÎµÎ¹ Î® Î½Î± ÏƒÎµ Î²Î»Î¬ÏˆÎµÎ¹, Î½Î± ÏƒÎµ ÎºÎ¬Î½ÎµÎ¹ Ï€Î¹Î¿ Î´Ï…Î½Î±Ï„ÏŒ Î® Ï€Î¹Î¿ Î±Î´ÏÎ½Î±Î¼Î¿, Î±ÎºÏŒÎ¼Î± ÎºÎ±Î¹ Î½Î± ÏƒÎµ Î¼ÎµÏ„Î±Î¼Î¿ÏÏ†ÏŽÏƒÎµÎ¹ ÏƒÎµ ÎºÎ¬Ï€Î¿Î¹Î½ (ÎºÎ¬Ï„Î¹;) Î´Î¹Î±Ï†Î¿ÏÎµÏ„Î¹ÎºÏŒ. / ÎšÎ±Î¹ ÎµÎ¯Î½Î±Î¹ Î±ÎºÏŒÎ¼Î± Î´ÏÏƒÎºÎ¿Î»Î¿ ÏƒÏ„Î·Î½ Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î®! / ÎŸÎ´Î·Î³Î¯ÎµÏ‚ : - Î’Î¬Î»Ï„Îµ 500 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ ÏƒÏ„Î¿ ÎºÎ±Î¶Î¬Î½Î¹ ÏƒÎ±Ï‚ - Î‘Î½Î±ÎºÎ±Ï„Î­ÏˆÏ„Îµ Î³Î¹Î± Î¼ÎµÏÎ¹ÎºÎ¬ Î´ÎµÏ…Ï„ÎµÏÏŒÎ»ÎµÏ€Ï„Î± - Î£Ï„Î±Î¼Î±Ï„Î®ÏƒÏ„Îµ Î½Î± Î±Î½Î±ÎºÎ±Ï„Î­Î²ÎµÏ„Îµ - Î ÏÎ¿ÏƒÎ¸Î­ÏƒÏ„Îµ 100 Ï†Î¿ÏÎ­Ï‚ Ï€Î¹Î¿ Ï€Î¿Î»Î»Î¬ Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬ Î±Ï€ÏŒ Ï„Î± Î´ÎµÏ…Ï„ÎµÏÏŒÎ»ÎµÏ€Ï„Î± Ï€Î¿Ï… Î±Î½Î±ÎºÎ±Ï„Î­ÏˆÎ±Ï„Îµ. Î“Î¹Î± Ï€Î±ÏÎ¬Î´ÎµÎ¹Î³Î¼Î±, Î±Î½ Î±Î½Î±ÎºÎ±Ï„Î­ÏˆÎµÏ„Î± Î³Î¹Î± 4 Î´ÎµÏ…Ï„ÎµÏÏŒÎ»ÎµÏ€Ï„Î±, Î¸Î± Ï‡ÏÎµÎ¹Î±ÏƒÏ„ÎµÎ¯ Î½Î± Ï€ÏÎ¿ÏƒÎ¸Î­ÏƒÎµÏ„Îµ 400 Î¶Î±Ï‡Î±ÏÏ‰Ï„Î¬. ÎœÎ·Î½ Ï€Î¿Î»Î»Î±Ï€Î»Î±ÏƒÎ¹Î¬ÏƒÎµÏ„Îµ Î±Ï…Ï„Î®Î½ Ï„Î·Î½ Ï€Î¿ÏƒÏŒÏ„Î·Ï„Î±, Î±ÎºÏŒÎ¼Î± ÎºÎ±Î¹ Î±Î½ Î¸Î­Î»ÎµÏ„Îµ Î½Î± Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î¬ÏƒÎµÏ„Îµ Ï€Î±ÏÎ±Ï€Î¬Î½Ï‰ Î±Ï€ÏŒ Î­Î½Î± Ï†Î¯Î»Ï„ÏÎ¿. - Î–ÎµÏƒÏ„Î¬Î½ÎµÏ„Î±Î¹ Î¼Î­Ï‡ÏÎ¹ Ï„Î¿ Î½ÎµÏÏŒ Î½Î± ÎµÎ¯Î½Î±Î¹ Ï‡Î»Î¹Î±ÏÏŒ - Î£Ï„Î±Î¼Î±Ï„Î®ÏƒÏ„Îµ Î½Î± Î¶ÎµÏƒÏ„Î±Î¯Î½ÎµÏ„Î±Î¹ - Î ÏÎ¿ÏƒÎ¸Î­ÏƒÏ„Îµ Î»Î¯Î³Î± Î³Î»ÎµÎ¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î± - Î‘Î½Î±ÎºÎ±Ï„Î­ÏˆÏ„Îµ - Î’Î¬Î»Ï„Îµ Ï„Î¿ ÏƒÎµ Î¼Ï€Î¿Ï…ÎºÎ¬Î»Î¹Î±!");
Database.addText("el.cauldron.page9", "ÎšÎ¬Î½Ï„Îµ ÎºÎ±Î»Î® Ï‡ÏÎ®ÏƒÎ· Ï„Î¿Ï… Ï†Î¯Î»Ï„ÏÎ¿Ï… Î  / Î¥Ï€Î¬ÏÏ‡Î¿Ï…Î½ Î¼ÎµÏÎ¹ÎºÎ¿Î¯ ÎºÎ±Î½ÏŒÎ½ÎµÏ‚ Ï„Î¿Ï… Î¿Ï€Î¿Î¯Î¿Ï…Ï‚ Î¼Ï€Î¿ÏÎµÎ¯Ï„Îµ Î½Î± Î±ÎºÎ¿Î»Î¿Ï…Î¸Î®ÏƒÎµÏ„Îµ Î­Ï„ÏƒÎ¹ ÏŽÏƒÏ„Îµ Î½Î± Ï€Î¬ÏÎµÏ„Îµ ÎºÎ±Î»ÏÏ„ÎµÏÎ± Î±Ï€Î¿Ï„ÎµÎ»Î­ÏƒÎ¼Î±Ï„Î± ÏŒÏ„Î±Î½ Ï€Î¯Î½ÎµÏ„Îµ Ï„Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Î . Î‘Î½ ÎºÎ±Î¹ Î±Ï…Ï„Î¿Î¯ Î¿Î¹ ÎºÎ±Î½ÏŒÎ½ÎµÏ‚ Î¿ÏÎ¯ÏƒÏ„Î·ÎºÎ±Î½ ÎµÎ¼Ï€ÎµÏÎ¹ÎºÎ¬, Ï†Î±Î¯Î½Î¿Î½Ï„Î±Î¹ Î½Î± Î»ÎµÎ¹Ï„Î¿Ï…ÏÎ³Î¿ÏÎ½ Î±ÏÎºÎµÏ„Î¬ ÎºÎ±Î»Î¬. / - ÎŒÏƒÎ¿ Ï€Î¹Î¿ Ï€Î¿Î»Ï Ï‡ÏÎ·ÏƒÎ¹Î¼Î¿Ï€Î¿Î¹Î®Ï„Îµ Ï†Î¯Î»Ï„ÏÎ± Î , Ï„ÏŒÏƒÎ¿ Ï€Î¹Î¿ Ï€ÎµÏÎ¯ÎµÏÎ³Î± Î±Ï€Î¿Ï„ÎµÎ»Î­ÏƒÎ¼Î±Ï„Î± Î­Ï‡Î¿Ï…Î½. / - Î‘Î½ Î· Î¶Ï‰Î® ÏƒÎ±Ï‚ ÎµÎ¯Î½Î±Î¹ Ï€Î¿Î»Ï Ï‡Î±Î¼Î·Î»Î®, Î¸Î± Î­Ï€ÏÎµÏ€Îµ Î½Î± Ï€Î¹ÎµÎ¯Ï„Îµ Î­Î½Î± Ï†Î¯Î»Ï„ÏÎ¿ Î . / - Î–ÏŽÎ± Ï„Î± Î¿Ï€Î¿Î¯Î± ÎºÎ±Ï„Î±Î½Î±Î»ÏŽÎ½Î¿Ï…Î½ Ï„Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Î  Ï†Î±Î¯Î½ÎµÏ„Î±Î¹ Î½Î± Î±Î½Ï„Î¹Î´ÏÎ¿ÏÎ½ Î¼Îµ Ï€Î¿Î»Ï Î¬ÏƒÏ‡Î·Î¼Î¿ Ï„ÏÏŒÏ€Î¿.");
Database.addText("el.cauldron.page10", "Î¤Î¿ Î¦Î¯Î»Ï„ÏÎ¿ Î§ / Î¤Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Î§ ÎµÎ¯Î½Î±Î¹ Î­Î½Î±Ï‚ Î¸ÏÏÎ»Î¿Ï‚. Î›Î­Î³ÎµÏ„Î±Î¹ ÏŒÏ„Î¹ ÏŒÏ€Î¿Î¹Î¿Ï‚ ÎºÎ±Ï„Î±Ï†Î­ÏÎµÎ¹ Î½Î± Ï„Î¿ Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î¬ÏƒÎµÎ¹ ÎºÎ±Î¹ Î½Î± Ï„Î¿ Ï€Î¹ÎµÎ¹ Î¸Î± Ï„Î±Î¾Î¹Î´Î­ÏˆÎµÎ¹ ÏƒÎµ Î­Î½Î± Î¼Î­ÏÎ¿Ï‚ Ï€Î¿Ï… ÎºÎ±Î½Î­Î½Î±Ï‚ Î´ÎµÎ½ Î­Ï‡ÎµÎ¹ Ï€Î¬ÎµÎ¹ Ï€Î¿Ï„Î­. / Î”ÎµÎ½ Î¾Î­ÏÏ‰ Î±Î½ Î±Ï…Ï„ÏŒ Ï„Î¿ Ï†Î¯Î»Ï„ÏÎ¿ ÎµÎ¯Î½Î±Î¹ Î±Ï€Î»ÏŽÏ‚ Î­Î½Î±Ï‚ Î¸ÏÏÎ»Î¿Ï‚ Î® ÏŒÏ‡Î¹, Î±Î»Î»Î¬ Î¸Î± Î³ÏÎ¬ÏˆÏ‰ ÏƒÎµ Î±Ï…Ï„ÏŒ Ï„Î¿ Î²Î¹Î²Î»Î¯Î¿ ÏŒ'Ï„Î¹ Î¾Î­ÏÏ‰ Î³Î¹Î± Î±Ï…Ï„ÏŒ. / Î¤Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Î§ Î±Î½Î±Ï†Î­ÏÎµÏ„Î±Î¹ ÏƒÎµ Ï€Î¿Î»Î»Î¿ÏÏ‚ Ï€Î±Î»Î¹Î¿ÏÏ‚ Î¸ÏÏÎ»Î¿Ï…Ï‚ ÎºÎ±Î¹ Î²Î¹Î²Î»Î¯Î± Î³Î¹Î± Ï†Î¯Î»Ï„ÏÎ±. Î•Î´ÏŽ ÎµÎ¯Î½Î±Î¹ Î¼Î¯Î± Ï€ÎµÏÎ¯Î»Î·ÏˆÎ· Ï„Ï‰Î½ Ï€Î»Î·ÏÎ¿Ï†Î¿ÏÎ¹ÏŽÎ½ Î¿Î¹ Î¿Ï€Î¿Î¯ÎµÏ‚ Î¼Ï€Î¿ÏÎµÎ¯ Î½Î± ÏƒÎ±Ï‚ Î²Î¿Î·Î¸Î®ÏƒÎ¿Ï…Î½ Î½Î± Ï„Î¿ Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î¬ÏƒÎµÏ„Îµ. ÎšÎ±Î»Î· Ï„ÏÏ‡Î·! / - Î›Î­Î³ÎµÏ„Î±Î¹ ÏŒÏ„Î¹ 5 Î²Î®Î¼Î±Ï„Î± ÎµÎ¯Î½Î±Î¹ Î±Ï€ÏÎ±Î¯Ï„Î·Ï„Î± Î³Î¹Î± Î½Î± Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î¬ÏƒÎµÎ¹Ï‚ Ï„Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Î§. / - Î›Î­Î³ÎµÏ„Î±Î¹ ÏŒÏ„Î¹ ÎºÎ±Î¸ÏŒÎ»Î¿Ï… Î³ÎµÎ»Î¹Ï†Ï…Ï„Î¶Î¿ÏÏÎ¹Î± Î´Îµ Ï‡ÏÎµÎ¹Î¬Î¶Î¿Î½Ï„Î±Î¹, ÎµÎºÏ„ÏŒÏ‚ Î±Ï€ÏŒ ÏƒÎµ Î­Î½Î± Î±Ï€ÏŒ Ï„Î± Î²Î®Î¼Î±Ï„Î±. / - Î›Î­Î³ÎµÏ„Î±Î¹ ÏŒÏ„Î¹, ÏƒÎµ Î±Î½Ï„Î¯Î¸ÎµÏƒÎ· Î¼Îµ Ï„Î± Î¬Î»Î»Î± Ï†Î¯Î»Ï„ÏÎ±, Î´ÎµÎ½ Î¼Ï€Î¿ÏÎµÎ¯Ï‚ Î½Î± Ï€Î±ÏÎ±ÏƒÎºÎµÏ…Î¬ÏƒÎµÎ¹Ï‚ Ï€Î±ÏÎ±Ï€Î¬Î½Ï‰ Î±Ï€ÏŒ Î­Î½Î± Ï†Î¯Î»Ï„ÏÎ¿ Î§ Ï„Î· Ï†Î¿ÏÎ¬.");
Database.addText("el.cauldron.page11", "- Î¤Î­Î»Î¿Ï‚, Ï„Î¿ Î±ÎºÏŒÎ»Î¿Ï…Î¸Î¿ Ï€Î¿Î¯Î·Î¼Î± Ï€Î±ÏÎ±Î¸Î­Ï„ÎµÏ„Î±Î¹ ÏƒÏ‡ÎµÏ„Î¹ÎºÎ¬ Î¼Îµ Ï„Î¿ Ï†Î¯Î»Ï„ÏÎ¿ Î§ : / Î¤Î·Î½ Ï€ÏÏŽÏ„Î· Î¼Î­ÏÎ±, Î³Î­Î½Î½Î·ÏƒÎµ Ï„Î¿ Ï€ÏÏŽÏ„Î¿ Î–Î±Ï‡Î±ÏÏ‰Ï„ÏŒ. Î‘Î»Î»Î¬ Î­ÎºÎ±Î½Îµ ÎºÏÏÎ¿ Î­Î¾Ï‰. / Î¤Î· Î´ÎµÏÏ„ÎµÏÎ· Î¼Î­ÏÎ±, Î­Î´Ï‰ÏƒÎµ ÏƒÏ„Î¿ Î–Î±Ï‡Î±ÏÏ‰Ï„ÏŒ Î­Î½Î±Î½ Ï€Î±Ï„Î­ÏÎ±. Î‘Î»Î»Î¬ Î­ÎºÎ±Î½Îµ ÎºÏÏÎ¿ Î­Î¾Ï‰. / Î¤Î·Î½ Ï„ÏÎ¯Ï„Î· Î¼Î­ÏÎ±, Î­Î´Ï‰ÏƒÎµ ÏƒÏ„Î¿ Î–Î±Ï‡Î±ÏÏ‰Ï„ÏŒ Î­Î½Î±Î½ Î±Î´ÎµÏÏ†ÏŒ. Î‘Î»Î»Î¬ Î­ÎºÎ±Î½Îµ ÎºÏÏÎ¿ Î­Î¾Ï‰. / Î¤Î·Î½ Ï„Î­Ï„Î±ÏÏ„Î· Î¼Î­ÏÎ± Î­Î´Ï‰ÏƒÎµ ÏƒÏ„Î¿ Î–Î±Ï‡Î±ÏÏ‰Ï„ÏŒ Î­Î½Î± Ï†Î¯Î»Î¿. Î‘Î»Î»Î¬ Î­ÎºÎ±Î½Îµ ÎºÏÏÎ¿ Î­Î¾Ï‰. / Î¤Î·Î½ Ï€Î­Î¼Ï€Ï„Î· Î¼Î­ÏÎ±, Î­Î´Ï‰ÏƒÎµ ÏƒÏ„Î¿ Î–Î±Ï‡Î±ÏÏ‰Ï„ÏŒ Î­Î½Î±Î½ ÎµÏÎ±ÏƒÏ„Î®, ÎºÎ±Î¹ Î¼Ï€Î¿ÏÎµÎ¯ Î½Î± Î±ÎºÎ¿Ï…ÏƒÏ„ÎµÎ¯ Î±Ï€Î»ÏŒ Î® Ï‡Î±Î¶ÏŒ, Î±Î»Î»Î¬ Ï„ÏŽÏÎ± Ï„Î¿ Î–Î±Ï‡Î±ÏÏ‰Ï„ÏŒ Î®Ï„Î±Î½ Ï‡Î±ÏÎ¿ÏÎ¼ÎµÎ½Î¿, ÎºÎ±Î¹ ÎµÎ¯Ï‡Îµ Î¶Î­ÏƒÏ„Î· Î­Î¾Ï‰.");
Database.addText("ï»¿nl.cauldron.page0", "Handleiding voor brouwen");
Database.addText("nl.cauldron.page1", "Overzicht / Pagina 2 : Levensdrankje / Pagina 3 : Schildpaddrankje / Pagina's 4-5 : Anti-zwaartekracht drankje/ Pagina's 6-7 : Dolzinnig drankje / Pagina's 8-9 : Het P drankje / Pagina's 10-11 : Het X drankje");
Database.addText("nl.cauldron.page2", "Levensdrankje / Het levensdrankje is Ã©Ã©n van de makkelijkste te brouwen, echt. Het vereist alleen snoepjes. Bij gebruik in zoektochten herstelt het 100 levenspunten. / Instructies : - Plaats 100 snoepjes in je ketel - Mix voor een paar seconden - Stop het in flesjes / Net zoals voor elk ander drankje, kan je natuurlijk de aantallen vermenigvuldigen. Als je bijvoorbeeld 300 snoepjes in plaats van 100 gebruikt, krijg je 3 levensdrankjes.");
Database.addText("nl.cauldron.page3", "Schildpaddrankje / Het schildpaddrankje is iets moeilijker te brouwen dan het levensdrankje. Je hebt snoepjes en lollies nodig. / Als je dit drankje drinkt tijdens een zoektocht, veranderd het je in een schildpad. Je loopt langzamer, maar je bent ook beter bestand tegen aanvallen van je vijanden. / Instructies : - Plaats 50 snoepjes in je ketel - Voeg 500 lollies toe - Mix voor ongeveer 10 seconden - Stop met mixen - Voeg 50 snoepjes toe - Mix weer voor een paar seconden - Stop in flesjes / En nu het meest belangrijke dat je niet moet vergeten : Draai niet op je rug wanneer je een schildpad bent. Je kunt dan niet meer overeind komen.");
Database.addText("nl.cauldron.page4", "Anti-zwaartekracht drankje / Dit drankje, dat uitgevonden is door de beroemde tovenaar Isaac, maakt het mogelijk om de zwaartekracht van de aarde te negeren voor een paar seconden. / Het is vooral nuttig na het springen (als je niet kan springen moet je echt overwegen om een pogostick te halen). / Het is niet heel makkelijk om te brouwen, je moet je ketel opwarmen en goed de temperatuur in de gaten houden. / Instructies : - Stop 1000 snoepjes in je ketel - Warm op tot het water lauw is - Stop met opwarmen - Voeg 1000 snoepjes toe - Warm het water op tot het kookt - Stop het in flesjes");
Database.addText("nl.cauldron.page5", "Anti-zwaartekracht drankje : Gebruikersvoorbeeld / \"Vlieg boven een gat\" / *Drinkt het drankje*");
Database.addText("nl.cauldron.page6", "Dolzinnig drankje / Het dolzinnig drankje transformeert je in een berserker. / Het nadeel is dat het de helft van je levens punten opneemt. / Het voordeel is dat het je kracht verdubbelt voor een paar seconden! / Het brouwen van dit drankje is heel makkelijk, maar je hebt veel lollies nodig. / Hier zijn de instructies : - Stop 20 0000 lollies in je ketel - Mix ze tot je armen er pijn van doen -  Stop het in flesjes");
Database.addText("nl.cauldron.page7", "Belangrijke notitie omtrent het dolzinnig drankje / Voeg GEEN snoepjes toe tijdens het brouwen van dit drankje / Ik bedoel, geen enkele. / Serieus / De resultaten zullen onverwacht zijn. en.cauldron.page8");
Database.addText("nl.cauldron.page8", "Het P drankje / Het P drankje is een vreemd drankje. Je kan niet voorspellen wat het doet. Het kan je levenspunten geven of juist afnemen, het kan je sterker of zwakker maken, of het kan je veranderen in iemand (iets?) anders. / En het is ook nog eens moeilijk te brouwen! / Instructies : - Stop 500 snoepjes in je ketel - Mix voor een paar seconden - Stop met mixen - Voeg 100 keer zoveel snoepjes toe als het aantal seconden dat je hebt gemixt. Als je bijvoorbeeld 4 seconden hebt gemixt, moet je 400 snoepjes toevoegen. Verdubbel dit aantal niet, ook niet als je meer dan Ã©Ã©n drankje wil maken - Warm het water op tot het lauw is - Stop met opwarmen - Voeg wat lollies toe - Mix - Stop het in flesjes!");
Database.addText("nl.cauldron.page9", "Maak goed gebruik van het P drankje / Er zijn een paar regels die je kunt volgen om betere resultaten te krijgen wanneer je het P drankje drinkt. Hoewel deze regels empirisch werden gedefinieerd, lijken ze vrij goed te werken. / - Hoe meer je het P drankje gebruikt, hoe meer het lijkt alsof ze vreemde effecten hebben. / - Als je levenspunten heel laag zijn, zou je waarschijnlijk een P drankje moeten drinken. / - Dieren die het P drankje drinken lijken er zeer slecht op te reageren.");
Database.addText("nl.cauldron.page10", "Het X drankje / Het X drankje is een legende. Er wordt gezegd dat degene die dit drankje brouwt en drinkt zal reizen naar een plek waar nog nooit iemand is geweest. / Ik weet niet of dit drankje gewoon een legende is of niet, maar ik zal in dit boek alles schrijven wat ik er van weet. / Het X drankje wordt genoemd in veel oude legendes en alchemieboeken. Hier is een overzicht van die informatie die je misschien kan helpen bij het brouwen. Succes! / - Er wordt gezegd dat er 5 stappen nodig zijn voor het brouwen van het X drankje. / - Er wordt gezegd dat er geen lollies nodig zijn, behalve bij Ã©Ã©n van de stappen. / - Er wordt gezegd dat, in tegenstelling tot andere drankjes, je niet meerdere X drankjes tegelijk kan maken.");
Database.addText("nl.cauldron.page11", "- Tenslotte wordt het volgende gedicht vaak geciteerd als het over het X drankje gaat : / Op de eerste dag, gaf het geboorte aan het eerste Zoet. Maar het was koud buiten. / Op de tweede dag, gaf het het Zoet een vader. Maar het was koud buiten. / Op de derde dag, gaf het het Zoet een broer. Maar het was koud buiten. / Op de vierde dag, gaf het het Zoet een vriend. Maar het was koud buiten. / Op de vijfde dag, gaf het het Zoet een geliefde, en het klinkt misschien simpel en dom, maar nu was het Zoet gelukkig, en was het warm buiten.");
Database.addText("de.cauldron.page0", "Brauhandbuch");
Database.addText("de.cauldron.page1", "Inhaltsverzeichnis / Seite 2 : Heiltrank / Seite 3 : SchildkrÃ¶ten-Trank / Seiten 4-5 : Schwebetrank / Seiten 6-7 : Berserker-Trank / Seiten 8-9 : Der P-Trank / Seiten 10-11 : Der X-Trank");
Database.addText("de.cauldron.page2", "Heiltrank / Der Heiltrank gehÃ¶rt zu denen, die sich am einfachsten brauen lassen. In Quests wird er dich mit 100 Lebenspunkten heilen. / Zubereitung : - 100 Bonbons in den Kessel geben - FÃ¼r einige Sekunden umrÃ¼hren - In Flaschen abfÃ¼llen / Wie bei jedem Trank kannst du die Mengen anheben. FÃ¼r 300 Bonbons bekommst du beispielsweise 3 HeiltrÃ¤nke.");
Database.addText("de.cauldron.page3", "SchildkrÃ¶ten-Trank / Der SchildkrÃ¶ten-Trank ist ein wenig komplizierter zu brauen als der Heiltrank. Du wirst Bonbons und Lutscher benÃ¶tigen. / In einem Quest verwandelt er dich in eine SchildkrÃ¶te. Du wirst dich langsamer bewegen, aber dafÃ¼r widerstandsfÃ¤higer sein. / Zubereitung : - 50 Bonbons in den Kessel geben - 500 Lutscher in den Kessel geben - Etwa 10 Sekunden umrÃ¼hren - AufhÃ¶ren, umzurÃ¼hren - 50 Bonbons hinzugeben - FÃ¼r einige Sekunden umrÃ¼hren - In Flaschen abfÃ¼llen / Was du nie vergessen solltest : Drehe dich als SchildkrÃ¶te NIE auf den RÃ¼cken. Du wÃ¼rdest nicht wieder aufstehen kÃ¶nnen.");
Database.addText("de.cauldron.page4", "Schwebetrank / Dieser Trank, erfunden vom bekannten Hexenmeister Isaac, erlaubt es dir, die Gravitationsgesetze fÃ¼r einige Sekunden auÃŸer Kraft zu setzen. / Er ist besonders nach dem Springen hilfreich (und falls du nicht springen kannst, solltest du erwÃ¤gen, dir einen Springstock anzuschaffen). / Er ist nicht einfach zu brauen, du wirst die Temperatur deines Kessels ganz genau Ã¼berwachen mÃ¼ssen. / Zubereitung : - 1000 Bonbons in den Kessel geben - Wasser erhitzen, bis es lauwarm ist - AufhÃ¶ren, zu erhitzen - 1000 Bonbons hinzugeben - Wasser erhitzen, bis es lauwarm ist - In Flaschen abfÃ¼llen");
Database.addText("de.cauldron.page5", "Schwebetrank : Fallbeispiel / \"Ãœber die Schlucht fliegen\" / *trinkt den Trank*");
Database.addText("de.cauldron.page6", "Berserker-Trank / Der Berserker-Trank verwandelt dich in einen Berserker. / Der Nachteil ist, dass du die HÃ¤lfte deiner Lebenspunkte verlierst. / Der Vorteil ist, dass du fÃ¼r einige Sekunden doppelten Schaden austeilst! / Diesen Trank zu brauen ist sehr einfach, aber du wirst eine Menge Lutscher benÃ¶tigen. / Zubereitung : - 20 000 Lutscher in den Kessel geben - UmrÃ¼hren, bis die Arme schmerzen - In Flaschen abfÃ¼llen");
Database.addText("de.cauldron.page7", "Wichtiger Hinweis bezÃ¼glich des Berserker-Tranks / Gib wÃ¤hrend des Brauvorgangs KEINE Bonbons hinzu. / Kein einziges. / Wirklich. / Die Folgen wÃ¤ren von ungeahntem AusmaÃŸ.");
Database.addText("de.cauldron.page8", "Der P-Trank / Der P-Trank ist seltsam. Du kannst nicht voraussagen, was er auslÃ¶sen wird. Er kÃ¶nnte dich heilen, oder die Schaden zufÃ¼gen, dich stÃ¤rker oder schwÃ¤cher machen, oder dich sogar in etwas anderes verwandeln. / AuÃŸerdem ist es schwierig, ihn zu brauen! / Zubereitung : - 500 Bonbons in den Kessel geben - FÃ¼r einige Sekunden umrÃ¼hren - AufhÃ¶ren, umzurÃ¼hren - 100 Bonbons fÃ¼r jede Sekunde, in der du umgerÃ¼hrt hast, hinzugeben. Bei 4 Sekunden umrÃ¼hren wÃ¤ren das 400 Bonbons. Die Mengen hier nicht abÃ¤ndern. - Wasser erhitzen, bis es lauwarm ist - AufhÃ¶ren, zu erhitzen - Einige Lutscher hinzugeben - UmrÃ¼hren - In Flaschen abfÃ¼llen!");
Database.addText("de.cauldron.page9", "Nutze den P-Trank weise / Es gibt einige Regeln, denen du folgen kannst, um alles aus P-TrÃ¤nken herauszuholen. Diese Regeln scheinen gut zu funktionieren, obgleich sie nur auf Erfahrungswerten beruhen. / - Je mehr P-TrÃ¤nke du trinkst, desto merkwÃ¼rdigere Auswirkungen scheinen sie zu haben. / - Wenn deine Gesundheit sehr niedrig ist, solltest du am besten einen P-Trank trinken. / - Tiere scheinen auf P-TrÃ¤nke sehr negativ zu reagieren.");
Database.addText("de.cauldron.page10", "Der X-Trank / Um den X-Trank rankt sich eine Legende. Es wird gesagt, dass ein jeder, der imstande ist, ihn zu brauen, an einen Ort reisen wÃ¼rde, den noch keiner zuvor gesehen hÃ¤tte. / Ich weiÃŸ nicht, ob dieser Trank wirklich nur eine Legende ist oder nicht, aber ich werde in dieses Buch alles schreiben, was ich Ã¼ber ihn weiÃŸ. / Der X-Trank wird vielen alten Legenden und AlchemiebÃ¼chern erwÃ¤hnt. Es folgt eine Zusammenfassung Ã¼ber den Brauvorgang. Viel GlÃ¼ck! / - FÃ¼r das Brauen des X-Tranks scheinen 5 Schritte notwendig zu sein. / - Bis auf einen Schritt sollen keine Lutscher verwendet werden. / - Angeblich ist es unmÃ¶glich, mehrere X-TrÃ¤nke gleichzeitig zu brauen.");
Database.addText("de.cauldron.page11", "- Das folgende Gedicht wird hÃ¤ufig zitiert, wenn es um den X-Trank geht: / Am ersten Tag wurde das allererste Bonbon geboren. Aber drauÃŸen war es kalt. / Am zweiten Tag bekam das Bonbon einen Vater. Aber drauÃŸen war es kalt. / Am dritten Tag bekam das Bonbon einen Bruder. Aber drauÃŸen war es kalt. / Am vierten Tag bekam das Bonbon einen Freund. Aber drauÃŸen war es kalt. / Am fÃ¼nften Tag bekam das Bonbon einen Liebhaber, und das mag schlicht oder naiv klingen, aber jetzt war das Bonbon glÃ¼cklich. Und drauÃŸen war es warm.");
Database.addText("id.cauldron.page0", "Buku petunjuk membuat obat (potion)");
Database.addText("id.cauldron.page1", "Rangkuman / Halaman 2 : Obat kesehatan / Halaman 3 : Obat kura-kura / Halaman 4-5 : Obat anti-gravitasi / Halaman 6-7 : Obat pengamuk / Halaman 8-9 : Obat P / Halaman 10-11 : Obat X");
Database.addText("id.cauldron.page2", "Obat kesehatan / Obat kesehatan ini adalah salah satu obat yang mudah untuk dibuat, sungguh. Obat ini hanya memerlukan permen. Digunakan di pencarian (quest), obat ini akan menyembuhkanmu dengan memberimu kembali 100 poin nyawa. / Petunjuk : - Taruh 100 permen di kualimu - Aduk selama beebrapa detik - Taruh di botol / Seperti oabt lainnya, kamu dapat melipatgandakan jumlahnya. Contohnya, jika kamu tidak menggunakan 100 permen, melainkan 300 permen, kamu akan mendapatkan 3 obat kesehatan.");
Database.addText("id.cauldron.page3", "Obat kura-kura / Obat kura-kura sedikit lebih sulit untuk dibuat dibandingkan obat kesehatan. Kamu akan membutuhkan permen dan lollipop. / Jika kamu meminum obat ini dalam pencarian (quest), obat ini akan membuatmu menjadi kura-kura. Kamu akan bergerak lebih lambat, tapi kamu juga dapat lebih bertahan terhadap serangan musuhmu. / Petunjuk : - Taruh 50 permen dalam kuali - Tambahkan 500 lollipop kedalam kualimu - Aduk selama kurang lebih 10 detik - Berhenti mengaduk - Tambahkan 50 permen - Aduk lagi selama beberapa detik - Taruh ke botol / Dan sekarang hal paling penting yang seharusnya kamu tidak lupa : sekali kamu menjadi kura-kura, JANGAN membalik. Kamu tidak akan dapat bangun.");
Database.addText("id.cauldron.page4", "Obat anti-gravitasi / Obat ini, yang ditemukan oleh tukang sihir terkenal Isaac, memungkinkan kamu bertahan dari tarikan gravitasi bumi selama beberapa detik. / Obat ini berguna khususnya setelah melompat (jika kamu tidak dapat melompat, kamu harus mempertimbangkan mendapatkan sebuah tongkat pogo). / Obat ini tidak mudah untuk dibuat, kamu butuh memanaskan kualimu dan memperhatikan suhunya dengan hati-hati. / Petunjuk : - Taruh 1000 permen di kualimu - Panaskan sampai airnya hangat-hangat kuku - Berhenti memanaskan - Tambahkan 1000 permen - Panaskan tinggal airnya mendidih - Taruh ke botol");
Database.addText("id.cauldron.page5", "Obat anti-gravitasi : contoh penggunaan / \"Melayang diatas sebuah celah\" / *meminum obatnya*");
Database.addText("id.cauldron.page6", "Obat pemberontak / Obat pemberontak ini mengubah kamu menjadi pemberontak. / Kekurangannya adalah obat ini menghabiskan setengah dari nyawamu. / Keuntungannya adalah obat ini melipatgandakan seranganmu selama beberapa detik! / Membuat obat ini sangat sederhana, tapi kamu akan membutuhkan banyak lollipop. / Ini adalah petunjuknya : - Taruh 20 000 lollipop di kualimu - Aduk sampai lenganmu kesakitan - Taruh ke botol");
Database.addText("id.cauldron.page7", "Pemberitahuan penting seputar obat pemberontak / JANGAN menambahkan permen ketika membuat obat ini. / Maksud saya, sebuah pun. / Sungguh. / Hasilnya akan tidak terduga.");
Database.addText("id.cauldron.page8", "Obat P / Obat P adalah obat yang aneh. Kamu tidak dapat memprediksikan apa yang akan dilakukan obat ini. Obat ini dapat menyembuhkan atau menyerangmu, membuatmu lebih kuat atau lebih lemah, atau bahkan mengubahmu menjadi seseorang (sesuatu?) yang lain. / Dan obat ini juga sulit untuk dibuat! / Petunjuk : - Taruh 500 permen di kualimu - Aduk selama beberapa detik - Berhenti mengaduk - Tambahkan 100 kali lebih banyak permen dari waktu kamu mengaduk. Contohnya jika kamu mengaduk selama 4 detik, kamu harus menambahkan 400 permen. Jangan melipatgandakan jumlah ini, bahkan jika kamu ingin membuat lebih dari satu obat. - Panaskan sampai airnya hangat-hangat kuku - Berhenti memanaskan - Tambahkan beberapa lollipop - Aduk - Taruh ke botol!");
Database.addText("id.cauldron.page9", "Gunakan obat P sebaik-baiknya / Ada beberapa aturan yang dapat kamu ikuti untuk mendapatkan hasil yang lebih baik ketika meminum obat P. Walaupun aturan-aturan ini dijelaskan empirically, tampaknya mereka bekerja cukup baik. / - Semakin banyak kamu menggunakan obat P, mereka tampaknya mempunyai efek yang aneh. / - Jika nyawamu sangat rendah, mungkin kamu harus minum obat P. / - Binatang yang meminum obat P tampaknya bereaksi dengan cara yang sangat buruk.");
Database.addText("id.cauldron.page10", "Obat X / Obat X adalah obat yang legendaris. Katanya siapapun yang dapat membuat dan meminum obat ini akan pergi ke suatu tempat yang belum pernah dikunjungi siapapun. / Saya tidak tahu kalau obat ini legendaris atau tidak, tapi saya akan menulis semua yang saya ketahui di buku ini. / Obat X sering disebut di banyak buku legenda tua dan buku alkimia. Ini adalah ringkasan dari informasi yang dapat membantumu membuatmu. Semoga sukses! / - Katanya ada 5 langkah yang perlu dilakukan untuk membuat obat X. / - Katanya tidak ada lollipop yang dibutuhkan, kecuali dalam salah satu lengkahnya. / - Katanya, tidak seperti obat-obat lain, kamu tidak dapat membuat lebih dari satu obat X dalam satu kali.");
Database.addText("id.cauldron.page11", "- Akhirnya, puisi ini sering dikutip di bagian obat X : / Pada hari pertama, dia melahirkan Penganan yang paling pertama. Tapi diluar dingin. / Pada hari kedua, dia memberikan Penganan tersebut ayah. Tapi diluar dingin. / Pada hari ketiga, dia memberikan Penganan tersebut saudara. Tapi diluar dingin. / Pada hari keempat, dia memberikan Penganan tersebut teman. Tapi diluar dingin. / Pada hari kelima, dia memberikan Penganan tersebut pasangan, dan kedengarannya sederhana atau bodoh, tapi sekarang Penganan tersebut senang, dan diluar panas.");
Database.addText("en.cauldron.page0", "Brewing manual");
Database.addText("en.cauldron.page1", "Ãndice / PÃ¡g. 2: PociÃ³n de salud / PÃ¡g. 3 : PociÃ³n tortuga / PÃ¡gs. 4-5 : PociÃ³n antigravedad / PÃ¡gs. 6-7 : PociÃ³n berserk / PÃ¡gs. 8-9 : La pociÃ³n P / PÃ¡gs. 10-11 : La pociÃ³n X");
Database.addText("en.cauldron.page2", "PociÃ³n de salud / La pociÃ³n de salud es una de las mÃ¡s fÃ¡ciles de realizar, en serio. Solo hacen falta caramelos. En las misiones, te curarÃ¡ devolviÃ©ndote 100 puntos de salud. / Instrucciones: -Pon 100 caramelos en el caldero -Mezcla durante unos segundos -EmbotÃ©llalo / Igual que con cualquier pociÃ³n, puedes multiplicar las cantidades, por supuesto. Por ejemplo, si usas 300 caramelos en lugar de 100, obtendrÃ¡s 3 pociones de salud.");
Database.addText("en.cauldron.page3", "PociÃ³n tortuga / La pociÃ³n tortuga es un poco mÃ¡s difÃ­cil que la pociÃ³n de salud. NecesitarÃ¡s caramelos y piruletas. / Si bebes esta pociÃ³n en una misiÃ³n, te convertirÃ¡ en una tortuga. Te moverÃ¡s mÃ¡s despacio, pero tambiÃ©n serÃ¡s mÃ¡s resistente a los ataques enemigos. / Instrucciones: -Pon 50 caramelos en el caldero -AÃ±ade 500 piruletas al caldero -Mezcla durante unos 10 segundos -Deja de mezclar -AÃ±ade 50 caramelos -Vuelve a mezclar durante unos seg. -EmbotÃ©llalo / Y ahora lo mÃ¡s importante, algo que no debes olvidar nunca: una vez te conviertas en tortuga, NO vuelques. No podrÃ¡s volver a levantarte.");
Database.addText("en.cauldron.page4", "PociÃ³n antigravedad / Esta pociÃ³n, que fue inventada por el conocido hechicero Isaac, te permite evitar la fuerza gravitatoria de la Tierra durante unos segundos. / Es especialmente Ãºtil despues de saltar (si no puedes saltar, deberÃ­as plantearte conseguir un pogo). / No es muy fÃ¡cil de hacer: necesitarÃ¡s calentar el caldero y tener cuidado con la temperatura. / Instrucciones: -Pon 1000 caramelos en el caldero -CaliÃ©ntalo hasta que estÃ© tibio -Deja de calentar -AÃ±ade 1000 caramelos -Calienta el agua hasta que hierva -EmbotÃ©llalo");
Database.addText("en.cauldron.page5", "PociÃ³n antigravedad: ejemplo / \"Sobrevolar el hueco\" / *se bebe la pociÃ³n*");
Database.addText("en.cauldron.page6", "PociÃ³n berserk / La pociÃ³n berserk te transforma en un berserker. / El inconveniente es que consume la mitad de tu vida. / Â¡La ventaja es que duplica el daÃ±o durante unos segundos! / Hacer esta pociÃ³n es muy sencillo, pero necesitarÃ¡s un montÃ³n de piruletas. / Estas son las instrucciones: -Pon 20Â 000 piruletas en el caldero -Mezcla hasta que te duelan los brazos -EmbotÃ©llalo");
Database.addText("en.cauldron.page7", "Aviso importante sobre la pociÃ³n berserk / NO aÃ±adas caramelos mientras haces esta pociÃ³n. / En serio, ni uno. / De verdad. / No se conocen los posibles resultados.");
Database.addText("en.cauldron.page8", "PociÃ³n P / La pociÃ³n P es muy rara. No puedes predecir quÃ© efecto tendrÃ¡. PodrÃ­a curarte o herirte, hacerte mÃ¡s fuerte o mÃ¡s dÃ©bil, o incluso convertirte en otra persona (Â¿o cosa?). / Â¡Y hacerla es difÃ­cil! /  Instrucciones : -Pon 500 caramelos en el caldero -Mezcla unos segundos -Para de mezclar -AÃ±ade 100 caramelos por cada segundo que hayas mezclado. Por ejemplo, si mezclaste durante 4 segundos, tendrÃ¡s que aÃ±adir 400 caramelos. Si quieres hacer mÃ¡s de una pociÃ³n, no tienes que multiplicar esta cantidad. -Calienta el agua hasta que estÃ© tibia -Deja de calentar -AÃ±ade algunas piruletas -Mezcla -Â¡EmbotÃ©llalo!");
Database.addText("en.cauldron.page9", "Usa la pociÃ³n P con responsabilidad / Hay ciertas reglas que puedes seguir para tener mejores resultados cuando bebas la pociÃ³n P. Aunque estas reglas se definieron empÃ­ricamente, parece que funcionan bastante bien. / -Cuantas mÃ¡s pociones P uses, los efectos parecen ser mÃ¡s raros. / -Si tu salud estÃ¡ baja, es buena idea que bebas una pociÃ³n P. / -Los animales parecen reaccionar muy mal cuando beben pociones P.");
Database.addText("en.cauldron.page10", "PociÃ³n X / La pociÃ³n X es una leyenda. Se dice que quien consiga hacerla y bebÃ©rsela viajarÃ¡ a un lugar donde nunca ha estado nadie. / No sÃ© si esta pociÃ³n es una leyenda o no, pero escribirÃ© todo lo que sÃ© sobre ella en este libro. / La pociÃ³n X se menciona en muchas leyendas y libros de alquimia antiguos. AquÃ­ tienes algunos datos que pueden ayudarte. Â¡Buena suerte! / -Dicen que se necesitan 5 pasos para preparar la pociÃ³n X. / -Dicen que no hacen falta piruletas, excepto para uno de los pasos. / -Dicen que, a diferencia de otras pociones, no puedes hacer varias pociones X de una sola vez.");
Database.addText("en.cauldron.page11", "-Por Ãºltimo, el siguiente poema se suele citar junto a la pociÃ³n X: / El primer dÃ­a  dio a luz al Primer Caramelo, pero fuera hacÃ­a frÃ­o. / El segundo dÃ­a le dio un padre al Caramelo, pero fuera hacÃ­a frÃ­o. / El tercer dÃ­a le dio un hermano al Caramelo, pero fuera hacÃ­a frÃ­o. /  El cuarto dÃ­a le dio un amigo al Caramelo, pero fuera hacÃ­a frÃ­o. / El quinto dÃ­a le dio una amante al Caramelo, y puede sonar simple o tonto, pero el Caramelo ahora era feliz y hacÃ­a calor fuera.");
Database.addText("hu.cauldron.page0", "FÅ‘zÃ©si ÃºtmutatÃ³");
Database.addText("hu.cauldron.page1", "Ã–sszefoglalÃ³ / 2. oldal : GyÃ³gyÃ­tÃ³ ital / 3. oldal : TeknÅ‘s ital / 4.-5. oldal : Anti-gravitÃ¡ciÃ³s ital / 6.-7. oldal : ÅrjÃ­tÅ‘ ital / 8.-9. oldal : A P ital / 10.-11. oldal : Az X ital");
Database.addText("hu.cauldron.page2", "GyÃ³gyÃ­tÃ³ ital / A gyÃ³gyÃ­tÃ³ italt a legkÃ¶nnyebb kifÅ‘zni, de tÃ©nyleg. Csak cukorka kell hozzÃ¡. A kÃ¼ldetÃ©sek kÃ¶zben felgyÃ³gyÃ­t tÃ©ged 100 Ã©leterÅ‘ ponttal. / ElkÃ©szÃ­tÃ©s : - Rakj 100 cukorkÃ¡t az Ã¼stbe - Keverd pÃ¡r mÃ¡sodpercig - Rakd bele Ã¼vegekbe / AkÃ¡rcsak a tÃ¶bbi italnÃ¡l, ennek mennyisÃ©gÃ©t is tÃ¶bbszÃ¶rÃ¶zheted. PÃ©ldÃ¡ul ha 300 cukorkÃ¡t hasznÃ¡lsz 100 helyett, akkor 3 Ã©leterÅ‘ italt fogsz kapni.");
Database.addText("hu.cauldron.page3", "TeknÅ‘s ital / A teknÅ‘s italt egy kicsit nehezebb elkÃ©szÃ­teni, mint a gyÃ³gyÃ­tÃ³ italt. Ehhez cukorkÃ¡kra Ã©s nyalÃ³kÃ¡kra is szÃ¼ksÃ©ged lesz. / Ha ezt megiszod egy kÃ¼ldetÃ©s kÃ¶zben, akkor teknÅ‘ssÃ© vÃ¡ltozol. Lassabban fogsz mozogni, de ugyanakkor jobban ellenÃ¡llsz majd az ellensÃ©g tÃ¡madÃ¡sainak. / ElkÃ©szÃ­tÃ©s : - Rakj 50 cukorkÃ¡t az Ã¼stbe - Adj hozzÃ¡ 500 nyalÃ³kÃ¡t - Keverd meg tÃ¶bb vagy kevesebb mint 10 mÃ¡sodpercig - Hagyd abba a keverÃ©st - Adj hozzÃ¡ 50 cukorkÃ¡t - Keverd meg Ãºjra egy pÃ¡r pillanatig - Rakd bele Ã¼vegekbe / Ã‰s most jÃ¶n a legfontosabb, amit nem feledhetsz el : Ha teknÅ‘sbÃ©ka lettÃ©l, NEHOGY felfordulj. Nem fogsz tudni felkelni.");
Database.addText("hu.cauldron.page4", "Anti-gravitÃ¡ciÃ³s ital / Ez az ital, amit a hÃ­res Isaac varÃ¡zslÃ³ talÃ¡lt fel, ellenÃ¡llÃ³vÃ¡ tesz tÃ©ged pÃ¡r mÃ¡sodpercre a FÃ¶ld gravitÃ¡ciÃ³s erejÃ©nek. / Nagyon hasznos lehet egy ugrÃ¡s utÃ¡n (ha nem tudsz ugrani, akkor jobban teszed, ha sÃ¼rgÅ‘sen beszerzel egy pogo rudat). / Nem kÃ¶nnyÅ± elkÃ©szÃ­teni, mivel fel kell hevÃ­teni az Ã¼stÃ¶t, Ã©s figyelemmel kell kÃ­sÃ©rni a hÅ‘mÃ©rsÃ©kletÃ©t. / ElkÃ©szÃ­tÃ©s : - Rakj 1000 cukorkÃ¡t az Ã¼stbe - HevÃ­tsd fel, amÃ­g langyos nem lesz - Hagyd abba a melegÃ­tÃ©sÃ©t - Adj hozzÃ¡ 1000 cukorkÃ¡t - HevÃ­tsd addig az Ã¼stÃ¶t, amÃ­g el nem kezd forrni benne a vÃ­z - Rakd bele Ã¼vegekbe");
Database.addText("hu.cauldron.page5", "Anti-gravitÃ¡ciÃ³s ital : pÃ©lda a hasznÃ¡latra / \"ÃtrepÃ¼l a szakadÃ©k felett\" / *megissza az italt*");
Database.addText("hu.cauldron.page6", "ÅrjÃ­tÅ‘ ital / Az Å‘rjÃ­tÅ‘ ital egy Å‘rÃ¼lt harcossÃ¡ vÃ¡ltoztat tÃ©ged. / A hÃ¡trÃ¡nya az, hogy elhasznÃ¡lja a fÃ©l Ã©leterÅ‘det. / Az elÅ‘nye viszont, hogy kÃ©tszer tÃ¶bbet fogsz sebezni pÃ¡r mÃ¡sodpercig! / A kifÅ‘zÃ©se nagyon egyszerÅ±, de rengeteg nyalÃ³kÃ¡ba kerÃ¼l. / Itt az elkÃ©szÃ­tÃ©se : - Rakj 20 000 nyalÃ³kÃ¡t az Ã¼stbe - Addig keverd Å‘ket, amÃ­g bele nem fÃ¡jdul a karod - Rakd bele Ã¼vegekbe");
Database.addText("hu.cauldron.page7", "Fontos tudnivalÃ³ az Å‘rjÃ­tÅ‘ itallal kapcsolatban / NE adj hozzÃ¡ cukorkÃ¡t az ital kifÅ‘zÃ©se kÃ¶zben. / Komolyan, egyet se. / De tÃ©nyleg. / Az eredmÃ©ny vÃ¡ratlan lehet.");
Database.addText("hu.cauldron.page8", "A P ital / A P ital elÃ©ggÃ© fura. Sose tudhatod, hogy mit fog csinÃ¡lni. FelgyÃ³gyÃ­that, vagy sebezhet is tÃ©ged, erÅ‘sebbÃ© vagy gyengÃ©bbÃ© vÃ¡lhatsz, vagy akÃ¡r valakivÃ© (valamivÃ©?) vÃ¡ltoztathat. / Ã‰s nehÃ©z kifÅ‘zni! / ElkÃ©szÃ­tÃ©s : - Rakj 500 cukorkÃ¡t az Ã¼stbe - Keverd pÃ¡r mÃ¡sodpercig - Hagyd abba a keverÃ©st - Rakj szÃ¡zszor annyi cukorkÃ¡t az Ã¼stbe, mint amennyi ideig keverted. TehÃ¡t ha 4 mÃ¡sodpercen Ã¡t keverted, akkor 400 cukorkÃ¡ra lesz szÃ¼ksÃ©ged. Ezt a mennyisÃ©get ne szorozd be, mÃ©g akkor sem, ha tÃ¶bb mint egy italt szeretnÃ©l kifÅ‘zni. - HevÃ­tsd fel a vizet, amÃ­g langyos nem lesz - Hagyd abba a melegÃ­tÃ©sÃ©t - Adj hozzÃ¡ pÃ¡r nyalÃ³kÃ¡t - Keverd meg - Rakd bele Ã¼vegekbe!");
Database.addText("hu.cauldron.page9", "Hogy kihasznÃ¡ld a P italt / Sok szabÃ¡ly van, amit kÃ¶vethetsz, hogy jobb eredmÃ©nyt kapj a P ital elfogyasztÃ¡sakor. HabÃ¡r ezen szabÃ¡lyokat empirikusan kell Ã©rtelmezni, Ãºgy tÅ±nik egÃ©sz jÃ³l mÅ±kÃ¶dnek. / - MinÃ©l tÃ¶bhet fogyasztasz el a P italbÃ³l, annÃ¡l furÃ¡bb hatÃ¡sokat kaphatsz. / - Ha kevÃ©s az Ã©leterÅ‘d, akkor talÃ¡n meg kellene innod egy P italt. / - Azon Ã¡llatok amik P italt fogyasztanak Ã¡ltalÃ¡ban nagyon rosszul reagÃ¡lnak rÃ¡.");
Database.addText("hu.cauldron.page10", "Az X ital / Az X ital egy legenda. ÃllÃ­tÃ³lag bÃ¡rkinek is sikerÃ¼l kifÅ‘znie Ã©s meginnia ezt, az eljutna egy olyan helyre ahol mÃ©g senki se jÃ¡rt azelÅ‘tt. / Nem tudom, hogy ez most tÃ©nyleg legenda vagy sem, de leÃ­rok rÃ³la mindent ebbe a kÃ¶nyvbe, amit csak tudok rÃ³la. / Az X italt rengeteg rÃ©gi legendÃ¡ban Ã©s alkÃ­miai kÃ¶nyvben megemlÃ­tik. Itt egy Ã¶sszegzÃ©s az informÃ¡ciÃ³krÃ³l, amik segÃ­tsÃ©gÃ©vel talÃ¡n te magad is kifÅ‘zheted. Sok szerencsÃ©t! / - ÃllÃ­tÃ³lag 5 lÃ©pÃ©s kell az X ital elkÃ©szÃ­tÃ©sÃ©hez. / - ÃllÃ­tÃ³lag nem kell nyalÃ³kÃ¡t hasznÃ¡lni, kivÃ©ve az egyik lÃ©pÃ©shez. / - ÃllÃ­tÃ³lag a tÃ¶bbi itallal ellentÃ©tben az X italbÃ³l nem lehet egyszerre tÃ¶bbet kÃ©szÃ­teni.");
Database.addText("hu.cauldron.page11", "- VÃ©gezetÃ¼l ezt a mondÃ³kÃ¡t szoktÃ¡k felhozni az X itallal kapcsolatban : / Az elsÅ‘ napon egy nagyon Ã‰des dolognak adott Ã©letet. De odakint hideg volt. / A mÃ¡sodik napon az Ã‰deset odaadta egy apÃ¡nak. De odakint hideg volt. / A harmadik napon az Ã‰deset odaadta egy testvÃ©rnek. De odakint hideg volt. / A negyedik napon az Ã‰deset odaadta egy barÃ¡tnak. De odakint hideg volt. / Az Ã¶tÃ¶dik napon az Ã‰deset odaadta egy szeretÅ‘nek, Ã©s egyszerÅ±nek, vagy butÃ¡nak tÅ±nhet, de az Ã‰des most boldog volt, Ã©s odakint forrÃ³sÃ¡g volt.");
Database.addText("uk.cauldron.page0", "ÐšÐ½Ð¸Ð³Ð° Ð·Ñ–Ð»Ð»Ñ”Ð²Ð°Ñ€Ñ–Ð½Ð½Ñ");
Database.addText("uk.cauldron.page1", "Ð—Ð¼Ñ–ÑÑ‚ / Ð¡Ñ‚Ð¾Ñ€Ñ–Ð½ÐºÐ° 2 : Ð—Ñ–Ð»Ð»Ñ Ð·Ð´Ð¾Ñ€Ð¾Ð²â€™Ñ / Ð¡Ñ‚Ð¾Ñ€Ñ–Ð½ÐºÐ° 3 : Ð§ÐµÑ€ÐµÐ¿Ð°ÑˆÐ°Ñ‡Ðµ Ð·Ñ–Ð»Ð»Ñ / Ð¡Ñ‚Ð¾Ñ€Ñ–Ð½ÐºÐ¸ 4-5 : Ð—Ñ–Ð»Ð»Ñ Ð°Ð½Ñ‚Ð¸Ð³Ñ€Ð°Ð²Ñ–Ñ‚Ð°Ñ†Ñ–Ñ— / Ð¡Ñ‚Ð¾Ñ€Ñ–Ð½ÐºÐ¸ 6-7 : Ð‘ÐµÑ€ÑÐµÑ€ÐºÐ¾Ð²Ðµ Ð·Ñ–Ð»Ð»Ñ / Ð¡Ñ‚Ð¾Ñ€Ñ–Ð½ÐºÐ¸ 8-9 : Ð—Ñ–Ð»Ð»Ñ P / Ð¡Ñ‚Ð¾Ñ€Ñ–Ð½ÐºÐ¸ 10-11 : Ð—Ñ–Ð»Ð»Ñ X");
Database.addText("uk.cauldron.page2", "Ð—Ñ–Ð»Ð»Ñ Ð·Ð´Ð¾Ñ€Ð¾Ð²â€™Ñ / Ð—Ñ–Ð»Ð»Ñ Ð·Ð´Ð¾Ñ€Ð¾Ð²â€™Ñ Ñ” Ð¾Ð´Ð½Ð¸Ð¼ Ñ–Ð· Ð½Ð°Ð¹Ð¿Ñ€Ð¾ÑÑ‚Ñ–ÑˆÐ¸Ñ… Ð´Ð»Ñ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ð½Ð½Ñ, Ð½Ð°ÑÐ¿Ñ€Ð°Ð²Ð´Ñ–. Ð”Ð»Ñ Ð½ÑŒÐ¾Ð³Ð¾ Ð¿Ð¾Ñ‚Ñ€Ñ–Ð±Ð½Ñ– Ð»Ð¸ÑˆÐµ Ñ†ÑƒÐºÐµÑ€ÐºÐ¸. Ð’Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð°Ð½Ðµ Ñƒ Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ñ–, Ð²Ð¾Ð½Ð¾ Ð²Ð¸Ð»Ñ–ÐºÑƒÑ” Ñ‚ÐµÐ±Ðµ, Ð¿Ð¾Ð²ÐµÑ€Ð½ÑƒÐ²ÑˆÐ¸ 100 Ð¿ÑƒÐ½ÐºÑ‚Ñ–Ð² Ð·Ð´Ð¾Ñ€Ð¾Ð²'Ñ. / Ð ÐµÑ†ÐµÐ¿Ñ‚ : - ÐŸÐ¾ÐºÐ»Ð°ÑÑ‚Ð¸ 100 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ñƒ ÐºÐ°Ð·Ð°Ð½ - Ð Ð¾Ð·Ð¼Ñ–ÑˆÑƒÐ²Ð°Ñ‚Ð¸ Ð´ÐµÐºÑ–Ð»ÑŒÐºÐ° ÑÐµÐºÑƒÐ½Ð´ - Ð Ð¾Ð·Ð»Ð¸Ñ‚Ð¸ Ñƒ Ð¿Ð»ÑÑˆÐºÐ¸ / Ð¯Ðº Ñ– Ð´Ð»Ñ Ð±ÑƒÐ´ÑŒ-ÑÐºÐ¾Ð³Ð¾ Ñ–Ð½ÑˆÐ¾Ð³Ð¾ Ð·Ñ–Ð»Ð»Ñ, Ñ‚Ð¸ Ð¼Ð¾Ð¶ÐµÑˆ, Ð·Ð²Ð¸Ñ‡Ð°Ð¹Ð½Ð¾, Ð¿ÐµÑ€ÐµÐ¼Ð½Ð¾Ð¶Ð¸Ñ‚Ð¸ Ñ†ÑŽ ÐºÑ–Ð»ÑŒÐºÑ–ÑÑ‚ÑŒ. ÐÐ°Ð¿Ñ€Ð¸ÐºÐ»Ð°Ð´, ÑÐºÑ‰Ð¾ Ñ‚Ð¸ Ð²Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð°Ñ”Ñˆ 300 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ð·Ð°Ð¼Ñ–ÑÑ‚ÑŒ 100, Ñ‚Ð¸ Ð¾Ñ‚Ñ€Ð¸Ð¼Ð°Ñ”Ñˆ 3 Ð·Ñ–Ð»Ð»Ñ Ð·Ð´Ð¾Ñ€Ð¾Ð²â€™Ñ.");
Database.addText("uk.cauldron.page3", "Ð§ÐµÑ€ÐµÐ¿Ð°ÑˆÐ°Ñ‡Ðµ Ð·Ñ–Ð»Ð»Ñ / Ð§ÐµÑ€ÐµÐ¿Ð°ÑˆÐ°Ñ‡Ðµ Ð·Ñ–Ð»Ð»Ñ Ñ‚Ñ€Ð¾Ñ…Ð¸ Ð±Ñ–Ð»ÑŒÑˆ ÑÐºÐ»Ð°Ð´Ð½Ðµ Ð´Ð»Ñ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ð½Ð½Ñ, Ð½Ñ–Ð¶ Ð·Ñ–Ð»Ð»Ñ Ð·Ð´Ð¾Ñ€Ð¾Ð²â€™Ñ. Ð¢Ð¾Ð±Ñ– Ð±ÑƒÐ´ÑƒÑ‚ÑŒ Ð¿Ð¾Ñ‚Ñ€Ñ–Ð±Ð½Ñ– Ñ– Ñ†ÑƒÐºÐµÑ€ÐºÐ¸, Ñ– Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÐ¸. / Ð¯ÐºÑ‰Ð¾ Ñ‚Ð¸ Ð²Ð¸Ð¿â€™Ñ”Ñˆ Ñ†Ðµ Ð·Ñ–Ð»Ð»Ñ Ð¿Ñ–Ð´ Ñ‡Ð°Ñ Ð¿Ñ€Ð¸Ð³Ð¾Ð´Ð¸, Ð²Ð¾Ð½Ð¾ Ð¿ÐµÑ€ÐµÑ‚Ð²Ð¾Ñ€Ð¸Ñ‚ÑŒ Ñ‚ÐµÐ±Ðµ Ð½Ð° Ñ‡ÐµÑ€ÐµÐ¿Ð°Ñ…Ñƒ. Ð¢Ð¸ ÑÑ‚Ð°Ð½ÐµÑˆ Ð±Ñ–Ð»ÑŒÑˆ Ð¿Ð¾Ð²Ñ–Ð»ÑŒÐ½Ð¸Ð¼, Ð°Ð»Ðµ Ñ‚Ð°ÐºÐ¾Ð¶ Ñ– Ð¼ÐµÐ½Ñˆ Ð²Ñ€Ð°Ð·Ð»Ð¸Ð²Ð¸Ð¼ Ð´Ð¾ Ð°Ñ‚Ð°Ðº Ñ‚Ð²Ð¾Ñ—Ñ… Ð²Ð¾Ñ€Ð¾Ð³Ñ–Ð². / Ð ÐµÑ†ÐµÐ¿Ñ‚ : - ÐŸÐ¾ÐºÐ»Ð°ÑÑ‚Ð¸ 50 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ñƒ ÐºÐ°Ð·Ð°Ð½ - Ð”Ð¾Ð´Ð°Ñ‚Ð¸ 500 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð² - Ð Ð¾Ð·Ð¼Ñ–ÑˆÑƒÐ²Ð°Ñ‚Ð¸ Ð¿Ñ€Ð¸Ð±Ð»Ð¸Ð·Ð½Ð¾ 10 ÑÐµÐºÑƒÐ½Ð´ - ÐŸÐµÑ€ÐµÑÑ‚Ð°Ñ‚Ð¸ Ñ€Ð¾Ð·Ð¼Ñ–ÑˆÑƒÐ²Ð°Ñ‚Ð¸ - Ð”Ð¾Ð´Ð°Ñ‚Ð¸ 50 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº - Ð—Ð½Ð¾Ð²Ñƒ Ñ€Ð¾Ð·Ð¼Ñ–ÑˆÑƒÐ²Ð°Ñ‚Ð¸ ÐºÑ–Ð»ÑŒÐºÐ° ÑÐµÐºÑƒÐ½Ð´ - Ð Ð¾Ð·Ð»Ð¸Ñ‚Ð¸ Ñƒ Ð¿Ð»ÑÑˆÐºÐ¸ / Ð Ñ‚ÐµÐ¿ÐµÑ€ Ð½Ð°Ð¹Ð±Ñ–Ð»ÑŒÑˆ Ð²Ð°Ð¶Ð»Ð¸Ð²Ð° Ñ€Ñ–Ñ‡, ÑÐºÑƒ Ñ‚Ð¾Ð±Ñ– Ð½Ñ–ÐºÐ¾Ð»Ð¸ Ð½Ðµ Ð²Ð°Ñ€Ñ‚Ð¾ Ð·Ð°Ð±ÑƒÐ²Ð°Ñ‚Ð¸: ÐºÐ¾Ð»Ð¸ Ñ‚Ð¸ ÑÑ‚Ð°Ð½ÐµÑˆ Ñ‡ÐµÑ€ÐµÐ¿Ð°Ñ…Ð¾ÑŽ, ÐÐ• Ð¿ÐµÑ€ÐµÐ²ÐµÑ€Ñ‚Ð°Ð¹ÑÑ. Ð¢Ð¸ ÑƒÐ¶Ðµ Ð½Ðµ Ð·Ð¼Ð¾Ð¶ÐµÑˆ Ð¿Ñ–Ð´Ð½ÑÑ‚Ð¸ÑÑŒ.");
Database.addText("uk.cauldron.page4", "Ð—Ñ–Ð»Ð»Ñ Ð°Ð½Ñ‚Ð¸Ð³Ñ€Ð°Ð²Ñ–Ñ‚Ð°Ñ†Ñ–Ñ— / Ð¦Ðµ Ð·Ñ–Ð»Ð»Ñ, Ð²Ð¸Ð½Ð°Ð¹Ð´ÐµÐ½Ðµ ÑˆÐ¸Ñ€Ð¾ÐºÐ¾ Ð²Ñ–Ð´Ð¾Ð¼Ð¸Ð¼ Ñ‡Ð°Ñ€Ñ–Ð²Ð½Ð¸ÐºÐ¾Ð¼ Ð†ÑÐ°Ð°ÐºÐ¾Ð¼, Ð´Ð¾Ð·Ð²Ð¾Ð»ÑÑ” Ñ‚Ð¾Ð±Ñ– Ð¾Ð¿Ð¸Ñ€Ð°Ñ‚Ð¸ÑÑŒ ÑÐ¸Ð»Ð°Ð¼ Ð·ÐµÐ¼Ð½Ð¾Ð³Ð¾ Ñ‚ÑÐ¶Ñ–Ð½Ð½Ñ Ð´ÐµÐºÑ–Ð»ÑŒÐºÐ° ÑÐµÐºÑƒÐ½Ð´. / Ð’Ð¾Ð½Ð¾ Ð¾ÑÐ¾Ð±Ð»Ð¸Ð²Ð¾ ÐºÐ¾Ñ€Ð¸ÑÐ½Ðµ Ð¿Ñ–ÑÐ»Ñ Ð¿Ñ–Ð´ÑÑ‚Ñ€Ð¸Ð±ÑƒÐ²Ð°Ð½Ð½Ñ (ÑÐºÑ‰Ð¾ Ñ‚Ð¸ Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑˆ ÑÑ‚Ñ€Ð¸Ð±Ð°Ñ‚Ð¸, Ñ‚Ð¾Ð±Ñ– ÑÐ»Ñ–Ð´ ÑÐµÑ€Ð¹Ð¾Ð·Ð½Ð¾ Ð¿Ð¾Ð¼Ñ–Ñ€ÐºÑƒÐ²Ð°Ñ‚Ð¸ Ð½Ð°Ð´ Ð·Ð´Ð¾Ð±ÑƒÑ‚Ñ‚ÑÐ¼ Ñ†Ñ–Ð¿ÐºÐ°-ÑÑ‚Ñ€Ð¸Ð±ÑƒÐ½ÐºÐ°). / Ð’Ð¾Ð½Ð¾ Ð½Ðµ Ð´ÑƒÐ¶Ðµ Ð¿Ñ€Ð¾ÑÑ‚Ðµ Ð´Ð»Ñ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ð½Ð½Ñ, Ñ‚Ð¾Ð±Ñ– Ð½ÐµÐ¾Ð±Ñ…Ñ–Ð´Ð½Ð¾ Ð±ÑƒÐ´Ðµ Ñ€Ð¾Ð·Ñ–Ð³Ñ€Ñ–Ñ‚Ð¸ ÑÐ²Ñ–Ð¹ ÐºÐ°Ð·Ð°Ð½ Ñ– ÑƒÐ²Ð°Ð¶Ð½Ð¾ ÑÐ¿Ð¾ÑÑ‚ÐµÑ€Ñ–Ð³Ð°Ñ‚Ð¸ Ð·Ð° Ñ‚ÐµÐ¼Ð¿ÐµÑ€Ð°Ñ‚ÑƒÑ€Ð¾ÑŽ. / Ð ÐµÑ†ÐµÐ¿Ñ‚ : - ÐŸÐ¾ÐºÐ»Ð°ÑÑ‚Ð¸ 1000 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ñƒ ÐºÐ°Ð·Ð°Ð½ - Ð“Ñ€Ñ–Ñ‚Ð¸, Ð´Ð¾ÐºÐ¸ Ð²Ð¾Ð´Ð° Ð½Ðµ ÑÑ‚Ð°Ð½Ðµ Ñ‚ÐµÐ¿Ð»ÐµÐ½ÑŒÐºÐ¾ÑŽ - Ð—ÑƒÐ¿Ð¸Ð½Ð¸Ñ‚Ð¸ Ð½Ð°Ð³Ñ€Ñ–Ð²Ð°Ð½Ð½Ñ  - Ð”Ð¾Ð´Ð°Ñ‚Ð¸ 1000 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº - Ð“Ñ€Ñ–Ñ‚Ð¸, Ð´Ð¾ÐºÐ¸ Ð²Ð¾Ð´Ð° Ð½Ðµ Ð·Ð°ÐºÐ¸Ð¿Ð¸Ñ‚ÑŒ - Ð Ð¾Ð·Ð»Ð¸Ñ‚Ð¸ Ñƒ Ð¿Ð»ÑÑˆÐºÐ¸");
Database.addText("uk.cauldron.page5", "Ð—Ñ–Ð»Ð»Ñ Ð°Ð½Ñ‚Ð¸Ð³Ñ€Ð°Ð²Ñ–Ñ‚Ð°Ñ†Ñ–Ñ— : Ð²Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð°Ð½Ð½Ñ / \"ÐŸÐµÑ€ÐµÐ»ÐµÑ‚Ñ–Ñ‚Ð¸ Ð¿Ñ€Ð¾Ð²Ð°Ð»Ð»Ñ\" / *Ð¿â€™Ñ” Ð·Ñ–Ð»Ð»Ñ*");
Database.addText("uk.cauldron.page6", "Ð‘ÐµÑ€ÑÐµÑ€ÐºÐ¾Ð²Ðµ Ð·Ñ–Ð»Ð»Ñ / Ð‘ÐµÑ€ÑÐµÑ€ÐºÐ¾Ð²Ðµ Ð·Ñ–Ð»Ð»Ñ Ð¿ÐµÑ€ÐµÑ‚Ð²Ð¾Ñ€ÑŽÑ” Ñ‚ÐµÐ±Ðµ Ð½Ð° Ð±ÐµÑ€ÑÐµÑ€ÐºÐ°. / ÐÐµÐ´Ð¾Ð»Ñ–Ðº Ñƒ Ñ‚Ð¾Ð¼Ñƒ, Ñ‰Ð¾ Ð²Ð¾Ð½Ð¾ Ð¿Ð¾Ð³Ð»Ð¸Ð½Ð°Ñ” Ð¿Ð¾Ð»Ð¾Ð²Ð¸Ð½Ñƒ Ñ‚Ð²Ð¾Ð³Ð¾ Ð¶Ð¸Ñ‚Ñ‚Ñ. / ÐŸÐµÑ€ÐµÐ²Ð°Ð³Ð° Ð² Ñ‚Ð¾Ð¼Ñƒ, Ñ‰Ð¾ Ð½Ð° ÐºÑ–Ð»ÑŒÐºÐ° ÑÐµÐºÑƒÐ½Ð´ Ð²Ð¾Ð½Ð¾ Ð¿Ð¾Ð´Ð²Ð¾ÑŽÑ” Ð¿Ð¾ÑˆÐºÐ¾Ð´Ð¶ÐµÐ½Ð½Ñ Ð²Ñ–Ð´ Ñ‚Ð²Ð¾Ñ—Ñ… Ð°Ñ‚Ð°Ðº! / ÐŸÑ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ð½Ð½Ñ Ñ†ÑŒÐ¾Ð³Ð¾ Ð·Ñ–Ð»Ð»Ñ Ð´ÑƒÐ¶Ðµ Ð¿Ñ€Ð¾ÑÑ‚Ðµ, Ð°Ð»Ðµ Ñ‚Ð¾Ð±Ñ– Ð±ÑƒÐ´Ðµ Ð¿Ð¾Ñ‚Ñ€Ñ–Ð±Ð½Ð¾ Ð±Ð°Ð³Ð°Ñ‚Ð¾ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð². / ÐžÑÑŒ Ñ€ÐµÑ†ÐµÐ¿Ñ‚ : - ÐŸÐ¾ÐºÐ»Ð°ÑÑ‚Ð¸ 20 000 Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð² Ñƒ ÐºÐ°Ð·Ð°Ð½ - Ð Ð¾Ð·Ð¼Ñ–ÑˆÑƒÐ²Ð°Ñ‚Ð¸, Ð´Ð¾ÐºÐ¸ Ñ‚Ð²Ð¾Ñ— Ñ€ÑƒÐºÐ¸ Ð½Ðµ Ð¿Ð¾Ñ‡Ð½ÑƒÑ‚ÑŒ Ð±Ð¾Ð»Ñ–Ñ‚Ð¸ - Ð Ð¾Ð·Ð»Ð¸Ñ‚Ð¸ Ñƒ Ð¿Ð»ÑÑˆÐºÐ¸");
Database.addText("uk.cauldron.page7", "Ð’Ð°Ð¶Ð»Ð¸Ð²Ðµ Ð·Ð°ÑƒÐ²Ð°Ð¶ÐµÐ½Ð½Ñ Ñ‰Ð¾Ð´Ð¾ Ð±ÐµÑ€ÑÐµÑ€ÐºÐ¾Ð²Ð¾Ð³Ð¾ Ð·Ñ–Ð»Ð»Ñ / ÐÐ• Ð´Ð¾Ð´Ð°Ð²Ð°Ð¹ Ð¶Ð¾Ð´Ð½Ð¸Ñ… Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ð¿Ñ–Ð´ Ñ‡Ð°Ñ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ð½Ð½Ñ Ñ†ÑŒÐ¾Ð³Ð¾ Ð·Ñ–Ð»Ð»Ñ. / Ð¯ Ð¼Ð°ÑŽ Ð½Ð° ÑƒÐ²Ð°Ð·Ñ– Ð¶Ð¾Ð´Ð½Ñ–ÑÑ–Ð½ÑŒÐºÐ¾Ñ—. / Ð¡Ð¿Ñ€Ð°Ð²Ð´Ñ–. / ÐÐ°ÑÐ»Ñ–Ð´ÐºÐ¸ Ð±ÑƒÐ´ÑƒÑ‚ÑŒ Ð½ÐµÐ¾Ñ‡Ñ–ÐºÑƒÐ²Ð°Ð½Ð¸Ð¼Ð¸.");
Database.addText("uk.cauldron.page8", "Ð—Ñ–Ð»Ð»Ñ P / Ð—Ñ–Ð»Ð»Ñ P Ñ” Ð´Ð¾ÑÐ¸Ñ‚ÑŒ Ð´Ð¸Ð²Ð½Ð¸Ð¼. Ð¢Ð¸ Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑˆ Ð¿ÐµÑ€ÐµÐ´Ð±Ð°Ñ‡Ð¸Ñ‚Ð¸, ÑÐº Ð²Ð¾Ð½Ð¾ Ð¿Ð¾Ð´Ñ–Ñ”. Ð’Ð¾Ð½Ð¾ Ð¼Ð¾Ð¶Ðµ Ð²Ð¸Ð»Ñ–ÐºÑƒÐ²Ð°Ñ‚Ð¸ Ð°Ð±Ð¾ Ð·Ð°Ð²Ð´Ð°Ñ‚Ð¸ Ñ‚Ð¾Ð±Ñ– ÑˆÐºÐ¾Ð´Ð¸, Ð·Ñ€Ð¾Ð±Ð¸Ñ‚Ð¸ Ñ‚ÐµÐ±Ðµ ÑÐ¸Ð»ÑŒÐ½Ñ–ÑˆÐ¸Ð¼ Ð°Ð±Ð¾ ÑÐ»Ð°Ð±ÑˆÐ¸Ð¼, Ð°Ð±Ð¾ Ð½Ð°Ð²Ñ–Ñ‚ÑŒ Ð¿ÐµÑ€ÐµÑ‚Ð²Ð¾Ñ€Ð¸Ñ‚Ð¸ Ñ‚ÐµÐ±Ðµ Ð½Ð° ÐºÐ¾Ð³Ð¾ÑÑŒ (Ñ‰Ð¾ÑÑŒ?) Ñ–Ð½ÑˆÐ¾Ð³Ð¾. / Ð† Ð¹Ð¾Ð³Ð¾ Ñ‚Ð°ÐºÐ¾Ð¶ Ð²Ð°Ð¶ÐºÐ¾ Ð·Ð²Ð°Ñ€Ð¸Ñ‚Ð¸! / Ð ÐµÑ†ÐµÐ¿Ñ‚ : - ÐŸÐ¾ÐºÐ»Ð°ÑÑ‚Ð¸ 500 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº Ñƒ ÐºÐ°Ð·Ð°Ð½ - Ð Ð¾Ð·Ð¼Ñ–ÑˆÑƒÐ²Ð°Ñ‚Ð¸ Ð´ÐµÐºÑ–Ð»ÑŒÐºÐ° ÑÐµÐºÑƒÐ½Ð´ - ÐŸÐµÑ€ÐµÑÑ‚Ð°Ñ‚Ð¸ Ñ€Ð¾Ð·Ð¼Ñ–ÑˆÑƒÐ²Ð°Ñ‚Ð¸ - Ð”Ð¾Ð´Ð°Ñ‚Ð¸ Ñƒ 100 Ñ€Ð°Ð·Ñ–Ð² Ð±Ñ–Ð»ÑŒÑˆÐµ Ñ†ÑƒÐºÐµÑ€Ð¾Ðº, Ð½Ñ–Ð¶ ÑÐµÐºÑƒÐ½Ð´, Ñ‰Ð¾ Ñ‚Ð¸ Ñ€Ð¾Ð·Ð¼Ñ–ÑˆÑƒÐ²Ð°Ð². ÐÐ°Ð¿Ñ€Ð¸ÐºÐ»Ð°Ð´, ÑÐºÑ‰Ð¾ Ñ‚Ð¸ Ñ€Ð¾Ð·Ð¼Ñ–ÑˆÑƒÐ²Ð°Ð² 4 ÑÐµÐºÑƒÐ½Ð´Ð¸, Ñ‚Ð¾Ð±Ñ– Ð¿Ð¾Ñ‚Ñ€Ñ–Ð±Ð½Ð¾ Ð±ÑƒÐ´Ðµ Ð´Ð¾Ð´Ð°Ñ‚Ð¸ 400 Ñ†ÑƒÐºÐµÑ€Ð¾Ðº. ÐÐµ Ð·Ð±Ñ–Ð»ÑŒÑˆÑƒÐ¹ Ñ†ÑŽ ÐºÑ–Ð»ÑŒÐºÑ–ÑÑ‚ÑŒ, Ð½Ð°Ð²Ñ–Ñ‚ÑŒ ÑÐºÑ‰Ð¾ Ñ‚Ð¸ Ñ…Ð¾Ñ‡ÐµÑˆ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ñ‚Ð¸ Ð±Ñ–Ð»ÑŒÑˆÐµ Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð·Ñ–Ð»Ð»Ñ. - ÐŸÑ–Ð´Ñ–Ð³Ñ€Ñ–Ð²Ð°Ñ‚Ð¸, Ð´Ð¾ÐºÐ¸ Ð²Ð¾Ð´Ð° Ð½Ðµ ÑÑ‚Ð°Ð½Ðµ Ñ‚ÐµÐ¿Ð»ÐµÐ½ÑŒÐºÐ¾ÑŽ - Ð—ÑƒÐ¿Ð¸Ð½Ð¸Ñ‚Ð¸ Ð½Ð°Ð³Ñ€Ñ–Ð²Ð°Ð½Ð½Ñ - Ð”Ð¾Ð´Ð°Ñ‚Ð¸ Ñ‚Ñ€Ð¾Ñ…Ð¸ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð² - Ð Ð¾Ð·Ð¼Ñ–ÑˆÐ°Ñ‚Ð¸ - Ð Ð¾Ð·Ð»Ð¸Ñ‚Ð¸ Ñƒ Ð¿Ð»ÑÑˆÐºÐ¸!");
Database.addText("uk.cauldron.page9", "Ð’Ð´Ð°Ð»Ðµ Ð²Ð¸ÐºÐ¾Ñ€Ð¸ÑÑ‚Ð°Ð½Ð½Ñ Ð·Ñ–Ð»Ð»Ñ P / Ð„ ÐºÑ–Ð»ÑŒÐºÐ° Ð¿Ñ€Ð°Ð²Ð¸Ð», ÑÐºÐ¸Ð¼ Ñ‚Ð¸ Ð¼Ð¾Ð¶ÐµÑˆ ÑÐ»Ñ–Ð´ÑƒÐ²Ð°Ñ‚Ð¸, Ñ‰Ð¾Ð± Ð´Ð¾Ð±Ð¸Ñ‚Ð¸ÑÑ ÐºÑ€Ð°Ñ‰Ð¸Ñ… Ñ€ÐµÐ·ÑƒÐ»ÑŒÑ‚Ð°Ñ‚Ñ–Ð² Ð²Ñ–Ð´ ÑƒÐ¶Ð¸Ð²Ð°Ð½Ð½Ñ Ð·Ñ–Ð»Ð»Ñ P. Ð¥Ð¾Ñ‡Ð° Ñ†Ñ– Ð¿Ñ€Ð°Ð²Ð¸Ð»Ð° Ð±ÑƒÐ»Ð¾ Ð²Ð¸Ð·Ð½Ð°Ñ‡ÐµÐ½Ð¾ Ð´Ð¾ÑÐ»Ñ–Ð´Ð½Ð¸Ð¼ ÑˆÐ»ÑÑ…Ð¾Ð¼, Ð·Ð´Ð°Ñ”Ñ‚ÑŒÑÑ, Ñ‰Ð¾ Ð²Ð¾Ð½Ð¸ Ð¿Ñ€Ð°Ñ†ÑŽÑŽÑ‚ÑŒ Ð´Ð¾ÑÐ¸Ñ‚ÑŒ Ð´Ð¾Ð±Ñ€Ðµ. / - Ð©Ð¾ Ð±Ñ–Ð»ÑŒÑˆÐµ Ñ‚Ð¸ Ð²Ð¶Ð¸Ð²Ð°Ñ”Ñˆ Ð·Ñ–Ð»Ð»Ñ P, Ñ‚Ð¸Ð¼ Ð±Ñ–Ð»ÑŒÑˆ Ð´Ð¸Ð²Ð½Ð¸Ð¼Ð¸ Ð²Ð¸Ð´Ð°ÑŽÑ‚ÑŒÑÑ Ð¹Ð¾Ð³Ð¾ ÐµÑ„ÐµÐºÑ‚Ð¸. / - Ð¯ÐºÑ‰Ð¾ Ñƒ Ñ‚ÐµÐ±Ðµ Ð´ÑƒÐ¶Ðµ Ð¼Ð°Ð»Ð¾ Ð·Ð´Ð¾Ñ€Ð¾Ð²â€™Ñ, Ñ‚Ð¾Ð±Ñ–, Ð¹Ð¼Ð¾Ð²Ñ–Ñ€Ð½Ð¾, ÑÐ»Ñ–Ð´ Ð²Ð¸Ð¿Ð¸Ñ‚Ð¸ Ð·Ñ–Ð»Ð»Ñ P. / - Ð¢Ð²Ð°Ñ€Ð¸Ð½Ð¸, Ñ‰Ð¾ Ð¿â€™ÑŽÑ‚ÑŒ Ð·Ñ–Ð»Ð»Ñ P, Ð·Ð´Ð°Ñ”Ñ‚ÑŒÑÑ, Ñ€ÐµÐ°Ð³ÑƒÑŽÑ‚ÑŒ Ð´ÑƒÐ¶Ðµ Ð¿Ð¾Ð³Ð°Ð½Ð¾.");
Database.addText("uk.cauldron.page10", "Ð—Ñ–Ð»Ð»Ñ X / Ð—Ñ–Ð»Ð»Ñ X â€” Ñ†Ðµ Ð»ÐµÐ³ÐµÐ½Ð´Ð°. ÐœÐ¾Ð²Ð¸Ñ‚ÑŒÑÑ, Ñ‰Ð¾ Ñ‚Ð¾Ð¹, ÐºÐ¾Ð¼Ñƒ Ð²Ð´Ð°ÑÑ‚ÑŒÑÑ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ñ‚Ð¸ Ñ– Ð²Ð¸Ð¿Ð¸Ñ‚Ð¸ Ð¹Ð¾Ð³Ð¾, Ð¿Ð¾Ð¼Ð°Ð½Ð´Ñ€ÑƒÑ” Ñƒ Ð¼Ñ–ÑÑ†Ðµ, Ð´Ðµ Ñ‰Ðµ Ð½Ñ–Ñ…Ñ‚Ð¾ Ð½Ðµ Ð±ÑƒÐ²Ð°Ð². / Ð¯ Ð½Ðµ Ð·Ð½Ð°ÑŽ, Ñ‡Ð¸ Ñ†Ðµ Ð·Ñ–Ð»Ð»Ñ Ñ” Ð»Ð¸ÑˆÐµ Ð»ÐµÐ³ÐµÐ½Ð´Ð¾ÑŽ, Ñ‡Ð¸ Ð½Ñ–, Ð°Ð»Ðµ Ñ Ð·Ð°Ð¿Ð¸ÑˆÑƒ Ñƒ Ñ†ÑŽ ÐºÐ½Ð¸Ð³Ñƒ ÑƒÑÐµ, Ñ‰Ð¾ Ñ Ð·Ð½Ð°ÑŽ Ð¿Ñ€Ð¾ Ð½ÑŒÐ¾Ð³Ð¾. / Ð—Ñ–Ð»Ð»Ñ X Ð·Ð³Ð°Ð´ÑƒÑ”Ñ‚ÑŒÑÑ Ñƒ Ð±Ð°Ð³Ð°Ñ‚ÑŒÐ¾Ñ… ÑÑ‚Ð°Ñ€Ð¸Ñ… Ð»ÐµÐ³ÐµÐ½Ð´Ð°Ñ… Ñ– ÐºÐ½Ð¸Ð³Ð°Ñ… Ð· Ð°Ð»Ñ…Ñ–Ð¼Ñ–Ñ—. ÐžÑÑŒ Ð·Ð²ÐµÐ´ÐµÐ½Ð½Ñ Ñ–Ð½Ñ„Ð¾Ñ€Ð¼Ð°Ñ†Ñ–Ñ—, Ñ‰Ð¾ Ð¼Ð¾Ð¶Ðµ Ð´Ð¾Ð¿Ð¾Ð¼Ð¾Ð³Ñ‚Ð¸ Ñ‚Ð¾Ð±Ñ– Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ñ‚Ð¸ Ð¹Ð¾Ð³Ð¾. Ð£Ð´Ð°Ñ‡Ñ–! / - Ð¡ÐºÐ°Ð·Ð°Ð½Ð¾, Ñ‰Ð¾ 5 ÐºÑ€Ð¾ÐºÑ–Ð² Ð½ÐµÐ¾Ð±Ñ…Ñ–Ð´Ð½Ñ– Ð´Ð»Ñ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ð½Ð½Ñ Ð·Ñ–Ð»Ð»Ñ X. / - Ð¡ÐºÐ°Ð·Ð°Ð½Ð¾, Ñ‰Ð¾ Ð½Ðµ Ð¿Ð¾Ñ‚Ñ€Ñ–Ð±Ð½Ð¾ Ð»ÑŒÐ¾Ð´ÑÐ½Ð¸ÐºÑ–Ð², Ð¾ÐºÑ€Ñ–Ð¼ ÑÐº Ð´Ð»Ñ Ð¾Ð´Ð½Ð¾Ð³Ð¾ ÐºÑ€Ð¾ÐºÑƒ. / - Ð¡ÐºÐ°Ð·Ð°Ð½Ð¾, Ñ‰Ð¾, Ð½Ð° Ð²Ñ–Ð´Ð¼Ñ–Ð½Ñƒ Ð²Ñ–Ð´ Ñ–Ð½ÑˆÐ¾Ð³Ð¾ Ð²Ð°Ñ€Ð¸Ð²Ð°, Ñ‚Ð¸ Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑˆ Ð¿Ñ€Ð¸Ð³Ð¾Ñ‚ÑƒÐ²Ð°Ñ‚Ð¸ Ð±Ð°Ð³Ð°Ñ‚Ð¾ Ð¿Ð¾Ñ€Ñ†Ñ–Ð¹ Ð·Ñ–Ð»Ð»Ñ X Ð·Ð° Ñ€Ð°Ð·.");
Database.addText("uk.cauldron.page11", "- ÐÐ°Ñ€ÐµÑˆÑ‚Ñ–, Ð½Ð°ÑÑ‚ÑƒÐ¿Ð½Ð° Ð¿Ð¾ÐµÐ¼Ð° Ñ‡Ð°ÑÑ‚Ð¾ Ñ†Ð¸Ñ‚ÑƒÑ”Ñ‚ÑŒÑÑ, ÐºÐ¾Ð»Ð¸ Ð¹Ð´ÐµÑ‚ÑŒÑÑ Ð¿Ñ€Ð¾ Ð·Ñ–Ð»Ð»Ñ X: / ÐŸÐµÑ€ÑˆÐ¾Ð³Ð¾ Ð´Ð½Ñ, Ð½Ð°Ð¹Ð¿ÐµÑ€ÑˆÑƒ Ð¡Ð¾Ð»Ð¾Ð´ÐºÑƒ Ð¿Ð¾Ñ€Ð¾Ð´Ð¶ÐµÐ½Ð¾ Ð±ÑƒÐ»Ð¾. ÐÐ»Ðµ Ñ…Ð¾Ð»Ð¾Ð´Ð½Ð° Ð±ÑƒÐ»Ð° Ð²Ð¾Ð½Ð°. / Ð”Ñ€ÑƒÐ³Ð¾Ð³Ð¾ Ð´Ð½Ñ, Ð¼Ð°Ñ‚Ñ–Ñ€ Ð¡Ð¾Ð»Ð¾Ð´ÐºÑ–Ð¹ Ð´Ð°Ñ€Ð¾Ð²Ð°Ð½Ð¾ Ð±ÑƒÐ»Ð¾. ÐÐ»Ðµ Ñ…Ð¾Ð»Ð¾Ð´Ð½Ð° Ð±ÑƒÐ»Ð° Ð²Ð¾Ð½Ð°. / Ð¢Ñ€ÐµÑ‚ÑŒÐ¾Ð³Ð¾ Ð´Ð½Ñ, ÑÐµÑÑ‚Ñ€Ñƒ Ð¡Ð¾Ð»Ð¾Ð´ÐºÑ–Ð¹ Ð´Ð°Ñ€Ð¾Ð²Ð°Ð½Ð¾ Ð±ÑƒÐ»Ð¾. ÐÐ»Ðµ Ñ…Ð¾Ð»Ð¾Ð´Ð½Ð° Ð±ÑƒÐ»Ð° Ð²Ð¾Ð½Ð°. / Ð§ÐµÑ‚Ð²ÐµÑ€Ñ‚Ð¾Ð³Ð¾ Ð´Ð½Ñ, Ð¿Ð¾Ð´Ñ€ÑƒÐ³Ñƒ Ð¡Ð¾Ð»Ð¾Ð´ÐºÑ–Ð¹ Ð´Ð°Ñ€Ð¾Ð²Ð°Ð½Ð¾ Ð±ÑƒÐ»Ð¾. ÐÐ»Ðµ Ñ…Ð¾Ð»Ð¾Ð´Ð½Ð° Ð±ÑƒÐ»Ð° Ð²Ð¾Ð½Ð°. / Ð§ÐµÑ‚Ð²ÐµÑ€Ñ‚Ð¾Ð³Ð¾ Ð´Ð½Ñ, ÐºÐ¾Ñ…Ð°Ð½Ñ†Ñ Ð¡Ð¾Ð»Ð¾Ð´ÐºÑ–Ð¹ Ð´Ð°Ñ€Ð¾Ð²Ð°Ð½Ð¾ Ð±ÑƒÐ»Ð¾, Ñ– Ð¼Ð¾Ð¶Ðµ Ñ†Ðµ Ð·Ð²ÑƒÑ‡Ð°Ñ‚Ð¸ Ð¿Ñ€Ð¾ÑÑ‚Ð¾ Ñ‚Ð° Ð±Ð°Ð½Ð°Ð»ÑŒÐ½Ð¾, Ð°Ð»Ðµ Ñ‰Ð°ÑÐ»Ð¸Ð²Ð¾ÑŽ Ñ‚ÐµÐ¿ÐµÑ€ Ð¡Ð¾Ð»Ð¾Ð´ÐºÐ° ÑÑ‚Ð°Ð»Ð°, Ñ– Ð³Ð°Ñ€ÑÑ‡Ð¾ÑŽ Ð±ÑƒÐ»Ð° Ð²Ð¾Ð½Ð°.");
Database.addText("br.cauldron.page0", "Receita de poÃ§Ãµes");
Database.addText("br.cauldron.page1", "Ãndice / PÃ¡g. 2 : PoÃ§Ã£o de cura / PÃ¡g. 3 : PoÃ§Ã£o Tartaruga / PÃ¡g. 4-5 : PoÃ§Ã£o Antigravidade / PÃ¡g. 6-7 : PoÃ§Ã£o Berserk / PÃ¡g. 8-9 : PoÃ§Ã£o P / PÃ¡g. 10-11 : PoÃ§Ã£o X");
Database.addText("br.cauldron.page2", "PoÃ§Ã£o de cura / A poÃ§Ã£o de cura Ã© uma das mais fÃ¡ceis de ser preparada. SÃ³ precisa de doces. Quando usada em missÃµes, ela recuperarÃ¡ 100 pontos de vida. / InstruÃ§Ãµes : - Coloque 100 doces no caldeirÃ£o - Misture por alguns segundos - Coloque em garrafas / Assim como toda poÃ§Ã£o, vocÃª pode preparar vÃ¡rias de uma sÃ³ vez. Exemplo: se vocÃª usar 300 doces em vez de 100, 3 poÃ§Ãµes de cura serÃ£o preparadas.");
Database.addText("br.cauldron.page3", "PoÃ§Ã£o Tartaruga / A poÃ§Ã£o Tartaruga Ã© um pouco mais difÃ­cil do que a de vida. VocÃª precisarÃ¡ de doces e pirulitos. / VocÃª serÃ¡ transformado em uma tartaruga se bebÃª-la em uma missÃ£o. VocÃª ficarÃ¡ mais lento, mas tambÃ©m muito mais resistente a ataques. / InstruÃ§Ãµes : - Coloque 50 doces no caldeirÃ£o - Adicione 500 pirulitos - Misture por cerca de 10 segundos - Pare de mexer - Adicione 50 doces - Misture novamente por alguns segundos - Coloque em garrafas / E agora, a coisa mais importante que vocÃª nÃ£o pode esquecer: NUNCA vire de costas! Ou vocÃª nunca mais vai conseguir ficar de pÃ©.");
Database.addText("br.cauldron.page4", "PoÃ§Ã£o Antigravidade / Essa poÃ§Ã£o, inventada pelo ilustre feiticeiro Isaac, permite que vocÃª resista Ã  forÃ§a gravitacional da Terra por alguns segundos. / Ela Ã© extremamente Ãºtil depois de um pulo (se vocÃª nÃ£o sabe pular, devia pensar em obter um pula-pula). / NÃ£o Ã© muito fÃ¡cil de ser preparada. VocÃª terÃ¡ que controlar cuidadosamente a temperatura do caldeirÃ£o. / InstruÃ§Ãµes : - Coloque 1000 doces no caldeirÃ£o - AqueÃ§a a Ã¡gua atÃ© ficar morna - Pare de aquecer - Adicione 1000 doces - AqueÃ§a a Ã¡gua atÃ© ferver - Coloque em garrafas");
Database.addText("br.cauldron.page5", "PoÃ§Ã£o Antigravidade : exemplo de uso / \"Voar por um buraco\" / *beba a poÃ§Ã£o*");
Database.addText("br.cauldron.page6", "PoÃ§Ã£o Berserker / A poÃ§Ã£o Berserker transforma vocÃª em um berserker. / O problema Ã© que metade da sua saÃºde Ã© consumida. / O bom Ã© que ela dobra o dano causado por alguns segundos! / Ã‰ muito fÃ¡cil preparar essa poÃ§Ã£o, mas sÃ£o precisos muitos pirulitos. / InstruÃ§Ãµes : - Coloque 20.000 pirulitos no caldeirÃ£o - Misture atÃ© que seus braÃ§os comecem a doer - Coloque em garrafas");
Database.addText("br.cauldron.page7", "Aviso importante sobre a poÃ§Ã£o Berserker / NÃƒO use doces durante o preparo dessa poÃ§Ã£o. / Ã‰ sÃ©rio, nem um sequer. / Ã‰ sÃ©rio. / Os resultados sÃ£o imprevisÃ­veis.");
Database.addText("br.cauldron.page8", "PoÃ§Ã£o P / A poÃ§Ã£o P Ã© bem estranha. NÃ£o dÃ¡ para saber qual serÃ¡ o efeito. Ela pode curar ou causar dano a vocÃª, aumentar ou reduzir sua forÃ§a, e atÃ© mesmo transformÃ¡-lo em outra pessoa (ou coisa). / E Ã© muito difÃ­cil de ser preparada! / InstruÃ§Ãµes : - Coloque 500 doces no caldeirÃ£o - Misture por alguns segundos - Pare de mexer - Adicione 100 vezes mais doces que o nÃºmero de segundos que vocÃª mexeu. Exemplo: se mexeu por 4 segundos, adicione 400 doces. NÃ£o multiplique essa quantidade, mesmo se quiser preparar mais de uma poÃ§Ã£o. - AqueÃ§a a Ã¡gua atÃ© ficar morna - Pare de aquecer - Adicione alguns pirulitos - Misture- Coloque em garrafas!");
Database.addText("br.cauldron.page9", "Saiba como usar a poÃ§Ã£o P / Existem algumas regras a serem seguidas para se obter os melhores resultados com a poÃ§Ã£o P. Embora elas tenham sido definidas empiricamente, parecem funcionar muito bem. / - Quanto mais vocÃª usar poÃ§Ãµes P, mais efeitos estranhos elas terÃ£o. / - Se a sua saÃºde estiver baixa, recomenda-se beber uma poÃ§Ã£o P. / - A poÃ§Ã£o P costuma ter reaÃ§Ãµes bem estranhas quando ingeridas por animais.");
Database.addText("br.cauldron.page10", "PoÃ§Ã£o X / A poÃ§Ã£o X nÃ£o passa de uma lenda. Dizem que quem preparÃ¡-la e bebÃª-la, serÃ¡ levado a um lugar onde ninguÃ©m jamais esteve. / Seja uma lenda ou nÃ£o, escreverei nesse livro tudo que sei sobre ela. / A poÃ§Ã£o X Ã© citada em diversas histÃ³rias e livros de alquimia. Eis um apanhado de todas as informaÃ§Ãµes sobre como preparÃ¡-la. Boa sorte! / - Dizem que sÃ£o precisos 5 passos para preparar a poÃ§Ã£o X. / - Dizem que nÃ£o sÃ£o precisos pirulitos, exceto em um dos passos. / - Dizem que, diferente das outras poÃ§Ãµes, nÃ£o Ã© possÃ­vel preparar mais de uma poÃ§Ã£o X de uma sÃ³ vez.");
Database.addText("br.cauldron.page11", "- Por fim, hÃ¡ poema que dizem ter relaÃ§Ã£o com a poÃ§Ã£o X : / No primeiro dia, ele deu vida ao primeiro dos doces. Mas estava frio lÃ¡ fora. / No segundo dia, ele deu um pai ao doce. Mas estava frio lÃ¡ fora. / No terceiro dia, ele deu um irmÃ£o ao doce. Mas estava frio lÃ¡ fora. / No quarto dia, ele deu um amigo ao doce. Mas estava frio lÃ¡ fora. / No quinto dia, ele deu uma amante ao doce. Isso pode parecer bobo, mas o doce estava feliz agora. E estava quente lÃ¡ fora.");
Database.addText("se.cauldron.page0", "Ã–lbryggning manual");
Database.addText("se.cauldron.page1", "Sammanfattning / sida 2 : HÃ¤lsa dryck / sida 3 : SkÃ¶ldpadda dryck / Sida 4-5 : Anti-gravitation dryck / Sida 6-7 : Galen dryck / Pages 8-9 : Den P dryck / Pages 10-11 : Den X dryck");
Database.addText("se.cauldron.page2", "HÃ¤lsa dryck / Det hÃ¤lsa dryck Ã¤r nÃ¥gon av det enkel till brygga, verkligen. Den endast behov konfekt. AnvÃ¤nds i mÃ¥l, den skall bota du av givande du tillbaka 100 hÃ¤lsa poÃ¤ng. / Instruktioner : - SÃ¤tta 100 konfekt i er kittel - Blanda fÃ¶r en fÃ¥ sekunder - SÃ¤tta inÃ¥t flaskor / Strax som fÃ¶r nÃ¥gra dryck, du kan naturligtvis fÃ¶rÃ¶ka det kvantiteter. Till exempel, om du utnyttja 300 konfekt istÃ¤llet fÃ¶r 100, kommer du fÃ¥ 3 hÃ¤lsa dryck.");
Database.addText("se.cauldron.page3", "Turtle potion / Det skÃ¶ldpadda dryck Ã¤r en skÃ¤rva hÃ¥rdare till brygd Ã¤n det hÃ¤lsa dryck. Du skall behÃ¶ver bÃ¥de konfekt samt sÃ¶tsaker. / Om du dricka detta dryck i en mÃ¥l, den skall fÃ¶rÃ¤ndring du in i en skÃ¶ldpadda. Du skall gÃ¥ trÃ¶g, men du skall ocksÃ¥ mÃ¥ vidare motstÃ¥ndskraftig till du fiender attacker. / Instruktioner : - SÃ¤tta 50 konfekt i din kittel - Foga 500 sÃ¶tsaker i din kittel - Blanda under mer eller mindre 10 sekunder - Sluta blanda - Foga 50 konfekt - Blanda igen fÃ¶r nÃ¥gra sekunder - SÃ¤tta till flaskor / Och nu den mest viktig sak du skall aldrig glÃ¶mma : nÃ¤r du skall bli en skÃ¶ldpadda, INTE vÃ¤nda. Du skulle inte kunna stiga upp.");
Database.addText("se.cauldron.page4", "Anti-gravitation dryck / Detta dryck, vilket var uppfann av vÃ¤lkÃ¤nt trollkarl Isaac, tillÃ¥ter du till motstÃ¥ till jordens gravitation kraft fÃ¶r en nÃ¥gra sekunder. / Det Ã¤r sÃ¤rskilt anvÃ¤ndbart efter att hoppa ( om du inte kan hoppa , bÃ¶r du allvarligt Ã¶vervÃ¤ga att skaffa en pogo stick ) . / Det Ã¤r inte lÃ¤tt att brygga , mÃ¥ste du vÃ¤rma upp din kittel och titta pÃ¥ temperaturen noggrant . / Instruktioner : - Put 1000 godisar i din kittel - Hetta upp tills vattnet Ã¤r ljummet - Sluta uppvÃ¤rmning - LÃ¤gg 1000 godisar - VÃ¤rm upp tills vattnet kokar - tappas pÃ¥ flaskor");
Database.addText("se.cauldron.page5", "Anti - gravitation drycken : anvÃ¤ndningsfall / \" flyga Ã¶ver ett gap \" / * dricker drycken *");
Database.addText("se.cauldron.page6", "Berserk potion / The bÃ¤rsÃ¤rkagÃ¥ng trolldryck fÃ¶rvandlar dig till en berserker . / Nackdelen Ã¤r att den fÃ¶rbrukar hÃ¤lften av ditt liv . / FÃ¶rdelen Ã¤r att det fÃ¶rdubblar dina skador under nÃ¥gra sekunder ! / Brygga detta trolldrycker Ã¤r mycket enkelt , men du kommer att behÃ¶va en hel del klubbor . / HÃ¤r Ã¤r instruktionerna : - Put 20 000 klubbor i din kittel - blanda dem tills armarna Ã¤r ont - tappas pÃ¥ flaskor");
Database.addText("se.cauldron.page7", "Viktigt meddelande angÃ¥ende bÃ¤rsÃ¤rkagÃ¥ng potion / INTE lÃ¤gga nÃ¥got godis vid bryggning denna dryck . / Jag menar , inte en enda. / Verkligen . / Resultat vore ovÃ¤ntat .");
Database.addText("se.cauldron.page8", "P potion / P potion Ã¤r en konstig en . Du kan inte fÃ¶rutsÃ¤ga vad det kommer att gÃ¶ra . Det kan bota dig eller skada dig , gÃ¶r dig starkare eller svagare , eller ens vÃ¤nda dig till nÃ¥gon ( nÃ¥got ? ) Annat . / Och det Ã¤r ocksÃ¥ svÃ¥rt att brygga ! / Instruktioner : - Put 500 godisar i din kittel - Mix i nÃ¥gra sekunder - Stoppa mixning - LÃ¤gg 100 gÃ¥nger mer godis Ã¤n det antal sekunder som du blandat . Till exempel om du blandat under 4 sekunder , mÃ¥ste du lÃ¤gga 400 godisar . Inte multiplicera inte denna mÃ¤ngd , Ã¤ven om du vill gÃ¶ra mer Ã¤n en dryck . - VÃ¤rm upp tills vattnet Ã¤r ljummet - Sluta uppvÃ¤rmning - LÃ¤gg nÃ¥gra klubbor - Mix - tappas pÃ¥ flaskor !");
Database.addText("se.cauldron.page9", "GÃ¶r en bra anvÃ¤ndning av P potion / Det finns vissa regler som du kan fÃ¶lja fÃ¶r att fÃ¥ bÃ¤ttre resultat nÃ¤r man dricker P drycken . Ã„ven om dessa regler definierades empiriskt , de verkar fungera ganska bra . / - Ju mer du anvÃ¤nder P potions , ju mer de verkar ha konstiga effekter . / - Om din hÃ¤lsa Ã¤r mycket lÃ¥g , bÃ¶r du dricka antagligen en P dryck . / - Djur som dricker P potions verkar reagera pÃ¥ ett mycket dÃ¥ligt sÃ¤tt .");
Database.addText("se.cauldron.page10", "X potion / X potion Ã¤r en legend . Det sÃ¤gs att den som lyckas brygga det och dricka det skulle resa till en plats dÃ¤r ingen har varit fÃ¶rut . / Jag vet inte om denna dryck Ã¤r bara en legend eller inte , men jag kommer att skriva i denna bok allt jag vet om det . / X potion nÃ¤mns i mÃ¥nga gamla legender och bÃ¶cker alkemi . HÃ¤r Ã¤r en sammanfattning av information som kan hjÃ¤lpa dig att brygga det . Lycka till ! / - Det Ã¤r sagt att 5 steg Ã¤r nÃ¶dvÃ¤ndigt fÃ¶r att brygga X drycken . / - Det sÃ¤gs att inga klubbor krÃ¤vs , utom fÃ¶r ett av stegen . / - Det Ã¤r sagt att , till skillnad fÃ¶r andra drycker , kan du inte brygga flera X potions pÃ¥ en gÃ¥ng .");
Database.addText("se.cauldron.page11", "- Slutligen Ã¤r fÃ¶ljande dikt ofta citeras nÃ¤r det kommer till X potion : / PÃ¥ den fÃ¶rsta dagen , gav det upphov till den allra fÃ¶rsta Sweet. Men det var kallt utanfÃ¶r . / Den andra dagen , gav det sÃ¶ta en far . Men det var kallt utanfÃ¶r . / PÃ¥ den tredje dagen , gav det sÃ¶ta en bror . Men det var kallt utanfÃ¶r . / PÃ¥ den fjÃ¤rde dagen , gav det sÃ¶ta en vÃ¤n . Men det var kallt utanfÃ¶r . / PÃ¥ den femte dagen , gav det sÃ¶ta en Ã¤lskare , och det kan lÃ¥ta enkelt och dumt , men nu Sweet var glad , och det var varmt utanfÃ¶r .");
///<reference path="./../../main/Quest.ts"/>
// -------------------------------
// We register on the Arena module
// -------------------------------
function HardcorePlatformer_getNewQuest(game) {
    return new HardcorePlatformer_Quest(game);
}
TheArenaModule.addQuest(new TheArenaModuleQuest("hardcorePlatformer", HardcorePlatformer_getNewQuest.bind(this)));
// -------------------------------------------------------------------------------
// We create our HardcorePlatformer_Quest class, which herits from the Quest class 
// -------------------------------------------------------------------------------
var HardcorePlatformer_Quest = (function (_super) {
    __extends(HardcorePlatformer_Quest, _super);
    // Constructor
    function HardcorePlatformer_Quest(game) {
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(240, 13);
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);
        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 8));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());
        // Add the ground
        this.addGround();
        // Add the spikes
        this.addAllSpikes(this.getGame().getPlayer().getMaxHp() * 100);
        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("This is going to be HARDCORE."));
    }
    // Public methods
    HardcorePlatformer_Quest.prototype.castPlayerAntiGravityPotion = function () {
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("Damn. These potions don't seem to work here :("));
    };
    HardcorePlatformer_Quest.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 8), new Pos(1, 1));
    };
    HardcorePlatformer_Quest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };
    HardcorePlatformer_Quest.prototype.endQuest = function (win) {
        // We add some messages
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("Yay, you made it!! You can now tell all your friends."));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed. Try again :)"));
        }
        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };
    HardcorePlatformer_Quest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }
            // Update entities
            this.updateEntities();
        }
        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("arena/hardcorePlatformer/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, false), this.getGame().goToMainMap.bind(this.getGame()), this.getGame().getStatusBar().selectTabByType.bind(this.getGame().getStatusBar(), StatusBarTabType.THE_ARENA), this.getGame().goToTheArena.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };
    // Private methods
    HardcorePlatformer_Quest.prototype.addAllSpikes = function (damage) {
        // Add long spikes on the roof (to avoid the usage of rocket boots)
        this.addSpikes(new Spikes(this, new Pos(0, 0), 300, damage, true));
        // Add the first group of spikes
        this.addSpikes(new Spikes(this, new Pos(25, 8), 4, damage));
        this.addSpikes(new Spikes(this, new Pos(37, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(49, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(60, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(71, 8), 6, damage));
        // Add the second group
        this.addSpikes(new Spikes(this, new Pos(112, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(121, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(127, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(133, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(139, 8), 2, damage));
        // Add the third group
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(196, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(198, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(200, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(202, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(204, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(206, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(208, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(210, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(212, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(214, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(216, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(218, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(220, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(222, 8), 2, damage));
    };
    HardcorePlatformer_Quest.prototype.addGround = function () {
        var wall = new Wall(this, new Pos(0, 0));
        wall.addBox(new Pos(0, 9), new Pos(240, 3));
        this.addEntity(wall);
    };
    HardcorePlatformer_Quest.prototype.addSpikes = function (spikes) {
        this.addEntity(spikes);
    };
    HardcorePlatformer_Quest.prototype.thePlayerWon = function () {
        // If the player is at the right of the desert, we return true
        if (this.getGame().getPlayer().getGlobalPosition().x >= 240)
            return true;
        // Else we return false
        return false;
    };
    return HardcorePlatformer_Quest;
})(Quest);
///<reference path="./../../main/Spikes.ts"/>
var HardcorePlatformer_Spikes = (function (_super) {
    __extends(HardcorePlatformer_Spikes, _super);
    function HardcorePlatformer_Spikes() {
        _super.apply(this, arguments);
    }
    // Public methods
    HardcorePlatformer_Spikes.prototype.update = function () {
        // If the player is too close, we disappear!!
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x > this.getGlobalPosition().x - 5)
            this.setDead(true);
        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    return HardcorePlatformer_Spikes;
})(Spikes);
///<reference path="./../../main/Quest.ts"/>
// -------------------------------
// We register on the Arena module
// -------------------------------
function PeacefulForest_getNewQuest(game) {
    return new PeacefulForest_Quest(game);
}
TheArenaModule.addQuest(new TheArenaModuleQuest("peacefulForest", PeacefulForest_getNewQuest.bind(this)));
// ---------------------------------------------------------------------------
// We create our PeacefulForest_Quest class, which herits from the Quest class 
// ---------------------------------------------------------------------------
var PeacefulForest_Quest = (function (_super) {
    __extends(PeacefulForest_Quest, _super);
    // -----------
    // Constructor
    // -----------
    function PeacefulForest_Quest(game) {
        // Call the constructor of our mother class, the Quest class (don't change that)
        _super.call(this, game);
        // Resize the quest
        this.resizeQuest(100, 10); // 100 characters width, 10 characters height
        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true); // this means that the player will only be able to get out of the quest on the right side
        // Handle the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this); // this means that we load the small ("\o/") character, not the big one used in the sea
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 9)); // the player will begin the quest at the x position of 0 and the y position of 9
        this.configPlayerOrClone(this.getGame().getPlayer()); // configure the player (see below in the public methods part)
        this.addEntity(this.getGame().getPlayer()); // finally add the player to the quest
        // Add some treeeeees (it uses a private method below)
        this.addATree(12);
        this.addATree(25);
        this.addATree(28);
        this.addATree(35);
        this.addATree(39);
        this.addATree(42);
        this.addATree(48);
        this.addATree(56);
        this.addATree(59);
        this.addATree(65);
        this.addATree(79);
        this.addATree(87);
        this.addATree(91);
        // Add a ground because we don't want our trees to fall down (it uses a private method below)
        this.addGround();
        // Add the first message in the quest log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the peaceful forest. Trees all around you. It's a great place to calm down."));
    }
    // --------------
    // Public methods
    // --------------
    // Method used to configure the player (called in the constructor)
    PeacefulForest_Quest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0))); // the player is going to the right
        entity.getQuestEntityMovement().setGravity(true); // it is affected by gravity
        entity.getQuestEntityMovement().setWormsLike(false); // the player won't be able to walk over one character high steps (so that it will not walk over trees..)
    };
    // Method called by the update method when the quest is over
    PeacefulForest_Quest.prototype.endQuest = function (win) {
        // If we won the quest
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You reached the end of the peaceful forest. It really wasn't too hard."));
        }
        else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the peaceful forest. How did you even manage to do that?"));
        }
        // Call the endQuest method of our mother class, the Quest class
        _super.prototype.endQuest.call(this, win);
    };
    // Method called automatically ten times per second. It updates everything in the quest
    PeacefulForest_Quest.prototype.update = function () {
        // If the quest isn't finished yet
        if (this.getQuestEnded() == false) {
            // Test if the player won the quest, if so, end the quest and return
            if (this.thePlayerWon()) {
                this.endQuest(true); // true = we won
                return;
            }
            // Test if the player is dead, if so, end the quest and return
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false); // false = we failed
                return;
            }
            // Update entities (it makes everything move, it handles collisions, gravity, damage...)
            this.updateEntities();
        }
        // Draw everything
        this.preDraw(); // a special method we need to call before drawing anything
        this.drawEntities(); // draw all entities
        this.drawAroundQuest(); // draw the stuff around (the spells, etc)
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, false), this.getGame().goToMainMap.bind(this.getGame()), this.getGame().getStatusBar().selectTabByType.bind(this.getGame().getStatusBar(), StatusBarTabType.THE_ARENA), this.getGame().goToTheArena.bind(this.getGame())), "buttonExitQuestKeeping"); // draw the button to exit the quest
        this.postDraw(); // a special method we need to call after drawing everything
    };
    // --------------
    // Public methods
    // --------------
    // Method called in the constructor. It is used to add a tree at a given x position.
    PeacefulForest_Quest.prototype.addATree = function (x) {
        // Create the tree
        var tree = new PeacefulForest_Tree(this, new Pos(x, 9)); // We use the x position given in parameter, the y position match the ground's position
        // Set the tree's health bar
        tree.setHealthBar(new QuestEntityHealthBar(tree, new Pos(3, 1))); // 3 characters width, 1 character height
        // Finally add the tree to the quest
        this.addEntity(tree);
    };
    // Method called in the constructor. It is used to add a ground to the quest, therefore preventing the trees to fall down.
    PeacefulForest_Quest.prototype.addGround = function () {
        // Create the ground entity
        var ground = new Wall(this, new Pos(0, 10)); // position 0, 10
        // Add the ground box (100 characters width, 1 character height)
        ground.addBox(new Pos(0, 0), new Pos(100, 1));
        // Add the ground entity
        this.addEntity(ground);
    };
    // Method called by the update method above to know if the player won the quest
    PeacefulForest_Quest.prototype.thePlayerWon = function () {
        // If the player reached the right limit of the quest, we return true because he won the quest
        if (this.getGame().getPlayer().getGlobalPosition().x >= 100)
            return true;
        // Else we return false
        return false;
    };
    return PeacefulForest_Quest;
})(Quest);
///<reference path="../../main/QuestEntity.ts"/>
var PeacefulForest_Tree = (function (_super) {
    __extends(PeacefulForest_Tree, _super);
    // Constructor
    function PeacefulForest_Tree(quest, pos) {
        _super.call(this, quest, pos, new Naming("A tree", "a tree"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement() // The tree's movement. We don't give any parameter because the tree isn't actually moving.
        );
        // Set gravity : the tree can fall (even if it probably won't because it lays on the ground)
        this.getQuestEntityMovement().setGravity(true);
        // Set destructible
        this.setDestructible(true); // The tree will be destructible
        this.setMaxHp(50); // Set the maximum health points
        this.setHp(50); // Set the health points
        // Set the ascii art
        this.getRenderArea().drawString("|||", 0, 0); // Draw the tree ("|||") on the render area
        // Add the tree's weapon. It will be attacking with its leaves.
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its leaves", "its leaves"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 2))), 1)); // The weapon's damage (1)
        // Set the weapon's delay
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(5); // This means the tree will inflict damage every 5 seconds
    }
    return PeacefulForest_Tree;
})(QuestEntity);
